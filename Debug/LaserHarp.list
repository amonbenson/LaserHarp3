
LaserHarp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f0  080026f0  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  080026f0  080026f0  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f0  080026f0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f4  080026f4  000126f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080026f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000210  08002908  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08002908  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aca5  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf9  00000000  00000000  0002aede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017626  00000000  00000000  0002e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7b6  00000000  00000000  000457b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b86  00000000  00000000  00051f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daaf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f4  00000000  00000000  000dab44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000210 	.word	0x20000210
 8000128:	00000000 	.word	0x00000000
 800012c:	080026ac 	.word	0x080026ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000214 	.word	0x20000214
 8000148:	080026ac 	.word	0x080026ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fae5 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f84d 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f95d 	bl	8000418 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f93d 	bl	80003dc <MX_DMA_Init>
  MX_TIM3_Init();
 8000162:	f000 f8c5 	bl	80002f0 <MX_TIM3_Init>
  MX_SPI1_Init();
 8000166:	f000 f88b 	bl	8000280 <MX_SPI1_Init>
  // enable the pwm output. This will also start the timer
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK) {
      Error_Handler();
  } */

  const LaserArray_Config_t la_config = {
 800016a:	4a1f      	ldr	r2, [pc, #124]	; (80001e8 <main+0x9c>)
 800016c:	1d3b      	adds	r3, r7, #4
 800016e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000170:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          .hspi = &hspi1,
          .htim = &htim3,
          .rclk_channel = TIM_CHANNEL_4
  };
  LaserArray_Init(&la, &la_config);
 8000174:	1d3b      	adds	r3, r7, #4
 8000176:	4619      	mov	r1, r3
 8000178:	481c      	ldr	r0, [pc, #112]	; (80001ec <main+0xa0>)
 800017a:	f002 f9ab 	bl	80024d4 <LaserArray_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      for (int i = 0; i < 126; i++) {
 800017e:	2300      	movs	r3, #0
 8000180:	617b      	str	r3, [r7, #20]
 8000182:	e02d      	b.n	80001e0 <main+0x94>
          uint8_t a = abs(63 - i);
 8000184:	697b      	ldr	r3, [r7, #20]
 8000186:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800018a:	2b00      	cmp	r3, #0
 800018c:	bfb8      	it	lt
 800018e:	425b      	neglt	r3, r3
 8000190:	74fb      	strb	r3, [r7, #19]
          uint8_t b = abs(63 - ((i + 32) % 126));
 8000192:	697b      	ldr	r3, [r7, #20]
 8000194:	f103 0220 	add.w	r2, r3, #32
 8000198:	4b15      	ldr	r3, [pc, #84]	; (80001f0 <main+0xa4>)
 800019a:	fb83 1302 	smull	r1, r3, r3, r2
 800019e:	4413      	add	r3, r2
 80001a0:	1199      	asrs	r1, r3, #6
 80001a2:	17d3      	asrs	r3, r2, #31
 80001a4:	1ac9      	subs	r1, r1, r3
 80001a6:	460b      	mov	r3, r1
 80001a8:	019b      	lsls	r3, r3, #6
 80001aa:	1a5b      	subs	r3, r3, r1
 80001ac:	005b      	lsls	r3, r3, #1
 80001ae:	1ad1      	subs	r1, r2, r3
 80001b0:	f1c1 033f 	rsb	r3, r1, #63	; 0x3f
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	bfb8      	it	lt
 80001b8:	425b      	neglt	r3, r3
 80001ba:	74bb      	strb	r3, [r7, #18]
          LaserArray_SetBrightness(&la, 30, a);
 80001bc:	7cfb      	ldrb	r3, [r7, #19]
 80001be:	461a      	mov	r2, r3
 80001c0:	211e      	movs	r1, #30
 80001c2:	480a      	ldr	r0, [pc, #40]	; (80001ec <main+0xa0>)
 80001c4:	f002 f9dc 	bl	8002580 <LaserArray_SetBrightness>
          LaserArray_SetBrightness(&la, 31, b);
 80001c8:	7cbb      	ldrb	r3, [r7, #18]
 80001ca:	461a      	mov	r2, r3
 80001cc:	211f      	movs	r1, #31
 80001ce:	4807      	ldr	r0, [pc, #28]	; (80001ec <main+0xa0>)
 80001d0:	f002 f9d6 	bl	8002580 <LaserArray_SetBrightness>

          HAL_Delay(30);
 80001d4:	201e      	movs	r0, #30
 80001d6:	f000 fb05 	bl	80007e4 <HAL_Delay>
      for (int i = 0; i < 126; i++) {
 80001da:	697b      	ldr	r3, [r7, #20]
 80001dc:	3301      	adds	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	2b7d      	cmp	r3, #125	; 0x7d
 80001e4:	ddce      	ble.n	8000184 <main+0x38>
 80001e6:	e7ca      	b.n	800017e <main+0x32>
 80001e8:	080026c4 	.word	0x080026c4
 80001ec:	20000310 	.word	0x20000310
 80001f0:	82082083 	.word	0x82082083

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fa4a 	bl	800269c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000216:	2301      	movs	r3, #1
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000228:	2302      	movs	r3, #2
 800022a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000232:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000238:	f107 0318 	add.w	r3, r7, #24
 800023c:	4618      	mov	r0, r3
 800023e:	f000 ff75 	bl	800112c <HAL_RCC_OscConfig>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000248:	f000 f914 	bl	8000474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024c:	230f      	movs	r3, #15
 800024e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000250:	2302      	movs	r3, #2
 8000252:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2102      	movs	r1, #2
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f9e2 	bl	8001630 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000272:	f000 f8ff 	bl	8000474 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	; 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_SPI1_Init+0x68>)
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <MX_SPI1_Init+0x6c>)
 8000288:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_SPI1_Init+0x68>)
 800028c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000290:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <MX_SPI1_Init+0x68>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_SPI1_Init+0x68>)
 800029a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800029e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002b6:	2210      	movs	r2, #16
 80002b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002ce:	220a      	movs	r2, #10
 80002d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_SPI1_Init+0x68>)
 80002d4:	f001 fb12 	bl	80018fc <HAL_SPI_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80002de:	f000 f8c9 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	2000022c 	.word	0x2000022c
 80002ec:	40013000 	.word	0x40013000

080002f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08e      	sub	sp, #56	; 0x38
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000304:	f107 0320 	add.w	r3, r7, #32
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	615a      	str	r2, [r3, #20]
 800031e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000322:	4a2d      	ldr	r2, [pc, #180]	; (80003d8 <MX_TIM3_Init+0xe8>)
 8000324:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = SPI_PRESCALAR - 1;
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000328:	2207      	movs	r2, #7
 800032a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <MX_TIM3_Init+0xe4>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18 - 1;
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000334:	2211      	movs	r2, #17
 8000336:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <MX_TIM3_Init+0xe4>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000344:	4823      	ldr	r0, [pc, #140]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000346:	f001 fb5d 	bl	8001a04 <HAL_TIM_Base_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000350:	f000 f890 	bl	8000474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000358:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	4619      	mov	r1, r3
 8000360:	481c      	ldr	r0, [pc, #112]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000362:	f001 fcf1 	bl	8001d48 <HAL_TIM_ConfigClockSource>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800036c:	f000 f882 	bl	8000474 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000370:	4818      	ldr	r0, [pc, #96]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000372:	f001 fb96 	bl	8001aa2 <HAL_TIM_OC_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800037c:	f000 f87a 	bl	8000474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000380:	2320      	movs	r3, #32
 8000382:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000388:	f107 0320 	add.w	r3, r7, #32
 800038c:	4619      	mov	r1, r3
 800038e:	4811      	ldr	r0, [pc, #68]	; (80003d4 <MX_TIM3_Init+0xe4>)
 8000390:	f002 f842 	bl	8002418 <HAL_TIMEx_MasterConfigSynchronization>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800039a:	f000 f86b 	bl	8000474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800039e:	2330      	movs	r3, #48	; 0x30
 80003a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80003a6:	2302      	movs	r3, #2
 80003a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	220c      	movs	r2, #12
 80003b2:	4619      	mov	r1, r3
 80003b4:	4807      	ldr	r0, [pc, #28]	; (80003d4 <MX_TIM3_Init+0xe4>)
 80003b6:	f001 fc6f 	bl	8001c98 <HAL_TIM_OC_ConfigChannel>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80003c0:	f000 f858 	bl	8000474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003c4:	4803      	ldr	r0, [pc, #12]	; (80003d4 <MX_TIM3_Init+0xe4>)
 80003c6:	f000 f91b 	bl	8000600 <HAL_TIM_MspPostInit>

}
 80003ca:	bf00      	nop
 80003cc:	3738      	adds	r7, #56	; 0x38
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000284 	.word	0x20000284
 80003d8:	40000400 	.word	0x40000400

080003dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_DMA_Init+0x38>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <MX_DMA_Init+0x38>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_DMA_Init+0x38>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	200d      	movs	r0, #13
 8000400:	f000 faeb 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000404:	200d      	movs	r0, #13
 8000406:	f000 fb04 	bl	8000a12 <HAL_NVIC_EnableIRQ>

}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_GPIO_Init+0x58>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a13      	ldr	r2, [pc, #76]	; (8000470 <MX_GPIO_Init+0x58>)
 8000424:	f043 0320 	orr.w	r3, r3, #32
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_GPIO_Init+0x58>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0320 	and.w	r3, r3, #32
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_GPIO_Init+0x58>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <MX_GPIO_Init+0x58>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_GPIO_Init+0x58>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_GPIO_Init+0x58>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a07      	ldr	r2, [pc, #28]	; (8000470 <MX_GPIO_Init+0x58>)
 8000454:	f043 0308 	orr.w	r3, r3, #8
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <MX_GPIO_Init+0x58>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0308 	and.w	r3, r3, #8
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
}
 800047a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047c:	e7fe      	b.n	800047c <Error_Handler+0x8>
	...

08000480 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <HAL_MspInit+0x5c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x5c>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_MspInit+0x60>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_MspInit+0x60>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000

080004e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <HAL_SPI_MspInit+0x70>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d123      	bne.n	800054c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_SPI_MspInit+0x74>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <HAL_SPI_MspInit+0x74>)
 800050a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_SPI_MspInit+0x74>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_SPI_MspInit+0x74>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <HAL_SPI_MspInit+0x74>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_SPI_MspInit+0x74>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000534:	23a0      	movs	r3, #160	; 0xa0
 8000536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053c:	2303      	movs	r3, #3
 800053e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4619      	mov	r1, r3
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <HAL_SPI_MspInit+0x78>)
 8000548:	f000 fc6c 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40013000 	.word	0x40013000
 8000558:	40021000 	.word	0x40021000
 800055c:	40010800 	.word	0x40010800

08000560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <HAL_TIM_Base_MspInit+0x90>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13a      	bne.n	80005e8 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <HAL_TIM_Base_MspInit+0x94>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <HAL_TIM_Base_MspInit+0x94>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <HAL_TIM_Base_MspInit+0x94>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800058a:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <HAL_TIM_Base_MspInit+0x9c>)
 800058e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 8000592:	2210      	movs	r2, #16
 8000594:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005a8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005b0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005b4:	2220      	movs	r2, #32
 80005b6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005c2:	f000 fa41 	bl	8000a48 <HAL_DMA_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80005cc:	f7ff ff52 	bl	8000474 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005d4:	631a      	str	r2, [r3, #48]	; 0x30
 80005d6:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005e0:	621a      	str	r2, [r3, #32]
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <HAL_TIM_Base_MspInit+0x98>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40000400 	.word	0x40000400
 80005f4:	40021000 	.word	0x40021000
 80005f8:	200002cc 	.word	0x200002cc
 80005fc:	40020030 	.word	0x40020030

08000600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <HAL_TIM_MspPostInit+0x58>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d117      	bne.n	8000650 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <HAL_TIM_MspPostInit+0x5c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <HAL_TIM_MspPostInit+0x5c>)
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_TIM_MspPostInit+0x5c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0308 	and.w	r3, r3, #8
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HAL_TIM_MspPostInit+0x60>)
 800064c:	f000 fbea 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40000400 	.word	0x40000400
 800065c:	40021000 	.word	0x40021000
 8000660:	40010c00 	.word	0x40010c00

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <NMI_Handler+0x4>

0800066a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <HardFault_Handler+0x4>

08000670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <MemManage_Handler+0x4>

08000676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <BusFault_Handler+0x4>

0800067c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <UsageFault_Handler+0x4>

08000682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f87f 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <DMA1_Channel3_IRQHandler+0x10>)
 80006ba:	f000 fa7f 	bl	8000bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200002cc 	.word	0x200002cc

080006c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006fa:	f7ff ffe5 	bl	80006c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fe:	f001 ffa9 	bl	8002654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fd23 	bl	800014c <main>
  bx lr
 8000706:	4770      	bx	lr
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8000710:	080026f8 	.word	0x080026f8
  ldr r2, =_sbss
 8000714:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8000718:	2000043c 	.word	0x2000043c

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_Init+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_Init+0x28>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f947 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000736:	200f      	movs	r0, #15
 8000738:	f000 f808 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073c:	f7ff fea0 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x54>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	fbb3 f3f1 	udiv	r3, r3, r1
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f95f 	bl	8000a2e <HAL_SYSTICK_Config>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00e      	b.n	8000798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d80a      	bhi.n	8000796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f000 f927 	bl	80009da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <HAL_InitTick+0x5c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x20>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <HAL_IncTick+0x20>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000438 	.word	0x20000438

080007d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000438 	.word	0x20000438

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff fff0 	bl	80007d0 <HAL_GetTick>
 80007f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080a:	bf00      	nop
 800080c:	f7ff ffe0 	bl	80007d0 <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db0b      	blt.n	80008ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 021f 	and.w	r2, r3, #31
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <__NVIC_EnableIRQ+0x34>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000990:	d301      	bcc.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e00f      	b.n	80009b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SysTick_Config+0x40>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	210f      	movs	r1, #15
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f7ff ff90 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SysTick_Config+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SysTick_Config+0x40>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff2d 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff42 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ff90 	bl	800091c <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff5f 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff35 	bl	8000890 <__NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffa2 	bl	8000980 <SysTick_Config>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e043      	b.n	8000ae6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <HAL_DMA_Init+0xa8>)
 8000a66:	4413      	add	r3, r2
 8000a68:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_DMA_Init+0xac>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	091b      	lsrs	r3, r3, #4
 8000a70:	009a      	lsls	r2, r3, #2
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_DMA_Init+0xb0>)
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2202      	movs	r2, #2
 8000a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	bffdfff8 	.word	0xbffdfff8
 8000af4:	cccccccd 	.word	0xcccccccd
 8000af8:	40020000 	.word	0x40020000

08000afc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d101      	bne.n	8000b1c <HAL_DMA_Start_IT+0x20>
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e04a      	b.n	8000bb2 <HAL_DMA_Start_IT+0xb6>
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d13a      	bne.n	8000ba4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2202      	movs	r2, #2
 8000b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f022 0201 	bic.w	r2, r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f000 f938 	bl	8000dc8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d008      	beq.n	8000b72 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f042 020e 	orr.w	r2, r2, #14
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e00f      	b.n	8000b92 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0204 	bic.w	r2, r2, #4
 8000b80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 020a 	orr.w	r2, r2, #10
 8000b90:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f042 0201 	orr.w	r2, r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	e005      	b.n	8000bb0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bac:	2302      	movs	r3, #2
 8000bae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	2204      	movs	r2, #4
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d04f      	beq.n	8000c84 <HAL_DMA_IRQHandler+0xc8>
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d04a      	beq.n	8000c84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d107      	bne.n	8000c0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0204 	bic.w	r2, r2, #4
 8000c0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a66      	ldr	r2, [pc, #408]	; (8000dac <HAL_DMA_IRQHandler+0x1f0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d029      	beq.n	8000c6a <HAL_DMA_IRQHandler+0xae>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a65      	ldr	r2, [pc, #404]	; (8000db0 <HAL_DMA_IRQHandler+0x1f4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d022      	beq.n	8000c66 <HAL_DMA_IRQHandler+0xaa>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a63      	ldr	r2, [pc, #396]	; (8000db4 <HAL_DMA_IRQHandler+0x1f8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01a      	beq.n	8000c60 <HAL_DMA_IRQHandler+0xa4>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a62      	ldr	r2, [pc, #392]	; (8000db8 <HAL_DMA_IRQHandler+0x1fc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d012      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x9e>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a60      	ldr	r2, [pc, #384]	; (8000dbc <HAL_DMA_IRQHandler+0x200>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d00a      	beq.n	8000c54 <HAL_DMA_IRQHandler+0x98>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a5f      	ldr	r2, [pc, #380]	; (8000dc0 <HAL_DMA_IRQHandler+0x204>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d102      	bne.n	8000c4e <HAL_DMA_IRQHandler+0x92>
 8000c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c4c:	e00e      	b.n	8000c6c <HAL_DMA_IRQHandler+0xb0>
 8000c4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c52:	e00b      	b.n	8000c6c <HAL_DMA_IRQHandler+0xb0>
 8000c54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c58:	e008      	b.n	8000c6c <HAL_DMA_IRQHandler+0xb0>
 8000c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5e:	e005      	b.n	8000c6c <HAL_DMA_IRQHandler+0xb0>
 8000c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c64:	e002      	b.n	8000c6c <HAL_DMA_IRQHandler+0xb0>
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	e000      	b.n	8000c6c <HAL_DMA_IRQHandler+0xb0>
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	4a55      	ldr	r2, [pc, #340]	; (8000dc4 <HAL_DMA_IRQHandler+0x208>)
 8000c6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f000 8094 	beq.w	8000da2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000c82:	e08e      	b.n	8000da2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	2202      	movs	r2, #2
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d056      	beq.n	8000d42 <HAL_DMA_IRQHandler+0x186>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d051      	beq.n	8000d42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0320 	and.w	r3, r3, #32
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10b      	bne.n	8000cc4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 020a 	bic.w	r2, r2, #10
 8000cba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a38      	ldr	r2, [pc, #224]	; (8000dac <HAL_DMA_IRQHandler+0x1f0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d029      	beq.n	8000d22 <HAL_DMA_IRQHandler+0x166>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a37      	ldr	r2, [pc, #220]	; (8000db0 <HAL_DMA_IRQHandler+0x1f4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d022      	beq.n	8000d1e <HAL_DMA_IRQHandler+0x162>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a35      	ldr	r2, [pc, #212]	; (8000db4 <HAL_DMA_IRQHandler+0x1f8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d01a      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x15c>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a34      	ldr	r2, [pc, #208]	; (8000db8 <HAL_DMA_IRQHandler+0x1fc>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d012      	beq.n	8000d12 <HAL_DMA_IRQHandler+0x156>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <HAL_DMA_IRQHandler+0x200>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00a      	beq.n	8000d0c <HAL_DMA_IRQHandler+0x150>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a31      	ldr	r2, [pc, #196]	; (8000dc0 <HAL_DMA_IRQHandler+0x204>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d102      	bne.n	8000d06 <HAL_DMA_IRQHandler+0x14a>
 8000d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d04:	e00e      	b.n	8000d24 <HAL_DMA_IRQHandler+0x168>
 8000d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d0a:	e00b      	b.n	8000d24 <HAL_DMA_IRQHandler+0x168>
 8000d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d10:	e008      	b.n	8000d24 <HAL_DMA_IRQHandler+0x168>
 8000d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d16:	e005      	b.n	8000d24 <HAL_DMA_IRQHandler+0x168>
 8000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1c:	e002      	b.n	8000d24 <HAL_DMA_IRQHandler+0x168>
 8000d1e:	2320      	movs	r3, #32
 8000d20:	e000      	b.n	8000d24 <HAL_DMA_IRQHandler+0x168>
 8000d22:	2302      	movs	r3, #2
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <HAL_DMA_IRQHandler+0x208>)
 8000d26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d034      	beq.n	8000da2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d40:	e02f      	b.n	8000da2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	2208      	movs	r2, #8
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d028      	beq.n	8000da4 <HAL_DMA_IRQHandler+0x1e8>
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d023      	beq.n	8000da4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 020e 	bic.w	r2, r2, #14
 8000d6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2201      	movs	r2, #1
 8000d86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d004      	beq.n	8000da4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	4798      	blx	r3
    }
  }
  return;
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
}
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40020008 	.word	0x40020008
 8000db0:	4002001c 	.word	0x4002001c
 8000db4:	40020030 	.word	0x40020030
 8000db8:	40020044 	.word	0x40020044
 8000dbc:	40020058 	.word	0x40020058
 8000dc0:	4002006c 	.word	0x4002006c
 8000dc4:	40020000 	.word	0x40020000

08000dc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	d108      	bne.n	8000e08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e06:	e007      	b.n	8000e18 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	60da      	str	r2, [r3, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
	...

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b08b      	sub	sp, #44	; 0x2c
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e169      	b.n	800110c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	69fa      	ldr	r2, [r7, #28]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8158 	bne.w	8001106 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	4a9a      	ldr	r2, [pc, #616]	; (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d05e      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e60:	4a98      	ldr	r2, [pc, #608]	; (80010c4 <HAL_GPIO_Init+0x2a0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d875      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e66:	4a98      	ldr	r2, [pc, #608]	; (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d058      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e6c:	4a96      	ldr	r2, [pc, #600]	; (80010c8 <HAL_GPIO_Init+0x2a4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d86f      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e72:	4a96      	ldr	r2, [pc, #600]	; (80010cc <HAL_GPIO_Init+0x2a8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d052      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e78:	4a94      	ldr	r2, [pc, #592]	; (80010cc <HAL_GPIO_Init+0x2a8>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d869      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e7e:	4a94      	ldr	r2, [pc, #592]	; (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d04c      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e84:	4a92      	ldr	r2, [pc, #584]	; (80010d0 <HAL_GPIO_Init+0x2ac>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d863      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e8a:	4a92      	ldr	r2, [pc, #584]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d046      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
 8000e90:	4a90      	ldr	r2, [pc, #576]	; (80010d4 <HAL_GPIO_Init+0x2b0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d85d      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d82a      	bhi.n	8000ef0 <HAL_GPIO_Init+0xcc>
 8000e9a:	2b12      	cmp	r3, #18
 8000e9c:	d859      	bhi.n	8000f52 <HAL_GPIO_Init+0x12e>
 8000e9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <HAL_GPIO_Init+0x80>)
 8000ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea4:	08000f1f 	.word	0x08000f1f
 8000ea8:	08000ef9 	.word	0x08000ef9
 8000eac:	08000f0b 	.word	0x08000f0b
 8000eb0:	08000f4d 	.word	0x08000f4d
 8000eb4:	08000f53 	.word	0x08000f53
 8000eb8:	08000f53 	.word	0x08000f53
 8000ebc:	08000f53 	.word	0x08000f53
 8000ec0:	08000f53 	.word	0x08000f53
 8000ec4:	08000f53 	.word	0x08000f53
 8000ec8:	08000f53 	.word	0x08000f53
 8000ecc:	08000f53 	.word	0x08000f53
 8000ed0:	08000f53 	.word	0x08000f53
 8000ed4:	08000f53 	.word	0x08000f53
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f53 	.word	0x08000f53
 8000ee0:	08000f53 	.word	0x08000f53
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f01 	.word	0x08000f01
 8000eec:	08000f15 	.word	0x08000f15
 8000ef0:	4a79      	ldr	r2, [pc, #484]	; (80010d8 <HAL_GPIO_Init+0x2b4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d013      	beq.n	8000f1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ef6:	e02c      	b.n	8000f52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e029      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	3304      	adds	r3, #4
 8000f06:	623b      	str	r3, [r7, #32]
          break;
 8000f08:	e024      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	623b      	str	r3, [r7, #32]
          break;
 8000f12:	e01f      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	623b      	str	r3, [r7, #32]
          break;
 8000f1c:	e01a      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f26:	2304      	movs	r3, #4
 8000f28:	623b      	str	r3, [r7, #32]
          break;
 8000f2a:	e013      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d105      	bne.n	8000f40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f34:	2308      	movs	r3, #8
 8000f36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	611a      	str	r2, [r3, #16]
          break;
 8000f3e:	e009      	b.n	8000f54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f40:	2308      	movs	r3, #8
 8000f42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	615a      	str	r2, [r3, #20]
          break;
 8000f4a:	e003      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x130>
          break;
 8000f52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d801      	bhi.n	8000f5e <HAL_GPIO_Init+0x13a>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	e001      	b.n	8000f62 <HAL_GPIO_Init+0x13e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3304      	adds	r3, #4
 8000f62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d802      	bhi.n	8000f70 <HAL_GPIO_Init+0x14c>
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x152>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	3b08      	subs	r3, #8
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	6a39      	ldr	r1, [r7, #32]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	431a      	orrs	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 80b1 	beq.w	8001106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b4a      	ldr	r3, [pc, #296]	; (80010dc <HAL_GPIO_Init+0x2b8>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fbc:	4a48      	ldr	r2, [pc, #288]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a40      	ldr	r2, [pc, #256]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d013      	beq.n	8001010 <HAL_GPIO_Init+0x1ec>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3f      	ldr	r2, [pc, #252]	; (80010e8 <HAL_GPIO_Init+0x2c4>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d00d      	beq.n	800100c <HAL_GPIO_Init+0x1e8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <HAL_GPIO_Init+0x2c8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x1e4>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3d      	ldr	r2, [pc, #244]	; (80010f0 <HAL_GPIO_Init+0x2cc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_GPIO_Init+0x1e0>
 8001000:	2303      	movs	r3, #3
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001004:	2304      	movs	r3, #4
 8001006:	e004      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001008:	2302      	movs	r3, #2
 800100a:	e002      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <HAL_GPIO_Init+0x1ee>
 8001010:	2300      	movs	r3, #0
 8001012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	4093      	lsls	r3, r2
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001022:	492f      	ldr	r1, [pc, #188]	; (80010e0 <HAL_GPIO_Init+0x2bc>)
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	089b      	lsrs	r3, r3, #2
 8001028:	3302      	adds	r3, #2
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	492c      	ldr	r1, [pc, #176]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e006      	b.n	8001058 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	43db      	mvns	r3, r3
 8001052:	4928      	ldr	r1, [pc, #160]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001054:	4013      	ands	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d006      	beq.n	8001072 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	4922      	ldr	r1, [pc, #136]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	43db      	mvns	r3, r3
 800107a:	491e      	ldr	r1, [pc, #120]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800107c:	4013      	ands	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d006      	beq.n	800109a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	4918      	ldr	r1, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	608b      	str	r3, [r1, #8]
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4914      	ldr	r1, [pc, #80]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d021      	beq.n	80010f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	490e      	ldr	r1, [pc, #56]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
 80010c0:	e021      	b.n	8001106 <HAL_GPIO_Init+0x2e2>
 80010c2:	bf00      	nop
 80010c4:	10320000 	.word	0x10320000
 80010c8:	10310000 	.word	0x10310000
 80010cc:	10220000 	.word	0x10220000
 80010d0:	10210000 	.word	0x10210000
 80010d4:	10120000 	.word	0x10120000
 80010d8:	10110000 	.word	0x10110000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40011000 	.word	0x40011000
 80010f0:	40011400 	.word	0x40011400
 80010f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_GPIO_Init+0x304>)
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4909      	ldr	r1, [pc, #36]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001102:	4013      	ands	r3, r2
 8001104:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	3301      	adds	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	f47f ae8e 	bne.w	8000e38 <HAL_GPIO_Init+0x14>
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	372c      	adds	r7, #44	; 0x2c
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e272      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8087 	beq.w	800125a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800114c:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00c      	beq.n	8001172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001158:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d112      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d10b      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d06c      	beq.n	8001258 <HAL_RCC_OscConfig+0x12c>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d168      	bne.n	8001258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e24c      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x76>
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a7f      	ldr	r2, [pc, #508]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e02e      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a77      	ldr	r2, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0xbc>
 80011ce:	4b72      	ldr	r3, [pc, #456]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a71      	ldr	r2, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011e8:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6a      	ldr	r2, [pc, #424]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b68      	ldr	r3, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a67      	ldr	r2, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fae2 	bl	80007d0 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fade 	bl	80007d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e200      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xe4>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff face 	bl	80007d0 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff faca 	bl	80007d0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1ec      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x10c>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c0      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4939      	ldr	r1, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x270>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fa83 	bl	80007d0 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fa7f 	bl	80007d0 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4927      	ldr	r1, [pc, #156]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x270>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fa62 	bl	80007d0 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fa5e 	bl	80007d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e180      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d019      	beq.n	8001376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fa42 	bl	80007d0 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fa3e 	bl	80007d0 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e160      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 faa6 	bl	80018c0 <RCC_Delay>
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fa28 	bl	80007d0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	e00f      	b.n	80013a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fa24 	bl	80007d0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e146      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	42420000 	.word	0x42420000
 80013a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e9      	bne.n	8001384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a6 	beq.w	800150a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b8b      	ldr	r3, [pc, #556]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a87      	ldr	r2, [pc, #540]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b85      	ldr	r3, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b7f      	ldr	r3, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7e      	ldr	r2, [pc, #504]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff f9e5 	bl	80007d0 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff f9e1 	bl	80007d0 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e103      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	4b75      	ldr	r3, [pc, #468]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a6e      	ldr	r2, [pc, #440]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x334>
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a66      	ldr	r2, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x356>
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a60      	ldr	r2, [pc, #384]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a5d      	ldr	r2, [pc, #372]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f995 	bl	80007d0 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff f991 	bl	80007d0 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0b1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x37e>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff f97f 	bl	80007d0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff f97b 	bl	80007d0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e09b      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a3b      	ldr	r2, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8087 	beq.w	8001622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d061      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d146      	bne.n	80015b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff f94f 	bl	80007d0 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff f94b 	bl	80007d0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e06d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d108      	bne.n	8001570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4921      	ldr	r1, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a19      	ldr	r1, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	430b      	orrs	r3, r1
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff f91f 	bl	80007d0 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f91b 	bl	80007d0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
 80015b4:	e035      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff f908 	bl	80007d0 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff f904 	bl	80007d0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e026      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x498>
 80015e2:	e01e      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e019      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x500>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d0      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d910      	bls.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4965      	ldr	r1, [pc, #404]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d115      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e073      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06b      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4936      	ldr	r1, [pc, #216]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff f856 	bl	80007d0 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f852 	bl	80007d0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e053      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d210      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4922      	ldr	r1, [pc, #136]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1cc>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe ffb4 	bl	800074c <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	080026e0 	.word	0x080026e0
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800180c:	1d3c      	adds	r4, r7, #4
 800180e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001814:	f240 2301 	movw	r3, #513	; 0x201
 8001818:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x40>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x46>
 8001842:	e02b      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001846:	623b      	str	r3, [r7, #32]
      break;
 8001848:	e02b      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3328      	adds	r3, #40	; 0x28
 8001854:	443b      	add	r3, r7
 8001856:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800185a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d012      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	0c5b      	lsrs	r3, r3, #17
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	3328      	adds	r3, #40	; 0x28
 8001872:	443b      	add	r3, r7
 8001874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001878:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800187e:	fb03 f202 	mul.w	r2, r3, r2
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
 800188a:	e004      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	623b      	str	r3, [r7, #32]
      break;
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800189e:	623b      	str	r3, [r7, #32]
      break;
 80018a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a2:	6a3b      	ldr	r3, [r7, #32]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc90      	pop	{r4, r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	080026d0 	.word	0x080026d0
 80018b4:	40021000 	.word	0x40021000
 80018b8:	007a1200 	.word	0x007a1200
 80018bc:	003d0900 	.word	0x003d0900

080018c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <RCC_Delay+0x34>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <RCC_Delay+0x38>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018dc:	bf00      	nop
  }
  while (Delay --);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	60fa      	str	r2, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f9      	bne.n	80018dc <RCC_Delay+0x1c>
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000000 	.word	0x20000000
 80018f8:	10624dd3 	.word	0x10624dd3

080018fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e076      	b.n	80019fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	d108      	bne.n	8001928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800191e:	d009      	beq.n	8001934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
 8001926:	e005      	b.n	8001934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fdc8 	bl	80004e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800196a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	ea42 0103 	orr.w	r1, r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	0c1a      	lsrs	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f002 0204 	and.w	r2, r2, #4
 80019da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69da      	ldr	r2, [r3, #28]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e041      	b.n	8001a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d106      	bne.n	8001a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7fe fd98 	bl	8000560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3304      	adds	r3, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f000 fa44 	bl	8001ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e041      	b.n	8001b38 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f839 	bl	8001b40 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3304      	adds	r3, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f000 f9f5 	bl	8001ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_TIM_PWM_Start+0x24>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e022      	b.n	8001bbe <HAL_TIM_PWM_Start+0x6a>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d109      	bne.n	8001b92 <HAL_TIM_PWM_Start+0x3e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	e015      	b.n	8001bbe <HAL_TIM_PWM_Start+0x6a>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d109      	bne.n	8001bac <HAL_TIM_PWM_Start+0x58>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	e008      	b.n	8001bbe <HAL_TIM_PWM_Start+0x6a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e05e      	b.n	8001c84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <HAL_TIM_PWM_Start+0x82>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd4:	e013      	b.n	8001bfe <HAL_TIM_PWM_Start+0xaa>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d104      	bne.n	8001be6 <HAL_TIM_PWM_Start+0x92>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be4:	e00b      	b.n	8001bfe <HAL_TIM_PWM_Start+0xaa>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d104      	bne.n	8001bf6 <HAL_TIM_PWM_Start+0xa2>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	e003      	b.n	8001bfe <HAL_TIM_PWM_Start+0xaa>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2201      	movs	r2, #1
 8001c04:	6839      	ldr	r1, [r7, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fbe2 	bl	80023d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_TIM_PWM_Start+0x138>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d107      	bne.n	8001c26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_TIM_PWM_Start+0x138>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00e      	beq.n	8001c4e <HAL_TIM_PWM_Start+0xfa>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c38:	d009      	beq.n	8001c4e <HAL_TIM_PWM_Start+0xfa>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <HAL_TIM_PWM_Start+0x13c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d004      	beq.n	8001c4e <HAL_TIM_PWM_Start+0xfa>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <HAL_TIM_PWM_Start+0x140>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d111      	bne.n	8001c72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d010      	beq.n	8001c82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	e007      	b.n	8001c82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40012c00 	.word	0x40012c00
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40000800 	.word	0x40000800

08001c98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e046      	b.n	8001d40 <HAL_TIM_OC_ConfigChannel+0xa8>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d839      	bhi.n	8001d34 <HAL_TIM_OC_ConfigChannel+0x9c>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cfd 	.word	0x08001cfd
 8001ccc:	08001d35 	.word	0x08001d35
 8001cd0:	08001d35 	.word	0x08001d35
 8001cd4:	08001d35 	.word	0x08001d35
 8001cd8:	08001d0b 	.word	0x08001d0b
 8001cdc:	08001d35 	.word	0x08001d35
 8001ce0:	08001d35 	.word	0x08001d35
 8001ce4:	08001d35 	.word	0x08001d35
 8001ce8:	08001d19 	.word	0x08001d19
 8001cec:	08001d35 	.word	0x08001d35
 8001cf0:	08001d35 	.word	0x08001d35
 8001cf4:	08001d35 	.word	0x08001d35
 8001cf8:	08001d27 	.word	0x08001d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f946 	bl	8001f94 <TIM_OC1_SetConfig>
      break;
 8001d08:	e015      	b.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f9a5 	bl	8002060 <TIM_OC2_SetConfig>
      break;
 8001d16:	e00e      	b.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fa08 	bl	8002134 <TIM_OC3_SetConfig>
      break;
 8001d24:	e007      	b.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fa6b 	bl	8002208 <TIM_OC4_SetConfig>
      break;
 8001d32:	e000      	b.n	8001d36 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8001d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_TIM_ConfigClockSource+0x18>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e0b3      	b.n	8001ec8 <HAL_TIM_ConfigClockSource+0x180>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d98:	d03e      	beq.n	8001e18 <HAL_TIM_ConfigClockSource+0xd0>
 8001d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9e:	f200 8087 	bhi.w	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da6:	f000 8085 	beq.w	8001eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8001daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dae:	d87f      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001db0:	2b70      	cmp	r3, #112	; 0x70
 8001db2:	d01a      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0xa2>
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d87b      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001db8:	2b60      	cmp	r3, #96	; 0x60
 8001dba:	d050      	beq.n	8001e5e <HAL_TIM_ConfigClockSource+0x116>
 8001dbc:	2b60      	cmp	r3, #96	; 0x60
 8001dbe:	d877      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001dc0:	2b50      	cmp	r3, #80	; 0x50
 8001dc2:	d03c      	beq.n	8001e3e <HAL_TIM_ConfigClockSource+0xf6>
 8001dc4:	2b50      	cmp	r3, #80	; 0x50
 8001dc6:	d873      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d058      	beq.n	8001e7e <HAL_TIM_ConfigClockSource+0x136>
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d86f      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001dd0:	2b30      	cmp	r3, #48	; 0x30
 8001dd2:	d064      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x156>
 8001dd4:	2b30      	cmp	r3, #48	; 0x30
 8001dd6:	d86b      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d060      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x156>
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d867      	bhi.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05c      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x156>
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d05a      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001de8:	e062      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f000 faca 	bl	8002392 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	609a      	str	r2, [r3, #8]
      break;
 8001e16:	e04e      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f000 fab3 	bl	8002392 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e3a:	609a      	str	r2, [r3, #8]
      break;
 8001e3c:	e03b      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f000 fa2a 	bl	80022a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2150      	movs	r1, #80	; 0x50
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fa81 	bl	800235e <TIM_ITRx_SetConfig>
      break;
 8001e5c:	e02b      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f000 fa48 	bl	8002300 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2160      	movs	r1, #96	; 0x60
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fa71 	bl	800235e <TIM_ITRx_SetConfig>
      break;
 8001e7c:	e01b      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f000 fa0a 	bl	80022a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fa61 	bl	800235e <TIM_ITRx_SetConfig>
      break;
 8001e9c:	e00b      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 fa58 	bl	800235e <TIM_ITRx_SetConfig>
        break;
 8001eae:	e002      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001eb0:	bf00      	nop
 8001eb2:	e000      	b.n	8001eb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001eb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <TIM_Base_SetConfig+0xb8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00b      	beq.n	8001f00 <TIM_Base_SetConfig+0x30>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eee:	d007      	beq.n	8001f00 <TIM_Base_SetConfig+0x30>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <TIM_Base_SetConfig+0xbc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0x30>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <TIM_Base_SetConfig+0xc0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d108      	bne.n	8001f12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <TIM_Base_SetConfig+0xb8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00b      	beq.n	8001f32 <TIM_Base_SetConfig+0x62>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d007      	beq.n	8001f32 <TIM_Base_SetConfig+0x62>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <TIM_Base_SetConfig+0xbc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d003      	beq.n	8001f32 <TIM_Base_SetConfig+0x62>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <TIM_Base_SetConfig+0xc0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d108      	bne.n	8001f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <TIM_Base_SetConfig+0xb8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d103      	bne.n	8001f78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	615a      	str	r2, [r3, #20]
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	40012c00 	.word	0x40012c00
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800

08001f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f023 0201 	bic.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f023 0302 	bic.w	r3, r3, #2
 8001fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <TIM_OC1_SetConfig+0xc8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d10c      	bne.n	800200a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f023 0308 	bic.w	r3, r3, #8
 8001ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f023 0304 	bic.w	r3, r3, #4
 8002008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a13      	ldr	r2, [pc, #76]	; (800205c <TIM_OC1_SetConfig+0xc8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d111      	bne.n	8002036 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	621a      	str	r2, [r3, #32]
}
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40012c00 	.word	0x40012c00

08002060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f023 0210 	bic.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800208e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f023 0320 	bic.w	r3, r3, #32
 80020aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <TIM_OC2_SetConfig+0xd0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d10d      	bne.n	80020dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a14      	ldr	r2, [pc, #80]	; (8002130 <TIM_OC2_SetConfig+0xd0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d113      	bne.n	800210c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	621a      	str	r2, [r3, #32]
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	40012c00 	.word	0x40012c00

08002134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800217c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <TIM_OC3_SetConfig+0xd0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10d      	bne.n	80021ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <TIM_OC3_SetConfig+0xd0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d113      	bne.n	80021de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	621a      	str	r2, [r3, #32]
}
 80021f8:	bf00      	nop
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40012c00 	.word	0x40012c00

08002208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	031b      	lsls	r3, r3, #12
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <TIM_OC4_SetConfig+0x98>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d109      	bne.n	800227c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800226e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	621a      	str	r2, [r3, #32]
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40012c00 	.word	0x40012c00

080022a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	f023 0201 	bic.w	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f023 030a 	bic.w	r3, r3, #10
 80022e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	621a      	str	r2, [r3, #32]
}
 80022f6:	bf00      	nop
 80022f8:	371c      	adds	r7, #28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f023 0210 	bic.w	r2, r3, #16
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800232a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	031b      	lsls	r3, r3, #12
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800233c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	621a      	str	r2, [r3, #32]
}
 8002354:	bf00      	nop
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	f043 0307 	orr.w	r3, r3, #7
 8002380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	609a      	str	r2, [r3, #8]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002392:	b480      	push	{r7}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	021a      	lsls	r2, r3, #8
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	609a      	str	r2, [r3, #8]
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2201      	movs	r2, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	621a      	str	r2, [r3, #32]
}
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800242c:	2302      	movs	r3, #2
 800242e:	e046      	b.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00e      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d009      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10c      	bne.n	80024ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40012c00 	.word	0x40012c00
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40000800 	.word	0x40000800

080024d4 <LaserArray_Init>:
        UINT64_C(0b0111111111111111111110111111111111111111110111111111111111111111),
        UINT64_C(0b0111111111111111111111111111111111111111111111111111111111111111)
};


HAL_StatusTypeDef LaserArray_Init(LaserArray_t *la, const LaserArray_Config_t *config) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret;

    // store the config
    la->config = *config;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // clear the data arrays
    memset(la->brightnesses, 0, sizeof(la->brightnesses));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	330c      	adds	r3, #12
 80024ec:	2220      	movs	r2, #32
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f8d3 	bl	800269c <memset>
    memset(la->tx_data, 0, sizeof(la->tx_data));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	332c      	adds	r3, #44	; 0x2c
 80024fa:	22fc      	movs	r2, #252	; 0xfc
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f8cc 	bl	800269c <memset>

    // enable spi
    __HAL_SPI_ENABLE(la->config.hspi);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002516:	601a      	str	r2, [r3, #0]

    // setup timer dma to trigger the transmission of spi data
    ret = HAL_DMA_Start_IT(la->config.htim->hdma[TIM_DMA_ID_UPDATE],
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	6a18      	ldr	r0, [r3, #32]
            (uint32_t) la->tx_data,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	332c      	adds	r3, #44	; 0x2c
    ret = HAL_DMA_Start_IT(la->config.htim->hdma[TIM_DMA_ID_UPDATE],
 8002522:	4619      	mov	r1, r3
            (uint32_t) &la->config.hspi->Instance->DR,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	330c      	adds	r3, #12
    ret = HAL_DMA_Start_IT(la->config.htim->hdma[TIM_DMA_ID_UPDATE],
 800252c:	461a      	mov	r2, r3
 800252e:	237e      	movs	r3, #126	; 0x7e
 8002530:	f7fe fae4 	bl	8000afc <HAL_DMA_Start_IT>
 8002534:	4603      	mov	r3, r0
 8002536:	73fb      	strb	r3, [r7, #15]
            sizeof(la->tx_data) / sizeof(uint16_t));
    if (ret != HAL_OK) {
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <LaserArray_Init+0x6e>
        return ret;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	e019      	b.n	8002576 <LaserArray_Init+0xa2>
    }

    // enable dma on the timer
    __HAL_TIM_ENABLE_DMA(la->config.htim, TIM_DMA_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002554:	60da      	str	r2, [r3, #12]

    // start the timer with pwm enabled
    ret = HAL_TIM_PWM_Start(la->config.htim, la->config.rclk_channel);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f7ff faf7 	bl	8001b54 <HAL_TIM_PWM_Start>
 8002566:	4603      	mov	r3, r0
 8002568:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <LaserArray_Init+0xa0>
        return ret;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	e000      	b.n	8002576 <LaserArray_Init+0xa2>
    }

    return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <LaserArray_SetBrightness>:

HAL_StatusTypeDef LaserArray_SetBrightness(LaserArray_t *la, uint8_t diode, uint8_t brightness) {
 8002580:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	70fb      	strb	r3, [r7, #3]
 800258e:	4613      	mov	r3, r2
 8002590:	70bb      	strb	r3, [r7, #2]
    // validate the parameters
    if (diode >= LA_NUM_DIODES) {
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	2b1f      	cmp	r3, #31
 8002596:	d901      	bls.n	800259c <LaserArray_SetBrightness+0x1c>
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e052      	b.n	8002642 <LaserArray_SetBrightness+0xc2>
    }

    // clamp the brightness
    if (brightness >= LA_NUM_BRIGHTNESS_LEVELS) {
 800259c:	78bb      	ldrb	r3, [r7, #2]
 800259e:	2b3f      	cmp	r3, #63	; 0x3f
 80025a0:	d901      	bls.n	80025a6 <LaserArray_SetBrightness+0x26>
        brightness = LA_NUM_BRIGHTNESS_LEVELS - 1;
 80025a2:	233f      	movs	r3, #63	; 0x3f
 80025a4:	70bb      	strb	r3, [r7, #2]
    }

    // lookup the brightness pattern
    la_brightness_pattern_t pattern = la_brightness_patterns[brightness];
 80025a6:	78bb      	ldrb	r3, [r7, #2]
 80025a8:	4a29      	ldr	r2, [pc, #164]	; (8002650 <LaserArray_SetBrightness+0xd0>)
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // iterate through each diode bitmask
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e03e      	b.n	800263a <LaserArray_SetBrightness+0xba>
        // either set or unset the corresponding bit depending on the pattern
        if ((pattern >> i) & UINT32_C(1)) {
 80025bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c0:	6979      	ldr	r1, [r7, #20]
 80025c2:	f1c1 0620 	rsb	r6, r1, #32
 80025c6:	f1a1 0020 	sub.w	r0, r1, #32
 80025ca:	fa22 f401 	lsr.w	r4, r2, r1
 80025ce:	fa03 f606 	lsl.w	r6, r3, r6
 80025d2:	4334      	orrs	r4, r6
 80025d4:	fa23 f000 	lsr.w	r0, r3, r0
 80025d8:	4304      	orrs	r4, r0
 80025da:	fa23 f501 	lsr.w	r5, r3, r1
 80025de:	f004 0801 	and.w	r8, r4, #1
 80025e2:	f04f 0900 	mov.w	r9, #0
 80025e6:	ea58 0309 	orrs.w	r3, r8, r9
 80025ea:	d011      	beq.n	8002610 <LaserArray_SetBrightness+0x90>
            la->tx_data[i] |= UINT32_C(1) << diode;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	330a      	adds	r3, #10
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	2101      	movs	r1, #1
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	330a      	adds	r3, #10
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e011      	b.n	8002634 <LaserArray_SetBrightness+0xb4>
        } else {
            la->tx_data[i] &= ~(UINT32_C(1) << diode);
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	330a      	adds	r3, #10
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f303 	lsl.w	r3, r1, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	330a      	adds	r3, #10
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b3e      	cmp	r3, #62	; 0x3e
 800263e:	ddbd      	ble.n	80025bc <LaserArray_SetBrightness+0x3c>
        }
    }

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000010 	.word	0x20000010

08002654 <__libc_init_array>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	2600      	movs	r6, #0
 8002658:	4d0c      	ldr	r5, [pc, #48]	; (800268c <__libc_init_array+0x38>)
 800265a:	4c0d      	ldr	r4, [pc, #52]	; (8002690 <__libc_init_array+0x3c>)
 800265c:	1b64      	subs	r4, r4, r5
 800265e:	10a4      	asrs	r4, r4, #2
 8002660:	42a6      	cmp	r6, r4
 8002662:	d109      	bne.n	8002678 <__libc_init_array+0x24>
 8002664:	f000 f822 	bl	80026ac <_init>
 8002668:	2600      	movs	r6, #0
 800266a:	4d0a      	ldr	r5, [pc, #40]	; (8002694 <__libc_init_array+0x40>)
 800266c:	4c0a      	ldr	r4, [pc, #40]	; (8002698 <__libc_init_array+0x44>)
 800266e:	1b64      	subs	r4, r4, r5
 8002670:	10a4      	asrs	r4, r4, #2
 8002672:	42a6      	cmp	r6, r4
 8002674:	d105      	bne.n	8002682 <__libc_init_array+0x2e>
 8002676:	bd70      	pop	{r4, r5, r6, pc}
 8002678:	f855 3b04 	ldr.w	r3, [r5], #4
 800267c:	4798      	blx	r3
 800267e:	3601      	adds	r6, #1
 8002680:	e7ee      	b.n	8002660 <__libc_init_array+0xc>
 8002682:	f855 3b04 	ldr.w	r3, [r5], #4
 8002686:	4798      	blx	r3
 8002688:	3601      	adds	r6, #1
 800268a:	e7f2      	b.n	8002672 <__libc_init_array+0x1e>
 800268c:	080026f0 	.word	0x080026f0
 8002690:	080026f0 	.word	0x080026f0
 8002694:	080026f0 	.word	0x080026f0
 8002698:	080026f4 	.word	0x080026f4

0800269c <memset>:
 800269c:	4603      	mov	r3, r0
 800269e:	4402      	add	r2, r0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d100      	bne.n	80026a6 <memset+0xa>
 80026a4:	4770      	bx	lr
 80026a6:	f803 1b01 	strb.w	r1, [r3], #1
 80026aa:	e7f9      	b.n	80026a0 <memset+0x4>

080026ac <_init>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr

080026b8 <_fini>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr
