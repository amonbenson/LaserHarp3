
LaserHarp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f420  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb54  0800fb54  000203e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800fb54  0800fb54  000203e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fb54  0800fb54  000203e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb54  0800fb54  0001fb54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb58  0800fb58  0001fb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e8  20000000  0800fb5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029e0  200003e8  0800ff44  000203e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002dc8  0800ff44  00022dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025255  00000000  00000000  00020411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055f7  00000000  00000000  00045666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc8  00000000  00000000  0004ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b90  00000000  00000000  0004ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e63d  00000000  00000000  0004e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023317  00000000  00000000  0006cbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dbfd  00000000  00000000  0008ff0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012db09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008380  00000000  00000000  0012db5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003e8 	.word	0x200003e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f518 	.word	0x0800f518

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003ec 	.word	0x200003ec
 800014c:	0800f518 	.word	0x0800f518

08000150 <Commander_HAL_Receive_Next>:
#include "commander.h"
#include "logging.h"


static ret_t Commander_HAL_Receive_Next(Commander_t *com) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af02      	add	r7, sp, #8
 8000156:	6078      	str	r0, [r7, #4]
    RETURN_ON_ERROR(HAL_UART_Receive_IT(com->config.huart, &com->rx.data, sizeof(uint8_t)),
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	6818      	ldr	r0, [r3, #0]
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	330c      	adds	r3, #12
 8000160:	2201      	movs	r2, #1
 8000162:	4619      	mov	r1, r3
 8000164:	f005 f9c2 	bl	80054ec <HAL_UART_Receive_IT>
 8000168:	4603      	mov	r3, r0
 800016a:	73fb      	strb	r3, [r7, #15]
 800016c:	7bfb      	ldrb	r3, [r7, #15]
 800016e:	2b00      	cmp	r3, #0
 8000170:	bf14      	ite	ne
 8000172:	2301      	movne	r3, #1
 8000174:	2300      	moveq	r3, #0
 8000176:	b2db      	uxtb	r3, r3
 8000178:	2b00      	cmp	r3, #0
 800017a:	d012      	beq.n	80001a2 <Commander_HAL_Receive_Next+0x52>
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <Commander_HAL_Receive_Next+0x5c>)
 800017e:	68d9      	ldr	r1, [r3, #12]
 8000180:	7bfb      	ldrb	r3, [r7, #15]
 8000182:	2b1c      	cmp	r3, #28
 8000184:	d801      	bhi.n	800018a <Commander_HAL_Receive_Next+0x3a>
 8000186:	7bfb      	ldrb	r3, [r7, #15]
 8000188:	e000      	b.n	800018c <Commander_HAL_Receive_Next+0x3c>
 800018a:	2301      	movs	r3, #1
 800018c:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <Commander_HAL_Receive_Next+0x60>)
 800018e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2306      	movs	r3, #6
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <Commander_HAL_Receive_Next+0x64>)
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <Commander_HAL_Receive_Next+0x68>)
 800019a:	f00e fb4b 	bl	800e834 <iprintf>
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	e000      	b.n	80001a4 <Commander_HAL_Receive_Next+0x54>
            "Failed to start hal receive");

    return RET_OK;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3710      	adds	r7, #16
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	20000014 	.word	0x20000014
 80001b4:	0800f530 	.word	0x0800f530
 80001b8:	0800f550 	.word	0x0800f550

080001bc <Commander_HAL_Transmit_Next>:

static ret_t Commander_HAL_Transmit_Next(Commander_t *com) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af02      	add	r7, sp, #8
 80001c2:	6078      	str	r0, [r7, #4]
    RETURN_ON_FALSE(osMessageQueueGet(com->tx.queue, &com->tx.data, NULL, 0) == osOK,
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	6958      	ldr	r0, [r3, #20]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	f103 0118 	add.w	r1, r3, #24
 80001ce:	2300      	movs	r3, #0
 80001d0:	2200      	movs	r2, #0
 80001d2:	f00a fc7f 	bl	800aad4 <osMessageQueueGet>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	bf14      	ite	ne
 80001dc:	2301      	movne	r3, #1
 80001de:	2300      	moveq	r3, #0
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d00b      	beq.n	80001fe <Commander_HAL_Transmit_Next+0x42>
 80001e6:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <Commander_HAL_Transmit_Next+0x98>)
 80001e8:	68d9      	ldr	r1, [r3, #12]
 80001ea:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <Commander_HAL_Transmit_Next+0x9c>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	230d      	movs	r3, #13
 80001f2:	4a1a      	ldr	r2, [pc, #104]	; (800025c <Commander_HAL_Transmit_Next+0xa0>)
 80001f4:	481a      	ldr	r0, [pc, #104]	; (8000260 <Commander_HAL_Transmit_Next+0xa4>)
 80001f6:	f00e fb1d 	bl	800e834 <iprintf>
 80001fa:	231d      	movs	r3, #29
 80001fc:	e025      	b.n	800024a <Commander_HAL_Transmit_Next+0x8e>
            RET_QUEUE_EMPTY,
            "Failed to get tx data");

    RETURN_ON_ERROR(HAL_UART_Transmit_IT(com->config.huart, &com->tx.data, sizeof(uint8_t)),
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	6818      	ldr	r0, [r3, #0]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3318      	adds	r3, #24
 8000206:	2201      	movs	r2, #1
 8000208:	4619      	mov	r1, r3
 800020a:	f005 f92b 	bl	8005464 <HAL_UART_Transmit_IT>
 800020e:	4603      	mov	r3, r0
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	7bfb      	ldrb	r3, [r7, #15]
 8000214:	2b00      	cmp	r3, #0
 8000216:	bf14      	ite	ne
 8000218:	2301      	movne	r3, #1
 800021a:	2300      	moveq	r3, #0
 800021c:	b2db      	uxtb	r3, r3
 800021e:	2b00      	cmp	r3, #0
 8000220:	d012      	beq.n	8000248 <Commander_HAL_Transmit_Next+0x8c>
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <Commander_HAL_Transmit_Next+0x98>)
 8000224:	68d9      	ldr	r1, [r3, #12]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	2b1c      	cmp	r3, #28
 800022a:	d801      	bhi.n	8000230 <Commander_HAL_Transmit_Next+0x74>
 800022c:	7bfb      	ldrb	r3, [r7, #15]
 800022e:	e000      	b.n	8000232 <Commander_HAL_Transmit_Next+0x76>
 8000230:	2301      	movs	r3, #1
 8000232:	4a09      	ldr	r2, [pc, #36]	; (8000258 <Commander_HAL_Transmit_Next+0x9c>)
 8000234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2311      	movs	r3, #17
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <Commander_HAL_Transmit_Next+0xa0>)
 800023e:	4809      	ldr	r0, [pc, #36]	; (8000264 <Commander_HAL_Transmit_Next+0xa8>)
 8000240:	f00e faf8 	bl	800e834 <iprintf>
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	e000      	b.n	800024a <Commander_HAL_Transmit_Next+0x8e>
            "Failed to start hal transmit");

    return RET_OK;
 8000248:	2300      	movs	r3, #0
}
 800024a:	4618      	mov	r0, r3
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000000 	.word	0x20000000
 8000258:	20000014 	.word	0x20000014
 800025c:	0800f530 	.word	0x0800f530
 8000260:	0800f57c 	.word	0x0800f57c
 8000264:	0800f5a4 	.word	0x0800f5a4

08000268 <Commander_Port_Init>:

static ret_t Commander_Port_Init(Commander_Port_t *port, const char *name, size_t queue_size) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af02      	add	r7, sp, #8
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
    // create the port lock
    const osSemaphoreAttr_t lock_attr = {
 8000274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
            .name = name
    };
    port->lock = osSemaphoreNew(1, 1, &lock_attr);
 8000286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028a:	461a      	mov	r2, r3
 800028c:	2101      	movs	r1, #1
 800028e:	2001      	movs	r0, #1
 8000290:	f00a f9cc 	bl	800a62c <osSemaphoreNew>
 8000294:	4602      	mov	r2, r0
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
    RETURN_ON_FALSE(port->lock, RET_OUT_OF_MEMORY, "Failed to create lock");
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	bf0c      	ite	eq
 80002a2:	2301      	moveq	r3, #1
 80002a4:	2300      	movne	r3, #0
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00b      	beq.n	80002c4 <Commander_Port_Init+0x5c>
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <Commander_Port_Init+0xc0>)
 80002ae:	68d9      	ldr	r1, [r3, #12]
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <Commander_Port_Init+0xc4>)
 80002b2:	691b      	ldr	r3, [r3, #16]
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	231d      	movs	r3, #29
 80002b8:	4a1d      	ldr	r2, [pc, #116]	; (8000330 <Commander_Port_Init+0xc8>)
 80002ba:	481e      	ldr	r0, [pc, #120]	; (8000334 <Commander_Port_Init+0xcc>)
 80002bc:	f00e faba 	bl	800e834 <iprintf>
 80002c0:	2304      	movs	r3, #4
 80002c2:	e02d      	b.n	8000320 <Commander_Port_Init+0xb8>

    // create the port message queue
    const osMessageQueueAttr_t queue_attr = {
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
 80002d4:	615a      	str	r2, [r3, #20]
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	613b      	str	r3, [r7, #16]
            .name = name
    };
    port->queue = osMessageQueueNew(queue_size, sizeof(uint8_t), &queue_attr);
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	461a      	mov	r2, r3
 80002e0:	2101      	movs	r1, #1
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f00a fafc 	bl	800a8e0 <osMessageQueueNew>
 80002e8:	4602      	mov	r2, r0
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	605a      	str	r2, [r3, #4]
    RETURN_ON_FALSE(port->queue, RET_OUT_OF_MEMORY, "Faile to create queue");
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	bf0c      	ite	eq
 80002f6:	2301      	moveq	r3, #1
 80002f8:	2300      	movne	r3, #0
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d00b      	beq.n	8000318 <Commander_Port_Init+0xb0>
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <Commander_Port_Init+0xc0>)
 8000302:	68d9      	ldr	r1, [r3, #12]
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <Commander_Port_Init+0xc4>)
 8000306:	691b      	ldr	r3, [r3, #16]
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2324      	movs	r3, #36	; 0x24
 800030c:	4a08      	ldr	r2, [pc, #32]	; (8000330 <Commander_Port_Init+0xc8>)
 800030e:	480a      	ldr	r0, [pc, #40]	; (8000338 <Commander_Port_Init+0xd0>)
 8000310:	f00e fa90 	bl	800e834 <iprintf>
 8000314:	2304      	movs	r3, #4
 8000316:	e003      	b.n	8000320 <Commander_Port_Init+0xb8>

    // initialize the port current data
    port->data = 0;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	2200      	movs	r2, #0
 800031c:	721a      	strb	r2, [r3, #8]

    return RET_OK;
 800031e:	2300      	movs	r3, #0
}
 8000320:	4618      	mov	r0, r3
 8000322:	3738      	adds	r7, #56	; 0x38
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000000 	.word	0x20000000
 800032c:	20000014 	.word	0x20000014
 8000330:	0800f530 	.word	0x0800f530
 8000334:	0800f5d4 	.word	0x0800f5d4
 8000338:	0800f5fc 	.word	0x0800f5fc

0800033c <Commander_Init>:

ret_t Commander_Init(Commander_t *com, const Commander_Config_t *config) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af02      	add	r7, sp, #8
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
    // store the config
    com->config = *config;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	683a      	ldr	r2, [r7, #0]
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	601a      	str	r2, [r3, #0]

    // create the rx and tx ports
    RETURN_ON_ERROR(Commander_Port_Init(&com->rx, "commander_rx", COM_RX_QUEUE_SIZE),
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3304      	adds	r3, #4
 8000352:	2240      	movs	r2, #64	; 0x40
 8000354:	4934      	ldr	r1, [pc, #208]	; (8000428 <Commander_Init+0xec>)
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff86 	bl	8000268 <Commander_Port_Init>
 800035c:	4603      	mov	r3, r0
 800035e:	73fb      	strb	r3, [r7, #15]
 8000360:	7bfb      	ldrb	r3, [r7, #15]
 8000362:	2b00      	cmp	r3, #0
 8000364:	bf14      	ite	ne
 8000366:	2301      	movne	r3, #1
 8000368:	2300      	moveq	r3, #0
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d012      	beq.n	8000396 <Commander_Init+0x5a>
 8000370:	4b2e      	ldr	r3, [pc, #184]	; (800042c <Commander_Init+0xf0>)
 8000372:	68d9      	ldr	r1, [r3, #12]
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b1c      	cmp	r3, #28
 8000378:	d801      	bhi.n	800037e <Commander_Init+0x42>
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	e000      	b.n	8000380 <Commander_Init+0x44>
 800037e:	2301      	movs	r3, #1
 8000380:	4a2b      	ldr	r2, [pc, #172]	; (8000430 <Commander_Init+0xf4>)
 8000382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2331      	movs	r3, #49	; 0x31
 800038a:	4a2a      	ldr	r2, [pc, #168]	; (8000434 <Commander_Init+0xf8>)
 800038c:	482a      	ldr	r0, [pc, #168]	; (8000438 <Commander_Init+0xfc>)
 800038e:	f00e fa51 	bl	800e834 <iprintf>
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	e044      	b.n	8000420 <Commander_Init+0xe4>
            "Failed to create rx port");
    RETURN_ON_ERROR(Commander_Port_Init(&com->tx, "commander_tx", COM_TX_QUEUE_SIZE),
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3310      	adds	r3, #16
 800039a:	2240      	movs	r2, #64	; 0x40
 800039c:	4927      	ldr	r1, [pc, #156]	; (800043c <Commander_Init+0x100>)
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff62 	bl	8000268 <Commander_Port_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	73bb      	strb	r3, [r7, #14]
 80003a8:	7bbb      	ldrb	r3, [r7, #14]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	bf14      	ite	ne
 80003ae:	2301      	movne	r3, #1
 80003b0:	2300      	moveq	r3, #0
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d012      	beq.n	80003de <Commander_Init+0xa2>
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <Commander_Init+0xf0>)
 80003ba:	68d9      	ldr	r1, [r3, #12]
 80003bc:	7bbb      	ldrb	r3, [r7, #14]
 80003be:	2b1c      	cmp	r3, #28
 80003c0:	d801      	bhi.n	80003c6 <Commander_Init+0x8a>
 80003c2:	7bbb      	ldrb	r3, [r7, #14]
 80003c4:	e000      	b.n	80003c8 <Commander_Init+0x8c>
 80003c6:	2301      	movs	r3, #1
 80003c8:	4a19      	ldr	r2, [pc, #100]	; (8000430 <Commander_Init+0xf4>)
 80003ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2333      	movs	r3, #51	; 0x33
 80003d2:	4a18      	ldr	r2, [pc, #96]	; (8000434 <Commander_Init+0xf8>)
 80003d4:	481a      	ldr	r0, [pc, #104]	; (8000440 <Commander_Init+0x104>)
 80003d6:	f00e fa2d 	bl	800e834 <iprintf>
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	e020      	b.n	8000420 <Commander_Init+0xe4>
            "Failed to create tx port");

    // start receiving data
    RETURN_ON_ERROR(Commander_HAL_Receive_Next(com), "Failed to start uart reception");
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f7ff feb6 	bl	8000150 <Commander_HAL_Receive_Next>
 80003e4:	4603      	mov	r3, r0
 80003e6:	737b      	strb	r3, [r7, #13]
 80003e8:	7b7b      	ldrb	r3, [r7, #13]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	bf14      	ite	ne
 80003ee:	2301      	movne	r3, #1
 80003f0:	2300      	moveq	r3, #0
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d012      	beq.n	800041e <Commander_Init+0xe2>
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <Commander_Init+0xf0>)
 80003fa:	68d9      	ldr	r1, [r3, #12]
 80003fc:	7b7b      	ldrb	r3, [r7, #13]
 80003fe:	2b1c      	cmp	r3, #28
 8000400:	d801      	bhi.n	8000406 <Commander_Init+0xca>
 8000402:	7b7b      	ldrb	r3, [r7, #13]
 8000404:	e000      	b.n	8000408 <Commander_Init+0xcc>
 8000406:	2301      	movs	r3, #1
 8000408:	4a09      	ldr	r2, [pc, #36]	; (8000430 <Commander_Init+0xf4>)
 800040a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2337      	movs	r3, #55	; 0x37
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <Commander_Init+0xf8>)
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <Commander_Init+0x108>)
 8000416:	f00e fa0d 	bl	800e834 <iprintf>
 800041a:	7b7b      	ldrb	r3, [r7, #13]
 800041c:	e000      	b.n	8000420 <Commander_Init+0xe4>

    return RET_OK;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	0800f624 	.word	0x0800f624
 800042c:	20000000 	.word	0x20000000
 8000430:	20000014 	.word	0x20000014
 8000434:	0800f530 	.word	0x0800f530
 8000438:	0800f634 	.word	0x0800f634
 800043c:	0800f660 	.word	0x0800f660
 8000440:	0800f670 	.word	0x0800f670
 8000444:	0800f69c 	.word	0x0800f69c

08000448 <Commander_UART_RxCpltHandler>:
exit:
    osSemaphoreRelease(com->tx.lock);
    return ret;
}

ret_t Commander_UART_RxCpltHandler(Commander_t *com, UART_HandleTypeDef *huart) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af02      	add	r7, sp, #8
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
    // ignore callbacks addressed to other uarts
    if (huart->Instance != com->config.huart->Instance) {
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	d001      	beq.n	8000464 <Commander_UART_RxCpltHandler+0x1c>
        return HAL_OK;
 8000460:	2300      	movs	r3, #0
 8000462:	e03d      	b.n	80004e0 <Commander_UART_RxCpltHandler+0x98>
    }

    // store the received byte
    RETURN_ON_FALSE(osMessageQueuePut(com->rx.queue, &com->rx.data, 0, 0) == osOK,
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	6898      	ldr	r0, [r3, #8]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f103 010c 	add.w	r1, r3, #12
 800046e:	2300      	movs	r3, #0
 8000470:	2200      	movs	r2, #0
 8000472:	f00a fabb 	bl	800a9ec <osMessageQueuePut>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	bf14      	ite	ne
 800047c:	2301      	movne	r3, #1
 800047e:	2300      	moveq	r3, #0
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d00b      	beq.n	800049e <Commander_UART_RxCpltHandler+0x56>
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <Commander_UART_RxCpltHandler+0xa0>)
 8000488:	68d9      	ldr	r1, [r3, #12]
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <Commander_UART_RxCpltHandler+0xa4>)
 800048c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	235a      	movs	r3, #90	; 0x5a
 8000492:	4a17      	ldr	r2, [pc, #92]	; (80004f0 <Commander_UART_RxCpltHandler+0xa8>)
 8000494:	4817      	ldr	r0, [pc, #92]	; (80004f4 <Commander_UART_RxCpltHandler+0xac>)
 8000496:	f00e f9cd 	bl	800e834 <iprintf>
 800049a:	231c      	movs	r3, #28
 800049c:	e020      	b.n	80004e0 <Commander_UART_RxCpltHandler+0x98>
            RET_QUEUE_FULL,
            "Failed to put rx data");

    // continure receiving more data
    RETURN_ON_ERROR(Commander_HAL_Receive_Next(com), "Failed to start uart receive");
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff fe56 	bl	8000150 <Commander_HAL_Receive_Next>
 80004a4:	4603      	mov	r3, r0
 80004a6:	73fb      	strb	r3, [r7, #15]
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	bf14      	ite	ne
 80004ae:	2301      	movne	r3, #1
 80004b0:	2300      	moveq	r3, #0
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d012      	beq.n	80004de <Commander_UART_RxCpltHandler+0x96>
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <Commander_UART_RxCpltHandler+0xa0>)
 80004ba:	68d9      	ldr	r1, [r3, #12]
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	2b1c      	cmp	r3, #28
 80004c0:	d801      	bhi.n	80004c6 <Commander_UART_RxCpltHandler+0x7e>
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	e000      	b.n	80004c8 <Commander_UART_RxCpltHandler+0x80>
 80004c6:	2301      	movs	r3, #1
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <Commander_UART_RxCpltHandler+0xa4>)
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	235f      	movs	r3, #95	; 0x5f
 80004d2:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <Commander_UART_RxCpltHandler+0xa8>)
 80004d4:	4808      	ldr	r0, [pc, #32]	; (80004f8 <Commander_UART_RxCpltHandler+0xb0>)
 80004d6:	f00e f9ad 	bl	800e834 <iprintf>
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	e000      	b.n	80004e0 <Commander_UART_RxCpltHandler+0x98>

    return RET_OK;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000014 	.word	0x20000014
 80004f0:	0800f530 	.word	0x0800f530
 80004f4:	0800f724 	.word	0x0800f724
 80004f8:	0800f74c 	.word	0x0800f74c

080004fc <Commander_UART_TxCpltHandler>:

ret_t Commander_UART_TxCpltHandler(Commander_t *com, UART_HandleTypeDef *huart) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
    // ignore callbacks addressed to other uarts
    if (huart->Instance != com->config.huart->Instance) {
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	429a      	cmp	r2, r3
 8000512:	d001      	beq.n	8000518 <Commander_UART_TxCpltHandler+0x1c>
        return HAL_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	e00b      	b.n	8000530 <Commander_UART_TxCpltHandler+0x34>
    }

    // send the next message if available
    if (osMessageQueueGetCount(com->tx.queue) > 0) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4618      	mov	r0, r3
 800051e:	f00a fb4b 	bl	800abb8 <osMessageQueueGetCount>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <Commander_UART_TxCpltHandler+0x32>
        Commander_HAL_Transmit_Next(com);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff fe47 	bl	80001bc <Commander_HAL_Transmit_Next>
    }

    return RET_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <__io_putchar>:
        "Invalid verion",
        "Queue empty",
        "Queue full"
};

PUTCHAR_PROTOTYPE {
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b0a      	cmp	r3, #10
 8000544:	d10a      	bne.n	800055c <__io_putchar+0x24>
        uint8_t cr = '\r';
 8000546:	230d      	movs	r3, #13
 8000548:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(__log_uart, &cr, 1, HAL_MAX_DELAY);
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <__io_putchar+0x40>)
 800054c:	6818      	ldr	r0, [r3, #0]
 800054e:	f107 010f 	add.w	r1, r7, #15
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
 8000556:	2201      	movs	r2, #1
 8000558:	f004 fef2 	bl	8005340 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(__log_uart, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__io_putchar+0x40>)
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	1d39      	adds	r1, r7, #4
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	2201      	movs	r2, #1
 8000568:	f004 feea 	bl	8005340 <HAL_UART_Transmit>
    return ch;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000050 	.word	0x20000050

0800057c <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

LOG_SET_UART(&huart2);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    // invoke the corresponding callback
    Commander_UART_RxCpltHandler(&com, huart);
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <HAL_UART_RxCpltCallback+0x18>)
 8000588:	f7ff ff5e 	bl	8000448 <Commander_UART_RxCpltHandler>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000924 	.word	0x20000924

08000598 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    // invoke the corresponding callback
    Commander_UART_TxCpltHandler(&com, huart);
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <HAL_UART_TxCpltCallback+0x18>)
 80005a4:	f7ff ffaa 	bl	80004fc <Commander_UART_TxCpltHandler>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000924 	.word	0x20000924

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fe06 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f822 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f9e6 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c4:	f000 f9c6 	bl	8000954 <MX_DMA_Init>
  MX_TIM3_Init();
 80005c8:	f000 f8fa 	bl	80007c0 <MX_TIM3_Init>
  MX_SPI1_Init();
 80005cc:	f000 f874 	bl	80006b8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005d0:	f000 f8aa 	bl	8000728 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f994 	bl	8000900 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005d8:	f000 f968 	bl	80008ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005dc:	f009 fee8 	bl	800a3b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <main+0x44>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <main+0x48>)
 80005e6:	f009 ff49 	bl	800a47c <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <main+0x4c>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f009 ff10 	bl	800a414 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x40>
 80005f6:	bf00      	nop
 80005f8:	0800fa80 	.word	0x0800fa80
 80005fc:	080009ed 	.word	0x080009ed
 8000600:	20000690 	.word	0x20000690

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00e f871 	bl	800e6fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000650:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ff94 	bl	8003588 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000666:	f000 fa69 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2102      	movs	r1, #2
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fa00 	bl	8003a8c <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000692:	f000 fa53 	bl	8000b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000696:	2310      	movs	r3, #16
 8000698:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fbbb 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006ac:	f000 fa46 	bl	8000b3c <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_SPI1_Init+0x68>)
 80006be:	4a19      	ldr	r2, [pc, #100]	; (8000724 <MX_SPI1_Init+0x6c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x68>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_SPI1_Init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_SPI1_Init+0x68>)
 80006d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_SPI1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x68>)
 80006e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x68>)
 80006ee:	2210      	movs	r2, #16
 80006f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_SPI1_Init+0x68>)
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x68>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_SPI1_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x68>)
 8000706:	220a      	movs	r2, #10
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_SPI1_Init+0x68>)
 800070c:	f003 fc3c 	bl	8003f88 <HAL_SPI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000716:	f000 fa11 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000404 	.word	0x20000404
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TIM2_Init+0x94>)
 8000746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM2_Init+0x94>)
 800074e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000752:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_TIM2_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (10000 / LA_FADE_TICK_RATE) - 1;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM2_Init+0x94>)
 800075c:	22a5      	movs	r2, #165	; 0xa5
 800075e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM2_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM2_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_TIM2_Init+0x94>)
 800076e:	f003 fc8f 	bl	8004090 <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000778:	f000 f9e0 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM2_Init+0x94>)
 800078a:	f003 ffb7 	bl	80046fc <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 f9d2 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM2_Init+0x94>)
 80007a6:	f004 fd05 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f9c4 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000045c 	.word	0x2000045c

080007c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_TIM3_Init+0xe4>)
 80007f2:	4a2d      	ldr	r2, [pc, #180]	; (80008a8 <MX_TIM3_Init+0xe8>)
 80007f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = LA_TRANSFER_PRESCALAR - 1;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_TIM3_Init+0xe4>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_TIM3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18 - 1;
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000804:	2211      	movs	r2, #17
 8000806:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_TIM3_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000814:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000816:	f003 fc3b 	bl	8004090 <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000820:	f000 f98c 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	4619      	mov	r1, r3
 8000830:	481c      	ldr	r0, [pc, #112]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000832:	f003 ff63 	bl	80046fc <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800083c:	f000 f97e 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000840:	4818      	ldr	r0, [pc, #96]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000842:	f003 fcd3 	bl	80041ec <HAL_TIM_OC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800084c:	f000 f976 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000850:	2320      	movs	r3, #32
 8000852:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4619      	mov	r1, r3
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000860:	f004 fca8 	bl	80051b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800086a:	f000 f967 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800086e:	2330      	movs	r3, #48	; 0x30
 8000870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	220c      	movs	r2, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000886:	f003 fee1 	bl	800464c <HAL_TIM_OC_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000890:	f000 f954 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000896:	f000 fa37 	bl	8000d08 <HAL_TIM_MspPostInit>

}
 800089a:	bf00      	nop
 800089c:	3738      	adds	r7, #56	; 0x38
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000510 	.word	0x20000510
 80008a8:	40000400 	.word	0x40000400

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART1_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f004 fcdf 	bl	80052a6 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f925 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000608 	.word	0x20000608
 80008fc:	40013800 	.word	0x40013800

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <MX_USART2_UART_Init+0x50>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x4c>)
 8000938:	f004 fcb5 	bl	80052a6 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000942:	f000 f8fb 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000064c 	.word	0x2000064c
 8000950:	40004400 	.word	0x40004400

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_DMA_Init+0x38>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <MX_DMA_Init+0x38>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_DMA_Init+0x38>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2105      	movs	r1, #5
 8000976:	200d      	movs	r0, #13
 8000978:	f000 fd0d 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800097c:	200d      	movs	r0, #13
 800097e:	f000 fd26 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_GPIO_Init+0x58>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_GPIO_Init+0x58>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	6193      	str	r3, [r2, #24]
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_GPIO_Init+0x58>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_GPIO_Init+0x58>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <MX_GPIO_Init+0x58>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_GPIO_Init+0x58>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_GPIO_Init+0x58>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <MX_GPIO_Init+0x58>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_GPIO_Init+0x58>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000

080009ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b08b      	sub	sp, #44	; 0x2c
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009f4:	f00d f942 	bl	800dc7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  // init the laser array
  const LaserArray_Config_t la_config = {
 80009f8:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <StartDefaultTask+0xfc>)
 80009fa:	f107 040c 	add.w	r4, r7, #12
 80009fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          .hspi = &hspi1,
          .htim_transfer = &htim3,
          .htim_fade = &htim2,
          .rclk_channel = TIM_CHANNEL_4
  };
  HALT_ON_ERROR(LaserArray_Init(&la, &la_config),
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4838      	ldr	r0, [pc, #224]	; (8000aec <StartDefaultTask+0x100>)
 8000a0c:	f007 ff8a 	bl	8008924 <LaserArray_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	77fb      	strb	r3, [r7, #31]
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d014      	beq.n	8000a4e <StartDefaultTask+0x62>
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <StartDefaultTask+0x104>)
 8000a26:	68d9      	ldr	r1, [r3, #12]
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	2b1c      	cmp	r3, #28
 8000a2c:	d801      	bhi.n	8000a32 <StartDefaultTask+0x46>
 8000a2e:	7ffb      	ldrb	r3, [r7, #31]
 8000a30:	e000      	b.n	8000a34 <StartDefaultTask+0x48>
 8000a32:	2301      	movs	r3, #1
 8000a34:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <StartDefaultTask+0x108>)
 8000a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 8000a40:	4a2d      	ldr	r2, [pc, #180]	; (8000af8 <StartDefaultTask+0x10c>)
 8000a42:	482e      	ldr	r0, [pc, #184]	; (8000afc <StartDefaultTask+0x110>)
 8000a44:	f00d fef6 	bl	800e834 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
 8000a4c:	e7fe      	b.n	8000a4c <StartDefaultTask+0x60>
          "Failed to initialize laser array");

  // init the commander
  const Commander_Config_t com_config = {
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	; (8000b00 <StartDefaultTask+0x114>)
 8000a50:	60bb      	str	r3, [r7, #8]
          .huart = &huart1
  };
  HALT_ON_ERROR(Commander_Init(&com, &com_config),
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4619      	mov	r1, r3
 8000a58:	482a      	ldr	r0, [pc, #168]	; (8000b04 <StartDefaultTask+0x118>)
 8000a5a:	f7ff fc6f 	bl	800033c <Commander_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	77bb      	strb	r3, [r7, #30]
 8000a62:	7fbb      	ldrb	r3, [r7, #30]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf14      	ite	ne
 8000a68:	2301      	movne	r3, #1
 8000a6a:	2300      	moveq	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d014      	beq.n	8000a9c <StartDefaultTask+0xb0>
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <StartDefaultTask+0x104>)
 8000a74:	68d9      	ldr	r1, [r3, #12]
 8000a76:	7fbb      	ldrb	r3, [r7, #30]
 8000a78:	2b1c      	cmp	r3, #28
 8000a7a:	d801      	bhi.n	8000a80 <StartDefaultTask+0x94>
 8000a7c:	7fbb      	ldrb	r3, [r7, #30]
 8000a7e:	e000      	b.n	8000a82 <StartDefaultTask+0x96>
 8000a80:	2301      	movs	r3, #1
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <StartDefaultTask+0x108>)
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	f240 13f5 	movw	r3, #501	; 0x1f5
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <StartDefaultTask+0x10c>)
 8000a90:	481d      	ldr	r0, [pc, #116]	; (8000b08 <StartDefaultTask+0x11c>)
 8000a92:	f00d fecf 	bl	800e834 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a96:	b672      	cpsid	i
}
 8000a98:	bf00      	nop
 8000a9a:	e7fe      	b.n	8000a9a <StartDefaultTask+0xae>
          "Failed to initialize commander");

  /* Infinite loop */
  for(;;)
  {
      LaserArray_FadeBrightness(&la, 30, 63, 1000);
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	223f      	movs	r2, #63	; 0x3f
 8000aa2:	211e      	movs	r1, #30
 8000aa4:	4811      	ldr	r0, [pc, #68]	; (8000aec <StartDefaultTask+0x100>)
 8000aa6:	f008 f897 	bl	8008bd8 <LaserArray_FadeBrightness>
      LaserArray_FadeBrightness(&la, 31, 0, 1000);
 8000aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	211f      	movs	r1, #31
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <StartDefaultTask+0x100>)
 8000ab4:	f008 f890 	bl	8008bd8 <LaserArray_FadeBrightness>
      osDelay(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	f009 fd88 	bl	800a5d0 <osDelay>

      LaserArray_FadeBrightness(&la, 30, 0, 1000);
 8000ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	211e      	movs	r1, #30
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <StartDefaultTask+0x100>)
 8000aca:	f008 f885 	bl	8008bd8 <LaserArray_FadeBrightness>
      LaserArray_FadeBrightness(&la, 31, 63, 1000);
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	223f      	movs	r2, #63	; 0x3f
 8000ad4:	211f      	movs	r1, #31
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <StartDefaultTask+0x100>)
 8000ad8:	f008 f87e 	bl	8008bd8 <LaserArray_FadeBrightness>
      osDelay(1000);
 8000adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae0:	f009 fd76 	bl	800a5d0 <osDelay>
      LaserArray_FadeBrightness(&la, 30, 63, 1000);
 8000ae4:	e7da      	b.n	8000a9c <StartDefaultTask+0xb0>
 8000ae6:	bf00      	nop
 8000ae8:	0800f8ec 	.word	0x0800f8ec
 8000aec:	20000694 	.word	0x20000694
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000014 	.word	0x20000014
 8000af8:	0800f874 	.word	0x0800f874
 8000afc:	0800f888 	.word	0x0800f888
 8000b00:	20000608 	.word	0x20000608
 8000b04:	20000924 	.word	0x20000924
 8000b08:	0800f8bc 	.word	0x0800f8bc

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f000 fb69 	bl	80011f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  LaserArray_TIM_PeriodElapsedHandler(&la, htim);
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b26:	f008 f8bf 	bl	8008ca8 <LaserArray_TIM_PeriodElapsedHandler>

  /* USER CODE END Callback 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40000800 	.word	0x40000800
 8000b38:	20000694 	.word	0x20000694

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_MspInit+0x68>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_MspInit+0x68>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_MspInit+0x68>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_MspInit+0x68>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a11      	ldr	r2, [pc, #68]	; (8000bb0 <HAL_MspInit+0x68>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_MspInit+0x68>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	f06f 0001 	mvn.w	r0, #1
 8000b86:	f000 fc06 	bl	8001396 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_MspInit+0x6c>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_MspInit+0x6c>)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010000 	.word	0x40010000

08000bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <HAL_SPI_MspInit+0x70>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d123      	bne.n	8000c20 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_SPI_MspInit+0x74>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <HAL_SPI_MspInit+0x74>)
 8000bde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_SPI_MspInit+0x74>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_SPI_MspInit+0x74>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_SPI_MspInit+0x74>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_SPI_MspInit+0x74>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c08:	23a0      	movs	r3, #160	; 0xa0
 8000c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_SPI_MspInit+0x78>)
 8000c1c:	f000 fe84 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40013000 	.word	0x40013000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800

08000c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c44:	d114      	bne.n	8000c70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c46:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_TIM_Base_MspInit+0xc4>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	; (8000cf8 <HAL_TIM_Base_MspInit+0xc4>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <HAL_TIM_Base_MspInit+0xc4>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	201c      	movs	r0, #28
 8000c64:	f000 fb97 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c68:	201c      	movs	r0, #28
 8000c6a:	f000 fbb0 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c6e:	e03f      	b.n	8000cf0 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_TIM_Base_MspInit+0xc8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d13a      	bne.n	8000cf0 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <HAL_TIM_Base_MspInit+0xc4>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <HAL_TIM_Base_MspInit+0xc4>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_TIM_Base_MspInit+0xc4>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_TIM_Base_MspInit+0xd0>)
 8000c96:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000cbc:	2220      	movs	r2, #32
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000cca:	f000 fb8f 	bl	80013ec <HAL_DMA_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8000cd4:	f7ff ff32 	bl	8000b3c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000ce8:	621a      	str	r2, [r3, #32]
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <HAL_TIM_Base_MspInit+0xcc>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	200005c4 	.word	0x200005c4
 8000d04:	40020030 	.word	0x40020030

08000d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_TIM_MspPostInit+0x58>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d117      	bne.n	8000d58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_TIM_MspPostInit+0x5c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_TIM_MspPostInit+0x5c>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_TIM_MspPostInit+0x5c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_TIM_MspPostInit+0x60>)
 8000d54:	f000 fde8 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40000400 	.word	0x40000400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a3b      	ldr	r2, [pc, #236]	; (8000e74 <HAL_UART_MspInit+0x108>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d13a      	bne.n	8000e02 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8c:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a39      	ldr	r2, [pc, #228]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a33      	ldr	r2, [pc, #204]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	482a      	ldr	r0, [pc, #168]	; (8000e7c <HAL_UART_MspInit+0x110>)
 8000dd2:	f000 fda9 	bl	8001928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4824      	ldr	r0, [pc, #144]	; (8000e7c <HAL_UART_MspInit+0x110>)
 8000dec:	f000 fd9c 	bl	8001928 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2105      	movs	r1, #5
 8000df4:	2025      	movs	r0, #37	; 0x25
 8000df6:	f000 face 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dfa:	2025      	movs	r0, #37	; 0x25
 8000dfc:	f000 fae7 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e00:	e034      	b.n	8000e6c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_UART_MspInit+0x114>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d12f      	bne.n	8000e6c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e16:	61d3      	str	r3, [r2, #28]
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a13      	ldr	r2, [pc, #76]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_UART_MspInit+0x10c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480b      	ldr	r0, [pc, #44]	; (8000e7c <HAL_UART_MspInit+0x110>)
 8000e50:	f000 fd6a 	bl	8001928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e54:	2308      	movs	r3, #8
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_UART_MspInit+0x110>)
 8000e68:	f000 fd5e 	bl	8001928 <HAL_GPIO_Init>
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40013800 	.word	0x40013800
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40004400 	.word	0x40004400

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	; 0x38
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <HAL_InitTick+0xf0>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a35      	ldr	r2, [pc, #212]	; (8000f74 <HAL_InitTick+0xf0>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_InitTick+0xf0>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb2:	f107 0210 	add.w	r2, r7, #16
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 ff5f 	bl	8003d80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ecc:	f002 ff30 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8000ed0:	6378      	str	r0, [r7, #52]	; 0x34
 8000ed2:	e004      	b.n	8000ede <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ed4:	f002 ff2c 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_InitTick+0xf4>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_InitTick+0xf8>)
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <HAL_InitTick+0xfc>)
 8000ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <HAL_InitTick+0xf8>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000efa:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <HAL_InitTick+0xf8>)
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000f00:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <HAL_InitTick+0xf8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_InitTick+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_InitTick+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000f12:	481a      	ldr	r0, [pc, #104]	; (8000f7c <HAL_InitTick+0xf8>)
 8000f14:	f003 f8bc 	bl	8004090 <HAL_TIM_Base_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11b      	bne.n	8000f5e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <HAL_InitTick+0xf8>)
 8000f28:	f003 f90e 	bl	8004148 <HAL_TIM_Base_Start_IT>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d111      	bne.n	8000f5e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f3a:	201e      	movs	r0, #30
 8000f3c:	f000 fa47 	bl	80013ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b0f      	cmp	r3, #15
 8000f44:	d808      	bhi.n	8000f58 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f46:	2200      	movs	r2, #0
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	201e      	movs	r0, #30
 8000f4c:	f000 fa23 	bl	8001396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <HAL_InitTick+0x100>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e002      	b.n	8000f5e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }
  HAL_TIM_RegisterCallback(&htim4, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0x104>)
 8000f60:	210e      	movs	r1, #14
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <HAL_InitTick+0xf8>)
 8000f64:	f003 fce0 	bl	8004928 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8000f68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3738      	adds	r7, #56	; 0x38
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	431bde83 	.word	0x431bde83
 8000f7c:	20000940 	.word	0x20000940
 8000f80:	40000800 	.word	0x40000800
 8000f84:	20000058 	.word	0x20000058
 8000f88:	08000f8d 	.word	0x08000f8d

08000f8c <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000f94:	f000 f92e 	bl	80011f4 <HAL_IncTick>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
	...

08000fcc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA1_Channel3_IRQHandler+0x10>)
 8000fd2:	f000 fb75 	bl	80016c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200005c4 	.word	0x200005c4

08000fe0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fe6:	f000 ff54 	bl	8001e92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200028cc 	.word	0x200028cc

08000ff4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <TIM2_IRQHandler+0x10>)
 8000ffa:	f003 f9ff 	bl	80043fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000045c 	.word	0x2000045c

08001008 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <TIM4_IRQHandler+0x10>)
 800100e:	f003 f9f5 	bl	80043fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000940 	.word	0x20000940

0800101c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <USART1_IRQHandler+0x10>)
 8001022:	f004 fa93 	bl	800554c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000608 	.word	0x20000608

08001030 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e00a      	b.n	8001058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001042:	f3af 8000 	nop.w
 8001046:	4601      	mov	r1, r0
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf0      	blt.n	8001042 <_read+0x12>
  }

  return len;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e009      	b.n	8001090 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	60ba      	str	r2, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa57 	bl	8000538 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbf1      	blt.n	800107c <_write+0x12>
  }
  return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_close>:

int _close(int file)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c8:	605a      	str	r2, [r3, #4]
  return 0;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <_isatty>:

int _isatty(int file)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
	...

08001104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <_sbrk+0x5c>)
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_sbrk+0x60>)
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d102      	bne.n	8001126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <_sbrk+0x64>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <_sbrk+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	429a      	cmp	r2, r3
 8001132:	d207      	bcs.n	8001144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001134:	f00d f9b0 	bl	800e498 <__errno>
 8001138:	4603      	mov	r3, r0
 800113a:	220c      	movs	r2, #12
 800113c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <_sbrk+0x64>)
 8001154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20005000 	.word	0x20005000
 8001164:	00000400 	.word	0x00000400
 8001168:	200009f4 	.word	0x200009f4
 800116c:	20002dc8 	.word	0x20002dc8

08001170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117e:	490d      	ldr	r1, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001180:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001194:	4c0a      	ldr	r4, [pc, #40]	; (80011c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011a2:	f7ff ffe5 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f00d fa73 	bl	800e690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fa03 	bl	80005b4 <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	200003e8 	.word	0x200003e8
  ldr r2, =_sidata
 80011b8:	0800fb5c 	.word	0x0800fb5c
  ldr r2, =_sbss
 80011bc:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 80011c0:	20002dc8 	.word	0x20002dc8

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f8d1 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	200f      	movs	r0, #15
 80011e0:	f7ff fe50 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fcb0 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	2000005c 	.word	0x2000005c
 8001214:	200009f8 	.word	0x200009f8

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	200009f8 	.word	0x200009f8

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4906      	ldr	r1, [pc, #24]	; (80012c4 <__NVIC_EnableIRQ+0x34>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff4f 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff64 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ffb2 	bl	800131c <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff81 	bl	80012c8 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff57 	bl	8001290 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e043      	b.n	800148a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_DMA_Init+0xa8>)
 800140a:	4413      	add	r3, r2
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <HAL_DMA_Init+0xac>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1f      	ldr	r2, [pc, #124]	; (800149c <HAL_DMA_Init+0xb0>)
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001436:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800143a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	bffdfff8 	.word	0xbffdfff8
 8001498:	cccccccd 	.word	0xcccccccd
 800149c:	40020000 	.word	0x40020000

080014a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_DMA_Start_IT+0x20>
 80014bc:	2302      	movs	r3, #2
 80014be:	e04a      	b.n	8001556 <HAL_DMA_Start_IT+0xb6>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d13a      	bne.n	8001548 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2202      	movs	r2, #2
 80014d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f9e8 	bl	80018cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 020e 	orr.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e00f      	b.n	8001536 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0204 	bic.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 020a 	orr.w	r2, r2, #10
 8001534:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0201 	orr.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e005      	b.n	8001554 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001550:	2302      	movs	r3, #2
 8001552:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001570:	2b02      	cmp	r3, #2
 8001572:	d008      	beq.n	8001586 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2204      	movs	r2, #4
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e020      	b.n	80015c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 020e 	bic.w	r2, r2, #14
 8001594:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d005      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2204      	movs	r2, #4
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e051      	b.n	800169a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 020e 	bic.w	r2, r2, #14
 8001604:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <HAL_DMA_Abort_IT+0xd0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d029      	beq.n	8001674 <HAL_DMA_Abort_IT+0xa0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <HAL_DMA_Abort_IT+0xd4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d022      	beq.n	8001670 <HAL_DMA_Abort_IT+0x9c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <HAL_DMA_Abort_IT+0xd8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d01a      	beq.n	800166a <HAL_DMA_Abort_IT+0x96>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_DMA_Abort_IT+0xdc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d012      	beq.n	8001664 <HAL_DMA_Abort_IT+0x90>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_DMA_Abort_IT+0xe0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00a      	beq.n	800165e <HAL_DMA_Abort_IT+0x8a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <HAL_DMA_Abort_IT+0xe4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d102      	bne.n	8001658 <HAL_DMA_Abort_IT+0x84>
 8001652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001656:	e00e      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800165c:	e00b      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 800165e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001662:	e008      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	e005      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	e002      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001670:	2310      	movs	r3, #16
 8001672:	e000      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001674:	2301      	movs	r3, #1
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_DMA_Abort_IT+0xe8>)
 8001678:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    } 
  }
  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020008 	.word	0x40020008
 80016a8:	4002001c 	.word	0x4002001c
 80016ac:	40020030 	.word	0x40020030
 80016b0:	40020044 	.word	0x40020044
 80016b4:	40020058 	.word	0x40020058
 80016b8:	4002006c 	.word	0x4002006c
 80016bc:	40020000 	.word	0x40020000

080016c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	2204      	movs	r2, #4
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d04f      	beq.n	8001788 <HAL_DMA_IRQHandler+0xc8>
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d04a      	beq.n	8001788 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0204 	bic.w	r2, r2, #4
 800170e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a66      	ldr	r2, [pc, #408]	; (80018b0 <HAL_DMA_IRQHandler+0x1f0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d029      	beq.n	800176e <HAL_DMA_IRQHandler+0xae>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a65      	ldr	r2, [pc, #404]	; (80018b4 <HAL_DMA_IRQHandler+0x1f4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d022      	beq.n	800176a <HAL_DMA_IRQHandler+0xaa>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_DMA_IRQHandler+0x1f8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d01a      	beq.n	8001764 <HAL_DMA_IRQHandler+0xa4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a62      	ldr	r2, [pc, #392]	; (80018bc <HAL_DMA_IRQHandler+0x1fc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d012      	beq.n	800175e <HAL_DMA_IRQHandler+0x9e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a60      	ldr	r2, [pc, #384]	; (80018c0 <HAL_DMA_IRQHandler+0x200>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00a      	beq.n	8001758 <HAL_DMA_IRQHandler+0x98>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5f      	ldr	r2, [pc, #380]	; (80018c4 <HAL_DMA_IRQHandler+0x204>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d102      	bne.n	8001752 <HAL_DMA_IRQHandler+0x92>
 800174c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001750:	e00e      	b.n	8001770 <HAL_DMA_IRQHandler+0xb0>
 8001752:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001756:	e00b      	b.n	8001770 <HAL_DMA_IRQHandler+0xb0>
 8001758:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800175c:	e008      	b.n	8001770 <HAL_DMA_IRQHandler+0xb0>
 800175e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001762:	e005      	b.n	8001770 <HAL_DMA_IRQHandler+0xb0>
 8001764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001768:	e002      	b.n	8001770 <HAL_DMA_IRQHandler+0xb0>
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	e000      	b.n	8001770 <HAL_DMA_IRQHandler+0xb0>
 800176e:	2304      	movs	r3, #4
 8001770:	4a55      	ldr	r2, [pc, #340]	; (80018c8 <HAL_DMA_IRQHandler+0x208>)
 8001772:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8094 	beq.w	80018a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001786:	e08e      	b.n	80018a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2202      	movs	r2, #2
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d056      	beq.n	8001846 <HAL_DMA_IRQHandler+0x186>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d051      	beq.n	8001846 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0320 	and.w	r3, r3, #32
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10b      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020a 	bic.w	r2, r2, #10
 80017be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <HAL_DMA_IRQHandler+0x1f0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d029      	beq.n	8001826 <HAL_DMA_IRQHandler+0x166>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_DMA_IRQHandler+0x1f4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d022      	beq.n	8001822 <HAL_DMA_IRQHandler+0x162>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a35      	ldr	r2, [pc, #212]	; (80018b8 <HAL_DMA_IRQHandler+0x1f8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01a      	beq.n	800181c <HAL_DMA_IRQHandler+0x15c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a34      	ldr	r2, [pc, #208]	; (80018bc <HAL_DMA_IRQHandler+0x1fc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d012      	beq.n	8001816 <HAL_DMA_IRQHandler+0x156>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <HAL_DMA_IRQHandler+0x200>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00a      	beq.n	8001810 <HAL_DMA_IRQHandler+0x150>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a31      	ldr	r2, [pc, #196]	; (80018c4 <HAL_DMA_IRQHandler+0x204>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d102      	bne.n	800180a <HAL_DMA_IRQHandler+0x14a>
 8001804:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001808:	e00e      	b.n	8001828 <HAL_DMA_IRQHandler+0x168>
 800180a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800180e:	e00b      	b.n	8001828 <HAL_DMA_IRQHandler+0x168>
 8001810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001814:	e008      	b.n	8001828 <HAL_DMA_IRQHandler+0x168>
 8001816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800181a:	e005      	b.n	8001828 <HAL_DMA_IRQHandler+0x168>
 800181c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001820:	e002      	b.n	8001828 <HAL_DMA_IRQHandler+0x168>
 8001822:	2320      	movs	r3, #32
 8001824:	e000      	b.n	8001828 <HAL_DMA_IRQHandler+0x168>
 8001826:	2302      	movs	r3, #2
 8001828:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <HAL_DMA_IRQHandler+0x208>)
 800182a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	2b00      	cmp	r3, #0
 800183a:	d034      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001844:	e02f      	b.n	80018a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2208      	movs	r2, #8
 800184c:	409a      	lsls	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d028      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x1e8>
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d023      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 020e 	bic.w	r2, r2, #14
 800186e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
    }
  }
  return;
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
}
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40020008 	.word	0x40020008
 80018b4:	4002001c 	.word	0x4002001c
 80018b8:	40020030 	.word	0x40020030
 80018bc:	40020044 	.word	0x40020044
 80018c0:	40020058 	.word	0x40020058
 80018c4:	4002006c 	.word	0x4002006c
 80018c8:	40020000 	.word	0x40020000

080018cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	2101      	movs	r1, #1
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d108      	bne.n	800190c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800190a:	e007      	b.n	800191c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b08b      	sub	sp, #44	; 0x2c
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e169      	b.n	8001c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800193c:	2201      	movs	r2, #1
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	429a      	cmp	r2, r3
 8001956:	f040 8158 	bne.w	8001c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4a9a      	ldr	r2, [pc, #616]	; (8001bc8 <HAL_GPIO_Init+0x2a0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d05e      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001964:	4a98      	ldr	r2, [pc, #608]	; (8001bc8 <HAL_GPIO_Init+0x2a0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d875      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800196a:	4a98      	ldr	r2, [pc, #608]	; (8001bcc <HAL_GPIO_Init+0x2a4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d058      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001970:	4a96      	ldr	r2, [pc, #600]	; (8001bcc <HAL_GPIO_Init+0x2a4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d86f      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001976:	4a96      	ldr	r2, [pc, #600]	; (8001bd0 <HAL_GPIO_Init+0x2a8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d052      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 800197c:	4a94      	ldr	r2, [pc, #592]	; (8001bd0 <HAL_GPIO_Init+0x2a8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d869      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 8001982:	4a94      	ldr	r2, [pc, #592]	; (8001bd4 <HAL_GPIO_Init+0x2ac>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d04c      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001988:	4a92      	ldr	r2, [pc, #584]	; (8001bd4 <HAL_GPIO_Init+0x2ac>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d863      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800198e:	4a92      	ldr	r2, [pc, #584]	; (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d046      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
 8001994:	4a90      	ldr	r2, [pc, #576]	; (8001bd8 <HAL_GPIO_Init+0x2b0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d85d      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 800199a:	2b12      	cmp	r3, #18
 800199c:	d82a      	bhi.n	80019f4 <HAL_GPIO_Init+0xcc>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d859      	bhi.n	8001a56 <HAL_GPIO_Init+0x12e>
 80019a2:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <HAL_GPIO_Init+0x80>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	08001a23 	.word	0x08001a23
 80019ac:	080019fd 	.word	0x080019fd
 80019b0:	08001a0f 	.word	0x08001a0f
 80019b4:	08001a51 	.word	0x08001a51
 80019b8:	08001a57 	.word	0x08001a57
 80019bc:	08001a57 	.word	0x08001a57
 80019c0:	08001a57 	.word	0x08001a57
 80019c4:	08001a57 	.word	0x08001a57
 80019c8:	08001a57 	.word	0x08001a57
 80019cc:	08001a57 	.word	0x08001a57
 80019d0:	08001a57 	.word	0x08001a57
 80019d4:	08001a57 	.word	0x08001a57
 80019d8:	08001a57 	.word	0x08001a57
 80019dc:	08001a57 	.word	0x08001a57
 80019e0:	08001a57 	.word	0x08001a57
 80019e4:	08001a57 	.word	0x08001a57
 80019e8:	08001a57 	.word	0x08001a57
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a19 	.word	0x08001a19
 80019f4:	4a79      	ldr	r2, [pc, #484]	; (8001bdc <HAL_GPIO_Init+0x2b4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019fa:	e02c      	b.n	8001a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e029      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e024      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	3308      	adds	r3, #8
 8001a14:	623b      	str	r3, [r7, #32]
          break;
 8001a16:	e01f      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	623b      	str	r3, [r7, #32]
          break;
 8001a20:	e01a      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	623b      	str	r3, [r7, #32]
          break;
 8001a2e:	e013      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	611a      	str	r2, [r3, #16]
          break;
 8001a42:	e009      	b.n	8001a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a44:	2308      	movs	r3, #8
 8001a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	615a      	str	r2, [r3, #20]
          break;
 8001a4e:	e003      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
          break;
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x130>
          break;
 8001a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2bff      	cmp	r3, #255	; 0xff
 8001a5c:	d801      	bhi.n	8001a62 <HAL_GPIO_Init+0x13a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_Init+0x13e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3304      	adds	r3, #4
 8001a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2bff      	cmp	r3, #255	; 0xff
 8001a6c:	d802      	bhi.n	8001a74 <HAL_GPIO_Init+0x14c>
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	e002      	b.n	8001a7a <HAL_GPIO_Init+0x152>
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	3b08      	subs	r3, #8
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	210f      	movs	r1, #15
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	6a39      	ldr	r1, [r7, #32]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	431a      	orrs	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b1 	beq.w	8001c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	; (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6193      	str	r3, [r2, #24]
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_GPIO_Init+0x2b8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac0:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_GPIO_Init+0x2bc>)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a40      	ldr	r2, [pc, #256]	; (8001be8 <HAL_GPIO_Init+0x2c0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d013      	beq.n	8001b14 <HAL_GPIO_Init+0x1ec>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a3f      	ldr	r2, [pc, #252]	; (8001bec <HAL_GPIO_Init+0x2c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00d      	beq.n	8001b10 <HAL_GPIO_Init+0x1e8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a3e      	ldr	r2, [pc, #248]	; (8001bf0 <HAL_GPIO_Init+0x2c8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d007      	beq.n	8001b0c <HAL_GPIO_Init+0x1e4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a3d      	ldr	r2, [pc, #244]	; (8001bf4 <HAL_GPIO_Init+0x2cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_GPIO_Init+0x1e0>
 8001b04:	2303      	movs	r3, #3
 8001b06:	e006      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b08:	2304      	movs	r3, #4
 8001b0a:	e004      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_GPIO_Init+0x1ee>
 8001b14:	2300      	movs	r3, #0
 8001b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b18:	f002 0203 	and.w	r2, r2, #3
 8001b1c:	0092      	lsls	r2, r2, #2
 8001b1e:	4093      	lsls	r3, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b26:	492f      	ldr	r1, [pc, #188]	; (8001be4 <HAL_GPIO_Init+0x2bc>)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	492c      	ldr	r1, [pc, #176]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4928      	ldr	r1, [pc, #160]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	491e      	ldr	r1, [pc, #120]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4918      	ldr	r1, [pc, #96]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b9e:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4914      	ldr	r1, [pc, #80]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d021      	beq.n	8001bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	490e      	ldr	r1, [pc, #56]	; (8001bf8 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60cb      	str	r3, [r1, #12]
 8001bc4:	e021      	b.n	8001c0a <HAL_GPIO_Init+0x2e2>
 8001bc6:	bf00      	nop
 8001bc8:	10320000 	.word	0x10320000
 8001bcc:	10310000 	.word	0x10310000
 8001bd0:	10220000 	.word	0x10220000
 8001bd4:	10210000 	.word	0x10210000
 8001bd8:	10120000 	.word	0x10120000
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40011400 	.word	0x40011400
 8001bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_GPIO_Init+0x304>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4909      	ldr	r1, [pc, #36]	; (8001c2c <HAL_GPIO_Init+0x304>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f47f ae8e 	bne.w	800193c <HAL_GPIO_Init+0x14>
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	372c      	adds	r7, #44	; 0x2c
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	b08b      	sub	sp, #44	; 0x2c
 8001c34:	af06      	add	r7, sp, #24
 8001c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0fd      	b.n	8001e3e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f00c f9a0 	bl	800df9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f8b5 	bl	8005dd8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	687e      	ldr	r6, [r7, #4]
 8001c76:	466d      	mov	r5, sp
 8001c78:	f106 0410 	add.w	r4, r6, #16
 8001c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	1d33      	adds	r3, r6, #4
 8001c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c88:	6838      	ldr	r0, [r7, #0]
 8001c8a:	f004 f87f 	bl	8005d8c <USB_CoreInit>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0ce      	b.n	8001e3e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 f8b0 	bl	8005e0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e04c      	b.n	8001d4c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	b298      	uxth	r0, r3
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	3336      	adds	r3, #54	; 0x36
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	440b      	add	r3, r1
 8001d04:	3303      	adds	r3, #3
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	3338      	adds	r3, #56	; 0x38
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	333c      	adds	r3, #60	; 0x3c
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3340      	adds	r3, #64	; 0x40
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3ad      	bcc.n	8001cb2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e044      	b.n	8001de6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	3301      	adds	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3b5      	bcc.n	8001d5c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	687e      	ldr	r6, [r7, #4]
 8001df8:	466d      	mov	r5, sp
 8001dfa:	f106 0410 	add.w	r4, r6, #16
 8001dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	602b      	str	r3, [r5, #0]
 8001e06:	1d33      	adds	r3, r6, #4
 8001e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0a:	6838      	ldr	r0, [r7, #0]
 8001e0c:	f004 f80a 	bl	8005e24 <USB_DevInit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00d      	b.n	8001e3e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 fcbc 	bl	80087b4 <USB_DevDisconnect>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_Start+0x16>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e016      	b.n	8001e8a <HAL_PCD_Start+0x44>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 ff9f 	bl	8005dac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f00c fada 	bl	800e42a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f006 fc90 	bl	80087a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b088      	sub	sp, #32
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f006 fc92 	bl	80087c8 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eae:	d102      	bne.n	8001eb6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fb48 	bl	8002546 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 fc84 	bl	80087c8 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eca:	d112      	bne.n	8001ef2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f00c f8d4 	bl	800e092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eea:	2100      	movs	r1, #0
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f923 	bl	8002138 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f006 fc66 	bl	80087c8 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f06:	d10b      	bne.n	8001f20 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f006 fc4f 	bl	80087c8 <USB_ReadInterrupts>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f34:	d10b      	bne.n	8001f4e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f006 fc38 	bl	80087c8 <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f62:	d126      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0208 	bic.w	r2, r2, #8
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f00c f8b5 	bl	800e104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fac:	b292      	uxth	r2, r2
 8001fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f006 fc06 	bl	80087c8 <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fc6:	f040 8082 	bne.w	80020ce <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	77fb      	strb	r3, [r7, #31]
 8001fce:	e010      	b.n	8001ff2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	7ffb      	ldrb	r3, [r7, #31]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	441a      	add	r2, r3
 8001fdc:	7ffb      	ldrb	r3, [r7, #31]
 8001fde:	8812      	ldrh	r2, [r2, #0]
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	3320      	adds	r3, #32
 8001fe6:	443b      	add	r3, r7
 8001fe8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	77fb      	strb	r3, [r7, #31]
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
 8001ff4:	2b07      	cmp	r3, #7
 8001ff6:	d9eb      	bls.n	8001fd0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	b292      	uxth	r2, r2
 8002024:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002028:	bf00      	nop
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002032:	b29b      	uxth	r3, r3
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f6      	beq.n	800202a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204e:	b292      	uxth	r2, r2
 8002050:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	77fb      	strb	r3, [r7, #31]
 8002058:	e00f      	b.n	800207a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800205a:	7ffb      	ldrb	r3, [r7, #31]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	4611      	mov	r1, r2
 8002062:	7ffa      	ldrb	r2, [r7, #31]
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	440a      	add	r2, r1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	3320      	adds	r3, #32
 800206c:	443b      	add	r3, r7
 800206e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002072:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002074:	7ffb      	ldrb	r3, [r7, #31]
 8002076:	3301      	adds	r3, #1
 8002078:	77fb      	strb	r3, [r7, #31]
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	2b07      	cmp	r3, #7
 800207e:	d9ec      	bls.n	800205a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0208 	orr.w	r2, r2, #8
 8002092:	b292      	uxth	r2, r2
 8002094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020aa:	b292      	uxth	r2, r2
 80020ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0204 	orr.w	r2, r2, #4
 80020c2:	b292      	uxth	r2, r2
 80020c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f00c f801 	bl	800e0d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f006 fb78 	bl	80087c8 <USB_ReadInterrupts>
 80020d8:	4603      	mov	r3, r0
 80020da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e2:	d10e      	bne.n	8002102 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020f6:	b292      	uxth	r2, r2
 80020f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f00b ffba 	bl	800e076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f006 fb5e 	bl	80087c8 <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002116:	d10b      	bne.n	8002130 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800212a:	b292      	uxth	r2, r2
 800212c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002130:	bf00      	nop
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_SetAddress+0x1a>
 800214e:	2302      	movs	r3, #2
 8002150:	e013      	b.n	800217a <HAL_PCD_SetAddress+0x42>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f006 fb05 	bl	800877a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	4608      	mov	r0, r1
 800218c:	4611      	mov	r1, r2
 800218e:	461a      	mov	r2, r3
 8002190:	4603      	mov	r3, r0
 8002192:	70fb      	strb	r3, [r7, #3]
 8002194:	460b      	mov	r3, r1
 8002196:	803b      	strh	r3, [r7, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da0e      	bge.n	80021c6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	705a      	strb	r2, [r3, #1]
 80021c4:	e00e      	b.n	80021e4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 0207 	and.w	r2, r3, #7
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021f0:	883a      	ldrh	r2, [r7, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	78ba      	ldrb	r2, [r7, #2]
 80021fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800220e:	78bb      	ldrb	r3, [r7, #2]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d102      	bne.n	800221a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_PCD_EP_Open+0xa6>
 8002224:	2302      	movs	r3, #2
 8002226:	e00e      	b.n	8002246 <HAL_PCD_EP_Open+0xc4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fe14 	bl	8005e64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002244:	7afb      	ldrb	r3, [r7, #11]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800225a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da0e      	bge.n	8002280 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	705a      	strb	r2, [r3, #1]
 800227e:	e00e      	b.n	800229e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_PCD_EP_Close+0x6a>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e00e      	b.n	80022d6 <HAL_PCD_EP_Close+0x88>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68f9      	ldr	r1, [r7, #12]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f004 f936 	bl	8006538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	460b      	mov	r3, r1
 80022ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	7afb      	ldrb	r3, [r7, #11]
 80022f0:	f003 0207 	and.w	r2, r3, #7
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2200      	movs	r2, #0
 800231c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231e:	7afb      	ldrb	r3, [r7, #11]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	b2da      	uxtb	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fae8 	bl	8006910 <USB_EPStartXfer>
 8002340:	e005      	b.n	800234e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fae1 	bl	8006910 <USB_EPStartXfer>
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	460b      	mov	r3, r1
 8002366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2201      	movs	r2, #1
 80023a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 faa5 	bl	8006910 <USB_EPStartXfer>
 80023c6:	e005      	b.n	80023d4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6979      	ldr	r1, [r7, #20]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 fa9e 	bl	8006910 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	f003 0207 	and.w	r2, r3, #7
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d901      	bls.n	80023fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e04c      	b.n	8002496 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	da0e      	bge.n	8002422 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	705a      	strb	r2, [r3, #1]
 8002420:	e00c      	b.n	800243c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002422:	78fa      	ldrb	r2, [r7, #3]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002442:	78fb      	ldrb	r3, [r7, #3]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	b2da      	uxtb	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_PCD_EP_SetStall+0x7e>
 8002458:	2302      	movs	r3, #2
 800245a:	e01c      	b.n	8002496 <HAL_PCD_EP_SetStall+0xb8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	4618      	mov	r0, r3
 800246c:	f006 f888 	bl	8008580 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f006 f9ad 	bl	80087e6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	460b      	mov	r3, r1
 80024a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 020f 	and.w	r2, r3, #15
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d901      	bls.n	80024bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e040      	b.n	800253e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	da0e      	bge.n	80024e2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	705a      	strb	r2, [r3, #1]
 80024e0:	e00e      	b.n	8002500 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	f003 0207 	and.w	r2, r3, #7
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_PCD_EP_ClrStall+0x82>
 800251c:	2302      	movs	r3, #2
 800251e:	e00e      	b.n	800253e <HAL_PCD_EP_ClrStall+0xa0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	4618      	mov	r0, r3
 8002530:	f006 f876 	bl	8008620 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b08e      	sub	sp, #56	; 0x38
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800254e:	e2ec      	b.n	8002b2a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002558:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800255a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002566:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 8161 	bne.w	8002832 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	2b00      	cmp	r3, #0
 8002578:	d152      	bne.n	8002620 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	81fb      	strh	r3, [r7, #14]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259a:	b29b      	uxth	r3, r3
 800259c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3328      	adds	r3, #40	; 0x28
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	3302      	adds	r3, #2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	441a      	add	r2, r3
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025de:	2100      	movs	r1, #0
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f00b fd2e 	bl	800e042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 829b 	beq.w	8002b2a <PCD_EP_ISR_Handler+0x5e4>
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 8296 	bne.w	8002b2a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800260a:	b2da      	uxtb	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	b292      	uxth	r2, r2
 8002612:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800261e:	e284      	b.n	8002b2a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002630:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002636:	2b00      	cmp	r3, #0
 8002638:	d034      	beq.n	80026a4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	4413      	add	r3, r2
 800264e:	3306      	adds	r3, #6
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002678:	b29b      	uxth	r3, r3
 800267a:	f006 f904 	bl	8008886 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29a      	uxth	r2, r3
 8002686:	f640 738f 	movw	r3, #3983	; 0xf8f
 800268a:	4013      	ands	r3, r2
 800268c:	823b      	strh	r3, [r7, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	8a3a      	ldrh	r2, [r7, #16]
 8002694:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002698:	b292      	uxth	r2, r2
 800269a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f00b fca3 	bl	800dfe8 <HAL_PCD_SetupStageCallback>
 80026a2:	e242      	b.n	8002b2a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f280 823e 	bge.w	8002b2a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026ba:	4013      	ands	r3, r2
 80026bc:	83bb      	strh	r3, [r7, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	8bba      	ldrh	r2, [r7, #28]
 80026c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c8:	b292      	uxth	r2, r2
 80026ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	3306      	adds	r3, #6
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d019      	beq.n	8002734 <PCD_EP_ISR_Handler+0x1ee>
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	6959      	ldr	r1, [r3, #20]
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002718:	b29b      	uxth	r3, r3
 800271a:	f006 f8b4 	bl	8008886 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	441a      	add	r2, r3
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800272c:	2100      	movs	r1, #0
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f00b fc6c 	bl	800e00c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29b      	uxth	r3, r3
 800273c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 81f2 	bne.w	8002b2a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002754:	b29b      	uxth	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d112      	bne.n	8002794 <PCD_EP_ISR_Handler+0x24e>
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002778:	b29a      	uxth	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	801a      	strh	r2, [r3, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278c:	b29a      	uxth	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	e02f      	b.n	80027f4 <PCD_EP_ISR_Handler+0x2ae>
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b3e      	cmp	r3, #62	; 0x3e
 800279a:	d813      	bhi.n	80027c4 <PCD_EP_ISR_Handler+0x27e>
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <PCD_EP_ISR_Handler+0x270>
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	3301      	adds	r3, #1
 80027b4:	633b      	str	r3, [r7, #48]	; 0x30
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	029b      	lsls	r3, r3, #10
 80027bc:	b29a      	uxth	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	801a      	strh	r2, [r3, #0]
 80027c2:	e017      	b.n	80027f4 <PCD_EP_ISR_Handler+0x2ae>
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <PCD_EP_ISR_Handler+0x298>
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	3b01      	subs	r3, #1
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	827b      	strh	r3, [r7, #18]
 8002806:	8a7b      	ldrh	r3, [r7, #18]
 8002808:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800280c:	827b      	strh	r3, [r7, #18]
 800280e:	8a7b      	ldrh	r3, [r7, #18]
 8002810:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002814:	827b      	strh	r3, [r7, #18]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	8a7b      	ldrh	r3, [r7, #18]
 800281c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282c:	b29b      	uxth	r3, r3
 800282e:	8013      	strh	r3, [r2, #0]
 8002830:	e17b      	b.n	8002b2a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002844:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002848:	2b00      	cmp	r3, #0
 800284a:	f280 80ea 	bge.w	8002a22 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29a      	uxth	r2, r3
 8002860:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002864:	4013      	ands	r3, r2
 8002866:	853b      	strh	r3, [r7, #40]	; 0x28
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287c:	b292      	uxth	r2, r2
 800287e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002880:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	7b1b      	ldrb	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d122      	bne.n	80028e4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	3306      	adds	r3, #6
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80028c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	6959      	ldr	r1, [r3, #20]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	88da      	ldrh	r2, [r3, #6]
 80028dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028de:	f005 ffd2 	bl	8008886 <USB_ReadPMA>
 80028e2:	e07c      	b.n	80029de <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	78db      	ldrb	r3, [r3, #3]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d108      	bne.n	80028fe <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028ee:	461a      	mov	r2, r3
 80028f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f927 	bl	8002b46 <HAL_PCD_EP_DB_Receive>
 80028f8:	4603      	mov	r3, r0
 80028fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028fc:	e06f      	b.n	80029de <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002918:	847b      	strh	r3, [r7, #34]	; 0x22
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	441a      	add	r2, r3
 8002928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800292a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800292e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800293a:	b29b      	uxth	r3, r3
 800293c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d021      	beq.n	800299c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002960:	b29b      	uxth	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	3302      	adds	r3, #2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002980:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002982:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02a      	beq.n	80029de <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	6959      	ldr	r1, [r3, #20]
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	891a      	ldrh	r2, [r3, #8]
 8002994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002996:	f005 ff76 	bl	8008886 <USB_ReadPMA>
 800299a:	e020      	b.n	80029de <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	3306      	adds	r3, #6
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029c4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80029c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	6959      	ldr	r1, [r3, #20]
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	895a      	ldrh	r2, [r3, #10]
 80029d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029da:	f005 ff54 	bl	8008886 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029e4:	441a      	add	r2, r3
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029f0:	441a      	add	r2, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <PCD_EP_ISR_Handler+0x4c2>
 80029fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d206      	bcs.n	8002a16 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f00b fafc 	bl	800e00c <HAL_PCD_DataOutStageCallback>
 8002a14:	e005      	b.n	8002a22 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 ff77 	bl	8006910 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d07e      	beq.n	8002b2a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	843b      	strh	r3, [r7, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	8c3b      	ldrh	r3, [r7, #32]
 8002a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	78db      	ldrb	r3, [r3, #3]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d00c      	beq.n	8002a9a <PCD_EP_ISR_Handler+0x554>
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	78db      	ldrb	r3, [r3, #3]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d146      	bne.n	8002b1e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d141      	bne.n	8002b1e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	8bfb      	ldrh	r3, [r7, #30]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d906      	bls.n	8002adc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	8bfb      	ldrh	r3, [r7, #30]
 8002ad4:	1ad2      	subs	r2, r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	619a      	str	r2, [r3, #24]
 8002ada:	e002      	b.n	8002ae2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f00b faa6 	bl	800e042 <HAL_PCD_DataInStageCallback>
 8002af6:	e018      	b.n	8002b2a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	8bfb      	ldrh	r3, [r7, #30]
 8002afe:	441a      	add	r2, r3
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	8bfb      	ldrh	r3, [r7, #30]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fefa 	bl	8006910 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002b1c:	e005      	b.n	8002b2a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b20:	461a      	mov	r2, r3
 8002b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f91b 	bl	8002d60 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	b21b      	sxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f6ff ad0a 	blt.w	8002550 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3738      	adds	r7, #56	; 0x38
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b088      	sub	sp, #32
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	4613      	mov	r3, r2
 8002b52:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d07e      	beq.n	8002c5c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	3302      	adds	r3, #2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b86:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	8b7b      	ldrh	r3, [r7, #26]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d306      	bcc.n	8002ba0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	8b7b      	ldrh	r3, [r7, #26]
 8002b98:	1ad2      	subs	r2, r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	619a      	str	r2, [r3, #24]
 8002b9e:	e002      	b.n	8002ba6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d123      	bne.n	8002bf6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc8:	833b      	strh	r3, [r7, #24]
 8002bca:	8b3b      	ldrh	r3, [r7, #24]
 8002bcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bd0:	833b      	strh	r3, [r7, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	8b3b      	ldrh	r3, [r7, #24]
 8002be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01f      	beq.n	8002c40 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	82fb      	strh	r3, [r7, #22]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c40:	8b7b      	ldrh	r3, [r7, #26]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8087 	beq.w	8002d56 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	6959      	ldr	r1, [r3, #20]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	891a      	ldrh	r2, [r3, #8]
 8002c54:	8b7b      	ldrh	r3, [r7, #26]
 8002c56:	f005 fe16 	bl	8008886 <USB_ReadPMA>
 8002c5a:	e07c      	b.n	8002d56 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3306      	adds	r3, #6
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	8b7b      	ldrh	r3, [r7, #26]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d306      	bcc.n	8002c9e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	8b7b      	ldrh	r3, [r7, #26]
 8002c96:	1ad2      	subs	r2, r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	619a      	str	r2, [r3, #24]
 8002c9c:	e002      	b.n	8002ca4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d123      	bne.n	8002cf4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	83fb      	strh	r3, [r7, #30]
 8002cc8:	8bfb      	ldrh	r3, [r7, #30]
 8002cca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cce:	83fb      	strh	r3, [r7, #30]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	8bfb      	ldrh	r3, [r7, #30]
 8002ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d11f      	bne.n	8002d3e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d18:	83bb      	strh	r3, [r7, #28]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	441a      	add	r2, r3
 8002d28:	8bbb      	ldrh	r3, [r7, #28]
 8002d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d3e:	8b7b      	ldrh	r3, [r7, #26]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6959      	ldr	r1, [r3, #20]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	895a      	ldrh	r2, [r3, #10]
 8002d50:	8b7b      	ldrh	r3, [r7, #26]
 8002d52:	f005 fd98 	bl	8008886 <USB_ReadPMA>
    }
  }

  return count;
 8002d56:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b0a2      	sub	sp, #136	; 0x88
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 81c7 	beq.w	8003108 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d907      	bls.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dba:	1ad2      	subs	r2, r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	619a      	str	r2, [r3, #24]
 8002dc0:	e002      	b.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 80b9 	bne.w	8002f44 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	785b      	ldrb	r3, [r3, #1]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d126      	bne.n	8002e28 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	4413      	add	r3, r2
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	011a      	lsls	r2, r3, #4
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	801a      	strh	r2, [r3, #0]
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	e01a      	b.n	8002e5e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d116      	bne.n	8002e5e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	4413      	add	r3, r2
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	011a      	lsls	r2, r3, #4
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	4413      	add	r3, r2
 8002e52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d126      	bne.n	8002eba <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	4413      	add	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	011a      	lsls	r2, r3, #4
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	e017      	b.n	8002eea <HAL_PCD_EP_DB_Transmit+0x18a>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d113      	bne.n	8002eea <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	623b      	str	r3, [r7, #32]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	011a      	lsls	r2, r3, #4
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	4413      	add	r3, r2
 8002ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f00b f8a6 	bl	800e042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 82d4 	beq.w	80034aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1c:	827b      	strh	r3, [r7, #18]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	441a      	add	r2, r3
 8002f2c:	8a7b      	ldrh	r3, [r7, #18]
 8002f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	8013      	strh	r3, [r2, #0]
 8002f42:	e2b2      	b.n	80034aa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d021      	beq.n	8002f92 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	881b      	ldrh	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	441a      	add	r2, r3
 8002f7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 8286 	bne.w	80034aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa6:	441a      	add	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d309      	bcc.n	8002fda <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd2:	1ad2      	subs	r2, r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	621a      	str	r2, [r3, #32]
 8002fd8:	e015      	b.n	8003006 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002fe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ff0:	e009      	b.n	8003006 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	785b      	ldrb	r3, [r3, #1]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d155      	bne.n	80030ba <HAL_PCD_EP_DB_Transmit+0x35a>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	4413      	add	r3, r2
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	011a      	lsls	r2, r3, #4
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	4413      	add	r3, r2
 8003030:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
 8003036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003038:	2b00      	cmp	r3, #0
 800303a:	d112      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x302>
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003046:	b29a      	uxth	r2, r3
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800305a:	b29a      	uxth	r2, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	e047      	b.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003064:	2b3e      	cmp	r3, #62	; 0x3e
 8003066:	d811      	bhi.n	800308c <HAL_PCD_EP_DB_Transmit+0x32c>
 8003068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	64bb      	str	r3, [r7, #72]	; 0x48
 800306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_PCD_EP_DB_Transmit+0x31e>
 8003078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800307a:	3301      	adds	r3, #1
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
 800307e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003080:	b29b      	uxth	r3, r3
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	b29a      	uxth	r2, r3
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	e032      	b.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x392>
 800308c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	64bb      	str	r3, [r7, #72]	; 0x48
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x342>
 800309c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309e:	3b01      	subs	r3, #1
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	e01b      	b.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d117      	bne.n	80030f2 <HAL_PCD_EP_DB_Transmit+0x392>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	643b      	str	r3, [r7, #64]	; 0x40
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d6:	4413      	add	r3, r2
 80030d8:	643b      	str	r3, [r7, #64]	; 0x40
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	011a      	lsls	r2, r3, #4
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6959      	ldr	r1, [r3, #20]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	891a      	ldrh	r2, [r3, #8]
 80030fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003100:	b29b      	uxth	r3, r3
 8003102:	f005 fb7b 	bl	80087fc <USB_WritePMA>
 8003106:	e1d0      	b.n	80034aa <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	3306      	adds	r3, #6
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003130:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800313c:	429a      	cmp	r2, r3
 800313e:	d307      	bcc.n	8003150 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003148:	1ad2      	subs	r2, r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	619a      	str	r2, [r3, #24]
 800314e:	e002      	b.n	8003156 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 80c4 	bne.w	80032e8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d126      	bne.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x456>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317c:	4413      	add	r3, r2
 800317e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	011a      	lsls	r2, r3, #4
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003188:	4413      	add	r3, r2
 800318a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800318e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800319a:	b29a      	uxth	r2, r3
 800319c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800319e:	801a      	strh	r2, [r3, #0]
 80031a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	e01a      	b.n	80031ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d116      	bne.n	80031ec <HAL_PCD_EP_DB_Transmit+0x48c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	677b      	str	r3, [r7, #116]	; 0x74
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d2:	4413      	add	r3, r2
 80031d4:	677b      	str	r3, [r7, #116]	; 0x74
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	011a      	lsls	r2, r3, #4
 80031dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031de:	4413      	add	r3, r2
 80031e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031e4:	673b      	str	r3, [r7, #112]	; 0x70
 80031e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e8:	2200      	movs	r2, #0
 80031ea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d12f      	bne.n	800325a <HAL_PCD_EP_DB_Transmit+0x4fa>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003212:	4413      	add	r3, r2
 8003214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	011a      	lsls	r2, r3, #4
 800321e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003222:	4413      	add	r3, r2
 8003224:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800322c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003238:	b29a      	uxth	r2, r3
 800323a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800324c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003250:	b29a      	uxth	r2, r3
 8003252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	e017      	b.n	800328a <HAL_PCD_EP_DB_Transmit+0x52a>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	785b      	ldrb	r3, [r3, #1]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d113      	bne.n	800328a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003270:	4413      	add	r3, r2
 8003272:	67bb      	str	r3, [r7, #120]	; 0x78
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	011a      	lsls	r2, r3, #4
 800327a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327c:	4413      	add	r3, r2
 800327e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003282:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f00a fed6 	bl	800e042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8104 	bne.w	80034aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
 80032e6:	e0e0      	b.n	80034aa <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d121      	bne.n	8003336 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800332a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 80b4 	bne.w	80034aa <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800334a:	441a      	add	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003358:	441a      	add	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	429a      	cmp	r2, r3
 8003368:	d309      	bcc.n	800337e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003376:	1ad2      	subs	r2, r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	621a      	str	r2, [r3, #32]
 800337c:	e015      	b.n	80033aa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003386:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800338a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003394:	e009      	b.n	80033aa <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	667b      	str	r3, [r7, #100]	; 0x64
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d155      	bne.n	8003464 <HAL_PCD_EP_DB_Transmit+0x704>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033cc:	4413      	add	r3, r2
 80033ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	011a      	lsls	r2, r3, #4
 80033d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d8:	4413      	add	r3, r2
 80033da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033de:	65bb      	str	r3, [r7, #88]	; 0x58
 80033e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d112      	bne.n	800340c <HAL_PCD_EP_DB_Transmit+0x6ac>
 80033e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003404:	b29a      	uxth	r2, r3
 8003406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	e044      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x736>
 800340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340e:	2b3e      	cmp	r3, #62	; 0x3e
 8003410:	d811      	bhi.n	8003436 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	657b      	str	r3, [r7, #84]	; 0x54
 8003418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003424:	3301      	adds	r3, #1
 8003426:	657b      	str	r3, [r7, #84]	; 0x54
 8003428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342a:	b29b      	uxth	r3, r3
 800342c:	029b      	lsls	r3, r3, #10
 800342e:	b29a      	uxth	r2, r3
 8003430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003432:	801a      	strh	r2, [r3, #0]
 8003434:	e02f      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x736>
 8003436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	657b      	str	r3, [r7, #84]	; 0x54
 800343c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003448:	3b01      	subs	r3, #1
 800344a:	657b      	str	r3, [r7, #84]	; 0x54
 800344c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344e:	b29b      	uxth	r3, r3
 8003450:	029b      	lsls	r3, r3, #10
 8003452:	b29b      	uxth	r3, r3
 8003454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800345c:	b29a      	uxth	r2, r3
 800345e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	e018      	b.n	8003496 <HAL_PCD_EP_DB_Transmit+0x736>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d114      	bne.n	8003496 <HAL_PCD_EP_DB_Transmit+0x736>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800347a:	4413      	add	r3, r2
 800347c:	667b      	str	r3, [r7, #100]	; 0x64
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	011a      	lsls	r2, r3, #4
 8003484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003486:	4413      	add	r3, r2
 8003488:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800348c:	663b      	str	r3, [r7, #96]	; 0x60
 800348e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003490:	b29a      	uxth	r2, r3
 8003492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003494:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6959      	ldr	r1, [r3, #20]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	895a      	ldrh	r2, [r3, #10]
 80034a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f005 f9a9 	bl	80087fc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c4:	823b      	strh	r3, [r7, #16]
 80034c6:	8a3b      	ldrh	r3, [r7, #16]
 80034c8:	f083 0310 	eor.w	r3, r3, #16
 80034cc:	823b      	strh	r3, [r7, #16]
 80034ce:	8a3b      	ldrh	r3, [r7, #16]
 80034d0:	f083 0320 	eor.w	r3, r3, #32
 80034d4:	823b      	strh	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	8a3b      	ldrh	r3, [r7, #16]
 80034e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3788      	adds	r7, #136	; 0x88
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	460b      	mov	r3, r1
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	4613      	mov	r3, r2
 8003514:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e009      	b.n	800354e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800353a:	897a      	ldrh	r2, [r7, #10]
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800354e:	893b      	ldrh	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	b29a      	uxth	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	80da      	strh	r2, [r3, #6]
 8003562:	e00b      	b.n	800357c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2201      	movs	r2, #1
 8003568:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	b29a      	uxth	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	b29a      	uxth	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e272      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8087 	beq.w	80036b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a8:	4b92      	ldr	r3, [pc, #584]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d00c      	beq.n	80035ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035b4:	4b8f      	ldr	r3, [pc, #572]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d112      	bne.n	80035e6 <HAL_RCC_OscConfig+0x5e>
 80035c0:	4b8c      	ldr	r3, [pc, #560]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d10b      	bne.n	80035e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ce:	4b89      	ldr	r3, [pc, #548]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d06c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x12c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d168      	bne.n	80036b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e24c      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x76>
 80035f0:	4b80      	ldr	r3, [pc, #512]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a7f      	ldr	r2, [pc, #508]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	e02e      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x98>
 8003606:	4b7b      	ldr	r3, [pc, #492]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7a      	ldr	r2, [pc, #488]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800360c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b78      	ldr	r3, [pc, #480]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a77      	ldr	r2, [pc, #476]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e01d      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0xbc>
 800362a:	4b72      	ldr	r3, [pc, #456]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a71      	ldr	r2, [pc, #452]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6e      	ldr	r2, [pc, #440]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e00b      	b.n	800365c <HAL_RCC_OscConfig+0xd4>
 8003644:	4b6b      	ldr	r3, [pc, #428]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6a      	ldr	r2, [pc, #424]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800364a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b68      	ldr	r3, [pc, #416]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a67      	ldr	r2, [pc, #412]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd fdd8 	bl	8001218 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fd fdd4 	bl	8001218 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e200      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367e:	4b5d      	ldr	r3, [pc, #372]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0xe4>
 800368a:	e014      	b.n	80036b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fd fdc4 	bl	8001218 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fd fdc0 	bl	8001218 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e1ec      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a6:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x10c>
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d063      	beq.n	800378a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036c2:	4b4c      	ldr	r3, [pc, #304]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036ce:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d11c      	bne.n	8003714 <HAL_RCC_OscConfig+0x18c>
 80036da:	4b46      	ldr	r3, [pc, #280]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d116      	bne.n	8003714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x176>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d001      	beq.n	80036fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e1c0      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fe:	4b3d      	ldr	r3, [pc, #244]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4939      	ldr	r1, [pc, #228]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	e03a      	b.n	800378a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371c:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003722:	f7fd fd79 	bl	8001218 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7fd fd75 	bl	8001218 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1a1      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f0      	beq.n	800372a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4927      	ldr	r1, [pc, #156]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003758:	4313      	orrs	r3, r2
 800375a:	600b      	str	r3, [r1, #0]
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_RCC_OscConfig+0x270>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fd fd58 	bl	8001218 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376c:	f7fd fd54 	bl	8001218 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e180      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03a      	beq.n	800380c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d019      	beq.n	80037d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379e:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_RCC_OscConfig+0x274>)
 80037a0:	2201      	movs	r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a4:	f7fd fd38 	bl	8001218 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fd fd34 	bl	8001218 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e160      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037ca:	2001      	movs	r0, #1
 80037cc:	f000 fb08 	bl	8003de0 <RCC_Delay>
 80037d0:	e01c      	b.n	800380c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_RCC_OscConfig+0x274>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fd fd1e 	bl	8001218 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037de:	e00f      	b.n	8003800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd fd1a 	bl	8001218 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d908      	bls.n	8003800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e146      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	42420000 	.word	0x42420000
 80037fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003800:	4b92      	ldr	r3, [pc, #584]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e9      	bne.n	80037e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a6 	beq.w	8003966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800381e:	4b8b      	ldr	r3, [pc, #556]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382a:	4b88      	ldr	r3, [pc, #544]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4a87      	ldr	r2, [pc, #540]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003834:	61d3      	str	r3, [r2, #28]
 8003836:	4b85      	ldr	r3, [pc, #532]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003842:	2301      	movs	r3, #1
 8003844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003846:	4b82      	ldr	r3, [pc, #520]	; (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d118      	bne.n	8003884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003852:	4b7f      	ldr	r3, [pc, #508]	; (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7e      	ldr	r2, [pc, #504]	; (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385e:	f7fd fcdb 	bl	8001218 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fd fcd7 	bl	8001218 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b64      	cmp	r3, #100	; 0x64
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e103      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	4b75      	ldr	r3, [pc, #468]	; (8003a50 <HAL_RCC_OscConfig+0x4c8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d106      	bne.n	800389a <HAL_RCC_OscConfig+0x312>
 800388c:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6213      	str	r3, [r2, #32]
 8003898:	e02d      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x334>
 80038a2:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4a69      	ldr	r2, [pc, #420]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6213      	str	r3, [r2, #32]
 80038ae:	4b67      	ldr	r3, [pc, #412]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a66      	ldr	r2, [pc, #408]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0304 	bic.w	r3, r3, #4
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	e01c      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d10c      	bne.n	80038de <HAL_RCC_OscConfig+0x356>
 80038c4:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4a60      	ldr	r2, [pc, #384]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	6213      	str	r3, [r2, #32]
 80038d0:	4b5e      	ldr	r3, [pc, #376]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a5d      	ldr	r2, [pc, #372]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	e00b      	b.n	80038f6 <HAL_RCC_OscConfig+0x36e>
 80038de:	4b5b      	ldr	r3, [pc, #364]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4a5a      	ldr	r2, [pc, #360]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6213      	str	r3, [r2, #32]
 80038ea:	4b58      	ldr	r3, [pc, #352]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a57      	ldr	r2, [pc, #348]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d015      	beq.n	800392a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fe:	f7fd fc8b 	bl	8001218 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fd fc87 	bl	8001218 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0b1      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	4b4b      	ldr	r3, [pc, #300]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ee      	beq.n	8003906 <HAL_RCC_OscConfig+0x37e>
 8003928:	e014      	b.n	8003954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fd fc75 	bl	8001218 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fd fc71 	bl	8001218 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e09b      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003948:	4b40      	ldr	r3, [pc, #256]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ee      	bne.n	8003932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b3c      	ldr	r3, [pc, #240]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4a3b      	ldr	r2, [pc, #236]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 8087 	beq.w	8003a7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003970:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d061      	beq.n	8003a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d146      	bne.n	8003a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003984:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fd fc45 	bl	8001218 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fd fc41 	bl	8001218 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e06d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a4:	4b29      	ldr	r3, [pc, #164]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d108      	bne.n	80039cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4921      	ldr	r1, [pc, #132]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039cc:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a19      	ldr	r1, [r3, #32]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	430b      	orrs	r3, r1
 80039de:	491b      	ldr	r1, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e4:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fd fc15 	bl	8001218 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd fc11 	bl	8001218 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e03d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a04:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x46a>
 8003a10:	e035      	b.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <HAL_RCC_OscConfig+0x4cc>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd fbfe 	bl	8001218 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a20:	f7fd fbfa 	bl	8001218 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e026      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1f0      	bne.n	8003a20 <HAL_RCC_OscConfig+0x498>
 8003a3e:	e01e      	b.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e019      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40007000 	.word	0x40007000
 8003a54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_OscConfig+0x500>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000

08003a8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d0      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b6a      	ldr	r3, [pc, #424]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d910      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b67      	ldr	r3, [pc, #412]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0207 	bic.w	r2, r3, #7
 8003ab6:	4965      	ldr	r1, [pc, #404]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0b8      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae8:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a58      	ldr	r2, [pc, #352]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003af2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b00:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a52      	ldr	r2, [pc, #328]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b50      	ldr	r3, [pc, #320]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	494d      	ldr	r1, [pc, #308]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d040      	beq.n	8003bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e073      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	4b3d      	ldr	r3, [pc, #244]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e06b      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4936      	ldr	r1, [pc, #216]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fb4c 	bl	8001218 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fd fb48 	bl	8001218 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e053      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d210      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4922      	ldr	r1, [pc, #136]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e032      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4916      	ldr	r1, [pc, #88]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	490e      	ldr	r1, [pc, #56]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c1a:	f000 f821 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	490a      	ldr	r1, [pc, #40]	; (8003c54 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x1cc>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x1d0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd f922 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40021000 	.word	0x40021000
 8003c54:	0800faa4 	.word	0x0800faa4
 8003c58:	20000054 	.word	0x20000054
 8003c5c:	20000058 	.word	0x20000058

08003c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	b490      	push	{r4, r7}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c66:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xac>)
 8003c68:	1d3c      	adds	r4, r7, #4
 8003c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c70:	f240 2301 	movw	r3, #513	; 0x201
 8003c74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c8a:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d002      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d003      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x46>
 8003c9e:	e02b      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ca2:	623b      	str	r3, [r7, #32]
      break;
 8003ca4:	e02b      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	0c9b      	lsrs	r3, r3, #18
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3328      	adds	r3, #40	; 0x28
 8003cb0:	443b      	add	r3, r7
 8003cb2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cb6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d012      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	0c5b      	lsrs	r3, r3, #17
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	3328      	adds	r3, #40	; 0x28
 8003cce:	443b      	add	r3, r7
 8003cd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003cd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cda:	fb03 f202 	mul.w	r2, r3, r2
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce6:	e004      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	4a0b      	ldr	r2, [pc, #44]	; (8003d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	623b      	str	r3, [r7, #32]
      break;
 8003cf6:	e002      	b.n	8003cfe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cfa:	623b      	str	r3, [r7, #32]
      break;
 8003cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3728      	adds	r7, #40	; 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc90      	pop	{r4, r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	0800f8fc 	.word	0x0800f8fc
 8003d10:	40021000 	.word	0x40021000
 8003d14:	007a1200 	.word	0x007a1200
 8003d18:	003d0900 	.word	0x003d0900

08003d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	20000054 	.word	0x20000054

08003d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d34:	f7ff fff2 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4903      	ldr	r1, [pc, #12]	; (8003d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40021000 	.word	0x40021000
 8003d54:	0800fab4 	.word	0x0800fab4

08003d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d5c:	f7ff ffde 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0adb      	lsrs	r3, r3, #11
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	0800fab4 	.word	0x0800fab4

08003d80 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_RCC_GetClockConfig+0x58>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0203 	and.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_RCC_GetClockConfig+0x58>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_GetClockConfig+0x58>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_RCC_GetClockConfig+0x58>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	08db      	lsrs	r3, r3, #3
 8003dba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCC_GetClockConfig+0x5c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0207 	and.w	r2, r3, #7
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40022000 	.word	0x40022000

08003de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <RCC_Delay+0x34>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <RCC_Delay+0x38>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0a5b      	lsrs	r3, r3, #9
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dfc:	bf00      	nop
  }
  while (Delay --);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	60fa      	str	r2, [r7, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f9      	bne.n	8003dfc <RCC_Delay+0x1c>
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr
 8003e14:	20000054 	.word	0x20000054
 8003e18:	10624dd3 	.word	0x10624dd3

08003e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d07d      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3c:	4b4f      	ldr	r3, [pc, #316]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10d      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	4a4b      	ldr	r2, [pc, #300]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	61d3      	str	r3, [r2, #28]
 8003e54:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b46      	ldr	r3, [pc, #280]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d118      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a42      	ldr	r2, [pc, #264]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7c:	f7fd f9cc 	bl	8001218 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e84:	f7fd f9c8 	bl	8001218 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e06d      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea2:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02e      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d027      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eca:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed0:	4b2c      	ldr	r3, [pc, #176]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ed6:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d014      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fd f997 	bl	8001218 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	e00a      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd f993 	bl	8001218 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e036      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ee      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f10:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4917      	ldr	r1, [pc, #92]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	490b      	ldr	r1, [pc, #44]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4904      	ldr	r1, [pc, #16]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
 8003f84:	42420440 	.word	0x42420440

08003f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e076      	b.n	8004088 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003faa:	d009      	beq.n	8003fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61da      	str	r2, [r3, #28]
 8003fb2:	e005      	b.n	8003fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc fdec 	bl	8000bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	ea42 0103 	orr.w	r1, r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	0c1a      	lsrs	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f002 0204 	and.w	r2, r2, #4
 8004066:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004076:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e04c      	b.n	800413c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d111      	bne.n	80040d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f001 f824 	bl	8005104 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_TIM_Base_Init+0xb4>)
 80040c8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 fd69 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	08000c35 	.word	0x08000c35

08004148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e03a      	b.n	80041d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_TIM_Base_Start_IT+0x98>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0x58>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d009      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0x58>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0x58>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d111      	bne.n	80041c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d010      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c2:	e007      	b.n	80041d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800

080041ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e04c      	b.n	8004298 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d111      	bne.n	800422e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 ff76 	bl	8005104 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_TIM_OC_Init+0xb4>)
 8004224:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f000 fcbb 	bl	8004bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	080042a5 	.word	0x080042a5

080042a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_TIM_PWM_Start+0x24>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e022      	b.n	8004322 <HAL_TIM_PWM_Start+0x6a>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d109      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x3e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e015      	b.n	8004322 <HAL_TIM_PWM_Start+0x6a>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d109      	bne.n	8004310 <HAL_TIM_PWM_Start+0x58>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e008      	b.n	8004322 <HAL_TIM_PWM_Start+0x6a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e05e      	b.n	80043e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d104      	bne.n	800433a <HAL_TIM_PWM_Start+0x82>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	e013      	b.n	8004362 <HAL_TIM_PWM_Start+0xaa>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d104      	bne.n	800434a <HAL_TIM_PWM_Start+0x92>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	e00b      	b.n	8004362 <HAL_TIM_PWM_Start+0xaa>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d104      	bne.n	800435a <HAL_TIM_PWM_Start+0xa2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004358:	e003      	b.n	8004362 <HAL_TIM_PWM_Start+0xaa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2201      	movs	r2, #1
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fea6 	bl	80050bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_TIM_PWM_Start+0x138>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d107      	bne.n	800438a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_TIM_PWM_Start+0x138>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_TIM_PWM_Start+0xfa>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439c:	d009      	beq.n	80043b2 <HAL_TIM_PWM_Start+0xfa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <HAL_TIM_PWM_Start+0x13c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_TIM_PWM_Start+0xfa>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <HAL_TIM_PWM_Start+0x140>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d111      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d010      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	e007      	b.n	80043e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800

080043fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d128      	bne.n	8004464 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d121      	bne.n	8004464 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0202 	mvn.w	r2, #2
 8004428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e009      	b.n	800445e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b04      	cmp	r3, #4
 8004470:	d128      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d121      	bne.n	80044c4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0204 	mvn.w	r2, #4
 8004488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2202      	movs	r2, #2
 800448e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
 80044a8:	e009      	b.n	80044be <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d128      	bne.n	8004524 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d121      	bne.n	8004524 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0208 	mvn.w	r2, #8
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2204      	movs	r2, #4
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	4798      	blx	r3
 8004508:	e009      	b.n	800451e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b10      	cmp	r3, #16
 8004530:	d128      	bne.n	8004584 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b10      	cmp	r3, #16
 800453e:	d121      	bne.n	8004584 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0210 	mvn.w	r2, #16
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2208      	movs	r2, #8
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
 8004568:	e009      	b.n	800457e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d110      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d109      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0201 	mvn.w	r2, #1
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b80      	cmp	r3, #128	; 0x80
 80045c0:	d110      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d109      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d110      	bne.n	8004614 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d109      	bne.n	8004614 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b20      	cmp	r3, #32
 8004620:	d110      	bne.n	8004644 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b20      	cmp	r3, #32
 800462e:	d109      	bne.n	8004644 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0220 	mvn.w	r2, #32
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004662:	2302      	movs	r3, #2
 8004664:	e046      	b.n	80046f4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d839      	bhi.n	80046e8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <HAL_TIM_OC_ConfigChannel+0x30>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	080046b1 	.word	0x080046b1
 8004680:	080046e9 	.word	0x080046e9
 8004684:	080046e9 	.word	0x080046e9
 8004688:	080046e9 	.word	0x080046e9
 800468c:	080046bf 	.word	0x080046bf
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046e9 	.word	0x080046e9
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046e9 	.word	0x080046e9
 80046a4:	080046e9 	.word	0x080046e9
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046db 	.word	0x080046db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fae2 	bl	8004c80 <TIM_OC1_SetConfig>
      break;
 80046bc:	e015      	b.n	80046ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fb41 	bl	8004d4c <TIM_OC2_SetConfig>
      break;
 80046ca:	e00e      	b.n	80046ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fba4 	bl	8004e20 <TIM_OC3_SetConfig>
      break;
 80046d8:	e007      	b.n	80046ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fc07 	bl	8004ef4 <TIM_OC4_SetConfig>
      break;
 80046e6:	e000      	b.n	80046ea <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80046e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIM_ConfigClockSource+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e0b3      	b.n	800487c <HAL_TIM_ConfigClockSource+0x180>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004732:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d03e      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xd0>
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	f200 8087 	bhi.w	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475a:	f000 8085 	beq.w	8004868 <HAL_TIM_ConfigClockSource+0x16c>
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d87f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004764:	2b70      	cmp	r3, #112	; 0x70
 8004766:	d01a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0xa2>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d87b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d050      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x116>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d877      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004774:	2b50      	cmp	r3, #80	; 0x50
 8004776:	d03c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d873      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	d058      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x136>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d86f      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004784:	2b30      	cmp	r3, #48	; 0x30
 8004786:	d064      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d86b      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d060      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d867      	bhi.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05c      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
 8004798:	2b10      	cmp	r3, #16
 800479a:	d05a      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800479c:	e062      	b.n	8004864 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6899      	ldr	r1, [r3, #8]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f000 fc66 	bl	800507e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e04e      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f000 fc4f 	bl	800507e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ee:	609a      	str	r2, [r3, #8]
      break;
 80047f0:	e03b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 fbc6 	bl	8004f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2150      	movs	r1, #80	; 0x50
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fc1d 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004810:	e02b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 fbe4 	bl	8004fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2160      	movs	r1, #96	; 0x60
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fc0d 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004830:	e01b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 fba6 	bl	8004f90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fbfd 	bl	800504a <TIM_ITRx_SetConfig>
      break;
 8004850:	e00b      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 fbf4 	bl	800504a <TIM_ITRx_SetConfig>
        break;
 8004862:	e002      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
	...

08004928 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	460b      	mov	r3, r1
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e135      	b.n	8004bb0 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_TIM_RegisterCallback+0x2a>
 800494e:	2302      	movs	r3, #2
 8004950:	e12e      	b.n	8004bb0 <HAL_TIM_RegisterCallback+0x288>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b01      	cmp	r3, #1
 8004964:	f040 80ba 	bne.w	8004adc <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8004968:	7afb      	ldrb	r3, [r7, #11]
 800496a:	2b1a      	cmp	r3, #26
 800496c:	f200 80b3 	bhi.w	8004ad6 <HAL_TIM_RegisterCallback+0x1ae>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_TIM_RegisterCallback+0x50>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	080049e5 	.word	0x080049e5
 800497c:	080049ed 	.word	0x080049ed
 8004980:	080049f5 	.word	0x080049f5
 8004984:	080049fd 	.word	0x080049fd
 8004988:	08004a05 	.word	0x08004a05
 800498c:	08004a0d 	.word	0x08004a0d
 8004990:	08004a15 	.word	0x08004a15
 8004994:	08004a1d 	.word	0x08004a1d
 8004998:	08004a25 	.word	0x08004a25
 800499c:	08004a2d 	.word	0x08004a2d
 80049a0:	08004a35 	.word	0x08004a35
 80049a4:	08004a3d 	.word	0x08004a3d
 80049a8:	08004a45 	.word	0x08004a45
 80049ac:	08004a4d 	.word	0x08004a4d
 80049b0:	08004a55 	.word	0x08004a55
 80049b4:	08004a5f 	.word	0x08004a5f
 80049b8:	08004a69 	.word	0x08004a69
 80049bc:	08004a73 	.word	0x08004a73
 80049c0:	08004a7d 	.word	0x08004a7d
 80049c4:	08004a87 	.word	0x08004a87
 80049c8:	08004a91 	.word	0x08004a91
 80049cc:	08004a9b 	.word	0x08004a9b
 80049d0:	08004aa5 	.word	0x08004aa5
 80049d4:	08004aaf 	.word	0x08004aaf
 80049d8:	08004ab9 	.word	0x08004ab9
 80049dc:	08004ac3 	.word	0x08004ac3
 80049e0:	08004acd 	.word	0x08004acd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80049ea:	e0dc      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80049f2:	e0d8      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80049fa:	e0d4      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004a02:	e0d0      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004a0a:	e0cc      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004a12:	e0c8      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004a1a:	e0c4      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004a22:	e0c0      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004a2a:	e0bc      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004a32:	e0b8      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004a3a:	e0b4      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004a42:	e0b0      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004a4a:	e0ac      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004a52:	e0a8      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004a5c:	e0a3      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8004a66:	e09e      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8004a70:	e099      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8004a7a:	e094      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004a84:	e08f      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004a8e:	e08a      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004a98:	e085      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004aa2:	e080      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004aac:	e07b      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004ab6:	e076      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004ac0:	e071      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004aca:	e06c      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004ad4:	e067      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
        break;
 8004ada:	e064      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d15c      	bne.n	8004ba2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8004ae8:	7afb      	ldrb	r3, [r7, #11]
 8004aea:	2b0d      	cmp	r3, #13
 8004aec:	d856      	bhi.n	8004b9c <HAL_TIM_RegisterCallback+0x274>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <HAL_TIM_RegisterCallback+0x1cc>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b35 	.word	0x08004b35
 8004afc:	08004b3d 	.word	0x08004b3d
 8004b00:	08004b45 	.word	0x08004b45
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b55 	.word	0x08004b55
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b75 	.word	0x08004b75
 8004b1c:	08004b7d 	.word	0x08004b7d
 8004b20:	08004b85 	.word	0x08004b85
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b95 	.word	0x08004b95
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004b32:	e038      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004b3a:	e034      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004b42:	e030      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004b4a:	e02c      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004b52:	e028      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004b5a:	e024      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004b62:	e020      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004b6a:	e01c      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004b72:	e018      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004b7a:	e014      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004b82:	e010      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004b8a:	e00c      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004b92:	e008      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004b9a:	e004      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
        break;
 8004ba0:	e001      	b.n	8004ba6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <TIM_Base_SetConfig+0xb8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <TIM_Base_SetConfig+0x30>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bda:	d007      	beq.n	8004bec <TIM_Base_SetConfig+0x30>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <TIM_Base_SetConfig+0xbc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x30>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <TIM_Base_SetConfig+0xc0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a1c      	ldr	r2, [pc, #112]	; (8004c74 <TIM_Base_SetConfig+0xb8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <TIM_Base_SetConfig+0x62>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d007      	beq.n	8004c1e <TIM_Base_SetConfig+0x62>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a19      	ldr	r2, [pc, #100]	; (8004c78 <TIM_Base_SetConfig+0xbc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_Base_SetConfig+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <TIM_Base_SetConfig+0xc0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <TIM_Base_SetConfig+0xb8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800

08004c80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0302 	bic.w	r3, r3, #2
 8004cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <TIM_OC1_SetConfig+0xc8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d10c      	bne.n	8004cf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0308 	bic.w	r3, r3, #8
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <TIM_OC1_SetConfig+0xc8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d111      	bne.n	8004d22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40012c00 	.word	0x40012c00

08004d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0210 	bic.w	r2, r3, #16
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0320 	bic.w	r3, r3, #32
 8004d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <TIM_OC2_SetConfig+0xd0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d10d      	bne.n	8004dc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a14      	ldr	r2, [pc, #80]	; (8004e1c <TIM_OC2_SetConfig+0xd0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d113      	bne.n	8004df8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00

08004e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	021b      	lsls	r3, r3, #8
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1d      	ldr	r2, [pc, #116]	; (8004ef0 <TIM_OC3_SetConfig+0xd0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10d      	bne.n	8004e9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a14      	ldr	r2, [pc, #80]	; (8004ef0 <TIM_OC3_SetConfig+0xd0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d113      	bne.n	8004eca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	621a      	str	r2, [r3, #32]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40012c00 	.word	0x40012c00

08004ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	031b      	lsls	r3, r3, #12
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0f      	ldr	r2, [pc, #60]	; (8004f8c <TIM_OC4_SetConfig+0x98>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d109      	bne.n	8004f68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	40012c00 	.word	0x40012c00

08004f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0201 	bic.w	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 030a 	bic.w	r3, r3, #10
 8004fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	bf00      	nop
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 0210 	bic.w	r2, r3, #16
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	031b      	lsls	r3, r3, #12
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005028:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr

0800504a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	f043 0307 	orr.w	r3, r3, #7
 800506c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	609a      	str	r2, [r3, #8]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005098:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	021a      	lsls	r2, r3, #8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	609a      	str	r2, [r3, #8]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	2201      	movs	r2, #1
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a1a      	ldr	r2, [r3, #32]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	431a      	orrs	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <TIM_ResetCallback+0x7c>)
 8005110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <TIM_ResetCallback+0x80>)
 8005118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <TIM_ResetCallback+0x84>)
 8005120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a19      	ldr	r2, [pc, #100]	; (800518c <TIM_ResetCallback+0x88>)
 8005128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a18      	ldr	r2, [pc, #96]	; (8005190 <TIM_ResetCallback+0x8c>)
 8005130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a17      	ldr	r2, [pc, #92]	; (8005194 <TIM_ResetCallback+0x90>)
 8005138:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a16      	ldr	r2, [pc, #88]	; (8005198 <TIM_ResetCallback+0x94>)
 8005140:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a15      	ldr	r2, [pc, #84]	; (800519c <TIM_ResetCallback+0x98>)
 8005148:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <TIM_ResetCallback+0x9c>)
 8005150:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <TIM_ResetCallback+0xa0>)
 8005158:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <TIM_ResetCallback+0xa4>)
 8005160:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a11      	ldr	r2, [pc, #68]	; (80051ac <TIM_ResetCallback+0xa8>)
 8005168:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <TIM_ResetCallback+0xac>)
 8005170:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	08000b0d 	.word	0x08000b0d
 8005184:	08004885 	.word	0x08004885
 8005188:	080048f1 	.word	0x080048f1
 800518c:	08004903 	.word	0x08004903
 8005190:	080048a9 	.word	0x080048a9
 8005194:	080048bb 	.word	0x080048bb
 8005198:	08004897 	.word	0x08004897
 800519c:	080048cd 	.word	0x080048cd
 80051a0:	080048df 	.word	0x080048df
 80051a4:	08004915 	.word	0x08004915
 80051a8:	08005271 	.word	0x08005271
 80051ac:	08005283 	.word	0x08005283
 80051b0:	08005295 	.word	0x08005295

080051b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e046      	b.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a16      	ldr	r2, [pc, #88]	; (8005264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d009      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a10      	ldr	r2, [pc, #64]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40000400 	.word	0x40000400
 800526c:	40000800 	.word	0x40000800

08005270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	bc80      	pop	{r7}
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e03f      	b.n	8005338 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fb fd4d 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2224      	movs	r2, #36	; 0x24
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fcc0 	bl	8005c70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800530e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800531e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	; 0x28
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b20      	cmp	r3, #32
 800535e:	d17c      	bne.n	800545a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_UART_Transmit+0x2c>
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e075      	b.n	800545c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_UART_Transmit+0x3e>
 800537a:	2302      	movs	r3, #2
 800537c:	e06e      	b.n	800545c <HAL_UART_Transmit+0x11c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2221      	movs	r2, #33	; 0x21
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005394:	f7fb ff40 	bl	8001218 <HAL_GetTick>
 8005398:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	88fa      	ldrh	r2, [r7, #6]
 800539e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	d108      	bne.n	80053c2 <HAL_UART_Transmit+0x82>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e003      	b.n	80053ca <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053d2:	e02a      	b.n	800542a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fa72 	bl	80058c8 <UART_WaitOnFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e036      	b.n	800545c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005402:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	3302      	adds	r3, #2
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e007      	b.n	800541c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1cf      	bne.n	80053d4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fa42 	bl	80058c8 <UART_WaitOnFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e006      	b.n	800545c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3720      	adds	r7, #32
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b20      	cmp	r3, #32
 800547c:	d130      	bne.n	80054e0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_UART_Transmit_IT+0x26>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e029      	b.n	80054e2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_UART_Transmit_IT+0x38>
 8005498:	2302      	movs	r3, #2
 800549a:	e022      	b.n	80054e2 <HAL_UART_Transmit_IT+0x7e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	88fa      	ldrh	r2, [r7, #6]
 80054ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2221      	movs	r2, #33	; 0x21
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054da:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bc80      	pop	{r7}
 80054ea:	4770      	bx	lr

080054ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b20      	cmp	r3, #32
 8005504:	d11d      	bne.n	8005542 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_UART_Receive_IT+0x26>
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e016      	b.n	8005544 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_UART_Receive_IT+0x38>
 8005520:	2302      	movs	r3, #2
 8005522:	e00f      	b.n	8005544 <HAL_UART_Receive_IT+0x58>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	461a      	mov	r2, r3
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fa0f 	bl	800595c <UART_Start_Receive_IT>
 800553e:	4603      	mov	r3, r0
 8005540:	e000      	b.n	8005544 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005542:	2302      	movs	r3, #2
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10d      	bne.n	800559e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_UART_IRQHandler+0x52>
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fac0 	bl	8005b1c <UART_Receive_IT>
      return;
 800559c:	e17b      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80b1 	beq.w	8005708 <HAL_UART_IRQHandler+0x1bc>
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_UART_IRQHandler+0x70>
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80a6 	beq.w	8005708 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_UART_IRQHandler+0x90>
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_UART_IRQHandler+0xb0>
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0202 	orr.w	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_UART_IRQHandler+0xd0>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0204 	orr.w	r2, r3, #4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00f      	beq.n	8005646 <HAL_UART_IRQHandler+0xfa>
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <HAL_UART_IRQHandler+0xee>
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0208 	orr.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 811e 	beq.w	800588c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <HAL_UART_IRQHandler+0x11e>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa59 	bl	8005b1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <HAL_UART_IRQHandler+0x146>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d031      	beq.n	80056f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f99b 	bl	80059ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d023      	beq.n	80056ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	4a76      	ldr	r2, [pc, #472]	; (800589c <HAL_UART_IRQHandler+0x350>)
 80056c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fb ff82 	bl	80015d4 <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e00e      	b.n	8005704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8da 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00a      	b.n	8005704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8d6 	bl	80058a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e006      	b.n	8005704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8d2 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005702:	e0c3      	b.n	800588c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	bf00      	nop
    return;
 8005706:	e0c1      	b.n	800588c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 80a1 	bne.w	8005854 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 809b 	beq.w	8005854 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8095 	beq.w	8005854 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d04e      	beq.n	80057ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005758:	8a3b      	ldrh	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8098 	beq.w	8005890 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005764:	8a3a      	ldrh	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	f080 8092 	bcs.w	8005890 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8a3a      	ldrh	r2, [r7, #16]
 8005770:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b20      	cmp	r3, #32
 800577a:	d02b      	beq.n	80057d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800578a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0210 	bic.w	r2, r2, #16
 80057c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fb fec5 	bl	800155e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f864 	bl	80058b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057ea:	e051      	b.n	8005890 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d047      	beq.n	8005894 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005804:	8a7b      	ldrh	r3, [r7, #18]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d044      	beq.n	8005894 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005818:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0210 	bic.w	r2, r2, #16
 8005846:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005848:	8a7b      	ldrh	r3, [r7, #18]
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f830 	bl	80058b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005852:	e01f      	b.n	8005894 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <HAL_UART_IRQHandler+0x324>
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8f0 	bl	8005a4e <UART_Transmit_IT>
    return;
 800586e:	e012      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <HAL_UART_IRQHandler+0x34a>
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f931 	bl	8005aec <UART_EndTransmit_IT>
    return;
 800588a:	e004      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
    return;
 800588c:	bf00      	nop
 800588e:	e002      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
      return;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
      return;
 8005894:	bf00      	nop
  }
}
 8005896:	3728      	adds	r7, #40	; 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	08005a27 	.word	0x08005a27

080058a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d8:	e02c      	b.n	8005934 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d028      	beq.n	8005934 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058e8:	f7fb fc96 	bl	8001218 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d21d      	bcs.n	8005934 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005906:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e00f      	b.n	8005954 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	bf0c      	ite	eq
 8005944:	2301      	moveq	r3, #1
 8005946:	2300      	movne	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	429a      	cmp	r2, r3
 8005950:	d0c3      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2222      	movs	r2, #34	; 0x22
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0220 	orr.w	r2, r2, #32
 80059c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d107      	bne.n	8005a0e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0210 	bic.w	r2, r2, #16
 8005a0c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr

08005a26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f7ff ff2d 	bl	80058a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b085      	sub	sp, #20
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b21      	cmp	r3, #33	; 0x21
 8005a60:	d13e      	bne.n	8005ae0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6a:	d114      	bne.n	8005a96 <UART_Transmit_IT+0x48>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d110      	bne.n	8005a96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	621a      	str	r2, [r3, #32]
 8005a94:	e008      	b.n	8005aa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	1c59      	adds	r1, r3, #1
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6211      	str	r1, [r2, #32]
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10f      	bne.n	8005adc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ada:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e000      	b.n	8005ae2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bc80      	pop	{r7}
 8005aea:	4770      	bx	lr

08005aec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fa fd43 	bl	8000598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b22      	cmp	r3, #34	; 0x22
 8005b2e:	f040 8099 	bne.w	8005c64 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3a:	d117      	bne.n	8005b6c <UART_Receive_IT+0x50>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d113      	bne.n	8005b6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	1c9a      	adds	r2, r3, #2
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	629a      	str	r2, [r3, #40]	; 0x28
 8005b6a:	e026      	b.n	8005bba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7e:	d007      	beq.n	8005b90 <UART_Receive_IT+0x74>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <UART_Receive_IT+0x82>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e008      	b.n	8005bb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d148      	bne.n	8005c60 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0220 	bic.w	r2, r2, #32
 8005bdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d123      	bne.n	8005c56 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0210 	bic.w	r2, r2, #16
 8005c22:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0310 	and.w	r3, r3, #16
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d10a      	bne.n	8005c48 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff fe2f 	bl	80058b2 <HAL_UARTEx_RxEventCallback>
 8005c54:	e002      	b.n	8005c5c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fa fc90 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e002      	b.n	8005c66 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005caa:	f023 030c 	bic.w	r3, r3, #12
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <UART_SetConfig+0x114>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d103      	bne.n	8005ce0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cd8:	f7fe f83e 	bl	8003d58 <HAL_RCC_GetPCLK2Freq>
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	e002      	b.n	8005ce6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ce0:	f7fe f826 	bl	8003d30 <HAL_RCC_GetPCLK1Freq>
 8005ce4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009a      	lsls	r2, r3, #2
 8005cf0:	441a      	add	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <UART_SetConfig+0x118>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	0119      	lsls	r1, r3, #4
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009a      	lsls	r2, r3, #2
 8005d10:	441a      	add	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d1c:	4b1a      	ldr	r3, [pc, #104]	; (8005d88 <UART_SetConfig+0x118>)
 8005d1e:	fba3 0302 	umull	r0, r3, r3, r2
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2064      	movs	r0, #100	; 0x64
 8005d26:	fb00 f303 	mul.w	r3, r0, r3
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	3332      	adds	r3, #50	; 0x32
 8005d30:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <UART_SetConfig+0x118>)
 8005d32:	fba2 2303 	umull	r2, r3, r2, r3
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d3c:	4419      	add	r1, r3
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009a      	lsls	r2, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d54:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <UART_SetConfig+0x118>)
 8005d56:	fba3 0302 	umull	r0, r3, r3, r2
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2064      	movs	r0, #100	; 0x64
 8005d5e:	fb00 f303 	mul.w	r3, r0, r3
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	3332      	adds	r3, #50	; 0x32
 8005d68:	4a07      	ldr	r2, [pc, #28]	; (8005d88 <UART_SetConfig+0x118>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	440a      	add	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40013800 	.word	0x40013800
 8005d88:	51eb851f 	.word	0x51eb851f

08005d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	f107 0014 	add.w	r0, r7, #20
 8005d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	b004      	add	sp, #16
 8005daa:	4770      	bx	lr

08005dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005dbc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005dc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bc80      	pop	{r7}
 8005dd6:	4770      	bx	lr

08005dd8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005de0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005de4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	43db      	mvns	r3, r3
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4013      	ands	r3, r2
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e24:	b084      	sub	sp, #16
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	f107 0014 	add.w	r0, r7, #20
 8005e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr

08005e64 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b09b      	sub	sp, #108	; 0x6c
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	78db      	ldrb	r3, [r3, #3]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d81f      	bhi.n	8005ed6 <USB_ActivateEndpoint+0x72>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USB_ActivateEndpoint+0x38>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005edf 	.word	0x08005edf
 8005ea8:	08005ebb 	.word	0x08005ebb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005eac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005eb8:	e012      	b.n	8005ee0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005eba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ebe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005ec2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ec6:	e00b      	b.n	8005ee0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ec8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ed0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ed4:	e004      	b.n	8005ee0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005edc:	e000      	b.n	8005ee0 <USB_ActivateEndpoint+0x7c>
      break;
 8005ede:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	441a      	add	r2, r3
 8005f30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	7b1b      	ldrb	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 8149 	bne.w	80061e4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8084 	beq.w	8006064 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	011a      	lsls	r2, r3, #4
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	88db      	ldrh	r3, [r3, #6]
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	81fb      	strh	r3, [r7, #14]
 8005f9e:	89fb      	ldrh	r3, [r7, #14]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01b      	beq.n	8005fe0 <USB_ActivateEndpoint+0x17c>
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	81bb      	strh	r3, [r7, #12]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	89bb      	ldrh	r3, [r7, #12]
 8005fcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	78db      	ldrb	r3, [r3, #3]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d020      	beq.n	800602a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffe:	813b      	strh	r3, [r7, #8]
 8006000:	893b      	ldrh	r3, [r7, #8]
 8006002:	f083 0320 	eor.w	r3, r3, #32
 8006006:	813b      	strh	r3, [r7, #8]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	893b      	ldrh	r3, [r7, #8]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
 8006028:	e27f      	b.n	800652a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006040:	817b      	strh	r3, [r7, #10]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	441a      	add	r2, r3
 800604c:	897b      	ldrh	r3, [r7, #10]
 800604e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605e:	b29b      	uxth	r3, r3
 8006060:	8013      	strh	r3, [r2, #0]
 8006062:	e262      	b.n	800652a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606e:	b29b      	uxth	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	4413      	add	r3, r2
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	011a      	lsls	r2, r3, #4
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	4413      	add	r3, r2
 8006082:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	88db      	ldrh	r3, [r3, #6]
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	b29b      	uxth	r3, r3
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	627b      	str	r3, [r7, #36]	; 0x24
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	461a      	mov	r2, r3
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	4413      	add	r3, r2
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	011a      	lsls	r2, r3, #4
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	4413      	add	r3, r2
 80060b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ba:	623b      	str	r3, [r7, #32]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d112      	bne.n	80060ea <USB_ActivateEndpoint+0x286>
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	e02f      	b.n	800614a <USB_ActivateEndpoint+0x2e6>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b3e      	cmp	r3, #62	; 0x3e
 80060f0:	d813      	bhi.n	800611a <USB_ActivateEndpoint+0x2b6>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	085b      	lsrs	r3, r3, #1
 80060f8:	663b      	str	r3, [r7, #96]	; 0x60
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <USB_ActivateEndpoint+0x2a8>
 8006106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006108:	3301      	adds	r3, #1
 800610a:	663b      	str	r3, [r7, #96]	; 0x60
 800610c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610e:	b29b      	uxth	r3, r3
 8006110:	029b      	lsls	r3, r3, #10
 8006112:	b29a      	uxth	r2, r3
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	e017      	b.n	800614a <USB_ActivateEndpoint+0x2e6>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	663b      	str	r3, [r7, #96]	; 0x60
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <USB_ActivateEndpoint+0x2d0>
 800612e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006130:	3b01      	subs	r3, #1
 8006132:	663b      	str	r3, [r7, #96]	; 0x60
 8006134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006136:	b29b      	uxth	r3, r3
 8006138:	029b      	lsls	r3, r3, #10
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006144:	b29a      	uxth	r2, r3
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	83fb      	strh	r3, [r7, #30]
 8006158:	8bfb      	ldrh	r3, [r7, #30]
 800615a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01b      	beq.n	800619a <USB_ActivateEndpoint+0x336>
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006178:	83bb      	strh	r3, [r7, #28]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	8bbb      	ldrh	r3, [r7, #28]
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b0:	837b      	strh	r3, [r7, #26]
 80061b2:	8b7b      	ldrh	r3, [r7, #26]
 80061b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061b8:	837b      	strh	r3, [r7, #26]
 80061ba:	8b7b      	ldrh	r3, [r7, #26]
 80061bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061c0:	837b      	strh	r3, [r7, #26]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	441a      	add	r2, r3
 80061cc:	8b7b      	ldrh	r3, [r7, #26]
 80061ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061de:	b29b      	uxth	r3, r3
 80061e0:	8013      	strh	r3, [r2, #0]
 80061e2:	e1a2      	b.n	800652a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	65bb      	str	r3, [r7, #88]	; 0x58
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622a:	b29b      	uxth	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006230:	4413      	add	r3, r2
 8006232:	65bb      	str	r3, [r7, #88]	; 0x58
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	011a      	lsls	r2, r3, #4
 800623a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800623c:	4413      	add	r3, r2
 800623e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006242:	657b      	str	r3, [r7, #84]	; 0x54
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	891b      	ldrh	r3, [r3, #8]
 8006248:	085b      	lsrs	r3, r3, #1
 800624a:	b29b      	uxth	r3, r3
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	653b      	str	r3, [r7, #80]	; 0x50
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006264:	4413      	add	r3, r2
 8006266:	653b      	str	r3, [r7, #80]	; 0x50
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	011a      	lsls	r2, r3, #4
 800626e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006270:	4413      	add	r3, r2
 8006272:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	895b      	ldrh	r3, [r3, #10]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	b29b      	uxth	r3, r3
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006286:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 8091 	bne.w	80063b4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80062a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80062a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01b      	beq.n	80062e2 <USB_ActivateEndpoint+0x47e>
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	873b      	strh	r3, [r7, #56]	; 0x38
 80062f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01b      	beq.n	8006332 <USB_ActivateEndpoint+0x4ce>
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006348:	86bb      	strh	r3, [r7, #52]	; 0x34
 800634a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800634c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006350:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006352:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006354:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006358:	86bb      	strh	r3, [r7, #52]	; 0x34
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006390:	867b      	strh	r3, [r7, #50]	; 0x32
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800639e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8013      	strh	r3, [r2, #0]
 80063b2:	e0ba      	b.n	800652a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80063c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01d      	beq.n	800640c <USB_ActivateEndpoint+0x5a8>
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	441a      	add	r2, r3
 80063f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006408:	b29b      	uxth	r3, r3
 800640a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800641c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01d      	beq.n	8006464 <USB_ActivateEndpoint+0x600>
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	441a      	add	r2, r3
 800644c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	78db      	ldrb	r3, [r3, #3]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d024      	beq.n	80064b6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006482:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006486:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800648a:	f083 0320 	eor.w	r3, r3, #32
 800648e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]
 80064b4:	e01d      	b.n	80064f2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006508:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	441a      	add	r2, r3
 8006514:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800652a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800652e:	4618      	mov	r0, r3
 8006530:	376c      	adds	r7, #108	; 0x6c
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr

08006538 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006538:	b480      	push	{r7}
 800653a:	b08d      	sub	sp, #52	; 0x34
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	7b1b      	ldrb	r3, [r3, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	f040 808e 	bne.w	8006668 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d044      	beq.n	80065de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	81bb      	strh	r3, [r7, #12]
 8006562:	89bb      	ldrh	r3, [r7, #12]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01b      	beq.n	80065a4 <USB_DeactivateEndpoint+0x6c>
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	817b      	strh	r3, [r7, #10]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	897b      	ldrh	r3, [r7, #10]
 8006590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ba:	813b      	strh	r3, [r7, #8]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	893b      	ldrh	r3, [r7, #8]
 80065c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]
 80065dc:	e192      	b.n	8006904 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	827b      	strh	r3, [r7, #18]
 80065ec:	8a7b      	ldrh	r3, [r7, #18]
 80065ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d01b      	beq.n	800662e <USB_DeactivateEndpoint+0xf6>
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	823b      	strh	r3, [r7, #16]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	441a      	add	r2, r3
 8006618:	8a3b      	ldrh	r3, [r7, #16]
 800661a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800661e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662a:	b29b      	uxth	r3, r3
 800662c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	81fb      	strh	r3, [r7, #14]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	89fb      	ldrh	r3, [r7, #14]
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
 8006666:	e14d      	b.n	8006904 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 80a5 	bne.w	80067bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	843b      	strh	r3, [r7, #32]
 8006680:	8c3b      	ldrh	r3, [r7, #32]
 8006682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01b      	beq.n	80066c2 <USB_DeactivateEndpoint+0x18a>
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800669c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a0:	83fb      	strh	r3, [r7, #30]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	8bfb      	ldrh	r3, [r7, #30]
 80066ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066be:	b29b      	uxth	r3, r3
 80066c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	83bb      	strh	r3, [r7, #28]
 80066d0:	8bbb      	ldrh	r3, [r7, #28]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01b      	beq.n	8006712 <USB_DeactivateEndpoint+0x1da>
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	837b      	strh	r3, [r7, #26]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8b7b      	ldrh	r3, [r7, #26]
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006728:	833b      	strh	r3, [r7, #24]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	8b3b      	ldrh	r3, [r7, #24]
 8006736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006746:	b29b      	uxth	r3, r3
 8006748:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006760:	82fb      	strh	r3, [r7, #22]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	8afb      	ldrh	r3, [r7, #22]
 800676e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677e:	b29b      	uxth	r3, r3
 8006780:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006798:	82bb      	strh	r3, [r7, #20]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	8abb      	ldrh	r3, [r7, #20]
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
 80067ba:	e0a3      	b.n	8006904 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80067ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01b      	beq.n	800680c <USB_DeactivateEndpoint+0x2d4>
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	441a      	add	r2, r3
 80067f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	857b      	strh	r3, [r7, #42]	; 0x2a
 800681a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01b      	beq.n	800685c <USB_DeactivateEndpoint+0x324>
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	853b      	strh	r3, [r7, #40]	; 0x28
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	441a      	add	r2, r3
 8006846:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800684c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006854:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	881b      	ldrh	r3, [r3, #0]
 8006868:	b29b      	uxth	r3, r3
 800686a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006872:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	441a      	add	r2, r3
 800687e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800688c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006890:	b29b      	uxth	r3, r3
 8006892:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3734      	adds	r7, #52	; 0x34
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b0cc      	sub	sp, #304	; 0x130
 8006914:	af00      	add	r7, sp, #0
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800691e:	6018      	str	r0, [r3, #0]
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006928:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b01      	cmp	r3, #1
 8006938:	f041 817d 	bne.w	8007c36 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800693c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006940:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	429a      	cmp	r2, r3
 8006956:	d908      	bls.n	800696a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006968:	e007      	b.n	800697a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800696a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800697a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	7b1b      	ldrb	r3, [r3, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d152      	bne.n	8006a30 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6959      	ldr	r1, [r3, #20]
 8006996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	88da      	ldrh	r2, [r3, #6]
 80069a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069b0:	6800      	ldr	r0, [r0, #0]
 80069b2:	f001 ff23 	bl	80087fc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80069be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d8:	b29b      	uxth	r3, r3
 80069da:	4619      	mov	r1, r3
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80069e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069e8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	440a      	add	r2, r1
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	011a      	lsls	r2, r3, #4
 8006a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	801a      	strh	r2, [r3, #0]
 8006a2c:	f001 b8b5 	b.w	8007b9a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	f040 84c6 	bne.w	80073ce <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	f240 8443 	bls.w	80072e6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a86:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a1a      	ldr	r2, [r3, #32]
 8006ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006acc:	1ad2      	subs	r2, r2, r3
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 823e 	beq.w	8006f7e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006b0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 809a 	bne.w	8006c5c <USB_EPStartXfer+0x34c>
 8006b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b34:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b5a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	440a      	add	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	011a      	lsls	r2, r3, #4
 8006b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d122      	bne.n	8006bda <USB_EPStartXfer+0x2ca>
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	e079      	b.n	8006cce <USB_EPStartXfer+0x3be>
 8006bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bde:	2b3e      	cmp	r3, #62	; 0x3e
 8006be0:	d81b      	bhi.n	8006c1a <USB_EPStartXfer+0x30a>
 8006be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <USB_EPStartXfer+0x2f2>
 8006bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	029b      	lsls	r3, r3, #10
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	801a      	strh	r2, [r3, #0]
 8006c18:	e059      	b.n	8006cce <USB_EPStartXfer+0x3be>
 8006c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d104      	bne.n	8006c3a <USB_EPStartXfer+0x32a>
 8006c30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c34:	3b01      	subs	r3, #1
 8006c36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	e038      	b.n	8006cce <USB_EPStartXfer+0x3be>
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	785b      	ldrb	r3, [r3, #1]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d130      	bne.n	8006cce <USB_EPStartXfer+0x3be>
 8006c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006c86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c8a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	440a      	add	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	011a      	lsls	r2, r3, #4
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4413      	add	r3, r2
 8006cae:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	895b      	ldrh	r3, [r3, #10]
 8006cda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6959      	ldr	r1, [r3, #20]
 8006cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006cf4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006cf8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f001 fd7d 	bl	80087fc <USB_WritePMA>
            ep->xfer_buff += len;
 8006d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695a      	ldr	r2, [r3, #20]
 8006d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d12:	441a      	add	r2, r3
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a1a      	ldr	r2, [r3, #32]
 8006d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d90f      	bls.n	8006d5c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4c:	1ad2      	subs	r2, r2, r3
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	621a      	str	r2, [r3, #32]
 8006d5a:	e00e      	b.n	8006d7a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2200      	movs	r2, #0
 8006d78:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 809a 	bne.w	8006ec0 <USB_EPStartXfer+0x5b0>
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4619      	mov	r1, r3
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006dba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dbe:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	440a      	add	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	011a      	lsls	r2, r3, #4
 8006dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dda:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4413      	add	r3, r2
 8006de2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d122      	bne.n	8006e3e <USB_EPStartXfer+0x52e>
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e083      	b.n	8006f46 <USB_EPStartXfer+0x636>
 8006e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e42:	2b3e      	cmp	r3, #62	; 0x3e
 8006e44:	d81b      	bhi.n	8006e7e <USB_EPStartXfer+0x56e>
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <USB_EPStartXfer+0x556>
 8006e5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e60:	3301      	adds	r3, #1
 8006e62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e66:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	029b      	lsls	r3, r3, #10
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e063      	b.n	8006f46 <USB_EPStartXfer+0x636>
 8006e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <USB_EPStartXfer+0x58e>
 8006e94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e9e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	e042      	b.n	8006f46 <USB_EPStartXfer+0x636>
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d13a      	bne.n	8006f46 <USB_EPStartXfer+0x636>
 8006ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ed8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006edc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006efe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f02:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	440a      	add	r2, r1
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	011a      	lsls	r2, r3, #4
 8006f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4413      	add	r3, r2
 8006f26:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	891b      	ldrh	r3, [r3, #8]
 8006f52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6959      	ldr	r1, [r3, #20]
 8006f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f74:	6800      	ldr	r0, [r0, #0]
 8006f76:	f001 fc41 	bl	80087fc <USB_WritePMA>
 8006f7a:	f000 be0e 	b.w	8007b9a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	785b      	ldrb	r3, [r3, #1]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d16d      	bne.n	800706a <USB_EPStartXfer+0x75a>
 8006f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	461a      	mov	r2, r3
 8006fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fae:	4413      	add	r3, r2
 8006fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	011a      	lsls	r2, r3, #4
 8006fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d112      	bne.n	8006ff8 <USB_EPStartXfer+0x6e8>
 8006fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff4:	801a      	strh	r2, [r3, #0]
 8006ff6:	e063      	b.n	80070c0 <USB_EPStartXfer+0x7b0>
 8006ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ffe:	d817      	bhi.n	8007030 <USB_EPStartXfer+0x720>
 8007000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007004:	085b      	lsrs	r3, r3, #1
 8007006:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800700a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <USB_EPStartXfer+0x710>
 8007016:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800701a:	3301      	adds	r3, #1
 800701c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007020:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29a      	uxth	r2, r3
 800702a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e047      	b.n	80070c0 <USB_EPStartXfer+0x7b0>
 8007030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USB_EPStartXfer+0x740>
 8007046:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800704a:	3b01      	subs	r3, #1
 800704c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007050:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007054:	b29b      	uxth	r3, r3
 8007056:	029b      	lsls	r3, r3, #10
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007062:	b29a      	uxth	r2, r3
 8007064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e02a      	b.n	80070c0 <USB_EPStartXfer+0x7b0>
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d122      	bne.n	80070c0 <USB_EPStartXfer+0x7b0>
 800707a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	653b      	str	r3, [r7, #80]	; 0x50
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800709a:	4413      	add	r3, r2
 800709c:	653b      	str	r3, [r7, #80]	; 0x50
 800709e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	011a      	lsls	r2, r3, #4
 80070ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ae:	4413      	add	r3, r2
 80070b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80070c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	891b      	ldrh	r3, [r3, #8]
 80070cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6959      	ldr	r1, [r3, #20]
 80070dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80070e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070ee:	6800      	ldr	r0, [r0, #0]
 80070f0:	f001 fb84 	bl	80087fc <USB_WritePMA>
            ep->xfer_buff += len;
 80070f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695a      	ldr	r2, [r3, #20]
 8007100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007104:	441a      	add	r2, r3
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6a1a      	ldr	r2, [r3, #32]
 800711e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	429a      	cmp	r2, r3
 800712c:	d90f      	bls.n	800714e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800712e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007132:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	621a      	str	r2, [r3, #32]
 800714c:	e00e      	b.n	800716c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800714e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2200      	movs	r2, #0
 800716a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800716c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	643b      	str	r3, [r7, #64]	; 0x40
 8007178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d16d      	bne.n	8007264 <USB_EPStartXfer+0x954>
 8007188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	63bb      	str	r3, [r7, #56]	; 0x38
 8007194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	4413      	add	r3, r2
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	011a      	lsls	r2, r3, #4
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	4413      	add	r3, r2
 80071be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
 80071c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d112      	bne.n	80071f2 <USB_EPStartXfer+0x8e2>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	801a      	strh	r2, [r3, #0]
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	e05d      	b.n	80072ae <USB_EPStartXfer+0x99e>
 80071f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f6:	2b3e      	cmp	r3, #62	; 0x3e
 80071f8:	d817      	bhi.n	800722a <USB_EPStartXfer+0x91a>
 80071fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <USB_EPStartXfer+0x90a>
 8007210:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007214:	3301      	adds	r3, #1
 8007216:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800721a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800721e:	b29b      	uxth	r3, r3
 8007220:	029b      	lsls	r3, r3, #10
 8007222:	b29a      	uxth	r2, r3
 8007224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	e041      	b.n	80072ae <USB_EPStartXfer+0x99e>
 800722a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <USB_EPStartXfer+0x93a>
 8007240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007244:	3b01      	subs	r3, #1
 8007246:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800724a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800724e:	b29b      	uxth	r3, r3
 8007250:	029b      	lsls	r3, r3, #10
 8007252:	b29b      	uxth	r3, r3
 8007254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725c:	b29a      	uxth	r2, r3
 800725e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	e024      	b.n	80072ae <USB_EPStartXfer+0x99e>
 8007264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d11c      	bne.n	80072ae <USB_EPStartXfer+0x99e>
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007288:	4413      	add	r3, r2
 800728a:	643b      	str	r3, [r7, #64]	; 0x40
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	011a      	lsls	r2, r3, #4
 800729a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729c:	4413      	add	r3, r2
 800729e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	895b      	ldrh	r3, [r3, #10]
 80072ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6959      	ldr	r1, [r3, #20]
 80072ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072dc:	6800      	ldr	r0, [r0, #0]
 80072de:	f001 fa8d 	bl	80087fc <USB_WritePMA>
 80072e2:	f000 bc5a 	b.w	8007b9a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80072e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007324:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	441a      	add	r2, r3
 800733a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800733e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734e:	b29b      	uxth	r3, r3
 8007350:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800735e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736c:	b29b      	uxth	r3, r3
 800736e:	461a      	mov	r2, r3
 8007370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007372:	4413      	add	r3, r2
 8007374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	011a      	lsls	r2, r3, #4
 8007384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007386:	4413      	add	r3, r2
 8007388:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800738c:	65bb      	str	r3, [r7, #88]	; 0x58
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	b29a      	uxth	r2, r3
 8007394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007396:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	891b      	ldrh	r3, [r3, #8]
 80073a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6959      	ldr	r1, [r3, #20]
 80073b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073be:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073c6:	6800      	ldr	r0, [r0, #0]
 80073c8:	f001 fa18 	bl	80087fc <USB_WritePMA>
 80073cc:	e3e5      	b.n	8007b9a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80073ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80073f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	441a      	add	r2, r3
 8007412:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007426:	b29b      	uxth	r3, r3
 8007428:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 81bc 	beq.w	80077e8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800747e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d16d      	bne.n	800756a <USB_EPStartXfer+0xc5a>
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	67bb      	str	r3, [r7, #120]	; 0x78
 800749a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ae:	4413      	add	r3, r2
 80074b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	011a      	lsls	r2, r3, #4
 80074c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c2:	4413      	add	r3, r2
 80074c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074c8:	677b      	str	r3, [r7, #116]	; 0x74
 80074ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d112      	bne.n	80074f8 <USB_EPStartXfer+0xbe8>
 80074d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074dc:	b29a      	uxth	r2, r3
 80074de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	e060      	b.n	80075ba <USB_EPStartXfer+0xcaa>
 80074f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fc:	2b3e      	cmp	r3, #62	; 0x3e
 80074fe:	d817      	bhi.n	8007530 <USB_EPStartXfer+0xc20>
 8007500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007504:	085b      	lsrs	r3, r3, #1
 8007506:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800750a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d004      	beq.n	8007520 <USB_EPStartXfer+0xc10>
 8007516:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800751a:	3301      	adds	r3, #1
 800751c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007520:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007524:	b29b      	uxth	r3, r3
 8007526:	029b      	lsls	r3, r3, #10
 8007528:	b29a      	uxth	r2, r3
 800752a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e044      	b.n	80075ba <USB_EPStartXfer+0xcaa>
 8007530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800753a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <USB_EPStartXfer+0xc40>
 8007546:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800754a:	3b01      	subs	r3, #1
 800754c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007550:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007554:	b29b      	uxth	r3, r3
 8007556:	029b      	lsls	r3, r3, #10
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800755e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007562:	b29a      	uxth	r2, r3
 8007564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	e027      	b.n	80075ba <USB_EPStartXfer+0xcaa>
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	785b      	ldrb	r3, [r3, #1]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d11f      	bne.n	80075ba <USB_EPStartXfer+0xcaa>
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007588:	b29b      	uxth	r3, r3
 800758a:	461a      	mov	r2, r3
 800758c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007590:	4413      	add	r3, r2
 8007592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	011a      	lsls	r2, r3, #4
 80075a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075a8:	4413      	add	r3, r2
 80075aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	895b      	ldrh	r3, [r3, #10]
 80075c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6959      	ldr	r1, [r3, #20]
 80075d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075da:	b29b      	uxth	r3, r3
 80075dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075e8:	6800      	ldr	r0, [r0, #0]
 80075ea:	f001 f907 	bl	80087fc <USB_WritePMA>
          ep->xfer_buff += len;
 80075ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695a      	ldr	r2, [r3, #20]
 80075fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fe:	441a      	add	r2, r3
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800760c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	d90f      	bls.n	8007648 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007638:	1ad2      	subs	r2, r2, r3
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	621a      	str	r2, [r3, #32]
 8007646:	e00e      	b.n	8007666 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2200      	movs	r2, #0
 8007664:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8295 	beq.w	8007b9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d16d      	bne.n	800775c <USB_EPStartXfer+0xe4c>
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	66bb      	str	r3, [r7, #104]	; 0x68
 800768c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769a:	b29b      	uxth	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076a0:	4413      	add	r3, r2
 80076a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80076a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	011a      	lsls	r2, r3, #4
 80076b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076b4:	4413      	add	r3, r2
 80076b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076ba:	667b      	str	r3, [r7, #100]	; 0x64
 80076bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d112      	bne.n	80076ea <USB_EPStartXfer+0xdda>
 80076c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d2:	801a      	strh	r2, [r3, #0]
 80076d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	b29b      	uxth	r3, r3
 80076da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e6:	801a      	strh	r2, [r3, #0]
 80076e8:	e063      	b.n	80077b2 <USB_EPStartXfer+0xea2>
 80076ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ee:	2b3e      	cmp	r3, #62	; 0x3e
 80076f0:	d817      	bhi.n	8007722 <USB_EPStartXfer+0xe12>
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d004      	beq.n	8007712 <USB_EPStartXfer+0xe02>
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800770c:	3301      	adds	r3, #1
 800770e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007716:	b29b      	uxth	r3, r3
 8007718:	029b      	lsls	r3, r3, #10
 800771a:	b29a      	uxth	r2, r3
 800771c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	e047      	b.n	80077b2 <USB_EPStartXfer+0xea2>
 8007722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007726:	095b      	lsrs	r3, r3, #5
 8007728:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800772c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <USB_EPStartXfer+0xe32>
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773c:	3b01      	subs	r3, #1
 800773e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007746:	b29b      	uxth	r3, r3
 8007748:	029b      	lsls	r3, r3, #10
 800774a:	b29b      	uxth	r3, r3
 800774c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007754:	b29a      	uxth	r2, r3
 8007756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007758:	801a      	strh	r2, [r3, #0]
 800775a:	e02a      	b.n	80077b2 <USB_EPStartXfer+0xea2>
 800775c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d122      	bne.n	80077b2 <USB_EPStartXfer+0xea2>
 800776c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	673b      	str	r3, [r7, #112]	; 0x70
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007786:	b29b      	uxth	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800778c:	4413      	add	r3, r2
 800778e:	673b      	str	r3, [r7, #112]	; 0x70
 8007790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	011a      	lsls	r2, r3, #4
 800779e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077a0:	4413      	add	r3, r2
 80077a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	891b      	ldrh	r3, [r3, #8]
 80077be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6959      	ldr	r1, [r3, #20]
 80077ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077e0:	6800      	ldr	r0, [r0, #0]
 80077e2:	f001 f80b 	bl	80087fc <USB_WritePMA>
 80077e6:	e1d8      	b.n	8007b9a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d178      	bne.n	80078ea <USB_EPStartXfer+0xfda>
 80077f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007814:	b29b      	uxth	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800781c:	4413      	add	r3, r2
 800781e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	011a      	lsls	r2, r3, #4
 8007830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007834:	4413      	add	r3, r2
 8007836:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800783a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800783e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d116      	bne.n	8007874 <USB_EPStartXfer+0xf64>
 8007846:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007852:	b29a      	uxth	r2, r3
 8007854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
 8007862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800786a:	b29a      	uxth	r2, r3
 800786c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007870:	801a      	strh	r2, [r3, #0]
 8007872:	e06b      	b.n	800794c <USB_EPStartXfer+0x103c>
 8007874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007878:	2b3e      	cmp	r3, #62	; 0x3e
 800787a:	d818      	bhi.n	80078ae <USB_EPStartXfer+0xf9e>
 800787c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d004      	beq.n	800789c <USB_EPStartXfer+0xf8c>
 8007892:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007896:	3301      	adds	r3, #1
 8007898:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800789c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	029b      	lsls	r3, r3, #10
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	e04e      	b.n	800794c <USB_EPStartXfer+0x103c>
 80078ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80078b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USB_EPStartXfer+0xfbe>
 80078c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80078c8:	3b01      	subs	r3, #1
 80078ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80078ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	029b      	lsls	r3, r3, #10
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	e030      	b.n	800794c <USB_EPStartXfer+0x103c>
 80078ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d128      	bne.n	800794c <USB_EPStartXfer+0x103c>
 80078fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007916:	b29b      	uxth	r3, r3
 8007918:	461a      	mov	r2, r3
 800791a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800791e:	4413      	add	r3, r2
 8007920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	011a      	lsls	r2, r3, #4
 8007932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007936:	4413      	add	r3, r2
 8007938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800793c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007944:	b29a      	uxth	r2, r3
 8007946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800794a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	891b      	ldrh	r3, [r3, #8]
 8007958:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6959      	ldr	r1, [r3, #20]
 8007968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796c:	b29b      	uxth	r3, r3
 800796e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007972:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007976:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	f000 ff3e 	bl	80087fc <USB_WritePMA>
          ep->xfer_buff += len;
 8007980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695a      	ldr	r2, [r3, #20]
 800798c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007990:	441a      	add	r2, r3
 8007992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6a1a      	ldr	r2, [r3, #32]
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d90f      	bls.n	80079da <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80079ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	621a      	str	r2, [r3, #32]
 80079d8:	e00e      	b.n	80079f8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80079da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2200      	movs	r2, #0
 80079f6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80079f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 80cc 	beq.w	8007b9a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d178      	bne.n	8007b12 <USB_EPStartXfer+0x1202>
 8007a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a44:	4413      	add	r3, r2
 8007a46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	011a      	lsls	r2, r3, #4
 8007a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d116      	bne.n	8007a9c <USB_EPStartXfer+0x118c>
 8007a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	e064      	b.n	8007b66 <USB_EPStartXfer+0x1256>
 8007a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa0:	2b3e      	cmp	r3, #62	; 0x3e
 8007aa2:	d818      	bhi.n	8007ad6 <USB_EPStartXfer+0x11c6>
 8007aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa8:	085b      	lsrs	r3, r3, #1
 8007aaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <USB_EPStartXfer+0x11b4>
 8007aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007abe:	3301      	adds	r3, #1
 8007ac0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	029b      	lsls	r3, r3, #10
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	e047      	b.n	8007b66 <USB_EPStartXfer+0x1256>
 8007ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ada:	095b      	lsrs	r3, r3, #5
 8007adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae4:	f003 031f 	and.w	r3, r3, #31
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <USB_EPStartXfer+0x11e6>
 8007aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007af0:	3b01      	subs	r3, #1
 8007af2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	029b      	lsls	r3, r3, #10
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	e029      	b.n	8007b66 <USB_EPStartXfer+0x1256>
 8007b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d121      	bne.n	8007b66 <USB_EPStartXfer+0x1256>
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	461a      	mov	r2, r3
 8007b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b38:	4413      	add	r3, r2
 8007b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	011a      	lsls	r2, r3, #4
 8007b4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007b50:	4413      	add	r3, r2
 8007b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	895b      	ldrh	r3, [r3, #10]
 8007b72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6959      	ldr	r1, [r3, #20]
 8007b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b94:	6800      	ldr	r0, [r0, #0]
 8007b96:	f000 fe31 	bl	80087fc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bbc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc8:	8013      	strh	r3, [r2, #0]
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007bd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bd6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007bda:	8812      	ldrh	r2, [r2, #0]
 8007bdc:	f082 0210 	eor.w	r2, r2, #16
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007bea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007bf2:	8812      	ldrh	r2, [r2, #0]
 8007bf4:	f082 0220 	eor.w	r2, r2, #32
 8007bf8:	801a      	strh	r2, [r3, #0]
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c18:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	8013      	strh	r3, [r2, #0]
 8007c32:	f000 bc9f 	b.w	8008574 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	7b1b      	ldrb	r3, [r3, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f040 80ae 	bne.w	8007da4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	699a      	ldr	r2, [r3, #24]
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d917      	bls.n	8007c94 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c84:	1ad2      	subs	r2, r2, r3
 8007c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	619a      	str	r2, [r3, #24]
 8007c92:	e00e      	b.n	8007cb2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	011a      	lsls	r2, r3, #4
 8007cea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007cee:	4413      	add	r3, r2
 8007cf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d116      	bne.n	8007d2e <USB_EPStartXfer+0x141e>
 8007d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	e3e8      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
 8007d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d32:	2b3e      	cmp	r3, #62	; 0x3e
 8007d34:	d818      	bhi.n	8007d68 <USB_EPStartXfer+0x1458>
 8007d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <USB_EPStartXfer+0x1446>
 8007d4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d50:	3301      	adds	r3, #1
 8007d52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	029b      	lsls	r3, r3, #10
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e3cb      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
 8007d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d76:	f003 031f 	and.w	r3, r3, #31
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <USB_EPStartXfer+0x1478>
 8007d7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d82:	3b01      	subs	r3, #1
 8007d84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007da0:	801a      	strh	r2, [r3, #0]
 8007da2:	e3ad      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	78db      	ldrb	r3, [r3, #3]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	f040 8200 	bne.w	80081b6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	785b      	ldrb	r3, [r3, #1]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 8091 	bne.w	8007eea <USB_EPStartXfer+0x15da>
 8007dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	461a      	mov	r2, r3
 8007de8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007dec:	4413      	add	r3, r2
 8007dee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	011a      	lsls	r2, r3, #4
 8007e00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007e04:	4413      	add	r3, r2
 8007e06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d116      	bne.n	8007e4c <USB_EPStartXfer+0x153c>
 8007e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	e083      	b.n	8007f54 <USB_EPStartXfer+0x1644>
 8007e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	2b3e      	cmp	r3, #62	; 0x3e
 8007e5a:	d820      	bhi.n	8007e9e <USB_EPStartXfer+0x158e>
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	085b      	lsrs	r3, r3, #1
 8007e6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d004      	beq.n	8007e8c <USB_EPStartXfer+0x157c>
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e86:	3301      	adds	r3, #1
 8007e88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	029b      	lsls	r3, r3, #10
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	e05a      	b.n	8007f54 <USB_EPStartXfer+0x1644>
 8007e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	095b      	lsrs	r3, r3, #5
 8007eac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <USB_EPStartXfer+0x15be>
 8007ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	029b      	lsls	r3, r3, #10
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee6:	801a      	strh	r2, [r3, #0]
 8007ee8:	e034      	b.n	8007f54 <USB_EPStartXfer+0x1644>
 8007eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	785b      	ldrb	r3, [r3, #1]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d12c      	bne.n	8007f54 <USB_EPStartXfer+0x1644>
 8007efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f1e:	4413      	add	r3, r2
 8007f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	011a      	lsls	r2, r3, #4
 8007f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f36:	4413      	add	r3, r2
 8007f38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007f52:	801a      	strh	r2, [r3, #0]
 8007f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	785b      	ldrb	r3, [r3, #1]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f040 8091 	bne.w	8008096 <USB_EPStartXfer+0x1786>
 8007f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f98:	4413      	add	r3, r2
 8007f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	011a      	lsls	r2, r3, #4
 8007fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d116      	bne.n	8007ff8 <USB_EPStartXfer+0x16e8>
 8007fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	e07c      	b.n	80080f2 <USB_EPStartXfer+0x17e2>
 8007ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b3e      	cmp	r3, #62	; 0x3e
 8008006:	d820      	bhi.n	800804a <USB_EPStartXfer+0x173a>
 8008008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <USB_EPStartXfer+0x1728>
 800802e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008032:	3301      	adds	r3, #1
 8008034:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008038:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800803c:	b29b      	uxth	r3, r3
 800803e:	029b      	lsls	r3, r3, #10
 8008040:	b29a      	uxth	r2, r3
 8008042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008046:	801a      	strh	r2, [r3, #0]
 8008048:	e053      	b.n	80080f2 <USB_EPStartXfer+0x17e2>
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	095b      	lsrs	r3, r3, #5
 8008058:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800805c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <USB_EPStartXfer+0x176a>
 8008070:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008074:	3b01      	subs	r3, #1
 8008076:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800807a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800807e:	b29b      	uxth	r3, r3
 8008080:	029b      	lsls	r3, r3, #10
 8008082:	b29b      	uxth	r3, r3
 8008084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808c:	b29a      	uxth	r2, r3
 800808e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008092:	801a      	strh	r2, [r3, #0]
 8008094:	e02d      	b.n	80080f2 <USB_EPStartXfer+0x17e2>
 8008096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	785b      	ldrb	r3, [r3, #1]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d125      	bne.n	80080f2 <USB_EPStartXfer+0x17e2>
 80080a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	461a      	mov	r2, r3
 80080b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080bc:	4413      	add	r3, r2
 80080be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	011a      	lsls	r2, r3, #4
 80080d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80080d4:	4413      	add	r3, r2
 80080d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 81fe 	beq.w	8008500 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008124:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <USB_EPStartXfer+0x182c>
 8008130:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10d      	bne.n	8008158 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800813c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008144:	2b00      	cmp	r3, #0
 8008146:	f040 81db 	bne.w	8008500 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800814a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	f040 81d4 	bne.w	8008500 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800817e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008186:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80081a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8013      	strh	r3, [r2, #0]
 80081b4:	e1a4      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80081b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	78db      	ldrb	r3, [r3, #3]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	f040 819a 	bne.w	80084fc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80081c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699a      	ldr	r2, [r3, #24]
 80081d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d917      	bls.n	8008214 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80081e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80081f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008204:	1ad2      	subs	r2, r2, r3
 8008206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	619a      	str	r2, [r3, #24]
 8008212:	e00e      	b.n	8008232 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d178      	bne.n	8008334 <USB_EPStartXfer+0x1a24>
 8008242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800825e:	b29b      	uxth	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008266:	4413      	add	r3, r2
 8008268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800826c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	011a      	lsls	r2, r3, #4
 800827a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800827e:	4413      	add	r3, r2
 8008280:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008284:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d116      	bne.n	80082be <USB_EPStartXfer+0x19ae>
 8008290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29b      	uxth	r3, r3
 8008298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800829c:	b29a      	uxth	r2, r3
 800829e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082ba:	801a      	strh	r2, [r3, #0]
 80082bc:	e06b      	b.n	8008396 <USB_EPStartXfer+0x1a86>
 80082be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c2:	2b3e      	cmp	r3, #62	; 0x3e
 80082c4:	d818      	bhi.n	80082f8 <USB_EPStartXfer+0x19e8>
 80082c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <USB_EPStartXfer+0x19d6>
 80082dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e0:	3301      	adds	r3, #1
 80082e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	e04e      	b.n	8008396 <USB_EPStartXfer+0x1a86>
 80082f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008306:	f003 031f 	and.w	r3, r3, #31
 800830a:	2b00      	cmp	r3, #0
 800830c:	d104      	bne.n	8008318 <USB_EPStartXfer+0x1a08>
 800830e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008312:	3b01      	subs	r3, #1
 8008314:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800831c:	b29b      	uxth	r3, r3
 800831e:	029b      	lsls	r3, r3, #10
 8008320:	b29b      	uxth	r3, r3
 8008322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832a:	b29a      	uxth	r2, r3
 800832c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	e030      	b.n	8008396 <USB_EPStartXfer+0x1a86>
 8008334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d128      	bne.n	8008396 <USB_EPStartXfer+0x1a86>
 8008344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008360:	b29b      	uxth	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008368:	4413      	add	r3, r2
 800836a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800836e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	011a      	lsls	r2, r3, #4
 800837c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008380:	4413      	add	r3, r2
 8008382:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008386:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800838a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838e:	b29a      	uxth	r2, r3
 8008390:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d178      	bne.n	80084a6 <USB_EPStartXfer+0x1b96>
 80083b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083d8:	4413      	add	r3, r2
 80083da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	011a      	lsls	r2, r3, #4
 80083ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083f0:	4413      	add	r3, r2
 80083f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d116      	bne.n	8008430 <USB_EPStartXfer+0x1b20>
 8008402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800840e:	b29a      	uxth	r2, r3
 8008410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008414:	801a      	strh	r2, [r3, #0]
 8008416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008426:	b29a      	uxth	r2, r3
 8008428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800842c:	801a      	strh	r2, [r3, #0]
 800842e:	e067      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
 8008430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008434:	2b3e      	cmp	r3, #62	; 0x3e
 8008436:	d818      	bhi.n	800846a <USB_EPStartXfer+0x1b5a>
 8008438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d004      	beq.n	8008458 <USB_EPStartXfer+0x1b48>
 800844e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008452:	3301      	adds	r3, #1
 8008454:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008458:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800845c:	b29b      	uxth	r3, r3
 800845e:	029b      	lsls	r3, r3, #10
 8008460:	b29a      	uxth	r2, r3
 8008462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008466:	801a      	strh	r2, [r3, #0]
 8008468:	e04a      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
 800846a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846e:	095b      	lsrs	r3, r3, #5
 8008470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008478:	f003 031f 	and.w	r3, r3, #31
 800847c:	2b00      	cmp	r3, #0
 800847e:	d104      	bne.n	800848a <USB_EPStartXfer+0x1b7a>
 8008480:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008484:	3b01      	subs	r3, #1
 8008486:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800848a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800848e:	b29b      	uxth	r3, r3
 8008490:	029b      	lsls	r3, r3, #10
 8008492:	b29b      	uxth	r3, r3
 8008494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849c:	b29a      	uxth	r2, r3
 800849e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	e02c      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
 80084a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d124      	bne.n	8008500 <USB_EPStartXfer+0x1bf0>
 80084b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084cc:	4413      	add	r3, r2
 80084ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	011a      	lsls	r2, r3, #4
 80084e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e4:	4413      	add	r3, r2
 80084e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	e001      	b.n	8008500 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e03a      	b.n	8008576 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800852a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800852e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008532:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008536:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800853a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800853e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008546:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	441a      	add	r2, r3
 800855c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008570:	b29b      	uxth	r3, r3
 8008572:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d020      	beq.n	80085d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a8:	81bb      	strh	r3, [r7, #12]
 80085aa:	89bb      	ldrh	r3, [r7, #12]
 80085ac:	f083 0310 	eor.w	r3, r3, #16
 80085b0:	81bb      	strh	r3, [r7, #12]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	89bb      	ldrh	r3, [r7, #12]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]
 80085d2:	e01f      	b.n	8008614 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	81fb      	strh	r3, [r7, #14]
 80085ec:	89fb      	ldrh	r3, [r7, #14]
 80085ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085f2:	81fb      	strh	r3, [r7, #14]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	441a      	add	r2, r3
 80085fe:	89fb      	ldrh	r3, [r7, #14]
 8008600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800860c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008610:	b29b      	uxth	r3, r3
 8008612:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	7b1b      	ldrb	r3, [r3, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f040 809d 	bne.w	800876e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	785b      	ldrb	r3, [r3, #1]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d04c      	beq.n	80086d6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	823b      	strh	r3, [r7, #16]
 800864a:	8a3b      	ldrh	r3, [r7, #16]
 800864c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01b      	beq.n	800868c <USB_EPClearStall+0x6c>
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866a:	81fb      	strh	r3, [r7, #14]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	441a      	add	r2, r3
 8008676:	89fb      	ldrh	r3, [r7, #14]
 8008678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008688:	b29b      	uxth	r3, r3
 800868a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d06c      	beq.n	800876e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086aa:	81bb      	strh	r3, [r7, #12]
 80086ac:	89bb      	ldrh	r3, [r7, #12]
 80086ae:	f083 0320 	eor.w	r3, r3, #32
 80086b2:	81bb      	strh	r3, [r7, #12]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	89bb      	ldrh	r3, [r7, #12]
 80086c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	8013      	strh	r3, [r2, #0]
 80086d4:	e04b      	b.n	800876e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	82fb      	strh	r3, [r7, #22]
 80086e4:	8afb      	ldrh	r3, [r7, #22]
 80086e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01b      	beq.n	8008726 <USB_EPClearStall+0x106>
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008704:	82bb      	strh	r3, [r7, #20]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	441a      	add	r2, r3
 8008710:	8abb      	ldrh	r3, [r7, #20]
 8008712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800871a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800871e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008722:	b29b      	uxth	r3, r3
 8008724:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873c:	827b      	strh	r3, [r7, #18]
 800873e:	8a7b      	ldrh	r3, [r7, #18]
 8008740:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008744:	827b      	strh	r3, [r7, #18]
 8008746:	8a7b      	ldrh	r3, [r7, #18]
 8008748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800874c:	827b      	strh	r3, [r7, #18]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	441a      	add	r2, r3
 8008758:	8a7b      	ldrh	r3, [r7, #18]
 800875a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800875e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876a:	b29b      	uxth	r3, r3
 800876c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	bc80      	pop	{r7}
 8008778:	4770      	bx	lr

0800877a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2280      	movs	r2, #128	; 0x80
 8008790:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr

080087a0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bc80      	pop	{r7}
 80087b2:	4770      	bx	lr

080087b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bc80      	pop	{r7}
 80087c6:	4770      	bx	lr

080087c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80087da:	68fb      	ldr	r3, [r7, #12]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr

080087e6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b08d      	sub	sp, #52	; 0x34
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	460b      	mov	r3, r1
 800880c:	80fb      	strh	r3, [r7, #6]
 800880e:	4613      	mov	r3, r2
 8008810:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008812:	88bb      	ldrh	r3, [r7, #4]
 8008814:	3301      	adds	r3, #1
 8008816:	085b      	lsrs	r3, r3, #1
 8008818:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	005a      	lsls	r2, r3, #1
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	4413      	add	r3, r2
 800882a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800882e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008834:	e01e      	b.n	8008874 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	3301      	adds	r3, #1
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	b29b      	uxth	r3, r3
 8008848:	021b      	lsls	r3, r3, #8
 800884a:	b29b      	uxth	r3, r3
 800884c:	461a      	mov	r2, r3
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	b29a      	uxth	r2, r3
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	3302      	adds	r3, #2
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	3302      	adds	r3, #2
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	3301      	adds	r3, #1
 800886c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800886e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008870:	3b01      	subs	r3, #1
 8008872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1dd      	bne.n	8008836 <USB_WritePMA+0x3a>
  }
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	3734      	adds	r7, #52	; 0x34
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr

08008886 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008886:	b480      	push	{r7}
 8008888:	b08b      	sub	sp, #44	; 0x2c
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	460b      	mov	r3, r1
 8008896:	80fb      	strh	r3, [r7, #6]
 8008898:	4613      	mov	r3, r2
 800889a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800889c:	88bb      	ldrh	r3, [r7, #4]
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	005a      	lsls	r2, r3, #1
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	4413      	add	r3, r2
 80088b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088b8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
 80088be:	e01b      	b.n	80088f8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	3302      	adds	r3, #2
 80088cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	3301      	adds	r3, #1
 80088da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	0a1b      	lsrs	r3, r3, #8
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	3301      	adds	r3, #1
 80088ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	3302      	adds	r3, #2
 80088f0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	3b01      	subs	r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e0      	bne.n	80088c0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80088fe:	88bb      	ldrh	r3, [r7, #4]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d007      	beq.n	800891a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	b2da      	uxtb	r2, r3
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	701a      	strb	r2, [r3, #0]
  }
}
 800891a:	bf00      	nop
 800891c:	372c      	adds	r7, #44	; 0x2c
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr

08008924 <LaserArray_Init>:
        UINT64_C(0b0111111111111111111110111111111111111111110111111111111111111111),
        UINT64_C(0b0111111111111111111111111111111111111111111111111111111111111111)
};


ret_t LaserArray_Init(LaserArray_t *la, const LaserArray_Config_t *config) {
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b08b      	sub	sp, #44	; 0x2c
 8008928:	af02      	add	r7, sp, #8
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
    // store the config
    la->config = *config;
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	4614      	mov	r4, r2
 8008934:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // create the semaphore lock
    const osSemaphoreAttr_t lock_attr = {
 800893a:	f107 030c 	add.w	r3, r7, #12
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	605a      	str	r2, [r3, #4]
 8008944:	609a      	str	r2, [r3, #8]
 8008946:	60da      	str	r2, [r3, #12]
 8008948:	4b5e      	ldr	r3, [pc, #376]	; (8008ac4 <LaserArray_Init+0x1a0>)
 800894a:	60fb      	str	r3, [r7, #12]
            .name = "laser_array_lock"
    };
    la->lock = osSemaphoreNew(1, 1, &lock_attr);
 800894c:	f107 030c 	add.w	r3, r7, #12
 8008950:	461a      	mov	r2, r3
 8008952:	2101      	movs	r1, #1
 8008954:	2001      	movs	r0, #1
 8008956:	f001 fe69 	bl	800a62c <osSemaphoreNew>
 800895a:	4602      	mov	r2, r0
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	611a      	str	r2, [r3, #16]
    RETURN_ON_FALSE(la->lock, RET_OUT_OF_MEMORY, "Failed to create lock");
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	bf0c      	ite	eq
 8008968:	2301      	moveq	r3, #1
 800896a:	2300      	movne	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <LaserArray_Init+0x66>
 8008972:	4b55      	ldr	r3, [pc, #340]	; (8008ac8 <LaserArray_Init+0x1a4>)
 8008974:	68d9      	ldr	r1, [r3, #12]
 8008976:	4b55      	ldr	r3, [pc, #340]	; (8008acc <LaserArray_Init+0x1a8>)
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2367      	movs	r3, #103	; 0x67
 800897e:	4a54      	ldr	r2, [pc, #336]	; (8008ad0 <LaserArray_Init+0x1ac>)
 8008980:	4854      	ldr	r0, [pc, #336]	; (8008ad4 <LaserArray_Init+0x1b0>)
 8008982:	f005 ff57 	bl	800e834 <iprintf>
 8008986:	2304      	movs	r3, #4
 8008988:	e097      	b.n	8008aba <LaserArray_Init+0x196>

    // clear the diode state and transfer data arrays
    memset(la->diodes, 0, sizeof(la->diodes));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3314      	adds	r3, #20
 800898e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f005 feb0 	bl	800e6fa <memset>
    memset(la->tx_data, 0, sizeof(la->tx_data));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80089a0:	22fc      	movs	r2, #252	; 0xfc
 80089a2:	2100      	movs	r1, #0
 80089a4:	4618      	mov	r0, r3
 80089a6:	f005 fea8 	bl	800e6fa <memset>

    // enable spi
    __HAL_SPI_ENABLE(la->config.hspi);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089bc:	601a      	str	r2, [r3, #0]

    // setup timer dma to trigger the transmission of spi data
    RETURN_ON_ERROR(
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	6a18      	ldr	r0, [r3, #32]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80089ca:	4619      	mov	r1, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	330c      	adds	r3, #12
 80089d4:	461a      	mov	r2, r3
 80089d6:	237e      	movs	r3, #126	; 0x7e
 80089d8:	f7f8 fd62 	bl	80014a0 <HAL_DMA_Start_IT>
 80089dc:	4603      	mov	r3, r0
 80089de:	77fb      	strb	r3, [r7, #31]
 80089e0:	7ffb      	ldrb	r3, [r7, #31]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bf14      	ite	ne
 80089e6:	2301      	movne	r3, #1
 80089e8:	2300      	moveq	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d012      	beq.n	8008a16 <LaserArray_Init+0xf2>
 80089f0:	4b35      	ldr	r3, [pc, #212]	; (8008ac8 <LaserArray_Init+0x1a4>)
 80089f2:	68d9      	ldr	r1, [r3, #12]
 80089f4:	7ffb      	ldrb	r3, [r7, #31]
 80089f6:	2b1c      	cmp	r3, #28
 80089f8:	d801      	bhi.n	80089fe <LaserArray_Init+0xda>
 80089fa:	7ffb      	ldrb	r3, [r7, #31]
 80089fc:	e000      	b.n	8008a00 <LaserArray_Init+0xdc>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4a32      	ldr	r2, [pc, #200]	; (8008acc <LaserArray_Init+0x1a8>)
 8008a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2371      	movs	r3, #113	; 0x71
 8008a0a:	4a31      	ldr	r2, [pc, #196]	; (8008ad0 <LaserArray_Init+0x1ac>)
 8008a0c:	4832      	ldr	r0, [pc, #200]	; (8008ad8 <LaserArray_Init+0x1b4>)
 8008a0e:	f005 ff11 	bl	800e834 <iprintf>
 8008a12:	7ffb      	ldrb	r3, [r7, #31]
 8008a14:	e051      	b.n	8008aba <LaserArray_Init+0x196>
                (uint32_t) &la->config.hspi->Instance->DR,
                sizeof(la->tx_data) / sizeof(uint16_t)),
            "Failed to start dma stream");

    // enable dma on the timer
    __HAL_TIM_ENABLE_DMA(la->config.htim_transfer, TIM_DMA_UPDATE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a28:	60da      	str	r2, [r3, #12]

    // start the transfer timer with pwm enabled
    RETURN_ON_ERROR(HAL_TIM_PWM_Start(la->config.htim_transfer, la->config.rclk_channel),
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	4619      	mov	r1, r3
 8008a34:	4610      	mov	r0, r2
 8008a36:	f7fb fc3f 	bl	80042b8 <HAL_TIM_PWM_Start>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	77bb      	strb	r3, [r7, #30]
 8008a3e:	7fbb      	ldrb	r3, [r7, #30]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bf14      	ite	ne
 8008a44:	2301      	movne	r3, #1
 8008a46:	2300      	moveq	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d012      	beq.n	8008a74 <LaserArray_Init+0x150>
 8008a4e:	4b1e      	ldr	r3, [pc, #120]	; (8008ac8 <LaserArray_Init+0x1a4>)
 8008a50:	68d9      	ldr	r1, [r3, #12]
 8008a52:	7fbb      	ldrb	r3, [r7, #30]
 8008a54:	2b1c      	cmp	r3, #28
 8008a56:	d801      	bhi.n	8008a5c <LaserArray_Init+0x138>
 8008a58:	7fbb      	ldrb	r3, [r7, #30]
 8008a5a:	e000      	b.n	8008a5e <LaserArray_Init+0x13a>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4a1b      	ldr	r2, [pc, #108]	; (8008acc <LaserArray_Init+0x1a8>)
 8008a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	237c      	movs	r3, #124	; 0x7c
 8008a68:	4a19      	ldr	r2, [pc, #100]	; (8008ad0 <LaserArray_Init+0x1ac>)
 8008a6a:	481c      	ldr	r0, [pc, #112]	; (8008adc <LaserArray_Init+0x1b8>)
 8008a6c:	f005 fee2 	bl	800e834 <iprintf>
 8008a70:	7fbb      	ldrb	r3, [r7, #30]
 8008a72:	e022      	b.n	8008aba <LaserArray_Init+0x196>
            "Failed to start transfer timer in pwm mode");

    // start the fade update timer
    RETURN_ON_ERROR(HAL_TIM_Base_Start_IT(la->config.htim_fade),
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fb fb65 	bl	8004148 <HAL_TIM_Base_Start_IT>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	777b      	strb	r3, [r7, #29]
 8008a82:	7f7b      	ldrb	r3, [r7, #29]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bf14      	ite	ne
 8008a88:	2301      	movne	r3, #1
 8008a8a:	2300      	moveq	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d012      	beq.n	8008ab8 <LaserArray_Init+0x194>
 8008a92:	4b0d      	ldr	r3, [pc, #52]	; (8008ac8 <LaserArray_Init+0x1a4>)
 8008a94:	68d9      	ldr	r1, [r3, #12]
 8008a96:	7f7b      	ldrb	r3, [r7, #29]
 8008a98:	2b1c      	cmp	r3, #28
 8008a9a:	d801      	bhi.n	8008aa0 <LaserArray_Init+0x17c>
 8008a9c:	7f7b      	ldrb	r3, [r7, #29]
 8008a9e:	e000      	b.n	8008aa2 <LaserArray_Init+0x17e>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	4a0a      	ldr	r2, [pc, #40]	; (8008acc <LaserArray_Init+0x1a8>)
 8008aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2380      	movs	r3, #128	; 0x80
 8008aac:	4a08      	ldr	r2, [pc, #32]	; (8008ad0 <LaserArray_Init+0x1ac>)
 8008aae:	480c      	ldr	r0, [pc, #48]	; (8008ae0 <LaserArray_Init+0x1bc>)
 8008ab0:	f005 fec0 	bl	800e834 <iprintf>
 8008ab4:	7f7b      	ldrb	r3, [r7, #29]
 8008ab6:	e000      	b.n	8008aba <LaserArray_Init+0x196>
            "Failed to start fade update timer");

    return RET_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3724      	adds	r7, #36	; 0x24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd90      	pop	{r4, r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	0800f90c 	.word	0x0800f90c
 8008ac8:	20000000 	.word	0x20000000
 8008acc:	20000014 	.word	0x20000014
 8008ad0:	0800f920 	.word	0x0800f920
 8008ad4:	0800f940 	.word	0x0800f940
 8008ad8:	0800f968 	.word	0x0800f968
 8008adc:	0800f994 	.word	0x0800f994
 8008ae0:	0800f9d0 	.word	0x0800f9d0

08008ae4 <_LaserArray_SetBrightness>:

static void _LaserArray_SetBrightness(LaserArray_t *la, uint8_t diode_index, uint8_t brightness) {
 8008ae4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
 8008af2:	4613      	mov	r3, r2
 8008af4:	70bb      	strb	r3, [r7, #2]
    // clamp the brightness
    if (brightness >= LA_NUM_BRIGHTNESS_LEVELS) {
 8008af6:	78bb      	ldrb	r3, [r7, #2]
 8008af8:	2b3f      	cmp	r3, #63	; 0x3f
 8008afa:	d901      	bls.n	8008b00 <_LaserArray_SetBrightness+0x1c>
        brightness = LA_NUM_BRIGHTNESS_LEVELS - 1;
 8008afc:	233f      	movs	r3, #63	; 0x3f
 8008afe:	70bb      	strb	r3, [r7, #2]
    }

    // return if the brightness did not change
    if (la->diodes[diode_index].current_brightness == brightness) {
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	4613      	mov	r3, r2
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	3314      	adds	r3, #20
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	78ba      	ldrb	r2, [r7, #2]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d057      	beq.n	8008bc8 <_LaserArray_SetBrightness+0xe4>
        return;
    }

    // store the new brightness value
    la->diodes[diode_index].current_brightness = brightness;
 8008b18:	78fa      	ldrb	r2, [r7, #3]
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	3314      	adds	r3, #20
 8008b28:	78ba      	ldrb	r2, [r7, #2]
 8008b2a:	701a      	strb	r2, [r3, #0]

    // lookup the brightness pattern
    la_brightness_pattern_t pattern = la_brightness_patterns[brightness];
 8008b2c:	78bb      	ldrb	r3, [r7, #2]
 8008b2e:	4a29      	ldr	r2, [pc, #164]	; (8008bd4 <_LaserArray_SetBrightness+0xf0>)
 8008b30:	00db      	lsls	r3, r3, #3
 8008b32:	4413      	add	r3, r2
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // iterate through each diode bitmask
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	e03e      	b.n	8008bc0 <_LaserArray_SetBrightness+0xdc>
        // either set or unset the corresponding bit depending on the pattern
        if ((pattern >> i) & UINT32_C(1)) {
 8008b42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b46:	6979      	ldr	r1, [r7, #20]
 8008b48:	f1c1 0620 	rsb	r6, r1, #32
 8008b4c:	f1a1 0020 	sub.w	r0, r1, #32
 8008b50:	fa22 f401 	lsr.w	r4, r2, r1
 8008b54:	fa03 f606 	lsl.w	r6, r3, r6
 8008b58:	4334      	orrs	r4, r6
 8008b5a:	fa23 f000 	lsr.w	r0, r3, r0
 8008b5e:	4304      	orrs	r4, r0
 8008b60:	fa23 f501 	lsr.w	r5, r3, r1
 8008b64:	f004 0801 	and.w	r8, r4, #1
 8008b68:	f04f 0900 	mov.w	r9, #0
 8008b6c:	ea58 0309 	orrs.w	r3, r8, r9
 8008b70:	d011      	beq.n	8008b96 <_LaserArray_SetBrightness+0xb2>
            la->tx_data[i] |= UINT32_C(1) << diode_index;
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	3364      	adds	r3, #100	; 0x64
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	78fb      	ldrb	r3, [r7, #3]
 8008b80:	2101      	movs	r1, #1
 8008b82:	fa01 f303 	lsl.w	r3, r1, r3
 8008b86:	431a      	orrs	r2, r3
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	3364      	adds	r3, #100	; 0x64
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	605a      	str	r2, [r3, #4]
 8008b94:	e011      	b.n	8008bba <_LaserArray_SetBrightness+0xd6>
        } else {
            la->tx_data[i] &= ~(UINT32_C(1) << diode_index);
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	3364      	adds	r3, #100	; 0x64
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8008baa:	43db      	mvns	r3, r3
 8008bac:	401a      	ands	r2, r3
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	3364      	adds	r3, #100	; 0x64
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	617b      	str	r3, [r7, #20]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8008bc4:	ddbd      	ble.n	8008b42 <_LaserArray_SetBrightness+0x5e>
 8008bc6:	e000      	b.n	8008bca <_LaserArray_SetBrightness+0xe6>
        return;
 8008bc8:	bf00      	nop
        }
    }
}
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8008bd2:	4770      	bx	lr
 8008bd4:	20000060 	.word	0x20000060

08008bd8 <LaserArray_FadeBrightness>:
exit:
    osSemaphoreRelease(la->lock);
    return ret;
}

ret_t LaserArray_FadeBrightness(LaserArray_t *la, uint8_t diode_index, uint8_t brightness, uint32_t duration) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af02      	add	r7, sp, #8
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	72fb      	strb	r3, [r7, #11]
 8008be6:	4613      	mov	r3, r2
 8008be8:	72bb      	strb	r3, [r7, #10]
    ret_t ret;
    osSemaphoreAcquire(la->lock, osWaitForever);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	f04f 31ff 	mov.w	r1, #4294967295
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fdb6 	bl	800a764 <osSemaphoreAcquire>

    // validate the diode index
    GOTO_EXIT_ON_FALSE(diode_index < LA_NUM_DIODES,
 8008bf8:	7afb      	ldrb	r3, [r7, #11]
 8008bfa:	2b1f      	cmp	r3, #31
 8008bfc:	bf8c      	ite	hi
 8008bfe:	2301      	movhi	r3, #1
 8008c00:	2300      	movls	r3, #0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00e      	beq.n	8008c26 <LaserArray_FadeBrightness+0x4e>
 8008c08:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <LaserArray_FadeBrightness+0xbc>)
 8008c0a:	68d9      	ldr	r1, [r3, #12]
 8008c0c:	7afb      	ldrb	r3, [r7, #11]
 8008c0e:	4a22      	ldr	r2, [pc, #136]	; (8008c98 <LaserArray_FadeBrightness+0xc0>)
 8008c10:	6952      	ldr	r2, [r2, #20]
 8008c12:	9201      	str	r2, [sp, #4]
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	23b9      	movs	r3, #185	; 0xb9
 8008c18:	4a20      	ldr	r2, [pc, #128]	; (8008c9c <LaserArray_FadeBrightness+0xc4>)
 8008c1a:	4821      	ldr	r0, [pc, #132]	; (8008ca0 <LaserArray_FadeBrightness+0xc8>)
 8008c1c:	f005 fe0a 	bl	800e834 <iprintf>
 8008c20:	2305      	movs	r3, #5
 8008c22:	75fb      	strb	r3, [r7, #23]
 8008c24:	e02b      	b.n	8008c7e <LaserArray_FadeBrightness+0xa6>
            RET_INVALID_ARG,
            "Invalid diode index: %u", diode_index);

    // setup the diode_index reference
    LaserArray_Diode_t *diode = &la->diodes[diode_index];
 8008c26:	7afa      	ldrb	r2, [r7, #11]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	3310      	adds	r3, #16
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	3304      	adds	r3, #4
 8008c38:	613b      	str	r3, [r7, #16]
    diode->source_brightness = diode->current_brightness;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	781a      	ldrb	r2, [r3, #0]
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	705a      	strb	r2, [r3, #1]
    diode->target_brightness = brightness;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	7aba      	ldrb	r2, [r7, #10]
 8008c46:	709a      	strb	r2, [r3, #2]
    diode->transition_duration = duration * LA_FADE_TICK_RATE / 1000;
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	1a9b      	subs	r3, r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	461a      	mov	r2, r3
 8008c54:	4b13      	ldr	r3, [pc, #76]	; (8008ca4 <LaserArray_FadeBrightness+0xcc>)
 8008c56:	fba3 2302 	umull	r2, r3, r3, r2
 8008c5a:	099a      	lsrs	r2, r3, #6
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	605a      	str	r2, [r3, #4]
    diode->transition_tick = 0;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	2200      	movs	r2, #0
 8008c64:	609a      	str	r2, [r3, #8]

    // if duration is zero, set the brightness immediately
    if (diode->transition_duration == 0) {
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <LaserArray_FadeBrightness+0xa2>
        _LaserArray_SetBrightness(la, diode_index, brightness);
 8008c6e:	7aba      	ldrb	r2, [r7, #10]
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	4619      	mov	r1, r3
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7ff ff35 	bl	8008ae4 <_LaserArray_SetBrightness>
    }

    ret = RET_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	75fb      	strb	r3, [r7, #23]
exit:
    osSemaphoreRelease(la->lock);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 fdd4 	bl	800a830 <osSemaphoreRelease>
    return ret;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20000000 	.word	0x20000000
 8008c98:	20000014 	.word	0x20000014
 8008c9c:	0800f920 	.word	0x0800f920
 8008ca0:	0800fa04 	.word	0x0800fa04
 8008ca4:	10624dd3 	.word	0x10624dd3

08008ca8 <LaserArray_TIM_PeriodElapsedHandler>:

ret_t LaserArray_TIM_PeriodElapsedHandler(LaserArray_t *la, TIM_HandleTypeDef *htim) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
    // ignore callbacks addressed to other timers
    if (htim->Instance != la->config.htim_fade->Instance) {
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d001      	beq.n	8008cc4 <LaserArray_TIM_PeriodElapsedHandler+0x1c>
        return RET_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e040      	b.n	8008d46 <LaserArray_TIM_PeriodElapsedHandler+0x9e>
    }

    // update the fade for each diode
    for (uint8_t diode_index = 0; diode_index < LA_NUM_DIODES; diode_index++) {
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	77fb      	strb	r3, [r7, #31]
 8008cc8:	e039      	b.n	8008d3e <LaserArray_TIM_PeriodElapsedHandler+0x96>
        LaserArray_Diode_t *diode = &la->diodes[diode_index];
 8008cca:	7ffa      	ldrb	r2, [r7, #31]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	3310      	adds	r3, #16
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	3304      	adds	r3, #4
 8008cdc:	61bb      	str	r3, [r7, #24]

        // skip finished transitions
        if (diode->transition_tick == diode->transition_duration) {
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d025      	beq.n	8008d36 <LaserArray_TIM_PeriodElapsedHandler+0x8e>
            continue;
        }

        // calculate the new brightness
        int32_t source = diode->source_brightness;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	617b      	str	r3, [r7, #20]
        int32_t range = diode->target_brightness - diode->source_brightness;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	789b      	ldrb	r3, [r3, #2]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	613b      	str	r3, [r7, #16]
        uint8_t brightness = source + range * (int32_t) (diode->transition_tick + 1) / (int32_t) diode->transition_duration;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	3301      	adds	r3, #1
 8008d04:	461a      	mov	r2, r3
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	fb02 f303 	mul.w	r3, r2, r3
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	6852      	ldr	r2, [r2, #4]
 8008d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	4413      	add	r3, r2
 8008d1c:	73fb      	strb	r3, [r7, #15]

        // set the new brightness value
        _LaserArray_SetBrightness(la, diode_index, brightness);
 8008d1e:	7bfa      	ldrb	r2, [r7, #15]
 8008d20:	7ffb      	ldrb	r3, [r7, #31]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fedd 	bl	8008ae4 <_LaserArray_SetBrightness>

        // update the tick counter
        diode->transition_tick++;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	609a      	str	r2, [r3, #8]
 8008d34:	e000      	b.n	8008d38 <LaserArray_TIM_PeriodElapsedHandler+0x90>
            continue;
 8008d36:	bf00      	nop
    for (uint8_t diode_index = 0; diode_index < LA_NUM_DIODES; diode_index++) {
 8008d38:	7ffb      	ldrb	r3, [r7, #31]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	77fb      	strb	r3, [r7, #31]
 8008d3e:	7ffb      	ldrb	r3, [r7, #31]
 8008d40:	2b1f      	cmp	r3, #31
 8008d42:	d9c2      	bls.n	8008cca <LaserArray_TIM_PeriodElapsedHandler+0x22>
    }

    return RET_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3720      	adds	r7, #32
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	460b      	mov	r3, r1
 8008d58:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8008d5a:	2358      	movs	r3, #88	; 0x58
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	2101      	movs	r1, #1
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f005 fa38 	bl	800e1d6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8008d6e:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8008d72:	f005 fb45 	bl	800e400 <USBD_static_malloc>
 8008d76:	4602      	mov	r2, r0
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <USBD_AUDIO_Init+0x3e>
  {
    return USBD_FAIL;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e034      	b.n	8008df6 <USBD_AUDIO_Init+0xa8>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d92:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da0:	2203      	movs	r2, #3
 8008da2:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
    haudio->wr_ptr = 0U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88
    haudio->rd_ptr = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	2200      	movs	r2, #0
 8008dba:	f8a3 2b86 	strh.w	r2, [r3, #2950]	; 0xb86
    haudio->rd_enable = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2146      	movs	r1, #70	; 0x46
 8008dd6:	f245 6054 	movw	r0, #22100	; 0x5654
 8008dda:	4798      	blx	r3
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <USBD_AUDIO_Init+0x98>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 8008de2:	2302      	movs	r3, #2
 8008de4:	e007      	b.n	8008df6 <USBD_AUDIO_Init+0xa8>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	1d1a      	adds	r2, r3, #4
 8008dea:	2358      	movs	r3, #88	; 0x58
 8008dec:	2101      	movs	r1, #1
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f005 fae2 	bl	800e3b8 <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f005 fa08 	bl	800e222 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00f      	beq.n	8008e44 <USBD_AUDIO_DeInit+0x46>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e36:	4618      	mov	r0, r3
 8008e38:	f005 faee 	bl	800e418 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3708      	adds	r7, #8
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e68:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d01a      	beq.n	8008eac <USBD_AUDIO_Setup+0x5c>
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	f040 809c 	bne.w	8008fb4 <USBD_AUDIO_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	785b      	ldrb	r3, [r3, #1]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d006      	beq.n	8008e92 <USBD_AUDIO_Setup+0x42>
 8008e84:	2b81      	cmp	r3, #129	; 0x81
 8008e86:	d109      	bne.n	8008e9c <USBD_AUDIO_Setup+0x4c>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f980 	bl	8009190 <AUDIO_REQ_GetCurrent>
          break;
 8008e90:	e00b      	b.n	8008eaa <USBD_AUDIO_Setup+0x5a>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f99b 	bl	80091d0 <AUDIO_REQ_SetCurrent>
          break;
 8008e9a:	e006      	b.n	8008eaa <USBD_AUDIO_Setup+0x5a>

        default:
          USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 f997 	bl	800a1d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ea8:	bf00      	nop
      }
      break;
 8008eaa:	e08a      	b.n	8008fc2 <USBD_AUDIO_Setup+0x172>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b0b      	cmp	r3, #11
 8008eb2:	d876      	bhi.n	8008fa2 <USBD_AUDIO_Setup+0x152>
 8008eb4:	a201      	add	r2, pc, #4	; (adr r2, 8008ebc <USBD_AUDIO_Setup+0x6c>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008eed 	.word	0x08008eed
 8008ec0:	08008fa3 	.word	0x08008fa3
 8008ec4:	08008fa3 	.word	0x08008fa3
 8008ec8:	08008fa3 	.word	0x08008fa3
 8008ecc:	08008fa3 	.word	0x08008fa3
 8008ed0:	08008fa3 	.word	0x08008fa3
 8008ed4:	08008f15 	.word	0x08008f15
 8008ed8:	08008fa3 	.word	0x08008fa3
 8008edc:	08008fa3 	.word	0x08008fa3
 8008ee0:	08008fa3 	.word	0x08008fa3
 8008ee4:	08008f3f 	.word	0x08008f3f
 8008ee8:	08008f65 	.word	0x08008f65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d107      	bne.n	8008f06 <USBD_AUDIO_Setup+0xb6>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	2202      	movs	r2, #2
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 f9d1 	bl	800a2a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f04:	e055      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 f962 	bl	800a1d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	75fb      	strb	r3, [r7, #23]
          break;
 8008f12:	e04e      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	885b      	ldrh	r3, [r3, #2]
 8008f18:	0a1b      	lsrs	r3, r3, #8
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b21      	cmp	r3, #33	; 0x21
 8008f1e:	d147      	bne.n	8008fb0 <USBD_AUDIO_Setup+0x160>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8008f20:	4b2a      	ldr	r3, [pc, #168]	; (8008fcc <USBD_AUDIO_Setup+0x17c>)
 8008f22:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	88db      	ldrh	r3, [r3, #6]
 8008f28:	2b09      	cmp	r3, #9
 8008f2a:	bf28      	it	cs
 8008f2c:	2309      	movcs	r3, #9
 8008f2e:	817b      	strh	r3, [r7, #10]

            USBD_CtlSendData(pdev, pbuf, len);
 8008f30:	897b      	ldrh	r3, [r7, #10]
 8008f32:	461a      	mov	r2, r3
 8008f34:	68f9      	ldr	r1, [r7, #12]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 f9b5 	bl	800a2a6 <USBD_CtlSendData>
          }
          break;
 8008f3c:	e038      	b.n	8008fb0 <USBD_AUDIO_Setup+0x160>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d106      	bne.n	8008f56 <USBD_AUDIO_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 f9a9 	bl	800a2a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f54:	e02d      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f93a 	bl	800a1d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f5e:	2302      	movs	r3, #2
 8008f60:	75fb      	strb	r3, [r7, #23]
          break;
 8008f62:	e026      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d112      	bne.n	8008f94 <USBD_AUDIO_Setup+0x144>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	885b      	ldrh	r3, [r3, #2]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d806      	bhi.n	8008f86 <USBD_AUDIO_Setup+0x136>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	885b      	ldrh	r3, [r3, #2]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f84:	e015      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>
              USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 f922 	bl	800a1d2 <USBD_CtlError>
              ret = USBD_FAIL;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	75fb      	strb	r3, [r7, #23]
          break;
 8008f92:	e00e      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 f91b 	bl	800a1d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	75fb      	strb	r3, [r7, #23]
          break;
 8008fa0:	e007      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>

        default:
          USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 f914 	bl	800a1d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008faa:	2302      	movs	r3, #2
 8008fac:	75fb      	strb	r3, [r7, #23]
          break;
 8008fae:	e000      	b.n	8008fb2 <USBD_AUDIO_Setup+0x162>
          break;
 8008fb0:	bf00      	nop
      }
      break;
 8008fb2:	e006      	b.n	8008fc2 <USBD_AUDIO_Setup+0x172>
    default:
      USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f90b 	bl	800a1d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc0:	bf00      	nop
  }

  return ret;
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	200002aa 	.word	0x200002aa

08008fd0 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_CfgDesc);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	226d      	movs	r2, #109	; 0x6d
 8008fdc:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8008fde:	4b03      	ldr	r3, [pc, #12]	; (8008fec <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20000298 	.word	0x20000298

08008ff0 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  /* Only OUT data are processed */
  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr

08009008 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009016:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901e:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	; 0xb8a
 8009022:	2b01      	cmp	r3, #1
 8009024:	d11d      	bne.n	8009062 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902c:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	; 0xbcc
 8009030:	2b02      	cmp	r3, #2
 8009032:	d116      	bne.n	8009062 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009042:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	; 0xb8b
 8009046:	4610      	mov	r0, r2
 8009048:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
      haudio->control.len = 0U;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    }
  }

  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	370c      	adds	r7, #12
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr

08009080 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	370c      	adds	r7, #12
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr

08009094 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr

080090ac <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr

080090c4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d6:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d153      	bne.n	8009186 <USBD_AUDIO_DataOut+0xc2>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e4:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 80090e8:	3358      	adds	r3, #88	; 0x58
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f2:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fc:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8009100:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8009104:	d11c      	bne.n	8009140 <USBD_AUDIO_DataOut+0x7c>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800910c:	2200      	movs	r2, #0
 800910e:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009118:	f893 3b84 	ldrb.w	r3, [r3, #2948]	; 0xb84
 800911c:	2b03      	cmp	r3, #3
 800911e:	d10f      	bne.n	8009140 <USBD_AUDIO_DataOut+0x7c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	1d10      	adds	r0, r2, #4
 800912c:	2201      	movs	r2, #1
 800912e:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8009132:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009146:	f893 3b85 	ldrb.w	r3, [r3, #2949]	; 0xb85
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10d      	bne.n	800916a <USBD_AUDIO_DataOut+0xa6>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009154:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8009158:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 800915c:	d105      	bne.n	800916a <USBD_AUDIO_DataOut+0xa6>
      {
        haudio->rd_enable = 1U;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009164:	2201      	movs	r2, #1
 8009166:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009170:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8009174:	461a      	mov	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	1d1a      	adds	r2, r3, #4
 800917c:	2358      	movs	r3, #88	; 0x58
 800917e:	2101      	movs	r1, #1
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f005 f919 	bl	800e3b8 <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a0:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80091a8:	330b      	adds	r3, #11
 80091aa:	2240      	movs	r2, #64	; 0x40
 80091ac:	2100      	movs	r1, #0
 80091ae:	4618      	mov	r0, r3
 80091b0:	f005 faa3 	bl	800e6fa <memset>

  /* Send the current mute state */
  USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80091ba:	330b      	adds	r3, #11
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	88d2      	ldrh	r2, [r2, #6]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 f86f 	bl	800a2a6 <USBD_CtlSendData>
}
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e0:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	88db      	ldrh	r3, [r3, #6]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d021      	beq.n	800922e <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80091f0:	330b      	adds	r3, #11
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	88d2      	ldrh	r2, [r2, #6]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f882 	bl	800a302 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	88db      	ldrh	r3, [r3, #6]
 800920e:	b2da      	uxtb	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009216:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	889b      	ldrh	r3, [r3, #4]
 800921e:	0a1b      	lsrs	r3, r3, #8
 8009220:	b29b      	uxth	r3, r3
 8009222:	b2da      	uxtb	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	f883 2bcc 	strb.w	r2, [r3, #3020]	; 0xbcc
  }
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	220a      	movs	r2, #10
 8009244:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8009246:	4b03      	ldr	r3, [pc, #12]	; (8009254 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	20000308 	.word	0x20000308

08009258 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                      USBD_AUDIO_ItfTypeDef *fops)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData = fops;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	bc80      	pop	{r7}
 800927a:	4770      	bx	lr

0800927c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009290:	2302      	movs	r3, #2
 8009292:	e01a      	b.n	80092ca <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	79fa      	ldrb	r2, [r7, #7]
 80092c0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f004 ff2c 	bl	800e120 <USBD_LL_Init>

  return USBD_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b085      	sub	sp, #20
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d006      	beq.n	80092f4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
 80092f2:	e001      	b.n	80092f8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092f4:	2302      	movs	r3, #2
 80092f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr

08009304 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f004 ff47 	bl	800e1a0 <USBD_LL_Start>

  return USBD_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr

08009330 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800933c:	2302      	movs	r3, #2
 800933e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00c      	beq.n	8009364 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	4611      	mov	r1, r2
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	4611      	mov	r1, r2
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fed7 	bl	800a15a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80093ba:	461a      	mov	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093c8:	f003 031f 	and.w	r3, r3, #31
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d016      	beq.n	80093fe <USBD_LL_SetupStage+0x6a>
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d81c      	bhi.n	800940e <USBD_LL_SetupStage+0x7a>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <USBD_LL_SetupStage+0x4a>
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d008      	beq.n	80093ee <USBD_LL_SetupStage+0x5a>
 80093dc:	e017      	b.n	800940e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9ca 	bl	8009780 <USBD_StdDevReq>
      break;
 80093ec:	e01a      	b.n	8009424 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa2c 	bl	8009854 <USBD_StdItfReq>
      break;
 80093fc:	e012      	b.n	8009424 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa6c 	bl	80098e4 <USBD_StdEPReq>
      break;
 800940c:	e00a      	b.n	8009424 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009418:	b2db      	uxtb	r3, r3
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f004 ff1f 	bl	800e260 <USBD_LL_StallEP>
      break;
 8009422:	bf00      	nop
  }

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	460b      	mov	r3, r1
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d14b      	bne.n	80094da <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009448:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009450:	2b03      	cmp	r3, #3
 8009452:	d134      	bne.n	80094be <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	68da      	ldr	r2, [r3, #12]
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	429a      	cmp	r2, r3
 800945e:	d919      	bls.n	8009494 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	68da      	ldr	r2, [r3, #12]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	1ad2      	subs	r2, r2, r3
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009476:	429a      	cmp	r2, r3
 8009478:	d203      	bcs.n	8009482 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800947e:	b29b      	uxth	r3, r3
 8009480:	e002      	b.n	8009488 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009486:	b29b      	uxth	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 ff56 	bl	800a33e <USBD_CtlContinueRx>
 8009492:	e038      	b.n	8009506 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00a      	beq.n	80094b6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d105      	bne.n	80094b6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 ff53 	bl	800a362 <USBD_CtlSendStatus>
 80094bc:	e023      	b.n	8009506 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094c4:	2b05      	cmp	r3, #5
 80094c6:	d11e      	bne.n	8009506 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80094d0:	2100      	movs	r1, #0
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f004 fec4 	bl	800e260 <USBD_LL_StallEP>
 80094d8:	e015      	b.n	8009506 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00d      	beq.n	8009502 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d108      	bne.n	8009502 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	7afa      	ldrb	r2, [r7, #11]
 80094fa:	4611      	mov	r1, r2
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	4798      	blx	r3
 8009500:	e001      	b.n	8009506 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009502:	2302      	movs	r3, #2
 8009504:	e000      	b.n	8009508 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	460b      	mov	r3, r1
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800951e:	7afb      	ldrb	r3, [r7, #11]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d17f      	bne.n	8009624 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3314      	adds	r3, #20
 8009528:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009530:	2b02      	cmp	r3, #2
 8009532:	d15c      	bne.n	80095ee <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	429a      	cmp	r2, r3
 800953e:	d915      	bls.n	800956c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	1ad2      	subs	r2, r2, r3
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	b29b      	uxth	r3, r3
 8009554:	461a      	mov	r2, r3
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 fec0 	bl	800a2de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800955e:	2300      	movs	r3, #0
 8009560:	2200      	movs	r2, #0
 8009562:	2100      	movs	r1, #0
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f004 ff27 	bl	800e3b8 <USBD_LL_PrepareReceive>
 800956a:	e04e      	b.n	800960a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	6912      	ldr	r2, [r2, #16]
 8009574:	fbb3 f1f2 	udiv	r1, r3, r2
 8009578:	fb01 f202 	mul.w	r2, r1, r2
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d11c      	bne.n	80095bc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800958a:	429a      	cmp	r2, r3
 800958c:	d316      	bcc.n	80095bc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009598:	429a      	cmp	r2, r3
 800959a:	d20f      	bcs.n	80095bc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800959c:	2200      	movs	r2, #0
 800959e:	2100      	movs	r1, #0
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 fe9c 	bl	800a2de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095ae:	2300      	movs	r3, #0
 80095b0:	2200      	movs	r2, #0
 80095b2:	2100      	movs	r1, #0
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f004 feff 	bl	800e3b8 <USBD_LL_PrepareReceive>
 80095ba:	e026      	b.n	800960a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00a      	beq.n	80095de <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d105      	bne.n	80095de <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095de:	2180      	movs	r1, #128	; 0x80
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f004 fe3d 	bl	800e260 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 fece 	bl	800a388 <USBD_CtlReceiveStatus>
 80095ec:	e00d      	b.n	800960a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	d004      	beq.n	8009602 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009602:	2180      	movs	r1, #128	; 0x80
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f004 fe2b 	bl	800e260 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009610:	2b01      	cmp	r3, #1
 8009612:	d11d      	bne.n	8009650 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7ff fe81 	bl	800931c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009622:	e015      	b.n	8009650 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00d      	beq.n	800964c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009636:	2b03      	cmp	r3, #3
 8009638:	d108      	bne.n	800964c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	7afa      	ldrb	r2, [r7, #11]
 8009644:	4611      	mov	r1, r2
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	4798      	blx	r3
 800964a:	e001      	b.n	8009650 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800964c:	2302      	movs	r3, #2
 800964e:	e000      	b.n	8009652 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009662:	2340      	movs	r3, #64	; 0x40
 8009664:	2200      	movs	r2, #0
 8009666:	2100      	movs	r1, #0
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f004 fdb4 	bl	800e1d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2240      	movs	r2, #64	; 0x40
 800967a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	2200      	movs	r2, #0
 8009682:	2180      	movs	r1, #128	; 0x80
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f004 fda6 	bl	800e1d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2240      	movs	r2, #64	; 0x40
 8009694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d009      	beq.n	80096d2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	6852      	ldr	r2, [r2, #4]
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	4611      	mov	r1, r2
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	4798      	blx	r3
  }

  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bc80      	pop	{r7}
 80096f8:	4770      	bx	lr

080096fa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2204      	movs	r2, #4
 8009712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bc80      	pop	{r7}
 8009720:	4770      	bx	lr

08009722 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009730:	2b04      	cmp	r3, #4
 8009732:	d105      	bne.n	8009740 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800975a:	2b03      	cmp	r3, #3
 800975c:	d10b      	bne.n	8009776 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d005      	beq.n	8009776 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009796:	2b40      	cmp	r3, #64	; 0x40
 8009798:	d005      	beq.n	80097a6 <USBD_StdDevReq+0x26>
 800979a:	2b40      	cmp	r3, #64	; 0x40
 800979c:	d84f      	bhi.n	800983e <USBD_StdDevReq+0xbe>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <USBD_StdDevReq+0x36>
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d14b      	bne.n	800983e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	4798      	blx	r3
      break;
 80097b4:	e048      	b.n	8009848 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	785b      	ldrb	r3, [r3, #1]
 80097ba:	2b09      	cmp	r3, #9
 80097bc:	d839      	bhi.n	8009832 <USBD_StdDevReq+0xb2>
 80097be:	a201      	add	r2, pc, #4	; (adr r2, 80097c4 <USBD_StdDevReq+0x44>)
 80097c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c4:	08009815 	.word	0x08009815
 80097c8:	08009829 	.word	0x08009829
 80097cc:	08009833 	.word	0x08009833
 80097d0:	0800981f 	.word	0x0800981f
 80097d4:	08009833 	.word	0x08009833
 80097d8:	080097f7 	.word	0x080097f7
 80097dc:	080097ed 	.word	0x080097ed
 80097e0:	08009833 	.word	0x08009833
 80097e4:	0800980b 	.word	0x0800980b
 80097e8:	08009801 	.word	0x08009801
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f9dc 	bl	8009bac <USBD_GetDescriptor>
          break;
 80097f4:	e022      	b.n	800983c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fb3f 	bl	8009e7c <USBD_SetAddress>
          break;
 80097fe:	e01d      	b.n	800983c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fb7e 	bl	8009f04 <USBD_SetConfig>
          break;
 8009808:	e018      	b.n	800983c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fc07 	bl	800a020 <USBD_GetConfig>
          break;
 8009812:	e013      	b.n	800983c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fc37 	bl	800a08a <USBD_GetStatus>
          break;
 800981c:	e00e      	b.n	800983c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fc65 	bl	800a0f0 <USBD_SetFeature>
          break;
 8009826:	e009      	b.n	800983c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fc74 	bl	800a118 <USBD_ClrFeature>
          break;
 8009830:	e004      	b.n	800983c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fccc 	bl	800a1d2 <USBD_CtlError>
          break;
 800983a:	bf00      	nop
      }
      break;
 800983c:	e004      	b.n	8009848 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fcc6 	bl	800a1d2 <USBD_CtlError>
      break;
 8009846:	bf00      	nop
  }

  return ret;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop

08009854 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800986a:	2b40      	cmp	r3, #64	; 0x40
 800986c:	d005      	beq.n	800987a <USBD_StdItfReq+0x26>
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d82e      	bhi.n	80098d0 <USBD_StdItfReq+0x7c>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <USBD_StdItfReq+0x26>
 8009876:	2b20      	cmp	r3, #32
 8009878:	d12a      	bne.n	80098d0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009880:	3b01      	subs	r3, #1
 8009882:	2b02      	cmp	r3, #2
 8009884:	d81d      	bhi.n	80098c2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	889b      	ldrh	r3, [r3, #4]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	d813      	bhi.n	80098b8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
 800989e:	4603      	mov	r3, r0
 80098a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	88db      	ldrh	r3, [r3, #6]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d110      	bne.n	80098cc <USBD_StdItfReq+0x78>
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10d      	bne.n	80098cc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fd56 	bl	800a362 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098b6:	e009      	b.n	80098cc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fc89 	bl	800a1d2 <USBD_CtlError>
          break;
 80098c0:	e004      	b.n	80098cc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fc84 	bl	800a1d2 <USBD_CtlError>
          break;
 80098ca:	e000      	b.n	80098ce <USBD_StdItfReq+0x7a>
          break;
 80098cc:	bf00      	nop
      }
      break;
 80098ce:	e004      	b.n	80098da <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fc7d 	bl	800a1d2 <USBD_CtlError>
      break;
 80098d8:	bf00      	nop
  }

  return USBD_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	889b      	ldrh	r3, [r3, #4]
 80098f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009900:	2b40      	cmp	r3, #64	; 0x40
 8009902:	d007      	beq.n	8009914 <USBD_StdEPReq+0x30>
 8009904:	2b40      	cmp	r3, #64	; 0x40
 8009906:	f200 8146 	bhi.w	8009b96 <USBD_StdEPReq+0x2b2>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <USBD_StdEPReq+0x40>
 800990e:	2b20      	cmp	r3, #32
 8009910:	f040 8141 	bne.w	8009b96 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
      break;
 8009922:	e13d      	b.n	8009ba0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800992c:	2b20      	cmp	r3, #32
 800992e:	d10a      	bne.n	8009946 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	e12d      	b.n	8009ba2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	785b      	ldrb	r3, [r3, #1]
 800994a:	2b03      	cmp	r3, #3
 800994c:	d007      	beq.n	800995e <USBD_StdEPReq+0x7a>
 800994e:	2b03      	cmp	r3, #3
 8009950:	f300 811b 	bgt.w	8009b8a <USBD_StdEPReq+0x2a6>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d072      	beq.n	8009a3e <USBD_StdEPReq+0x15a>
 8009958:	2b01      	cmp	r3, #1
 800995a:	d03a      	beq.n	80099d2 <USBD_StdEPReq+0xee>
 800995c:	e115      	b.n	8009b8a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009964:	2b02      	cmp	r3, #2
 8009966:	d002      	beq.n	800996e <USBD_StdEPReq+0x8a>
 8009968:	2b03      	cmp	r3, #3
 800996a:	d015      	beq.n	8009998 <USBD_StdEPReq+0xb4>
 800996c:	e02b      	b.n	80099c6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00c      	beq.n	800998e <USBD_StdEPReq+0xaa>
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	2b80      	cmp	r3, #128	; 0x80
 8009978:	d009      	beq.n	800998e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f004 fc6e 	bl	800e260 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009984:	2180      	movs	r1, #128	; 0x80
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f004 fc6a 	bl	800e260 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800998c:	e020      	b.n	80099d0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fc1e 	bl	800a1d2 <USBD_CtlError>
              break;
 8009996:	e01b      	b.n	80099d0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	885b      	ldrh	r3, [r3, #2]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10e      	bne.n	80099be <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <USBD_StdEPReq+0xda>
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	2b80      	cmp	r3, #128	; 0x80
 80099aa:	d008      	beq.n	80099be <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	88db      	ldrh	r3, [r3, #6]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f004 fc51 	bl	800e260 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fccf 	bl	800a362 <USBD_CtlSendStatus>

              break;
 80099c4:	e004      	b.n	80099d0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fc02 	bl	800a1d2 <USBD_CtlError>
              break;
 80099ce:	bf00      	nop
          }
          break;
 80099d0:	e0e0      	b.n	8009b94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d002      	beq.n	80099e2 <USBD_StdEPReq+0xfe>
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d015      	beq.n	8009a0c <USBD_StdEPReq+0x128>
 80099e0:	e026      	b.n	8009a30 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00c      	beq.n	8009a02 <USBD_StdEPReq+0x11e>
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	2b80      	cmp	r3, #128	; 0x80
 80099ec:	d009      	beq.n	8009a02 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f004 fc34 	bl	800e260 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099f8:	2180      	movs	r1, #128	; 0x80
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f004 fc30 	bl	800e260 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a00:	e01c      	b.n	8009a3c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fbe4 	bl	800a1d2 <USBD_CtlError>
              break;
 8009a0a:	e017      	b.n	8009a3c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	885b      	ldrh	r3, [r3, #2]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d112      	bne.n	8009a3a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d004      	beq.n	8009a28 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f004 fc3b 	bl	800e29e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fc9a 	bl	800a362 <USBD_CtlSendStatus>
              }
              break;
 8009a2e:	e004      	b.n	8009a3a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fbcd 	bl	800a1d2 <USBD_CtlError>
              break;
 8009a38:	e000      	b.n	8009a3c <USBD_StdEPReq+0x158>
              break;
 8009a3a:	bf00      	nop
          }
          break;
 8009a3c:	e0aa      	b.n	8009b94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d002      	beq.n	8009a4e <USBD_StdEPReq+0x16a>
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d032      	beq.n	8009ab2 <USBD_StdEPReq+0x1ce>
 8009a4c:	e097      	b.n	8009b7e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <USBD_StdEPReq+0x180>
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	2b80      	cmp	r3, #128	; 0x80
 8009a58:	d004      	beq.n	8009a64 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fbb8 	bl	800a1d2 <USBD_CtlError>
                break;
 8009a62:	e091      	b.n	8009b88 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da0b      	bge.n	8009a84 <USBD_StdEPReq+0x1a0>
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	4413      	add	r3, r2
 8009a80:	3304      	adds	r3, #4
 8009a82:	e00b      	b.n	8009a9c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	4413      	add	r3, r2
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fbfb 	bl	800a2a6 <USBD_CtlSendData>
              break;
 8009ab0:	e06a      	b.n	8009b88 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	da11      	bge.n	8009ade <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	f003 020f 	and.w	r2, r3, #15
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	440b      	add	r3, r1
 8009acc:	3318      	adds	r3, #24
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d117      	bne.n	8009b04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fb7b 	bl	800a1d2 <USBD_CtlError>
                  break;
 8009adc:	e054      	b.n	8009b88 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	f003 020f 	and.w	r2, r3, #15
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d104      	bne.n	8009b04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fb68 	bl	800a1d2 <USBD_CtlError>
                  break;
 8009b02:	e041      	b.n	8009b88 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	da0b      	bge.n	8009b24 <USBD_StdEPReq+0x240>
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	3310      	adds	r3, #16
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	4413      	add	r3, r2
 8009b20:	3304      	adds	r3, #4
 8009b22:	e00b      	b.n	8009b3c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4413      	add	r3, r2
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <USBD_StdEPReq+0x266>
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	2b80      	cmp	r3, #128	; 0x80
 8009b48:	d103      	bne.n	8009b52 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	e00e      	b.n	8009b70 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f004 fbc0 	bl	800e2dc <USBD_LL_IsStallEP>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2201      	movs	r2, #1
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	e002      	b.n	8009b70 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2202      	movs	r2, #2
 8009b74:	4619      	mov	r1, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb95 	bl	800a2a6 <USBD_CtlSendData>
              break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fb26 	bl	800a1d2 <USBD_CtlError>
              break;
 8009b86:	bf00      	nop
          }
          break;
 8009b88:	e004      	b.n	8009b94 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb20 	bl	800a1d2 <USBD_CtlError>
          break;
 8009b92:	bf00      	nop
      }
      break;
 8009b94:	e004      	b.n	8009ba0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fb1a 	bl	800a1d2 <USBD_CtlError>
      break;
 8009b9e:	bf00      	nop
  }

  return ret;
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	885b      	ldrh	r3, [r3, #2]
 8009bc6:	0a1b      	lsrs	r3, r3, #8
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	2b06      	cmp	r3, #6
 8009bce:	f200 8128 	bhi.w	8009e22 <USBD_GetDescriptor+0x276>
 8009bd2:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <USBD_GetDescriptor+0x2c>)
 8009bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd8:	08009bf5 	.word	0x08009bf5
 8009bdc:	08009c0d 	.word	0x08009c0d
 8009be0:	08009c4d 	.word	0x08009c4d
 8009be4:	08009e23 	.word	0x08009e23
 8009be8:	08009e23 	.word	0x08009e23
 8009bec:	08009dc3 	.word	0x08009dc3
 8009bf0:	08009def 	.word	0x08009def
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	7c12      	ldrb	r2, [r2, #16]
 8009c00:	f107 0108 	add.w	r1, r7, #8
 8009c04:	4610      	mov	r0, r2
 8009c06:	4798      	blx	r3
 8009c08:	60f8      	str	r0, [r7, #12]
      break;
 8009c0a:	e112      	b.n	8009e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7c1b      	ldrb	r3, [r3, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10d      	bne.n	8009c30 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1c:	f107 0208 	add.w	r2, r7, #8
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
 8009c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c2e:	e100      	b.n	8009e32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	f107 0208 	add.w	r2, r7, #8
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4798      	blx	r3
 8009c40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3301      	adds	r3, #1
 8009c46:	2202      	movs	r2, #2
 8009c48:	701a      	strb	r2, [r3, #0]
      break;
 8009c4a:	e0f2      	b.n	8009e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	885b      	ldrh	r3, [r3, #2]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b05      	cmp	r3, #5
 8009c54:	f200 80ac 	bhi.w	8009db0 <USBD_GetDescriptor+0x204>
 8009c58:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <USBD_GetDescriptor+0xb4>)
 8009c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5e:	bf00      	nop
 8009c60:	08009c79 	.word	0x08009c79
 8009c64:	08009cad 	.word	0x08009cad
 8009c68:	08009ce1 	.word	0x08009ce1
 8009c6c:	08009d15 	.word	0x08009d15
 8009c70:	08009d49 	.word	0x08009d49
 8009c74:	08009d7d 	.word	0x08009d7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	7c12      	ldrb	r2, [r2, #16]
 8009c90:	f107 0108 	add.w	r1, r7, #8
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
 8009c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c9a:	e091      	b.n	8009dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa97 	bl	800a1d2 <USBD_CtlError>
            err++;
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8009caa:	e089      	b.n	8009dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	7c12      	ldrb	r2, [r2, #16]
 8009cc4:	f107 0108 	add.w	r1, r7, #8
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4798      	blx	r3
 8009ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cce:	e077      	b.n	8009dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa7d 	bl	800a1d2 <USBD_CtlError>
            err++;
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cde:	e06f      	b.n	8009dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00b      	beq.n	8009d04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	7c12      	ldrb	r2, [r2, #16]
 8009cf8:	f107 0108 	add.w	r1, r7, #8
 8009cfc:	4610      	mov	r0, r2
 8009cfe:	4798      	blx	r3
 8009d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d02:	e05d      	b.n	8009dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fa63 	bl	800a1d2 <USBD_CtlError>
            err++;
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	72fb      	strb	r3, [r7, #11]
          break;
 8009d12:	e055      	b.n	8009dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00b      	beq.n	8009d38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	7c12      	ldrb	r2, [r2, #16]
 8009d2c:	f107 0108 	add.w	r1, r7, #8
 8009d30:	4610      	mov	r0, r2
 8009d32:	4798      	blx	r3
 8009d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d36:	e043      	b.n	8009dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa49 	bl	800a1d2 <USBD_CtlError>
            err++;
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	3301      	adds	r3, #1
 8009d44:	72fb      	strb	r3, [r7, #11]
          break;
 8009d46:	e03b      	b.n	8009dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00b      	beq.n	8009d6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	7c12      	ldrb	r2, [r2, #16]
 8009d60:	f107 0108 	add.w	r1, r7, #8
 8009d64:	4610      	mov	r0, r2
 8009d66:	4798      	blx	r3
 8009d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d6a:	e029      	b.n	8009dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa2f 	bl	800a1d2 <USBD_CtlError>
            err++;
 8009d74:	7afb      	ldrb	r3, [r7, #11]
 8009d76:	3301      	adds	r3, #1
 8009d78:	72fb      	strb	r3, [r7, #11]
          break;
 8009d7a:	e021      	b.n	8009dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00b      	beq.n	8009da0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	7c12      	ldrb	r2, [r2, #16]
 8009d94:	f107 0108 	add.w	r1, r7, #8
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
 8009d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d9e:	e00f      	b.n	8009dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fa15 	bl	800a1d2 <USBD_CtlError>
            err++;
 8009da8:	7afb      	ldrb	r3, [r7, #11]
 8009daa:	3301      	adds	r3, #1
 8009dac:	72fb      	strb	r3, [r7, #11]
          break;
 8009dae:	e007      	b.n	8009dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fa0d 	bl	800a1d2 <USBD_CtlError>
          err++;
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009dbe:	e038      	b.n	8009e32 <USBD_GetDescriptor+0x286>
 8009dc0:	e037      	b.n	8009e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7c1b      	ldrb	r3, [r3, #16]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd2:	f107 0208 	add.w	r2, r7, #8
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	4798      	blx	r3
 8009dda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ddc:	e029      	b.n	8009e32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f9f6 	bl	800a1d2 <USBD_CtlError>
        err++;
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	3301      	adds	r3, #1
 8009dea:	72fb      	strb	r3, [r7, #11]
      break;
 8009dec:	e021      	b.n	8009e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7c1b      	ldrb	r3, [r3, #16]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10d      	bne.n	8009e12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfe:	f107 0208 	add.w	r2, r7, #8
 8009e02:	4610      	mov	r0, r2
 8009e04:	4798      	blx	r3
 8009e06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	2207      	movs	r2, #7
 8009e0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e10:	e00f      	b.n	8009e32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f9dc 	bl	800a1d2 <USBD_CtlError>
        err++;
 8009e1a:	7afb      	ldrb	r3, [r7, #11]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e20:	e007      	b.n	8009e32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f9d4 	bl	800a1d2 <USBD_CtlError>
      err++;
 8009e2a:	7afb      	ldrb	r3, [r7, #11]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8009e30:	bf00      	nop
  }

  if (err != 0U)
 8009e32:	7afb      	ldrb	r3, [r7, #11]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d11c      	bne.n	8009e72 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e38:	893b      	ldrh	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d011      	beq.n	8009e62 <USBD_GetDescriptor+0x2b6>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	88db      	ldrh	r3, [r3, #6]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00d      	beq.n	8009e62 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	88da      	ldrh	r2, [r3, #6]
 8009e4a:	893b      	ldrh	r3, [r7, #8]
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	bf28      	it	cs
 8009e50:	4613      	movcs	r3, r2
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e56:	893b      	ldrh	r3, [r7, #8]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	68f9      	ldr	r1, [r7, #12]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fa22 	bl	800a2a6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	88db      	ldrh	r3, [r3, #6]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d104      	bne.n	8009e74 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa79 	bl	800a362 <USBD_CtlSendStatus>
 8009e70:	e000      	b.n	8009e74 <USBD_GetDescriptor+0x2c8>
    return;
 8009e72:	bf00      	nop
    }
  }
}
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop

08009e7c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	889b      	ldrh	r3, [r3, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d130      	bne.n	8009ef0 <USBD_SetAddress+0x74>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	88db      	ldrh	r3, [r3, #6]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d12c      	bne.n	8009ef0 <USBD_SetAddress+0x74>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e9c:	d828      	bhi.n	8009ef0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	885b      	ldrh	r3, [r3, #2]
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d104      	bne.n	8009ebe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f98b 	bl	800a1d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ebc:	e01d      	b.n	8009efa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	7bfa      	ldrb	r2, [r7, #15]
 8009ec2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f004 fa32 	bl	800e334 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fa46 	bl	800a362 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee4:	e009      	b.n	8009efa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eee:	e004      	b.n	8009efa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f96d 	bl	800a1d2 <USBD_CtlError>
  }
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	4b41      	ldr	r3, [pc, #260]	; (800a01c <USBD_SetConfig+0x118>)
 8009f16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f18:	4b40      	ldr	r3, [pc, #256]	; (800a01c <USBD_SetConfig+0x118>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d904      	bls.n	8009f2a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009f20:	6839      	ldr	r1, [r7, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f955 	bl	800a1d2 <USBD_CtlError>
 8009f28:	e075      	b.n	800a016 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d002      	beq.n	8009f3a <USBD_SetConfig+0x36>
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d023      	beq.n	8009f80 <USBD_SetConfig+0x7c>
 8009f38:	e062      	b.n	800a000 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f3a:	4b38      	ldr	r3, [pc, #224]	; (800a01c <USBD_SetConfig+0x118>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d01a      	beq.n	8009f78 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f42:	4b36      	ldr	r3, [pc, #216]	; (800a01c <USBD_SetConfig+0x118>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2203      	movs	r2, #3
 8009f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f54:	4b31      	ldr	r3, [pc, #196]	; (800a01c <USBD_SetConfig+0x118>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff f9e8 	bl	8009330 <USBD_SetClassConfig>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b02      	cmp	r3, #2
 8009f64:	d104      	bne.n	8009f70 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f932 	bl	800a1d2 <USBD_CtlError>
            return;
 8009f6e:	e052      	b.n	800a016 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f9f6 	bl	800a362 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f76:	e04e      	b.n	800a016 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f9f2 	bl	800a362 <USBD_CtlSendStatus>
        break;
 8009f7e:	e04a      	b.n	800a016 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f80:	4b26      	ldr	r3, [pc, #152]	; (800a01c <USBD_SetConfig+0x118>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d112      	bne.n	8009fae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009f90:	4b22      	ldr	r3, [pc, #136]	; (800a01c <USBD_SetConfig+0x118>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	461a      	mov	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f9a:	4b20      	ldr	r3, [pc, #128]	; (800a01c <USBD_SetConfig+0x118>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff f9e4 	bl	800936e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9db 	bl	800a362 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009fac:	e033      	b.n	800a016 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009fae:	4b1b      	ldr	r3, [pc, #108]	; (800a01c <USBD_SetConfig+0x118>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d01d      	beq.n	8009ff8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7ff f9d2 	bl	800936e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fca:	4b14      	ldr	r3, [pc, #80]	; (800a01c <USBD_SetConfig+0x118>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	461a      	mov	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fd4:	4b11      	ldr	r3, [pc, #68]	; (800a01c <USBD_SetConfig+0x118>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff f9a8 	bl	8009330 <USBD_SetClassConfig>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d104      	bne.n	8009ff0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f8f2 	bl	800a1d2 <USBD_CtlError>
            return;
 8009fee:	e012      	b.n	800a016 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f9b6 	bl	800a362 <USBD_CtlSendStatus>
        break;
 8009ff6:	e00e      	b.n	800a016 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f9b2 	bl	800a362 <USBD_CtlSendStatus>
        break;
 8009ffe:	e00a      	b.n	800a016 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f8e5 	bl	800a1d2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a008:	4b04      	ldr	r3, [pc, #16]	; (800a01c <USBD_SetConfig+0x118>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff f9ad 	bl	800936e <USBD_ClrClassConfig>
        break;
 800a014:	bf00      	nop
    }
  }
}
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	200009fc 	.word	0x200009fc

0800a020 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	88db      	ldrh	r3, [r3, #6]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d004      	beq.n	800a03c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f8cc 	bl	800a1d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a03a:	e022      	b.n	800a082 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a042:	2b02      	cmp	r3, #2
 800a044:	dc02      	bgt.n	800a04c <USBD_GetConfig+0x2c>
 800a046:	2b00      	cmp	r3, #0
 800a048:	dc03      	bgt.n	800a052 <USBD_GetConfig+0x32>
 800a04a:	e015      	b.n	800a078 <USBD_GetConfig+0x58>
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d00b      	beq.n	800a068 <USBD_GetConfig+0x48>
 800a050:	e012      	b.n	800a078 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3308      	adds	r3, #8
 800a05c:	2201      	movs	r2, #1
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f920 	bl	800a2a6 <USBD_CtlSendData>
        break;
 800a066:	e00c      	b.n	800a082 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3304      	adds	r3, #4
 800a06c:	2201      	movs	r2, #1
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f918 	bl	800a2a6 <USBD_CtlSendData>
        break;
 800a076:	e004      	b.n	800a082 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f8a9 	bl	800a1d2 <USBD_CtlError>
        break;
 800a080:	bf00      	nop
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a09a:	3b01      	subs	r3, #1
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d81e      	bhi.n	800a0de <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	88db      	ldrh	r3, [r3, #6]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d004      	beq.n	800a0b2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f891 	bl	800a1d2 <USBD_CtlError>
        break;
 800a0b0:	e01a      	b.n	800a0e8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d005      	beq.n	800a0ce <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f043 0202 	orr.w	r2, r3, #2
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	330c      	adds	r3, #12
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f8e5 	bl	800a2a6 <USBD_CtlSendData>
      break;
 800a0dc:	e004      	b.n	800a0e8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0de:	6839      	ldr	r1, [r7, #0]
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f876 	bl	800a1d2 <USBD_CtlError>
      break;
 800a0e6:	bf00      	nop
  }
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d106      	bne.n	800a110 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f929 	bl	800a362 <USBD_CtlSendStatus>
  }
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a128:	3b01      	subs	r3, #1
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d80b      	bhi.n	800a146 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	885b      	ldrh	r3, [r3, #2]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d10c      	bne.n	800a150 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f90f 	bl	800a362 <USBD_CtlSendStatus>
      }
      break;
 800a144:	e004      	b.n	800a150 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f842 	bl	800a1d2 <USBD_CtlError>
      break;
 800a14e:	e000      	b.n	800a152 <USBD_ClrFeature+0x3a>
      break;
 800a150:	bf00      	nop
  }
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	785a      	ldrb	r2, [r3, #1]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	3302      	adds	r3, #2
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	3303      	adds	r3, #3
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	021b      	lsls	r3, r3, #8
 800a186:	b29b      	uxth	r3, r3
 800a188:	4413      	add	r3, r2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	3304      	adds	r3, #4
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	b29a      	uxth	r2, r3
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	3305      	adds	r3, #5
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	021b      	lsls	r3, r3, #8
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	3306      	adds	r3, #6
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	3307      	adds	r3, #7
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	4413      	add	r3, r2
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	80da      	strh	r2, [r3, #6]

}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr

0800a1d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1dc:	2180      	movs	r1, #128	; 0x80
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f004 f83e 	bl	800e260 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f004 f83a 	bl	800e260 <USBD_LL_StallEP>
}
 800a1ec:	bf00      	nop
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d032      	beq.n	800a270 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 f834 	bl	800a278 <USBD_GetLen>
 800a210:	4603      	mov	r3, r0
 800a212:	3301      	adds	r3, #1
 800a214:	b29b      	uxth	r3, r3
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	b29a      	uxth	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	75fa      	strb	r2, [r7, #23]
 800a224:	461a      	mov	r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4413      	add	r3, r2
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	7812      	ldrb	r2, [r2, #0]
 800a22e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a230:	7dfb      	ldrb	r3, [r7, #23]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	75fa      	strb	r2, [r7, #23]
 800a236:	461a      	mov	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	4413      	add	r3, r2
 800a23c:	2203      	movs	r2, #3
 800a23e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a240:	e012      	b.n	800a268 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	1c5a      	adds	r2, r3, #1
 800a246:	60fa      	str	r2, [r7, #12]
 800a248:	7dfa      	ldrb	r2, [r7, #23]
 800a24a:	1c51      	adds	r1, r2, #1
 800a24c:	75f9      	strb	r1, [r7, #23]
 800a24e:	4611      	mov	r1, r2
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	440a      	add	r2, r1
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a258:	7dfb      	ldrb	r3, [r7, #23]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	75fa      	strb	r2, [r7, #23]
 800a25e:	461a      	mov	r2, r3
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4413      	add	r3, r2
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e8      	bne.n	800a242 <USBD_GetString+0x4e>
    }
  }
}
 800a270:	bf00      	nop
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a284:	e005      	b.n	800a292 <USBD_GetLen+0x1a>
  {
    len++;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	3301      	adds	r3, #1
 800a28a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3301      	adds	r3, #1
 800a290:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1f5      	bne.n	800a286 <USBD_GetLen+0xe>
  }

  return len;
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bc80      	pop	{r7}
 800a2a4:	4770      	bx	lr

0800a2a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	60b9      	str	r1, [r7, #8]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2bc:	88fa      	ldrh	r2, [r7, #6]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a2c2:	88fa      	ldrh	r2, [r7, #6]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2c8:	88fb      	ldrh	r3, [r7, #6]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f004 f84f 	bl	800e372 <USBD_LL_Transmit>

  return USBD_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	60f8      	str	r0, [r7, #12]
 800a2e6:	60b9      	str	r1, [r7, #8]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2ec:	88fb      	ldrh	r3, [r7, #6]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f004 f83d 	bl	800e372 <USBD_LL_Transmit>

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b084      	sub	sp, #16
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	4613      	mov	r3, r2
 800a30e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2203      	movs	r2, #3
 800a314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a318:	88fa      	ldrh	r2, [r7, #6]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a320:	88fa      	ldrh	r2, [r7, #6]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a328:	88fb      	ldrh	r3, [r7, #6]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	2100      	movs	r1, #0
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f004 f842 	bl	800e3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	4613      	mov	r3, r2
 800a34a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a34c:	88fb      	ldrh	r3, [r7, #6]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	2100      	movs	r1, #0
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f004 f830 	bl	800e3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2204      	movs	r2, #4
 800a36e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a372:	2300      	movs	r3, #0
 800a374:	2200      	movs	r2, #0
 800a376:	2100      	movs	r1, #0
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f003 fffa 	bl	800e372 <USBD_LL_Transmit>

  return USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2205      	movs	r2, #5
 800a394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a398:	2300      	movs	r3, #0
 800a39a:	2200      	movs	r2, #0
 800a39c:	2100      	movs	r1, #0
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f004 f80a 	bl	800e3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
	...

0800a3b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b6:	f3ef 8305 	mrs	r3, IPSR
 800a3ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10f      	bne.n	800a3e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c6:	607b      	str	r3, [r7, #4]
  return(result);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d109      	bne.n	800a3e2 <osKernelInitialize+0x32>
 800a3ce:	4b10      	ldr	r3, [pc, #64]	; (800a410 <osKernelInitialize+0x60>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b02      	cmp	r3, #2
 800a3d4:	d109      	bne.n	800a3ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3d6:	f3ef 8311 	mrs	r3, BASEPRI
 800a3da:	603b      	str	r3, [r7, #0]
  return(result);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a3e2:	f06f 0305 	mvn.w	r3, #5
 800a3e6:	60fb      	str	r3, [r7, #12]
 800a3e8:	e00c      	b.n	800a404 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a3ea:	4b09      	ldr	r3, [pc, #36]	; (800a410 <osKernelInitialize+0x60>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d105      	bne.n	800a3fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a3f2:	4b07      	ldr	r3, [pc, #28]	; (800a410 <osKernelInitialize+0x60>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	e002      	b.n	800a404 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a402:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a404:	68fb      	ldr	r3, [r7, #12]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bc80      	pop	{r7}
 800a40e:	4770      	bx	lr
 800a410:	20000a00 	.word	0x20000a00

0800a414 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a41a:	f3ef 8305 	mrs	r3, IPSR
 800a41e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a420:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10f      	bne.n	800a446 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a426:	f3ef 8310 	mrs	r3, PRIMASK
 800a42a:	607b      	str	r3, [r7, #4]
  return(result);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <osKernelStart+0x32>
 800a432:	4b11      	ldr	r3, [pc, #68]	; (800a478 <osKernelStart+0x64>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d109      	bne.n	800a44e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a43a:	f3ef 8311 	mrs	r3, BASEPRI
 800a43e:	603b      	str	r3, [r7, #0]
  return(result);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a446:	f06f 0305 	mvn.w	r3, #5
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e00e      	b.n	800a46c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a44e:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <osKernelStart+0x64>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d107      	bne.n	800a466 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a456:	4b08      	ldr	r3, [pc, #32]	; (800a478 <osKernelStart+0x64>)
 800a458:	2202      	movs	r2, #2
 800a45a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a45c:	f001 fee8 	bl	800c230 <vTaskStartScheduler>
      stat = osOK;
 800a460:	2300      	movs	r3, #0
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	e002      	b.n	800a46c <osKernelStart+0x58>
    } else {
      stat = osError;
 800a466:	f04f 33ff 	mov.w	r3, #4294967295
 800a46a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a46c:	68fb      	ldr	r3, [r7, #12]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000a00 	.word	0x20000a00

0800a47c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b092      	sub	sp, #72	; 0x48
 800a480:	af04      	add	r7, sp, #16
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a48c:	f3ef 8305 	mrs	r3, IPSR
 800a490:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a494:	2b00      	cmp	r3, #0
 800a496:	f040 8094 	bne.w	800a5c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a49a:	f3ef 8310 	mrs	r3, PRIMASK
 800a49e:	623b      	str	r3, [r7, #32]
  return(result);
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f040 808d 	bne.w	800a5c2 <osThreadNew+0x146>
 800a4a8:	4b48      	ldr	r3, [pc, #288]	; (800a5cc <osThreadNew+0x150>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d106      	bne.n	800a4be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4b0:	f3ef 8311 	mrs	r3, BASEPRI
 800a4b4:	61fb      	str	r3, [r7, #28]
  return(result);
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f040 8082 	bne.w	800a5c2 <osThreadNew+0x146>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d07e      	beq.n	800a5c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a4c4:	2380      	movs	r3, #128	; 0x80
 800a4c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a4c8:	2318      	movs	r3, #24
 800a4ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a4d0:	f107 031b 	add.w	r3, r7, #27
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d045      	beq.n	800a56e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d002      	beq.n	800a4f0 <osThreadNew+0x74>
        name = attr->name;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d008      	beq.n	800a516 <osThreadNew+0x9a>
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	2b38      	cmp	r3, #56	; 0x38
 800a508:	d805      	bhi.n	800a516 <osThreadNew+0x9a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <osThreadNew+0x9e>
        return (NULL);
 800a516:	2300      	movs	r3, #0
 800a518:	e054      	b.n	800a5c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d003      	beq.n	800a52a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	089b      	lsrs	r3, r3, #2
 800a528:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00e      	beq.n	800a550 <osThreadNew+0xd4>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	2bbb      	cmp	r3, #187	; 0xbb
 800a538:	d90a      	bls.n	800a550 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d006      	beq.n	800a550 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <osThreadNew+0xd4>
        mem = 1;
 800a54a:	2301      	movs	r3, #1
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a54e:	e010      	b.n	800a572 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10c      	bne.n	800a572 <osThreadNew+0xf6>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d108      	bne.n	800a572 <osThreadNew+0xf6>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <osThreadNew+0xf6>
          mem = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a56c:	e001      	b.n	800a572 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	2b01      	cmp	r3, #1
 800a576:	d110      	bne.n	800a59a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a580:	9202      	str	r2, [sp, #8]
 800a582:	9301      	str	r3, [sp, #4]
 800a584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f001 fc6a 	bl	800be68 <xTaskCreateStatic>
 800a594:	4603      	mov	r3, r0
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e013      	b.n	800a5c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d110      	bne.n	800a5c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	f107 0314 	add.w	r3, r7, #20
 800a5a8:	9301      	str	r3, [sp, #4]
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f001 fcb4 	bl	800bf20 <xTaskCreate>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d001      	beq.n	800a5c2 <osThreadNew+0x146>
          hTask = NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a5c2:	697b      	ldr	r3, [r7, #20]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3738      	adds	r7, #56	; 0x38
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20000a00 	.word	0x20000a00

0800a5d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d8:	f3ef 8305 	mrs	r3, IPSR
 800a5dc:	613b      	str	r3, [r7, #16]
  return(result);
 800a5de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10f      	bne.n	800a604 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <osDelay+0x34>
 800a5f0:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <osDelay+0x58>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d109      	bne.n	800a60c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5f8:	f3ef 8311 	mrs	r3, BASEPRI
 800a5fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d003      	beq.n	800a60c <osDelay+0x3c>
    stat = osErrorISR;
 800a604:	f06f 0305 	mvn.w	r3, #5
 800a608:	617b      	str	r3, [r7, #20]
 800a60a:	e007      	b.n	800a61c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fdd6 	bl	800c1c8 <vTaskDelay>
    }
  }

  return (stat);
 800a61c:	697b      	ldr	r3, [r7, #20]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20000a00 	.word	0x20000a00

0800a62c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08c      	sub	sp, #48	; 0x30
 800a630:	af02      	add	r7, sp, #8
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a638:	2300      	movs	r3, #0
 800a63a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a63c:	f3ef 8305 	mrs	r3, IPSR
 800a640:	61bb      	str	r3, [r7, #24]
  return(result);
 800a642:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a644:	2b00      	cmp	r3, #0
 800a646:	f040 8086 	bne.w	800a756 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a64a:	f3ef 8310 	mrs	r3, PRIMASK
 800a64e:	617b      	str	r3, [r7, #20]
  return(result);
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d17f      	bne.n	800a756 <osSemaphoreNew+0x12a>
 800a656:	4b42      	ldr	r3, [pc, #264]	; (800a760 <osSemaphoreNew+0x134>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d105      	bne.n	800a66a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a65e:	f3ef 8311 	mrs	r3, BASEPRI
 800a662:	613b      	str	r3, [r7, #16]
  return(result);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d175      	bne.n	800a756 <osSemaphoreNew+0x12a>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d072      	beq.n	800a756 <osSemaphoreNew+0x12a>
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	429a      	cmp	r2, r3
 800a676:	d86e      	bhi.n	800a756 <osSemaphoreNew+0x12a>
    mem = -1;
 800a678:	f04f 33ff 	mov.w	r3, #4294967295
 800a67c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d015      	beq.n	800a6b0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <osSemaphoreNew+0x6e>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	2b4f      	cmp	r3, #79	; 0x4f
 800a692:	d902      	bls.n	800a69a <osSemaphoreNew+0x6e>
        mem = 1;
 800a694:	2301      	movs	r3, #1
 800a696:	623b      	str	r3, [r7, #32]
 800a698:	e00c      	b.n	800a6b4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d108      	bne.n	800a6b4 <osSemaphoreNew+0x88>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d104      	bne.n	800a6b4 <osSemaphoreNew+0x88>
          mem = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	623b      	str	r3, [r7, #32]
 800a6ae:	e001      	b.n	800a6b4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ba:	d04c      	beq.n	800a756 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d128      	bne.n	800a714 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d10a      	bne.n	800a6de <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	2203      	movs	r2, #3
 800a6ce:	9200      	str	r2, [sp, #0]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	2001      	movs	r0, #1
 800a6d6:	f000 fbeb 	bl	800aeb0 <xQueueGenericCreateStatic>
 800a6da:	6278      	str	r0, [r7, #36]	; 0x24
 800a6dc:	e005      	b.n	800a6ea <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a6de:	2203      	movs	r2, #3
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	2001      	movs	r0, #1
 800a6e4:	f000 fc5b 	bl	800af9e <xQueueGenericCreate>
 800a6e8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d022      	beq.n	800a736 <osSemaphoreNew+0x10a>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d01f      	beq.n	800a736 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6fe:	f000 fd19 	bl	800b134 <xQueueGenericSend>
 800a702:	4603      	mov	r3, r0
 800a704:	2b01      	cmp	r3, #1
 800a706:	d016      	beq.n	800a736 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a70a:	f001 f9dc 	bl	800bac6 <vQueueDelete>
            hSemaphore = NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
 800a712:	e010      	b.n	800a736 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d108      	bne.n	800a72c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	461a      	mov	r2, r3
 800a720:	68b9      	ldr	r1, [r7, #8]
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fc9c 	bl	800b060 <xQueueCreateCountingSemaphoreStatic>
 800a728:	6278      	str	r0, [r7, #36]	; 0x24
 800a72a:	e004      	b.n	800a736 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a72c:	68b9      	ldr	r1, [r7, #8]
 800a72e:	68f8      	ldr	r0, [r7, #12]
 800a730:	f000 fccd 	bl	800b0ce <xQueueCreateCountingSemaphore>
 800a734:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00c      	beq.n	800a756 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <osSemaphoreNew+0x11e>
          name = attr->name;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	61fb      	str	r3, [r7, #28]
 800a748:	e001      	b.n	800a74e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a74e:	69f9      	ldr	r1, [r7, #28]
 800a750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a752:	f001 fb03 	bl	800bd5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3728      	adds	r7, #40	; 0x28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20000a00 	.word	0x20000a00

0800a764 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a772:	2300      	movs	r3, #0
 800a774:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a77c:	f06f 0303 	mvn.w	r3, #3
 800a780:	61fb      	str	r3, [r7, #28]
 800a782:	e04b      	b.n	800a81c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a784:	f3ef 8305 	mrs	r3, IPSR
 800a788:	617b      	str	r3, [r7, #20]
  return(result);
 800a78a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10f      	bne.n	800a7b0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a790:	f3ef 8310 	mrs	r3, PRIMASK
 800a794:	613b      	str	r3, [r7, #16]
  return(result);
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d109      	bne.n	800a7b0 <osSemaphoreAcquire+0x4c>
 800a79c:	4b22      	ldr	r3, [pc, #136]	; (800a828 <osSemaphoreAcquire+0xc4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d128      	bne.n	800a7f6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a7a4:	f3ef 8311 	mrs	r3, BASEPRI
 800a7a8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d022      	beq.n	800a7f6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a7b6:	f06f 0303 	mvn.w	r3, #3
 800a7ba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a7bc:	e02d      	b.n	800a81a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a7c2:	f107 0308 	add.w	r3, r7, #8
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	69b8      	ldr	r0, [r7, #24]
 800a7cc:	f001 f8c2 	bl	800b954 <xQueueReceiveFromISR>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d003      	beq.n	800a7de <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a7d6:	f06f 0302 	mvn.w	r3, #2
 800a7da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a7dc:	e01d      	b.n	800a81a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d01a      	beq.n	800a81a <osSemaphoreAcquire+0xb6>
 800a7e4:	4b11      	ldr	r3, [pc, #68]	; (800a82c <osSemaphoreAcquire+0xc8>)
 800a7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a7f4:	e011      	b.n	800a81a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a7f6:	6839      	ldr	r1, [r7, #0]
 800a7f8:	69b8      	ldr	r0, [r7, #24]
 800a7fa:	f000 ff9f 	bl	800b73c <xQueueSemaphoreTake>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b01      	cmp	r3, #1
 800a802:	d00b      	beq.n	800a81c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a80a:	f06f 0301 	mvn.w	r3, #1
 800a80e:	61fb      	str	r3, [r7, #28]
 800a810:	e004      	b.n	800a81c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a812:	f06f 0302 	mvn.w	r3, #2
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	e000      	b.n	800a81c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a81a:	bf00      	nop
      }
    }
  }

  return (stat);
 800a81c:	69fb      	ldr	r3, [r7, #28]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3720      	adds	r7, #32
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20000a00 	.word	0x20000a00
 800a82c:	e000ed04 	.word	0xe000ed04

0800a830 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a846:	f06f 0303 	mvn.w	r3, #3
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e03e      	b.n	800a8cc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a84e:	f3ef 8305 	mrs	r3, IPSR
 800a852:	617b      	str	r3, [r7, #20]
  return(result);
 800a854:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10f      	bne.n	800a87a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a85a:	f3ef 8310 	mrs	r3, PRIMASK
 800a85e:	613b      	str	r3, [r7, #16]
  return(result);
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <osSemaphoreRelease+0x4a>
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <osSemaphoreRelease+0xa8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d120      	bne.n	800a8b0 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a86e:	f3ef 8311 	mrs	r3, BASEPRI
 800a872:	60fb      	str	r3, [r7, #12]
  return(result);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01a      	beq.n	800a8b0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4619      	mov	r1, r3
 800a884:	69b8      	ldr	r0, [r7, #24]
 800a886:	f000 fdeb 	bl	800b460 <xQueueGiveFromISR>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d003      	beq.n	800a898 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a890:	f06f 0302 	mvn.w	r3, #2
 800a894:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a896:	e018      	b.n	800a8ca <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d015      	beq.n	800a8ca <osSemaphoreRelease+0x9a>
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <osSemaphoreRelease+0xac>)
 800a8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a8ae:	e00c      	b.n	800a8ca <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	69b8      	ldr	r0, [r7, #24]
 800a8b8:	f000 fc3c 	bl	800b134 <xQueueGenericSend>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d004      	beq.n	800a8cc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a8c2:	f06f 0302 	mvn.w	r3, #2
 800a8c6:	61fb      	str	r3, [r7, #28]
 800a8c8:	e000      	b.n	800a8cc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a8ca:	bf00      	nop
    }
  }

  return (stat);
 800a8cc:	69fb      	ldr	r3, [r7, #28]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3720      	adds	r7, #32
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20000a00 	.word	0x20000a00
 800a8dc:	e000ed04 	.word	0xe000ed04

0800a8e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08c      	sub	sp, #48	; 0x30
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8f0:	f3ef 8305 	mrs	r3, IPSR
 800a8f4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d16f      	bne.n	800a9dc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a900:	617b      	str	r3, [r7, #20]
  return(result);
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d169      	bne.n	800a9dc <osMessageQueueNew+0xfc>
 800a908:	4b37      	ldr	r3, [pc, #220]	; (800a9e8 <osMessageQueueNew+0x108>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d105      	bne.n	800a91c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a910:	f3ef 8311 	mrs	r3, BASEPRI
 800a914:	613b      	str	r3, [r7, #16]
  return(result);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d15f      	bne.n	800a9dc <osMessageQueueNew+0xfc>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d05c      	beq.n	800a9dc <osMessageQueueNew+0xfc>
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d059      	beq.n	800a9dc <osMessageQueueNew+0xfc>
    mem = -1;
 800a928:	f04f 33ff 	mov.w	r3, #4294967295
 800a92c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d029      	beq.n	800a988 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d012      	beq.n	800a962 <osMessageQueueNew+0x82>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	2b4f      	cmp	r3, #79	; 0x4f
 800a942:	d90e      	bls.n	800a962 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	695a      	ldr	r2, [r3, #20]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	fb01 f303 	mul.w	r3, r1, r3
 800a958:	429a      	cmp	r2, r3
 800a95a:	d302      	bcc.n	800a962 <osMessageQueueNew+0x82>
        mem = 1;
 800a95c:	2301      	movs	r3, #1
 800a95e:	623b      	str	r3, [r7, #32]
 800a960:	e014      	b.n	800a98c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d110      	bne.n	800a98c <osMessageQueueNew+0xac>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10c      	bne.n	800a98c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a976:	2b00      	cmp	r3, #0
 800a978:	d108      	bne.n	800a98c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d104      	bne.n	800a98c <osMessageQueueNew+0xac>
          mem = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	623b      	str	r3, [r7, #32]
 800a986:	e001      	b.n	800a98c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d10b      	bne.n	800a9aa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691a      	ldr	r2, [r3, #16]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	2100      	movs	r1, #0
 800a99c:	9100      	str	r1, [sp, #0]
 800a99e:	68b9      	ldr	r1, [r7, #8]
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 fa85 	bl	800aeb0 <xQueueGenericCreateStatic>
 800a9a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a9a8:	e008      	b.n	800a9bc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d105      	bne.n	800a9bc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 faf2 	bl	800af9e <xQueueGenericCreate>
 800a9ba:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00c      	beq.n	800a9dc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <osMessageQueueNew+0xf0>
        name = attr->name;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	61fb      	str	r3, [r7, #28]
 800a9ce:	e001      	b.n	800a9d4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a9d4:	69f9      	ldr	r1, [r7, #28]
 800a9d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9d8:	f001 f9c0 	bl	800bd5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20000a00 	.word	0x20000a00

0800a9ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08a      	sub	sp, #40	; 0x28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa04:	f3ef 8305 	mrs	r3, IPSR
 800aa08:	61fb      	str	r3, [r7, #28]
  return(result);
 800aa0a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10f      	bne.n	800aa30 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa10:	f3ef 8310 	mrs	r3, PRIMASK
 800aa14:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d109      	bne.n	800aa30 <osMessageQueuePut+0x44>
 800aa1c:	4b2b      	ldr	r3, [pc, #172]	; (800aacc <osMessageQueuePut+0xe0>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d12e      	bne.n	800aa82 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa24:	f3ef 8311 	mrs	r3, BASEPRI
 800aa28:	617b      	str	r3, [r7, #20]
  return(result);
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d028      	beq.n	800aa82 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d005      	beq.n	800aa42 <osMessageQueuePut+0x56>
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <osMessageQueuePut+0x56>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800aa42:	f06f 0303 	mvn.w	r3, #3
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa48:	e039      	b.n	800aabe <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800aa4e:	f107 0210 	add.w	r2, r7, #16
 800aa52:	2300      	movs	r3, #0
 800aa54:	68b9      	ldr	r1, [r7, #8]
 800aa56:	6a38      	ldr	r0, [r7, #32]
 800aa58:	f000 fc6a 	bl	800b330 <xQueueGenericSendFromISR>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d003      	beq.n	800aa6a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800aa62:	f06f 0302 	mvn.w	r3, #2
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa68:	e029      	b.n	800aabe <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d026      	beq.n	800aabe <osMessageQueuePut+0xd2>
 800aa70:	4b17      	ldr	r3, [pc, #92]	; (800aad0 <osMessageQueuePut+0xe4>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa80:	e01d      	b.n	800aabe <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <osMessageQueuePut+0xa2>
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d103      	bne.n	800aa96 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800aa8e:	f06f 0303 	mvn.w	r3, #3
 800aa92:	627b      	str	r3, [r7, #36]	; 0x24
 800aa94:	e014      	b.n	800aac0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa96:	2300      	movs	r3, #0
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	6a38      	ldr	r0, [r7, #32]
 800aa9e:	f000 fb49 	bl	800b134 <xQueueGenericSend>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d00b      	beq.n	800aac0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800aaae:	f06f 0301 	mvn.w	r3, #1
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
 800aab4:	e004      	b.n	800aac0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800aab6:	f06f 0302 	mvn.w	r3, #2
 800aaba:	627b      	str	r3, [r7, #36]	; 0x24
 800aabc:	e000      	b.n	800aac0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aabe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3728      	adds	r7, #40	; 0x28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	20000a00 	.word	0x20000a00
 800aad0:	e000ed04 	.word	0xe000ed04

0800aad4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08a      	sub	sp, #40	; 0x28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaea:	f3ef 8305 	mrs	r3, IPSR
 800aaee:	61fb      	str	r3, [r7, #28]
  return(result);
 800aaf0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10f      	bne.n	800ab16 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaf6:	f3ef 8310 	mrs	r3, PRIMASK
 800aafa:	61bb      	str	r3, [r7, #24]
  return(result);
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d109      	bne.n	800ab16 <osMessageQueueGet+0x42>
 800ab02:	4b2b      	ldr	r3, [pc, #172]	; (800abb0 <osMessageQueueGet+0xdc>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d12e      	bne.n	800ab68 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab0a:	f3ef 8311 	mrs	r3, BASEPRI
 800ab0e:	617b      	str	r3, [r7, #20]
  return(result);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d028      	beq.n	800ab68 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d005      	beq.n	800ab28 <osMessageQueueGet+0x54>
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <osMessageQueueGet+0x54>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ab28:	f06f 0303 	mvn.w	r3, #3
 800ab2c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab2e:	e038      	b.n	800aba2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ab30:	2300      	movs	r3, #0
 800ab32:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ab34:	f107 0310 	add.w	r3, r7, #16
 800ab38:	461a      	mov	r2, r3
 800ab3a:	68b9      	ldr	r1, [r7, #8]
 800ab3c:	6a38      	ldr	r0, [r7, #32]
 800ab3e:	f000 ff09 	bl	800b954 <xQueueReceiveFromISR>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d003      	beq.n	800ab50 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ab48:	f06f 0302 	mvn.w	r3, #2
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab4e:	e028      	b.n	800aba2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d025      	beq.n	800aba2 <osMessageQueueGet+0xce>
 800ab56:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <osMessageQueueGet+0xe0>)
 800ab58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab66:	e01c      	b.n	800aba2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d002      	beq.n	800ab74 <osMessageQueueGet+0xa0>
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ab74:	f06f 0303 	mvn.w	r3, #3
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
 800ab7a:	e013      	b.n	800aba4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	6a38      	ldr	r0, [r7, #32]
 800ab82:	f000 fcfb 	bl	800b57c <xQueueReceive>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d00b      	beq.n	800aba4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ab92:	f06f 0301 	mvn.w	r3, #1
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
 800ab98:	e004      	b.n	800aba4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ab9a:	f06f 0302 	mvn.w	r3, #2
 800ab9e:	627b      	str	r3, [r7, #36]	; 0x24
 800aba0:	e000      	b.n	800aba4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aba2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3728      	adds	r7, #40	; 0x28
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20000a00 	.word	0x20000a00
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800abb8:	b580      	push	{r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	61fb      	str	r3, [r7, #28]
 800abce:	e01e      	b.n	800ac0e <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abd0:	f3ef 8305 	mrs	r3, IPSR
 800abd4:	617b      	str	r3, [r7, #20]
  return(result);
 800abd6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10f      	bne.n	800abfc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abdc:	f3ef 8310 	mrs	r3, PRIMASK
 800abe0:	613b      	str	r3, [r7, #16]
  return(result);
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d109      	bne.n	800abfc <osMessageQueueGetCount+0x44>
 800abe8:	4b0b      	ldr	r3, [pc, #44]	; (800ac18 <osMessageQueueGetCount+0x60>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d10a      	bne.n	800ac06 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800abf0:	f3ef 8311 	mrs	r3, BASEPRI
 800abf4:	60fb      	str	r3, [r7, #12]
  return(result);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d004      	beq.n	800ac06 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800abfc:	69b8      	ldr	r0, [r7, #24]
 800abfe:	f000 ff47 	bl	800ba90 <uxQueueMessagesWaitingFromISR>
 800ac02:	61f8      	str	r0, [r7, #28]
 800ac04:	e003      	b.n	800ac0e <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800ac06:	69b8      	ldr	r0, [r7, #24]
 800ac08:	f000 ff24 	bl	800ba54 <uxQueueMessagesWaiting>
 800ac0c:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800ac0e:	69fb      	ldr	r3, [r7, #28]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3720      	adds	r7, #32
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	20000a00 	.word	0x20000a00

0800ac1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4a06      	ldr	r2, [pc, #24]	; (800ac44 <vApplicationGetIdleTaskMemory+0x28>)
 800ac2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	4a05      	ldr	r2, [pc, #20]	; (800ac48 <vApplicationGetIdleTaskMemory+0x2c>)
 800ac32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2280      	movs	r2, #128	; 0x80
 800ac38:	601a      	str	r2, [r3, #0]
}
 800ac3a:	bf00      	nop
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bc80      	pop	{r7}
 800ac42:	4770      	bx	lr
 800ac44:	20000a04 	.word	0x20000a04
 800ac48:	20000ac0 	.word	0x20000ac0

0800ac4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4a07      	ldr	r2, [pc, #28]	; (800ac78 <vApplicationGetTimerTaskMemory+0x2c>)
 800ac5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	4a06      	ldr	r2, [pc, #24]	; (800ac7c <vApplicationGetTimerTaskMemory+0x30>)
 800ac62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac6a:	601a      	str	r2, [r3, #0]
}
 800ac6c:	bf00      	nop
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20000cc0 	.word	0x20000cc0
 800ac7c:	20000d7c 	.word	0x20000d7c

0800ac80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f103 0208 	add.w	r2, r3, #8
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f04f 32ff 	mov.w	r2, #4294967295
 800ac98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f103 0208 	add.w	r2, r3, #8
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f103 0208 	add.w	r2, r3, #8
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	bc80      	pop	{r7}
 800acbc:	4770      	bx	lr

0800acbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc80      	pop	{r7}
 800acd4:	4770      	bx	lr

0800acd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acd6:	b480      	push	{r7}
 800acd8:	b085      	sub	sp, #20
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	689a      	ldr	r2, [r3, #8]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	683a      	ldr	r2, [r7, #0]
 800acfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	1c5a      	adds	r2, r3, #1
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	601a      	str	r2, [r3, #0]
}
 800ad12:	bf00      	nop
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bc80      	pop	{r7}
 800ad1a:	4770      	bx	lr

0800ad1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad32:	d103      	bne.n	800ad3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	60fb      	str	r3, [r7, #12]
 800ad3a:	e00c      	b.n	800ad56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	e002      	b.n	800ad4a <vListInsert+0x2e>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d2f6      	bcs.n	800ad44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	685a      	ldr	r2, [r3, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	601a      	str	r2, [r3, #0]
}
 800ad82:	bf00      	nop
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bc80      	pop	{r7}
 800ad8a:	4770      	bx	lr

0800ad8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	6892      	ldr	r2, [r2, #8]
 800ada2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	6852      	ldr	r2, [r2, #4]
 800adac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d103      	bne.n	800adc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	1e5a      	subs	r2, r3, #1
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	bc80      	pop	{r7}
 800addc:	4770      	bx	lr
	...

0800ade0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ae0a:	f002 fc5f 	bl	800d6cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae16:	68f9      	ldr	r1, [r7, #12]
 800ae18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ae1a:	fb01 f303 	mul.w	r3, r1, r3
 800ae1e:	441a      	add	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	68f9      	ldr	r1, [r7, #12]
 800ae3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ae40:	fb01 f303 	mul.w	r3, r1, r3
 800ae44:	441a      	add	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	22ff      	movs	r2, #255	; 0xff
 800ae4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	22ff      	movs	r2, #255	; 0xff
 800ae56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d114      	bne.n	800ae8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d01a      	beq.n	800ae9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3310      	adds	r3, #16
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f001 fc7b 	bl	800c768 <xTaskRemoveFromEventList>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d012      	beq.n	800ae9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae78:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <xQueueGenericReset+0xcc>)
 800ae7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	e009      	b.n	800ae9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3310      	adds	r3, #16
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7ff fef6 	bl	800ac80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3324      	adds	r3, #36	; 0x24
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff fef1 	bl	800ac80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae9e:	f002 fc45 	bl	800d72c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aea2:	2301      	movs	r3, #1
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	e000ed04 	.word	0xe000ed04

0800aeb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08e      	sub	sp, #56	; 0x38
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10a      	bne.n	800aeda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec8:	f383 8811 	msr	BASEPRI, r3
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10a      	bne.n	800aef6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aef2:	bf00      	nop
 800aef4:	e7fe      	b.n	800aef4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <xQueueGenericCreateStatic+0x52>
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d001      	beq.n	800af06 <xQueueGenericCreateStatic+0x56>
 800af02:	2301      	movs	r3, #1
 800af04:	e000      	b.n	800af08 <xQueueGenericCreateStatic+0x58>
 800af06:	2300      	movs	r3, #0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10a      	bne.n	800af22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af10:	f383 8811 	msr	BASEPRI, r3
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	f3bf 8f4f 	dsb	sy
 800af1c:	623b      	str	r3, [r7, #32]
}
 800af1e:	bf00      	nop
 800af20:	e7fe      	b.n	800af20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <xQueueGenericCreateStatic+0x7e>
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d101      	bne.n	800af32 <xQueueGenericCreateStatic+0x82>
 800af2e:	2301      	movs	r3, #1
 800af30:	e000      	b.n	800af34 <xQueueGenericCreateStatic+0x84>
 800af32:	2300      	movs	r3, #0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	61fb      	str	r3, [r7, #28]
}
 800af4a:	bf00      	nop
 800af4c:	e7fe      	b.n	800af4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800af4e:	2350      	movs	r3, #80	; 0x50
 800af50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b50      	cmp	r3, #80	; 0x50
 800af56:	d00a      	beq.n	800af6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	61bb      	str	r3, [r7, #24]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800af72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00d      	beq.n	800af94 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4613      	mov	r3, r2
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	68b9      	ldr	r1, [r7, #8]
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f000 f843 	bl	800b01a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800af94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800af96:	4618      	mov	r0, r3
 800af98:	3730      	adds	r7, #48	; 0x30
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b08a      	sub	sp, #40	; 0x28
 800afa2:	af02      	add	r7, sp, #8
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	4613      	mov	r3, r2
 800afaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	613b      	str	r3, [r7, #16]
}
 800afc4:	bf00      	nop
 800afc6:	e7fe      	b.n	800afc6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d102      	bne.n	800afd4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
 800afd2:	e004      	b.n	800afde <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	fb02 f303 	mul.w	r3, r2, r3
 800afdc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	3350      	adds	r3, #80	; 0x50
 800afe2:	4618      	mov	r0, r3
 800afe4:	f002 fc72 	bl	800d8cc <pvPortMalloc>
 800afe8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00f      	beq.n	800b010 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	3350      	adds	r3, #80	; 0x50
 800aff4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800affe:	79fa      	ldrb	r2, [r7, #7]
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	4613      	mov	r3, r2
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	68b9      	ldr	r1, [r7, #8]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f000 f805 	bl	800b01a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b010:	69bb      	ldr	r3, [r7, #24]
	}
 800b012:	4618      	mov	r0, r3
 800b014:	3720      	adds	r7, #32
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
 800b026:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d103      	bne.n	800b036 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	69ba      	ldr	r2, [r7, #24]
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	e002      	b.n	800b03c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b048:	2101      	movs	r1, #1
 800b04a:	69b8      	ldr	r0, [r7, #24]
 800b04c:	f7ff fec8 	bl	800ade0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	78fa      	ldrb	r2, [r7, #3]
 800b054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b058:	bf00      	nop
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08a      	sub	sp, #40	; 0x28
 800b064:	af02      	add	r7, sp, #8
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10a      	bne.n	800b088 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	61bb      	str	r3, [r7, #24]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d90a      	bls.n	800b0a6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	617b      	str	r3, [r7, #20]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f7ff fefd 	bl	800aeb0 <xQueueGenericCreateStatic>
 800b0b6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d002      	beq.n	800b0c4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
	}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b086      	sub	sp, #24
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	613b      	str	r3, [r7, #16]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d90a      	bls.n	800b112 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	60fb      	str	r3, [r7, #12]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b112:	2202      	movs	r2, #2
 800b114:	2100      	movs	r1, #0
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff ff41 	bl	800af9e <xQueueGenericCreate>
 800b11c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b12a:	697b      	ldr	r3, [r7, #20]
	}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08e      	sub	sp, #56	; 0x38
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b142:	2300      	movs	r3, #0
 800b144:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xQueueGenericSend+0x32>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <xQueueGenericSend+0x40>
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <xQueueGenericSend+0x44>
 800b174:	2301      	movs	r3, #1
 800b176:	e000      	b.n	800b17a <xQueueGenericSend+0x46>
 800b178:	2300      	movs	r3, #0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <xQueueGenericSend+0x60>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d103      	bne.n	800b1a2 <xQueueGenericSend+0x6e>
 800b19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d101      	bne.n	800b1a6 <xQueueGenericSend+0x72>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e000      	b.n	800b1a8 <xQueueGenericSend+0x74>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	623b      	str	r3, [r7, #32]
}
 800b1be:	bf00      	nop
 800b1c0:	e7fe      	b.n	800b1c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1c2:	f001 fc97 	bl	800caf4 <xTaskGetSchedulerState>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <xQueueGenericSend+0x9e>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <xQueueGenericSend+0xa2>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <xQueueGenericSend+0xa4>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	61fb      	str	r3, [r7, #28]
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1f2:	f002 fa6b 	bl	800d6cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d302      	bcc.n	800b208 <xQueueGenericSend+0xd4>
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b02      	cmp	r3, #2
 800b206:	d129      	bne.n	800b25c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b20e:	f000 fc94 	bl	800bb3a <prvCopyDataToQueue>
 800b212:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d010      	beq.n	800b23e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	3324      	adds	r3, #36	; 0x24
 800b220:	4618      	mov	r0, r3
 800b222:	f001 faa1 	bl	800c768 <xTaskRemoveFromEventList>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d013      	beq.n	800b254 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b22c:	4b3f      	ldr	r3, [pc, #252]	; (800b32c <xQueueGenericSend+0x1f8>)
 800b22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	e00a      	b.n	800b254 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	2b00      	cmp	r3, #0
 800b242:	d007      	beq.n	800b254 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b244:	4b39      	ldr	r3, [pc, #228]	; (800b32c <xQueueGenericSend+0x1f8>)
 800b246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b254:	f002 fa6a 	bl	800d72c <vPortExitCritical>
				return pdPASS;
 800b258:	2301      	movs	r3, #1
 800b25a:	e063      	b.n	800b324 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d103      	bne.n	800b26a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b262:	f002 fa63 	bl	800d72c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b266:	2300      	movs	r3, #0
 800b268:	e05c      	b.n	800b324 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d106      	bne.n	800b27e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b270:	f107 0314 	add.w	r3, r7, #20
 800b274:	4618      	mov	r0, r3
 800b276:	f001 fadb 	bl	800c830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b27a:	2301      	movs	r3, #1
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b27e:	f002 fa55 	bl	800d72c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b282:	f001 f845 	bl	800c310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b286:	f002 fa21 	bl	800d6cc <vPortEnterCritical>
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b290:	b25b      	sxtb	r3, r3
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d103      	bne.n	800b2a0 <xQueueGenericSend+0x16c>
 800b298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29a:	2200      	movs	r2, #0
 800b29c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a6:	b25b      	sxtb	r3, r3
 800b2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ac:	d103      	bne.n	800b2b6 <xQueueGenericSend+0x182>
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b6:	f002 fa39 	bl	800d72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2ba:	1d3a      	adds	r2, r7, #4
 800b2bc:	f107 0314 	add.w	r3, r7, #20
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f001 faca 	bl	800c85c <xTaskCheckForTimeOut>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d124      	bne.n	800b318 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2d0:	f000 fd2b 	bl	800bd2a <prvIsQueueFull>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d018      	beq.n	800b30c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	3310      	adds	r3, #16
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 f9f0 	bl	800c6c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ea:	f000 fcb6 	bl	800bc5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2ee:	f001 f81d 	bl	800c32c <xTaskResumeAll>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f47f af7c 	bne.w	800b1f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b2fa:	4b0c      	ldr	r3, [pc, #48]	; (800b32c <xQueueGenericSend+0x1f8>)
 800b2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	e772      	b.n	800b1f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b30c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b30e:	f000 fca4 	bl	800bc5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b312:	f001 f80b 	bl	800c32c <xTaskResumeAll>
 800b316:	e76c      	b.n	800b1f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b31a:	f000 fc9e 	bl	800bc5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b31e:	f001 f805 	bl	800c32c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b322:	2300      	movs	r3, #0
		}
	}
}
 800b324:	4618      	mov	r0, r3
 800b326:	3738      	adds	r7, #56	; 0x38
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	e000ed04 	.word	0xe000ed04

0800b330 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b08e      	sub	sp, #56	; 0x38
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10a      	bne.n	800b35e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b35a:	bf00      	nop
 800b35c:	e7fe      	b.n	800b35c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d103      	bne.n	800b36c <xQueueGenericSendFromISR+0x3c>
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <xQueueGenericSendFromISR+0x40>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e000      	b.n	800b372 <xQueueGenericSendFromISR+0x42>
 800b370:	2300      	movs	r3, #0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10a      	bne.n	800b38c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	623b      	str	r3, [r7, #32]
}
 800b388:	bf00      	nop
 800b38a:	e7fe      	b.n	800b38a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d103      	bne.n	800b39a <xQueueGenericSendFromISR+0x6a>
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b396:	2b01      	cmp	r3, #1
 800b398:	d101      	bne.n	800b39e <xQueueGenericSendFromISR+0x6e>
 800b39a:	2301      	movs	r3, #1
 800b39c:	e000      	b.n	800b3a0 <xQueueGenericSendFromISR+0x70>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10a      	bne.n	800b3ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	61fb      	str	r3, [r7, #28]
}
 800b3b6:	bf00      	nop
 800b3b8:	e7fe      	b.n	800b3b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3ba:	f002 fa49 	bl	800d850 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b3be:	f3ef 8211 	mrs	r2, BASEPRI
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	61ba      	str	r2, [r7, #24]
 800b3d4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b3d6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d302      	bcc.n	800b3ec <xQueueGenericSendFromISR+0xbc>
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d12c      	bne.n	800b446 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	68b9      	ldr	r1, [r7, #8]
 800b3fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3fc:	f000 fb9d 	bl	800bb3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b400:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b408:	d112      	bne.n	800b430 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d016      	beq.n	800b440 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	3324      	adds	r3, #36	; 0x24
 800b416:	4618      	mov	r0, r3
 800b418:	f001 f9a6 	bl	800c768 <xTaskRemoveFromEventList>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00e      	beq.n	800b440 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00b      	beq.n	800b440 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	e007      	b.n	800b440 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b434:	3301      	adds	r3, #1
 800b436:	b2db      	uxtb	r3, r3
 800b438:	b25a      	sxtb	r2, r3
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b440:	2301      	movs	r3, #1
 800b442:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b444:	e001      	b.n	800b44a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b446:	2300      	movs	r3, #0
 800b448:	637b      	str	r3, [r7, #52]	; 0x34
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b454:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3738      	adds	r7, #56	; 0x38
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b08e      	sub	sp, #56	; 0x38
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10a      	bne.n	800b48a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	623b      	str	r3, [r7, #32]
}
 800b486:	bf00      	nop
 800b488:	e7fe      	b.n	800b488 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00a      	beq.n	800b4a8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	61fb      	str	r3, [r7, #28]
}
 800b4a4:	bf00      	nop
 800b4a6:	e7fe      	b.n	800b4a6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d103      	bne.n	800b4b8 <xQueueGiveFromISR+0x58>
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <xQueueGiveFromISR+0x5c>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e000      	b.n	800b4be <xQueueGiveFromISR+0x5e>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10a      	bne.n	800b4d8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	61bb      	str	r3, [r7, #24]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b4d8:	f002 f9ba 	bl	800d850 <vPortValidateInterruptPriority>
	__asm volatile
 800b4dc:	f3ef 8211 	mrs	r2, BASEPRI
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	617a      	str	r2, [r7, #20]
 800b4f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b4f4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b504:	429a      	cmp	r2, r3
 800b506:	d22b      	bcs.n	800b560 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b51a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b522:	d112      	bne.n	800b54a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d016      	beq.n	800b55a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52e:	3324      	adds	r3, #36	; 0x24
 800b530:	4618      	mov	r0, r3
 800b532:	f001 f919 	bl	800c768 <xTaskRemoveFromEventList>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00e      	beq.n	800b55a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00b      	beq.n	800b55a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2201      	movs	r2, #1
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	e007      	b.n	800b55a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b54e:	3301      	adds	r3, #1
 800b550:	b2db      	uxtb	r3, r3
 800b552:	b25a      	sxtb	r2, r3
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b55a:	2301      	movs	r3, #1
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34
 800b55e:	e001      	b.n	800b564 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b560:	2300      	movs	r3, #0
 800b562:	637b      	str	r3, [r7, #52]	; 0x34
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f383 8811 	msr	BASEPRI, r3
}
 800b56e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b572:	4618      	mov	r0, r3
 800b574:	3738      	adds	r7, #56	; 0x38
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08c      	sub	sp, #48	; 0x30
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b588:	2300      	movs	r3, #0
 800b58a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10a      	bne.n	800b5ac <xQueueReceive+0x30>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	623b      	str	r3, [r7, #32]
}
 800b5a8:	bf00      	nop
 800b5aa:	e7fe      	b.n	800b5aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d103      	bne.n	800b5ba <xQueueReceive+0x3e>
 800b5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d101      	bne.n	800b5be <xQueueReceive+0x42>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e000      	b.n	800b5c0 <xQueueReceive+0x44>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <xQueueReceive+0x5e>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	61fb      	str	r3, [r7, #28]
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5da:	f001 fa8b 	bl	800caf4 <xTaskGetSchedulerState>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d102      	bne.n	800b5ea <xQueueReceive+0x6e>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <xQueueReceive+0x72>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <xQueueReceive+0x74>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10a      	bne.n	800b60a <xQueueReceive+0x8e>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	61bb      	str	r3, [r7, #24]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b60a:	f002 f85f 	bl	800d6cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b612:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b616:	2b00      	cmp	r3, #0
 800b618:	d01f      	beq.n	800b65a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b61a:	68b9      	ldr	r1, [r7, #8]
 800b61c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b61e:	f000 faf6 	bl	800bc0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b624:	1e5a      	subs	r2, r3, #1
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00f      	beq.n	800b652 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	3310      	adds	r3, #16
 800b636:	4618      	mov	r0, r3
 800b638:	f001 f896 	bl	800c768 <xTaskRemoveFromEventList>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d007      	beq.n	800b652 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b642:	4b3d      	ldr	r3, [pc, #244]	; (800b738 <xQueueReceive+0x1bc>)
 800b644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b652:	f002 f86b 	bl	800d72c <vPortExitCritical>
				return pdPASS;
 800b656:	2301      	movs	r3, #1
 800b658:	e069      	b.n	800b72e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d103      	bne.n	800b668 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b660:	f002 f864 	bl	800d72c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b664:	2300      	movs	r3, #0
 800b666:	e062      	b.n	800b72e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b66e:	f107 0310 	add.w	r3, r7, #16
 800b672:	4618      	mov	r0, r3
 800b674:	f001 f8dc 	bl	800c830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b678:	2301      	movs	r3, #1
 800b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b67c:	f002 f856 	bl	800d72c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b680:	f000 fe46 	bl	800c310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b684:	f002 f822 	bl	800d6cc <vPortEnterCritical>
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b68e:	b25b      	sxtb	r3, r3
 800b690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b694:	d103      	bne.n	800b69e <xQueueReceive+0x122>
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6a4:	b25b      	sxtb	r3, r3
 800b6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6aa:	d103      	bne.n	800b6b4 <xQueueReceive+0x138>
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6b4:	f002 f83a 	bl	800d72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6b8:	1d3a      	adds	r2, r7, #4
 800b6ba:	f107 0310 	add.w	r3, r7, #16
 800b6be:	4611      	mov	r1, r2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 f8cb 	bl	800c85c <xTaskCheckForTimeOut>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d123      	bne.n	800b714 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ce:	f000 fb16 	bl	800bcfe <prvIsQueueEmpty>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d017      	beq.n	800b708 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	3324      	adds	r3, #36	; 0x24
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fff1 	bl	800c6c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6e8:	f000 fab7 	bl	800bc5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6ec:	f000 fe1e 	bl	800c32c <xTaskResumeAll>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d189      	bne.n	800b60a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b6f6:	4b10      	ldr	r3, [pc, #64]	; (800b738 <xQueueReceive+0x1bc>)
 800b6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	e780      	b.n	800b60a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b70a:	f000 faa6 	bl	800bc5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b70e:	f000 fe0d 	bl	800c32c <xTaskResumeAll>
 800b712:	e77a      	b.n	800b60a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b716:	f000 faa0 	bl	800bc5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b71a:	f000 fe07 	bl	800c32c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b71e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b720:	f000 faed 	bl	800bcfe <prvIsQueueEmpty>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	f43f af6f 	beq.w	800b60a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b72c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3730      	adds	r7, #48	; 0x30
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	e000ed04 	.word	0xe000ed04

0800b73c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08e      	sub	sp, #56	; 0x38
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b746:	2300      	movs	r3, #0
 800b748:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b74e:	2300      	movs	r3, #0
 800b750:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10a      	bne.n	800b76e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	f383 8811 	msr	BASEPRI, r3
 800b760:	f3bf 8f6f 	isb	sy
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	623b      	str	r3, [r7, #32]
}
 800b76a:	bf00      	nop
 800b76c:	e7fe      	b.n	800b76c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	61fb      	str	r3, [r7, #28]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b78c:	f001 f9b2 	bl	800caf4 <xTaskGetSchedulerState>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d102      	bne.n	800b79c <xQueueSemaphoreTake+0x60>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <xQueueSemaphoreTake+0x64>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <xQueueSemaphoreTake+0x66>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10a      	bne.n	800b7bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	61bb      	str	r3, [r7, #24]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7bc:	f001 ff86 	bl	800d6cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d024      	beq.n	800b816 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	1e5a      	subs	r2, r3, #1
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d104      	bne.n	800b7e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b7dc:	f001 fb0a 	bl	800cdf4 <pvTaskIncrementMutexHeldCount>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00f      	beq.n	800b80e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	3310      	adds	r3, #16
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f000 ffb8 	bl	800c768 <xTaskRemoveFromEventList>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d007      	beq.n	800b80e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b7fe:	4b54      	ldr	r3, [pc, #336]	; (800b950 <xQueueSemaphoreTake+0x214>)
 800b800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b80e:	f001 ff8d 	bl	800d72c <vPortExitCritical>
				return pdPASS;
 800b812:	2301      	movs	r3, #1
 800b814:	e097      	b.n	800b946 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d111      	bne.n	800b840 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00a      	beq.n	800b838 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	617b      	str	r3, [r7, #20]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b838:	f001 ff78 	bl	800d72c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b83c:	2300      	movs	r3, #0
 800b83e:	e082      	b.n	800b946 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b842:	2b00      	cmp	r3, #0
 800b844:	d106      	bne.n	800b854 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fff0 	bl	800c830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b850:	2301      	movs	r3, #1
 800b852:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b854:	f001 ff6a 	bl	800d72c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b858:	f000 fd5a 	bl	800c310 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b85c:	f001 ff36 	bl	800d6cc <vPortEnterCritical>
 800b860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b866:	b25b      	sxtb	r3, r3
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d103      	bne.n	800b876 <xQueueSemaphoreTake+0x13a>
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	2200      	movs	r2, #0
 800b872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b87c:	b25b      	sxtb	r3, r3
 800b87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b882:	d103      	bne.n	800b88c <xQueueSemaphoreTake+0x150>
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b88c:	f001 ff4e 	bl	800d72c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b890:	463a      	mov	r2, r7
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	4611      	mov	r1, r2
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 ffdf 	bl	800c85c <xTaskCheckForTimeOut>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d132      	bne.n	800b90a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8a6:	f000 fa2a 	bl	800bcfe <prvIsQueueEmpty>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d026      	beq.n	800b8fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d109      	bne.n	800b8cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b8b8:	f001 ff08 	bl	800d6cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f001 f935 	bl	800cb30 <xTaskPriorityInherit>
 800b8c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b8c8:	f001 ff30 	bl	800d72c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ce:	3324      	adds	r3, #36	; 0x24
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fef7 	bl	800c6c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8dc:	f000 f9bd 	bl	800bc5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8e0:	f000 fd24 	bl	800c32c <xTaskResumeAll>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f47f af68 	bne.w	800b7bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b8ec:	4b18      	ldr	r3, [pc, #96]	; (800b950 <xQueueSemaphoreTake+0x214>)
 800b8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	e75e      	b.n	800b7bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b8fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b900:	f000 f9ab 	bl	800bc5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b904:	f000 fd12 	bl	800c32c <xTaskResumeAll>
 800b908:	e758      	b.n	800b7bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b90a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b90c:	f000 f9a5 	bl	800bc5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b910:	f000 fd0c 	bl	800c32c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b916:	f000 f9f2 	bl	800bcfe <prvIsQueueEmpty>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f43f af4d 	beq.w	800b7bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00d      	beq.n	800b944 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b928:	f001 fed0 	bl	800d6cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b92c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b92e:	f000 f8ed 	bl	800bb0c <prvGetDisinheritPriorityAfterTimeout>
 800b932:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b93a:	4618      	mov	r0, r3
 800b93c:	f001 f9d4 	bl	800cce8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b940:	f001 fef4 	bl	800d72c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b944:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b946:	4618      	mov	r0, r3
 800b948:	3738      	adds	r7, #56	; 0x38
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	e000ed04 	.word	0xe000ed04

0800b954 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08e      	sub	sp, #56	; 0x38
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10a      	bne.n	800b980 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	623b      	str	r3, [r7, #32]
}
 800b97c:	bf00      	nop
 800b97e:	e7fe      	b.n	800b97e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d103      	bne.n	800b98e <xQueueReceiveFromISR+0x3a>
 800b986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <xQueueReceiveFromISR+0x3e>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <xQueueReceiveFromISR+0x40>
 800b992:	2300      	movs	r3, #0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	61fb      	str	r3, [r7, #28]
}
 800b9aa:	bf00      	nop
 800b9ac:	e7fe      	b.n	800b9ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9ae:	f001 ff4f 	bl	800d850 <vPortValidateInterruptPriority>
	__asm volatile
 800b9b2:	f3ef 8211 	mrs	r2, BASEPRI
 800b9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	61ba      	str	r2, [r7, #24]
 800b9c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b9ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d02f      	beq.n	800ba3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9e4:	68b9      	ldr	r1, [r7, #8]
 800b9e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9e8:	f000 f911 	bl	800bc0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	1e5a      	subs	r2, r3, #1
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b9f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fc:	d112      	bne.n	800ba24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d016      	beq.n	800ba34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	3310      	adds	r3, #16
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 feac 	bl	800c768 <xTaskRemoveFromEventList>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00e      	beq.n	800ba34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00b      	beq.n	800ba34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	e007      	b.n	800ba34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ba24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba28:	3301      	adds	r3, #1
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	b25a      	sxtb	r2, r3
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ba34:	2301      	movs	r3, #1
 800ba36:	637b      	str	r3, [r7, #52]	; 0x34
 800ba38:	e001      	b.n	800ba3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f383 8811 	msr	BASEPRI, r3
}
 800ba48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3738      	adds	r7, #56	; 0x38
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10a      	bne.n	800ba78 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ba62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	60bb      	str	r3, [r7, #8]
}
 800ba74:	bf00      	nop
 800ba76:	e7fe      	b.n	800ba76 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ba78:	f001 fe28 	bl	800d6cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba80:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ba82:	f001 fe53 	bl	800d72c <vPortExitCritical>

	return uxReturn;
 800ba86:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d10a      	bne.n	800bab4 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	60bb      	str	r3, [r7, #8]
}
 800bab0:	bf00      	nop
 800bab2:	e7fe      	b.n	800bab2 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab8:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800baba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bc80      	pop	{r7}
 800bac4:	4770      	bx	lr

0800bac6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10a      	bne.n	800baee <vQueueDelete+0x28>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	60bb      	str	r3, [r7, #8]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 f95c 	bl	800bdac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d102      	bne.n	800bb04 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f001 ffa8 	bl	800da54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bb04:	bf00      	nop
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d006      	beq.n	800bb2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	e001      	b.n	800bb2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bc80      	pop	{r7}
 800bb38:	4770      	bx	lr

0800bb3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b086      	sub	sp, #24
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10d      	bne.n	800bb74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d14d      	bne.n	800bbfc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f851 	bl	800cc0c <xTaskPriorityDisinherit>
 800bb6a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	605a      	str	r2, [r3, #4]
 800bb72:	e043      	b.n	800bbfc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d119      	bne.n	800bbae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6898      	ldr	r0, [r3, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb82:	461a      	mov	r2, r3
 800bb84:	68b9      	ldr	r1, [r7, #8]
 800bb86:	f002 fdaa 	bl	800e6de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	689a      	ldr	r2, [r3, #8]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb92:	441a      	add	r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	689a      	ldr	r2, [r3, #8]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d32b      	bcc.n	800bbfc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	609a      	str	r2, [r3, #8]
 800bbac:	e026      	b.n	800bbfc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	68d8      	ldr	r0, [r3, #12]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	68b9      	ldr	r1, [r7, #8]
 800bbba:	f002 fd90 	bl	800e6de <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68da      	ldr	r2, [r3, #12]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	425b      	negs	r3, r3
 800bbc8:	441a      	add	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68da      	ldr	r2, [r3, #12]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d207      	bcs.n	800bbea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	425b      	negs	r3, r3
 800bbe4:	441a      	add	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d105      	bne.n	800bbfc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	1c5a      	adds	r2, r3, #1
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc04:	697b      	ldr	r3, [r7, #20]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d018      	beq.n	800bc52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68da      	ldr	r2, [r3, #12]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc28:	441a      	add	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68da      	ldr	r2, [r3, #12]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d303      	bcc.n	800bc42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68d9      	ldr	r1, [r3, #12]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6838      	ldr	r0, [r7, #0]
 800bc4e:	f002 fd46 	bl	800e6de <memcpy>
	}
}
 800bc52:	bf00      	nop
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc62:	f001 fd33 	bl	800d6cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc6e:	e011      	b.n	800bc94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d012      	beq.n	800bc9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	3324      	adds	r3, #36	; 0x24
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 fd73 	bl	800c768 <xTaskRemoveFromEventList>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d001      	beq.n	800bc8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc88:	f000 fe4a 	bl	800c920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dce9      	bgt.n	800bc70 <prvUnlockQueue+0x16>
 800bc9c:	e000      	b.n	800bca0 <prvUnlockQueue+0x46>
					break;
 800bc9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	22ff      	movs	r2, #255	; 0xff
 800bca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bca8:	f001 fd40 	bl	800d72c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcac:	f001 fd0e 	bl	800d6cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcb8:	e011      	b.n	800bcde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d012      	beq.n	800bce8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	3310      	adds	r3, #16
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 fd4e 	bl	800c768 <xTaskRemoveFromEventList>
 800bccc:	4603      	mov	r3, r0
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcd2:	f000 fe25 	bl	800c920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	dce9      	bgt.n	800bcba <prvUnlockQueue+0x60>
 800bce6:	e000      	b.n	800bcea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bce8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	22ff      	movs	r2, #255	; 0xff
 800bcee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bcf2:	f001 fd1b 	bl	800d72c <vPortExitCritical>
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b084      	sub	sp, #16
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd06:	f001 fce1 	bl	800d6cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d102      	bne.n	800bd18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd12:	2301      	movs	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	e001      	b.n	800bd1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd1c:	f001 fd06 	bl	800d72c <vPortExitCritical>

	return xReturn;
 800bd20:	68fb      	ldr	r3, [r7, #12]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd32:	f001 fccb 	bl	800d6cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d102      	bne.n	800bd48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd42:	2301      	movs	r3, #1
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e001      	b.n	800bd4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd4c:	f001 fcee 	bl	800d72c <vPortExitCritical>

	return xReturn;
 800bd50:	68fb      	ldr	r3, [r7, #12]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd66:	2300      	movs	r3, #0
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e014      	b.n	800bd96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd6c:	4a0e      	ldr	r2, [pc, #56]	; (800bda8 <vQueueAddToRegistry+0x4c>)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10b      	bne.n	800bd90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd78:	490b      	ldr	r1, [pc, #44]	; (800bda8 <vQueueAddToRegistry+0x4c>)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd82:	4a09      	ldr	r2, [pc, #36]	; (800bda8 <vQueueAddToRegistry+0x4c>)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	4413      	add	r3, r2
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd8e:	e006      	b.n	800bd9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	3301      	adds	r3, #1
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b07      	cmp	r3, #7
 800bd9a:	d9e7      	bls.n	800bd6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd9c:	bf00      	nop
 800bd9e:	bf00      	nop
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bc80      	pop	{r7}
 800bda6:	4770      	bx	lr
 800bda8:	2000117c 	.word	0x2000117c

0800bdac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	e016      	b.n	800bde8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bdba:	4a10      	ldr	r2, [pc, #64]	; (800bdfc <vQueueUnregisterQueue+0x50>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	00db      	lsls	r3, r3, #3
 800bdc0:	4413      	add	r3, r2
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d10b      	bne.n	800bde2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bdca:	4a0c      	ldr	r2, [pc, #48]	; (800bdfc <vQueueUnregisterQueue+0x50>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2100      	movs	r1, #0
 800bdd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bdd4:	4a09      	ldr	r2, [pc, #36]	; (800bdfc <vQueueUnregisterQueue+0x50>)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	00db      	lsls	r3, r3, #3
 800bdda:	4413      	add	r3, r2
 800bddc:	2200      	movs	r2, #0
 800bdde:	605a      	str	r2, [r3, #4]
				break;
 800bde0:	e006      	b.n	800bdf0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3301      	adds	r3, #1
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2b07      	cmp	r3, #7
 800bdec:	d9e5      	bls.n	800bdba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bc80      	pop	{r7}
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	2000117c 	.word	0x2000117c

0800be00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be10:	f001 fc5c 	bl	800d6cc <vPortEnterCritical>
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be1a:	b25b      	sxtb	r3, r3
 800be1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be20:	d103      	bne.n	800be2a <vQueueWaitForMessageRestricted+0x2a>
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be30:	b25b      	sxtb	r3, r3
 800be32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be36:	d103      	bne.n	800be40 <vQueueWaitForMessageRestricted+0x40>
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be40:	f001 fc74 	bl	800d72c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d106      	bne.n	800be5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	3324      	adds	r3, #36	; 0x24
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	68b9      	ldr	r1, [r7, #8]
 800be54:	4618      	mov	r0, r3
 800be56:	f000 fc5b 	bl	800c710 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be5a:	6978      	ldr	r0, [r7, #20]
 800be5c:	f7ff fefd 	bl	800bc5a <prvUnlockQueue>
	}
 800be60:	bf00      	nop
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08e      	sub	sp, #56	; 0x38
 800be6c:	af04      	add	r7, sp, #16
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <xTaskCreateStatic+0x2a>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	623b      	str	r3, [r7, #32]
}
 800be8e:	bf00      	nop
 800be90:	e7fe      	b.n	800be90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xTaskCreateStatic+0x46>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	61fb      	str	r3, [r7, #28]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800beae:	23bc      	movs	r3, #188	; 0xbc
 800beb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2bbc      	cmp	r3, #188	; 0xbc
 800beb6:	d00a      	beq.n	800bece <xTaskCreateStatic+0x66>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	61bb      	str	r3, [r7, #24]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d01e      	beq.n	800bf12 <xTaskCreateStatic+0xaa>
 800bed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d01b      	beq.n	800bf12 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bedc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bee2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	2202      	movs	r2, #2
 800bee8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800beec:	2300      	movs	r3, #0
 800beee:	9303      	str	r3, [sp, #12]
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	9302      	str	r3, [sp, #8]
 800bef4:	f107 0314 	add.w	r3, r7, #20
 800bef8:	9301      	str	r3, [sp, #4]
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	68b9      	ldr	r1, [r7, #8]
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f000 f851 	bl	800bfac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf0c:	f000 f8ec 	bl	800c0e8 <prvAddNewTaskToReadyList>
 800bf10:	e001      	b.n	800bf16 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf16:	697b      	ldr	r3, [r7, #20]
	}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3728      	adds	r7, #40	; 0x28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08c      	sub	sp, #48	; 0x30
 800bf24:	af04      	add	r7, sp, #16
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	603b      	str	r3, [r7, #0]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf30:	88fb      	ldrh	r3, [r7, #6]
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	4618      	mov	r0, r3
 800bf36:	f001 fcc9 	bl	800d8cc <pvPortMalloc>
 800bf3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d00e      	beq.n	800bf60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800bf42:	20bc      	movs	r0, #188	; 0xbc
 800bf44:	f001 fcc2 	bl	800d8cc <pvPortMalloc>
 800bf48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	631a      	str	r2, [r3, #48]	; 0x30
 800bf56:	e005      	b.n	800bf64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf58:	6978      	ldr	r0, [r7, #20]
 800bf5a:	f001 fd7b 	bl	800da54 <vPortFree>
 800bf5e:	e001      	b.n	800bf64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf60:	2300      	movs	r3, #0
 800bf62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d017      	beq.n	800bf9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf72:	88fa      	ldrh	r2, [r7, #6]
 800bf74:	2300      	movs	r3, #0
 800bf76:	9303      	str	r3, [sp, #12]
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	9302      	str	r3, [sp, #8]
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f000 f80f 	bl	800bfac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf8e:	69f8      	ldr	r0, [r7, #28]
 800bf90:	f000 f8aa 	bl	800c0e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf94:	2301      	movs	r3, #1
 800bf96:	61bb      	str	r3, [r7, #24]
 800bf98:	e002      	b.n	800bfa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfa0:	69bb      	ldr	r3, [r7, #24]
	}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3720      	adds	r7, #32
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	607a      	str	r2, [r7, #4]
 800bfb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	21a5      	movs	r1, #165	; 0xa5
 800bfc6:	f002 fb98 	bl	800e6fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	f023 0307 	bic.w	r3, r3, #7
 800bfe2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bfe4:	69bb      	ldr	r3, [r7, #24]
 800bfe6:	f003 0307 	and.w	r3, r3, #7
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	617b      	str	r3, [r7, #20]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c004:	2300      	movs	r3, #0
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	e012      	b.n	800c030 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	4413      	add	r3, r2
 800c010:	7819      	ldrb	r1, [r3, #0]
 800c012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	4413      	add	r3, r2
 800c018:	3334      	adds	r3, #52	; 0x34
 800c01a:	460a      	mov	r2, r1
 800c01c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	4413      	add	r3, r2
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d006      	beq.n	800c038 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	3301      	adds	r3, #1
 800c02e:	61fb      	str	r3, [r7, #28]
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	2b0f      	cmp	r3, #15
 800c034:	d9e9      	bls.n	800c00a <prvInitialiseNewTask+0x5e>
 800c036:	e000      	b.n	800c03a <prvInitialiseNewTask+0x8e>
		{
			break;
 800c038:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	2b37      	cmp	r3, #55	; 0x37
 800c046:	d901      	bls.n	800c04c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c048:	2337      	movs	r3, #55	; 0x37
 800c04a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c050:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c056:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	2200      	movs	r2, #0
 800c05c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	3304      	adds	r3, #4
 800c062:	4618      	mov	r0, r3
 800c064:	f7fe fe2b 	bl	800acbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	3318      	adds	r3, #24
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe fe26 	bl	800acbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c076:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c086:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	2200      	movs	r2, #0
 800c08c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	2200      	movs	r2, #0
 800c094:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	3354      	adds	r3, #84	; 0x54
 800c09c:	2260      	movs	r2, #96	; 0x60
 800c09e:	2100      	movs	r1, #0
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f002 fb2a 	bl	800e6fa <memset>
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	4a0c      	ldr	r2, [pc, #48]	; (800c0dc <prvInitialiseNewTask+0x130>)
 800c0aa:	659a      	str	r2, [r3, #88]	; 0x58
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	4a0c      	ldr	r2, [pc, #48]	; (800c0e0 <prvInitialiseNewTask+0x134>)
 800c0b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	4a0b      	ldr	r2, [pc, #44]	; (800c0e4 <prvInitialiseNewTask+0x138>)
 800c0b6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	68f9      	ldr	r1, [r7, #12]
 800c0bc:	69b8      	ldr	r0, [r7, #24]
 800c0be:	f001 fa13 	bl	800d4e8 <pxPortInitialiseStack>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0d4:	bf00      	nop
 800c0d6:	3720      	adds	r7, #32
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	0800fadc 	.word	0x0800fadc
 800c0e0:	0800fafc 	.word	0x0800fafc
 800c0e4:	0800fabc 	.word	0x0800fabc

0800c0e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c0f0:	f001 faec 	bl	800d6cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0f4:	4b2d      	ldr	r3, [pc, #180]	; (800c1ac <prvAddNewTaskToReadyList+0xc4>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	4a2c      	ldr	r2, [pc, #176]	; (800c1ac <prvAddNewTaskToReadyList+0xc4>)
 800c0fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0fe:	4b2c      	ldr	r3, [pc, #176]	; (800c1b0 <prvAddNewTaskToReadyList+0xc8>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d109      	bne.n	800c11a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c106:	4a2a      	ldr	r2, [pc, #168]	; (800c1b0 <prvAddNewTaskToReadyList+0xc8>)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c10c:	4b27      	ldr	r3, [pc, #156]	; (800c1ac <prvAddNewTaskToReadyList+0xc4>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d110      	bne.n	800c136 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c114:	f000 fc28 	bl	800c968 <prvInitialiseTaskLists>
 800c118:	e00d      	b.n	800c136 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c11a:	4b26      	ldr	r3, [pc, #152]	; (800c1b4 <prvAddNewTaskToReadyList+0xcc>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d109      	bne.n	800c136 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c122:	4b23      	ldr	r3, [pc, #140]	; (800c1b0 <prvAddNewTaskToReadyList+0xc8>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d802      	bhi.n	800c136 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c130:	4a1f      	ldr	r2, [pc, #124]	; (800c1b0 <prvAddNewTaskToReadyList+0xc8>)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c136:	4b20      	ldr	r3, [pc, #128]	; (800c1b8 <prvAddNewTaskToReadyList+0xd0>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	3301      	adds	r3, #1
 800c13c:	4a1e      	ldr	r2, [pc, #120]	; (800c1b8 <prvAddNewTaskToReadyList+0xd0>)
 800c13e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c140:	4b1d      	ldr	r3, [pc, #116]	; (800c1b8 <prvAddNewTaskToReadyList+0xd0>)
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14c:	4b1b      	ldr	r3, [pc, #108]	; (800c1bc <prvAddNewTaskToReadyList+0xd4>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d903      	bls.n	800c15c <prvAddNewTaskToReadyList+0x74>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	4a18      	ldr	r2, [pc, #96]	; (800c1bc <prvAddNewTaskToReadyList+0xd4>)
 800c15a:	6013      	str	r3, [r2, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c160:	4613      	mov	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4a15      	ldr	r2, [pc, #84]	; (800c1c0 <prvAddNewTaskToReadyList+0xd8>)
 800c16a:	441a      	add	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3304      	adds	r3, #4
 800c170:	4619      	mov	r1, r3
 800c172:	4610      	mov	r0, r2
 800c174:	f7fe fdaf 	bl	800acd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c178:	f001 fad8 	bl	800d72c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c17c:	4b0d      	ldr	r3, [pc, #52]	; (800c1b4 <prvAddNewTaskToReadyList+0xcc>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00e      	beq.n	800c1a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c184:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <prvAddNewTaskToReadyList+0xc8>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	429a      	cmp	r2, r3
 800c190:	d207      	bcs.n	800c1a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c192:	4b0c      	ldr	r3, [pc, #48]	; (800c1c4 <prvAddNewTaskToReadyList+0xdc>)
 800c194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1a2:	bf00      	nop
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20001690 	.word	0x20001690
 800c1b0:	200011bc 	.word	0x200011bc
 800c1b4:	2000169c 	.word	0x2000169c
 800c1b8:	200016ac 	.word	0x200016ac
 800c1bc:	20001698 	.word	0x20001698
 800c1c0:	200011c0 	.word	0x200011c0
 800c1c4:	e000ed04 	.word	0xe000ed04

0800c1c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d017      	beq.n	800c20a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1da:	4b13      	ldr	r3, [pc, #76]	; (800c228 <vTaskDelay+0x60>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00a      	beq.n	800c1f8 <vTaskDelay+0x30>
	__asm volatile
 800c1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e6:	f383 8811 	msr	BASEPRI, r3
 800c1ea:	f3bf 8f6f 	isb	sy
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	60bb      	str	r3, [r7, #8]
}
 800c1f4:	bf00      	nop
 800c1f6:	e7fe      	b.n	800c1f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c1f8:	f000 f88a 	bl	800c310 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fe0c 	bl	800ce1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c204:	f000 f892 	bl	800c32c <xTaskResumeAll>
 800c208:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d107      	bne.n	800c220 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c210:	4b06      	ldr	r3, [pc, #24]	; (800c22c <vTaskDelay+0x64>)
 800c212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c216:	601a      	str	r2, [r3, #0]
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c220:	bf00      	nop
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	200016b8 	.word	0x200016b8
 800c22c:	e000ed04 	.word	0xe000ed04

0800c230 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b08a      	sub	sp, #40	; 0x28
 800c234:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c236:	2300      	movs	r3, #0
 800c238:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c23e:	463a      	mov	r2, r7
 800c240:	1d39      	adds	r1, r7, #4
 800c242:	f107 0308 	add.w	r3, r7, #8
 800c246:	4618      	mov	r0, r3
 800c248:	f7fe fce8 	bl	800ac1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	9202      	str	r2, [sp, #8]
 800c254:	9301      	str	r3, [sp, #4]
 800c256:	2300      	movs	r3, #0
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	2300      	movs	r3, #0
 800c25c:	460a      	mov	r2, r1
 800c25e:	4924      	ldr	r1, [pc, #144]	; (800c2f0 <vTaskStartScheduler+0xc0>)
 800c260:	4824      	ldr	r0, [pc, #144]	; (800c2f4 <vTaskStartScheduler+0xc4>)
 800c262:	f7ff fe01 	bl	800be68 <xTaskCreateStatic>
 800c266:	4603      	mov	r3, r0
 800c268:	4a23      	ldr	r2, [pc, #140]	; (800c2f8 <vTaskStartScheduler+0xc8>)
 800c26a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c26c:	4b22      	ldr	r3, [pc, #136]	; (800c2f8 <vTaskStartScheduler+0xc8>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d002      	beq.n	800c27a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c274:	2301      	movs	r3, #1
 800c276:	617b      	str	r3, [r7, #20]
 800c278:	e001      	b.n	800c27e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c27a:	2300      	movs	r3, #0
 800c27c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d102      	bne.n	800c28a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c284:	f000 fe1e 	bl	800cec4 <xTimerCreateTimerTask>
 800c288:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d11b      	bne.n	800c2c8 <vTaskStartScheduler+0x98>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	613b      	str	r3, [r7, #16]
}
 800c2a2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2a4:	4b15      	ldr	r3, [pc, #84]	; (800c2fc <vTaskStartScheduler+0xcc>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3354      	adds	r3, #84	; 0x54
 800c2aa:	4a15      	ldr	r2, [pc, #84]	; (800c300 <vTaskStartScheduler+0xd0>)
 800c2ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2ae:	4b15      	ldr	r3, [pc, #84]	; (800c304 <vTaskStartScheduler+0xd4>)
 800c2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2b6:	4b14      	ldr	r3, [pc, #80]	; (800c308 <vTaskStartScheduler+0xd8>)
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800c2bc:	4b13      	ldr	r3, [pc, #76]	; (800c30c <vTaskStartScheduler+0xdc>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2c2:	f001 f991 	bl	800d5e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2c6:	e00e      	b.n	800c2e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ce:	d10a      	bne.n	800c2e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	60fb      	str	r3, [r7, #12]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <vTaskStartScheduler+0xb4>
}
 800c2e6:	bf00      	nop
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0800fa2c 	.word	0x0800fa2c
 800c2f4:	0800c939 	.word	0x0800c939
 800c2f8:	200016b4 	.word	0x200016b4
 800c2fc:	200011bc 	.word	0x200011bc
 800c300:	20000384 	.word	0x20000384
 800c304:	200016b0 	.word	0x200016b0
 800c308:	2000169c 	.word	0x2000169c
 800c30c:	20001694 	.word	0x20001694

0800c310 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c310:	b480      	push	{r7}
 800c312:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c314:	4b04      	ldr	r3, [pc, #16]	; (800c328 <vTaskSuspendAll+0x18>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	3301      	adds	r3, #1
 800c31a:	4a03      	ldr	r2, [pc, #12]	; (800c328 <vTaskSuspendAll+0x18>)
 800c31c:	6013      	str	r3, [r2, #0]
}
 800c31e:	bf00      	nop
 800c320:	46bd      	mov	sp, r7
 800c322:	bc80      	pop	{r7}
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	200016b8 	.word	0x200016b8

0800c32c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c336:	2300      	movs	r3, #0
 800c338:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c33a:	4b42      	ldr	r3, [pc, #264]	; (800c444 <xTaskResumeAll+0x118>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <xTaskResumeAll+0x2c>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	603b      	str	r3, [r7, #0]
}
 800c354:	bf00      	nop
 800c356:	e7fe      	b.n	800c356 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c358:	f001 f9b8 	bl	800d6cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c35c:	4b39      	ldr	r3, [pc, #228]	; (800c444 <xTaskResumeAll+0x118>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3b01      	subs	r3, #1
 800c362:	4a38      	ldr	r2, [pc, #224]	; (800c444 <xTaskResumeAll+0x118>)
 800c364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c366:	4b37      	ldr	r3, [pc, #220]	; (800c444 <xTaskResumeAll+0x118>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d162      	bne.n	800c434 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c36e:	4b36      	ldr	r3, [pc, #216]	; (800c448 <xTaskResumeAll+0x11c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d05e      	beq.n	800c434 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c376:	e02f      	b.n	800c3d8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800c378:	4b34      	ldr	r3, [pc, #208]	; (800c44c <xTaskResumeAll+0x120>)
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3318      	adds	r3, #24
 800c384:	4618      	mov	r0, r3
 800c386:	f7fe fd01 	bl	800ad8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3304      	adds	r3, #4
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fcfc 	bl	800ad8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c398:	4b2d      	ldr	r3, [pc, #180]	; (800c450 <xTaskResumeAll+0x124>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d903      	bls.n	800c3a8 <xTaskResumeAll+0x7c>
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a4:	4a2a      	ldr	r2, [pc, #168]	; (800c450 <xTaskResumeAll+0x124>)
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	4413      	add	r3, r2
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	4a27      	ldr	r2, [pc, #156]	; (800c454 <xTaskResumeAll+0x128>)
 800c3b6:	441a      	add	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3304      	adds	r3, #4
 800c3bc:	4619      	mov	r1, r3
 800c3be:	4610      	mov	r0, r2
 800c3c0:	f7fe fc89 	bl	800acd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c8:	4b23      	ldr	r3, [pc, #140]	; (800c458 <xTaskResumeAll+0x12c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d302      	bcc.n	800c3d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c3d2:	4b22      	ldr	r3, [pc, #136]	; (800c45c <xTaskResumeAll+0x130>)
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3d8:	4b1c      	ldr	r3, [pc, #112]	; (800c44c <xTaskResumeAll+0x120>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1cb      	bne.n	800c378 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c3e6:	f000 fb61 	bl	800caac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c3ea:	4b1d      	ldr	r3, [pc, #116]	; (800c460 <xTaskResumeAll+0x134>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d010      	beq.n	800c418 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c3f6:	f000 f845 	bl	800c484 <xTaskIncrementTick>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c400:	4b16      	ldr	r3, [pc, #88]	; (800c45c <xTaskResumeAll+0x130>)
 800c402:	2201      	movs	r2, #1
 800c404:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	3b01      	subs	r3, #1
 800c40a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1f1      	bne.n	800c3f6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800c412:	4b13      	ldr	r3, [pc, #76]	; (800c460 <xTaskResumeAll+0x134>)
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c418:	4b10      	ldr	r3, [pc, #64]	; (800c45c <xTaskResumeAll+0x130>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d009      	beq.n	800c434 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c420:	2301      	movs	r3, #1
 800c422:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c424:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <xTaskResumeAll+0x138>)
 800c426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c434:	f001 f97a 	bl	800d72c <vPortExitCritical>

	return xAlreadyYielded;
 800c438:	68bb      	ldr	r3, [r7, #8]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	200016b8 	.word	0x200016b8
 800c448:	20001690 	.word	0x20001690
 800c44c:	20001650 	.word	0x20001650
 800c450:	20001698 	.word	0x20001698
 800c454:	200011c0 	.word	0x200011c0
 800c458:	200011bc 	.word	0x200011bc
 800c45c:	200016a4 	.word	0x200016a4
 800c460:	200016a0 	.word	0x200016a0
 800c464:	e000ed04 	.word	0xe000ed04

0800c468 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c46e:	4b04      	ldr	r3, [pc, #16]	; (800c480 <xTaskGetTickCount+0x18>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c474:	687b      	ldr	r3, [r7, #4]
}
 800c476:	4618      	mov	r0, r3
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bc80      	pop	{r7}
 800c47e:	4770      	bx	lr
 800c480:	20001694 	.word	0x20001694

0800c484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c48e:	4b51      	ldr	r3, [pc, #324]	; (800c5d4 <xTaskIncrementTick+0x150>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 808e 	bne.w	800c5b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c498:	4b4f      	ldr	r3, [pc, #316]	; (800c5d8 <xTaskIncrementTick+0x154>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3301      	adds	r3, #1
 800c49e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4a0:	4a4d      	ldr	r2, [pc, #308]	; (800c5d8 <xTaskIncrementTick+0x154>)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d120      	bne.n	800c4ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4ac:	4b4b      	ldr	r3, [pc, #300]	; (800c5dc <xTaskIncrementTick+0x158>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00a      	beq.n	800c4cc <xTaskIncrementTick+0x48>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	603b      	str	r3, [r7, #0]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <xTaskIncrementTick+0x46>
 800c4cc:	4b43      	ldr	r3, [pc, #268]	; (800c5dc <xTaskIncrementTick+0x158>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	60fb      	str	r3, [r7, #12]
 800c4d2:	4b43      	ldr	r3, [pc, #268]	; (800c5e0 <xTaskIncrementTick+0x15c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a41      	ldr	r2, [pc, #260]	; (800c5dc <xTaskIncrementTick+0x158>)
 800c4d8:	6013      	str	r3, [r2, #0]
 800c4da:	4a41      	ldr	r2, [pc, #260]	; (800c5e0 <xTaskIncrementTick+0x15c>)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	4b40      	ldr	r3, [pc, #256]	; (800c5e4 <xTaskIncrementTick+0x160>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	4a3f      	ldr	r2, [pc, #252]	; (800c5e4 <xTaskIncrementTick+0x160>)
 800c4e8:	6013      	str	r3, [r2, #0]
 800c4ea:	f000 fadf 	bl	800caac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4ee:	4b3e      	ldr	r3, [pc, #248]	; (800c5e8 <xTaskIncrementTick+0x164>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d34e      	bcc.n	800c596 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4f8:	4b38      	ldr	r3, [pc, #224]	; (800c5dc <xTaskIncrementTick+0x158>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <xTaskIncrementTick+0x82>
 800c502:	2301      	movs	r3, #1
 800c504:	e000      	b.n	800c508 <xTaskIncrementTick+0x84>
 800c506:	2300      	movs	r3, #0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d004      	beq.n	800c516 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c50c:	4b36      	ldr	r3, [pc, #216]	; (800c5e8 <xTaskIncrementTick+0x164>)
 800c50e:	f04f 32ff 	mov.w	r2, #4294967295
 800c512:	601a      	str	r2, [r3, #0]
					break;
 800c514:	e03f      	b.n	800c596 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c516:	4b31      	ldr	r3, [pc, #196]	; (800c5dc <xTaskIncrementTick+0x158>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d203      	bcs.n	800c536 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c52e:	4a2e      	ldr	r2, [pc, #184]	; (800c5e8 <xTaskIncrementTick+0x164>)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6013      	str	r3, [r2, #0]
						break;
 800c534:	e02f      	b.n	800c596 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	3304      	adds	r3, #4
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fe fc26 	bl	800ad8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c544:	2b00      	cmp	r3, #0
 800c546:	d004      	beq.n	800c552 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	3318      	adds	r3, #24
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fe fc1d 	bl	800ad8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c556:	4b25      	ldr	r3, [pc, #148]	; (800c5ec <xTaskIncrementTick+0x168>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d903      	bls.n	800c566 <xTaskIncrementTick+0xe2>
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c562:	4a22      	ldr	r2, [pc, #136]	; (800c5ec <xTaskIncrementTick+0x168>)
 800c564:	6013      	str	r3, [r2, #0]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56a:	4613      	mov	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4a1f      	ldr	r2, [pc, #124]	; (800c5f0 <xTaskIncrementTick+0x16c>)
 800c574:	441a      	add	r2, r3
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	3304      	adds	r3, #4
 800c57a:	4619      	mov	r1, r3
 800c57c:	4610      	mov	r0, r2
 800c57e:	f7fe fbaa 	bl	800acd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	4b1b      	ldr	r3, [pc, #108]	; (800c5f4 <xTaskIncrementTick+0x170>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d3b3      	bcc.n	800c4f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c590:	2301      	movs	r3, #1
 800c592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c594:	e7b0      	b.n	800c4f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c596:	4b17      	ldr	r3, [pc, #92]	; (800c5f4 <xTaskIncrementTick+0x170>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c59c:	4914      	ldr	r1, [pc, #80]	; (800c5f0 <xTaskIncrementTick+0x16c>)
 800c59e:	4613      	mov	r3, r2
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	4413      	add	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	440b      	add	r3, r1
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d907      	bls.n	800c5be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	617b      	str	r3, [r7, #20]
 800c5b2:	e004      	b.n	800c5be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c5b4:	4b10      	ldr	r3, [pc, #64]	; (800c5f8 <xTaskIncrementTick+0x174>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	4a0f      	ldr	r2, [pc, #60]	; (800c5f8 <xTaskIncrementTick+0x174>)
 800c5bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c5be:	4b0f      	ldr	r3, [pc, #60]	; (800c5fc <xTaskIncrementTick+0x178>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c5ca:	697b      	ldr	r3, [r7, #20]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3718      	adds	r7, #24
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	200016b8 	.word	0x200016b8
 800c5d8:	20001694 	.word	0x20001694
 800c5dc:	20001648 	.word	0x20001648
 800c5e0:	2000164c 	.word	0x2000164c
 800c5e4:	200016a8 	.word	0x200016a8
 800c5e8:	200016b0 	.word	0x200016b0
 800c5ec:	20001698 	.word	0x20001698
 800c5f0:	200011c0 	.word	0x200011c0
 800c5f4:	200011bc 	.word	0x200011bc
 800c5f8:	200016a0 	.word	0x200016a0
 800c5fc:	200016a4 	.word	0x200016a4

0800c600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c606:	4b2a      	ldr	r3, [pc, #168]	; (800c6b0 <vTaskSwitchContext+0xb0>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c60e:	4b29      	ldr	r3, [pc, #164]	; (800c6b4 <vTaskSwitchContext+0xb4>)
 800c610:	2201      	movs	r2, #1
 800c612:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c614:	e046      	b.n	800c6a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c616:	4b27      	ldr	r3, [pc, #156]	; (800c6b4 <vTaskSwitchContext+0xb4>)
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c61c:	4b26      	ldr	r3, [pc, #152]	; (800c6b8 <vTaskSwitchContext+0xb8>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	60fb      	str	r3, [r7, #12]
 800c622:	e010      	b.n	800c646 <vTaskSwitchContext+0x46>
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10a      	bne.n	800c640 <vTaskSwitchContext+0x40>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	607b      	str	r3, [r7, #4]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <vTaskSwitchContext+0x3e>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3b01      	subs	r3, #1
 800c644:	60fb      	str	r3, [r7, #12]
 800c646:	491d      	ldr	r1, [pc, #116]	; (800c6bc <vTaskSwitchContext+0xbc>)
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	4613      	mov	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	440b      	add	r3, r1
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d0e4      	beq.n	800c624 <vTaskSwitchContext+0x24>
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	4613      	mov	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4a15      	ldr	r2, [pc, #84]	; (800c6bc <vTaskSwitchContext+0xbc>)
 800c666:	4413      	add	r3, r2
 800c668:	60bb      	str	r3, [r7, #8]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	605a      	str	r2, [r3, #4]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	3308      	adds	r3, #8
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d104      	bne.n	800c68a <vTaskSwitchContext+0x8a>
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	605a      	str	r2, [r3, #4]
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	4a0b      	ldr	r2, [pc, #44]	; (800c6c0 <vTaskSwitchContext+0xc0>)
 800c692:	6013      	str	r3, [r2, #0]
 800c694:	4a08      	ldr	r2, [pc, #32]	; (800c6b8 <vTaskSwitchContext+0xb8>)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c69a:	4b09      	ldr	r3, [pc, #36]	; (800c6c0 <vTaskSwitchContext+0xc0>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3354      	adds	r3, #84	; 0x54
 800c6a0:	4a08      	ldr	r2, [pc, #32]	; (800c6c4 <vTaskSwitchContext+0xc4>)
 800c6a2:	6013      	str	r3, [r2, #0]
}
 800c6a4:	bf00      	nop
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bc80      	pop	{r7}
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	200016b8 	.word	0x200016b8
 800c6b4:	200016a4 	.word	0x200016a4
 800c6b8:	20001698 	.word	0x20001698
 800c6bc:	200011c0 	.word	0x200011c0
 800c6c0:	200011bc 	.word	0x200011bc
 800c6c4:	20000384 	.word	0x20000384

0800c6c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	60fb      	str	r3, [r7, #12]
}
 800c6ea:	bf00      	nop
 800c6ec:	e7fe      	b.n	800c6ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6ee:	4b07      	ldr	r3, [pc, #28]	; (800c70c <vTaskPlaceOnEventList+0x44>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3318      	adds	r3, #24
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7fe fb10 	bl	800ad1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	6838      	ldr	r0, [r7, #0]
 800c700:	f000 fb8c 	bl	800ce1c <prvAddCurrentTaskToDelayedList>
}
 800c704:	bf00      	nop
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	200011bc 	.word	0x200011bc

0800c710 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	617b      	str	r3, [r7, #20]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <vTaskPlaceOnEventListRestricted+0x54>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3318      	adds	r3, #24
 800c73e:	4619      	mov	r1, r3
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f7fe fac8 	bl	800acd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d002      	beq.n	800c752 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c74c:	f04f 33ff 	mov.w	r3, #4294967295
 800c750:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c752:	6879      	ldr	r1, [r7, #4]
 800c754:	68b8      	ldr	r0, [r7, #8]
 800c756:	f000 fb61 	bl	800ce1c <prvAddCurrentTaskToDelayedList>
	}
 800c75a:	bf00      	nop
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	200011bc 	.word	0x200011bc

0800c768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d10a      	bne.n	800c794 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	60fb      	str	r3, [r7, #12]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	3318      	adds	r3, #24
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fe faf7 	bl	800ad8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c79e:	4b1e      	ldr	r3, [pc, #120]	; (800c818 <xTaskRemoveFromEventList+0xb0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d11d      	bne.n	800c7e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe faee 	bl	800ad8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b4:	4b19      	ldr	r3, [pc, #100]	; (800c81c <xTaskRemoveFromEventList+0xb4>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d903      	bls.n	800c7c4 <xTaskRemoveFromEventList+0x5c>
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	4a16      	ldr	r2, [pc, #88]	; (800c81c <xTaskRemoveFromEventList+0xb4>)
 800c7c2:	6013      	str	r3, [r2, #0]
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4a13      	ldr	r2, [pc, #76]	; (800c820 <xTaskRemoveFromEventList+0xb8>)
 800c7d2:	441a      	add	r2, r3
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	f7fe fa7b 	bl	800acd6 <vListInsertEnd>
 800c7e0:	e005      	b.n	800c7ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	3318      	adds	r3, #24
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	480e      	ldr	r0, [pc, #56]	; (800c824 <xTaskRemoveFromEventList+0xbc>)
 800c7ea:	f7fe fa74 	bl	800acd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <xTaskRemoveFromEventList+0xc0>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d905      	bls.n	800c808 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c800:	4b0a      	ldr	r3, [pc, #40]	; (800c82c <xTaskRemoveFromEventList+0xc4>)
 800c802:	2201      	movs	r2, #1
 800c804:	601a      	str	r2, [r3, #0]
 800c806:	e001      	b.n	800c80c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c808:	2300      	movs	r3, #0
 800c80a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c80c:	697b      	ldr	r3, [r7, #20]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	200016b8 	.word	0x200016b8
 800c81c:	20001698 	.word	0x20001698
 800c820:	200011c0 	.word	0x200011c0
 800c824:	20001650 	.word	0x20001650
 800c828:	200011bc 	.word	0x200011bc
 800c82c:	200016a4 	.word	0x200016a4

0800c830 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <vTaskInternalSetTimeOutState+0x24>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c840:	4b05      	ldr	r3, [pc, #20]	; (800c858 <vTaskInternalSetTimeOutState+0x28>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	605a      	str	r2, [r3, #4]
}
 800c848:	bf00      	nop
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bc80      	pop	{r7}
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	200016a8 	.word	0x200016a8
 800c858:	20001694 	.word	0x20001694

0800c85c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10a      	bne.n	800c882 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	613b      	str	r3, [r7, #16]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	60fb      	str	r3, [r7, #12]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c89e:	f000 ff15 	bl	800d6cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c8a2:	4b1d      	ldr	r3, [pc, #116]	; (800c918 <xTaskCheckForTimeOut+0xbc>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	69ba      	ldr	r2, [r7, #24]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ba:	d102      	bne.n	800c8c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	61fb      	str	r3, [r7, #28]
 800c8c0:	e023      	b.n	800c90a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	4b15      	ldr	r3, [pc, #84]	; (800c91c <xTaskCheckForTimeOut+0xc0>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d007      	beq.n	800c8de <xTaskCheckForTimeOut+0x82>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	69ba      	ldr	r2, [r7, #24]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d302      	bcc.n	800c8de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	61fb      	str	r3, [r7, #28]
 800c8dc:	e015      	b.n	800c90a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d20b      	bcs.n	800c900 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	1ad2      	subs	r2, r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7ff ff9b 	bl	800c830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	61fb      	str	r3, [r7, #28]
 800c8fe:	e004      	b.n	800c90a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c906:	2301      	movs	r3, #1
 800c908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c90a:	f000 ff0f 	bl	800d72c <vPortExitCritical>

	return xReturn;
 800c90e:	69fb      	ldr	r3, [r7, #28]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3720      	adds	r7, #32
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	20001694 	.word	0x20001694
 800c91c:	200016a8 	.word	0x200016a8

0800c920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c920:	b480      	push	{r7}
 800c922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c924:	4b03      	ldr	r3, [pc, #12]	; (800c934 <vTaskMissedYield+0x14>)
 800c926:	2201      	movs	r2, #1
 800c928:	601a      	str	r2, [r3, #0]
}
 800c92a:	bf00      	nop
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bc80      	pop	{r7}
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	200016a4 	.word	0x200016a4

0800c938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c940:	f000 f852 	bl	800c9e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c944:	4b06      	ldr	r3, [pc, #24]	; (800c960 <prvIdleTask+0x28>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d9f9      	bls.n	800c940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <prvIdleTask+0x2c>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c95c:	e7f0      	b.n	800c940 <prvIdleTask+0x8>
 800c95e:	bf00      	nop
 800c960:	200011c0 	.word	0x200011c0
 800c964:	e000ed04 	.word	0xe000ed04

0800c968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c96e:	2300      	movs	r3, #0
 800c970:	607b      	str	r3, [r7, #4]
 800c972:	e00c      	b.n	800c98e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	4613      	mov	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4413      	add	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4a12      	ldr	r2, [pc, #72]	; (800c9c8 <prvInitialiseTaskLists+0x60>)
 800c980:	4413      	add	r3, r2
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe f97c 	bl	800ac80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3301      	adds	r3, #1
 800c98c:	607b      	str	r3, [r7, #4]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2b37      	cmp	r3, #55	; 0x37
 800c992:	d9ef      	bls.n	800c974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c994:	480d      	ldr	r0, [pc, #52]	; (800c9cc <prvInitialiseTaskLists+0x64>)
 800c996:	f7fe f973 	bl	800ac80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c99a:	480d      	ldr	r0, [pc, #52]	; (800c9d0 <prvInitialiseTaskLists+0x68>)
 800c99c:	f7fe f970 	bl	800ac80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c9a0:	480c      	ldr	r0, [pc, #48]	; (800c9d4 <prvInitialiseTaskLists+0x6c>)
 800c9a2:	f7fe f96d 	bl	800ac80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c9a6:	480c      	ldr	r0, [pc, #48]	; (800c9d8 <prvInitialiseTaskLists+0x70>)
 800c9a8:	f7fe f96a 	bl	800ac80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c9ac:	480b      	ldr	r0, [pc, #44]	; (800c9dc <prvInitialiseTaskLists+0x74>)
 800c9ae:	f7fe f967 	bl	800ac80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c9b2:	4b0b      	ldr	r3, [pc, #44]	; (800c9e0 <prvInitialiseTaskLists+0x78>)
 800c9b4:	4a05      	ldr	r2, [pc, #20]	; (800c9cc <prvInitialiseTaskLists+0x64>)
 800c9b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c9b8:	4b0a      	ldr	r3, [pc, #40]	; (800c9e4 <prvInitialiseTaskLists+0x7c>)
 800c9ba:	4a05      	ldr	r2, [pc, #20]	; (800c9d0 <prvInitialiseTaskLists+0x68>)
 800c9bc:	601a      	str	r2, [r3, #0]
}
 800c9be:	bf00      	nop
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200011c0 	.word	0x200011c0
 800c9cc:	20001620 	.word	0x20001620
 800c9d0:	20001634 	.word	0x20001634
 800c9d4:	20001650 	.word	0x20001650
 800c9d8:	20001664 	.word	0x20001664
 800c9dc:	2000167c 	.word	0x2000167c
 800c9e0:	20001648 	.word	0x20001648
 800c9e4:	2000164c 	.word	0x2000164c

0800c9e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9ee:	e019      	b.n	800ca24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c9f0:	f000 fe6c 	bl	800d6cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c9f4:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <prvCheckTasksWaitingTermination+0x50>)
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fe f9c3 	bl	800ad8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca06:	4b0d      	ldr	r3, [pc, #52]	; (800ca3c <prvCheckTasksWaitingTermination+0x54>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	4a0b      	ldr	r2, [pc, #44]	; (800ca3c <prvCheckTasksWaitingTermination+0x54>)
 800ca0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca10:	4b0b      	ldr	r3, [pc, #44]	; (800ca40 <prvCheckTasksWaitingTermination+0x58>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3b01      	subs	r3, #1
 800ca16:	4a0a      	ldr	r2, [pc, #40]	; (800ca40 <prvCheckTasksWaitingTermination+0x58>)
 800ca18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca1a:	f000 fe87 	bl	800d72c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f810 	bl	800ca44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca24:	4b06      	ldr	r3, [pc, #24]	; (800ca40 <prvCheckTasksWaitingTermination+0x58>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1e1      	bne.n	800c9f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ca2c:	bf00      	nop
 800ca2e:	bf00      	nop
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20001664 	.word	0x20001664
 800ca3c:	20001690 	.word	0x20001690
 800ca40:	20001678 	.word	0x20001678

0800ca44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3354      	adds	r3, #84	; 0x54
 800ca50:	4618      	mov	r0, r3
 800ca52:	f001 ff15 	bl	800e880 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d108      	bne.n	800ca72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca64:	4618      	mov	r0, r3
 800ca66:	f000 fff5 	bl	800da54 <vPortFree>
				vPortFree( pxTCB );
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fff2 	bl	800da54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca70:	e018      	b.n	800caa4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d103      	bne.n	800ca84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 ffe9 	bl	800da54 <vPortFree>
	}
 800ca82:	e00f      	b.n	800caa4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d00a      	beq.n	800caa4 <prvDeleteTCB+0x60>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	60fb      	str	r3, [r7, #12]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <prvDeleteTCB+0x5e>
	}
 800caa4:	bf00      	nop
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cab2:	4b0e      	ldr	r3, [pc, #56]	; (800caec <prvResetNextTaskUnblockTime+0x40>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d101      	bne.n	800cac0 <prvResetNextTaskUnblockTime+0x14>
 800cabc:	2301      	movs	r3, #1
 800cabe:	e000      	b.n	800cac2 <prvResetNextTaskUnblockTime+0x16>
 800cac0:	2300      	movs	r3, #0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d004      	beq.n	800cad0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cac6:	4b0a      	ldr	r3, [pc, #40]	; (800caf0 <prvResetNextTaskUnblockTime+0x44>)
 800cac8:	f04f 32ff 	mov.w	r2, #4294967295
 800cacc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cace:	e008      	b.n	800cae2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cad0:	4b06      	ldr	r3, [pc, #24]	; (800caec <prvResetNextTaskUnblockTime+0x40>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	4a04      	ldr	r2, [pc, #16]	; (800caf0 <prvResetNextTaskUnblockTime+0x44>)
 800cae0:	6013      	str	r3, [r2, #0]
}
 800cae2:	bf00      	nop
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bc80      	pop	{r7}
 800caea:	4770      	bx	lr
 800caec:	20001648 	.word	0x20001648
 800caf0:	200016b0 	.word	0x200016b0

0800caf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cafa:	4b0b      	ldr	r3, [pc, #44]	; (800cb28 <xTaskGetSchedulerState+0x34>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb02:	2301      	movs	r3, #1
 800cb04:	607b      	str	r3, [r7, #4]
 800cb06:	e008      	b.n	800cb1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb08:	4b08      	ldr	r3, [pc, #32]	; (800cb2c <xTaskGetSchedulerState+0x38>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d102      	bne.n	800cb16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb10:	2302      	movs	r3, #2
 800cb12:	607b      	str	r3, [r7, #4]
 800cb14:	e001      	b.n	800cb1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb16:	2300      	movs	r3, #0
 800cb18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb1a:	687b      	ldr	r3, [r7, #4]
	}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bc80      	pop	{r7}
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	2000169c 	.word	0x2000169c
 800cb2c:	200016b8 	.word	0x200016b8

0800cb30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d056      	beq.n	800cbf4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb4a:	4b2d      	ldr	r3, [pc, #180]	; (800cc00 <xTaskPriorityInherit+0xd0>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d246      	bcs.n	800cbe2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	db06      	blt.n	800cb6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb5c:	4b28      	ldr	r3, [pc, #160]	; (800cc00 <xTaskPriorityInherit+0xd0>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	6959      	ldr	r1, [r3, #20]
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4a22      	ldr	r2, [pc, #136]	; (800cc04 <xTaskPriorityInherit+0xd4>)
 800cb7c:	4413      	add	r3, r2
 800cb7e:	4299      	cmp	r1, r3
 800cb80:	d101      	bne.n	800cb86 <xTaskPriorityInherit+0x56>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e000      	b.n	800cb88 <xTaskPriorityInherit+0x58>
 800cb86:	2300      	movs	r3, #0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d022      	beq.n	800cbd2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	3304      	adds	r3, #4
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe f8fb 	bl	800ad8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb96:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <xTaskPriorityInherit+0xd0>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba4:	4b18      	ldr	r3, [pc, #96]	; (800cc08 <xTaskPriorityInherit+0xd8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d903      	bls.n	800cbb4 <xTaskPriorityInherit+0x84>
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb0:	4a15      	ldr	r2, [pc, #84]	; (800cc08 <xTaskPriorityInherit+0xd8>)
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4a10      	ldr	r2, [pc, #64]	; (800cc04 <xTaskPriorityInherit+0xd4>)
 800cbc2:	441a      	add	r2, r3
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4619      	mov	r1, r3
 800cbca:	4610      	mov	r0, r2
 800cbcc:	f7fe f883 	bl	800acd6 <vListInsertEnd>
 800cbd0:	e004      	b.n	800cbdc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cbd2:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <xTaskPriorityInherit+0xd0>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	e008      	b.n	800cbf4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbe6:	4b06      	ldr	r3, [pc, #24]	; (800cc00 <xTaskPriorityInherit+0xd0>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d201      	bcs.n	800cbf4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
	}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200011bc 	.word	0x200011bc
 800cc04:	200011c0 	.word	0x200011c0
 800cc08:	20001698 	.word	0x20001698

0800cc0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d056      	beq.n	800ccd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc22:	4b2e      	ldr	r3, [pc, #184]	; (800ccdc <xTaskPriorityDisinherit+0xd0>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d00a      	beq.n	800cc42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	60fb      	str	r3, [r7, #12]
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10a      	bne.n	800cc60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4e:	f383 8811 	msr	BASEPRI, r3
 800cc52:	f3bf 8f6f 	isb	sy
 800cc56:	f3bf 8f4f 	dsb	sy
 800cc5a:	60bb      	str	r3, [r7, #8]
}
 800cc5c:	bf00      	nop
 800cc5e:	e7fe      	b.n	800cc5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc64:	1e5a      	subs	r2, r3, #1
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d02c      	beq.n	800ccd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d128      	bne.n	800ccd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe f882 	bl	800ad8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca0:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <xTaskPriorityDisinherit+0xd4>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d903      	bls.n	800ccb0 <xTaskPriorityDisinherit+0xa4>
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccac:	4a0c      	ldr	r2, [pc, #48]	; (800cce0 <xTaskPriorityDisinherit+0xd4>)
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4a09      	ldr	r2, [pc, #36]	; (800cce4 <xTaskPriorityDisinherit+0xd8>)
 800ccbe:	441a      	add	r2, r3
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	4610      	mov	r0, r2
 800ccc8:	f7fe f805 	bl	800acd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cccc:	2301      	movs	r3, #1
 800ccce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ccd0:	697b      	ldr	r3, [r7, #20]
	}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	200011bc 	.word	0x200011bc
 800cce0:	20001698 	.word	0x20001698
 800cce4:	200011c0 	.word	0x200011c0

0800cce8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d06f      	beq.n	800cde0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10a      	bne.n	800cd1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	60fb      	str	r3, [r7, #12]
}
 800cd1a:	bf00      	nop
 800cd1c:	e7fe      	b.n	800cd1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d902      	bls.n	800cd2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	61fb      	str	r3, [r7, #28]
 800cd2c:	e002      	b.n	800cd34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd38:	69fa      	ldr	r2, [r7, #28]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d050      	beq.n	800cde0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd42:	697a      	ldr	r2, [r7, #20]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d14b      	bne.n	800cde0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cd48:	4b27      	ldr	r3, [pc, #156]	; (800cde8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d10a      	bne.n	800cd68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	60bb      	str	r3, [r7, #8]
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	69fa      	ldr	r2, [r7, #28]
 800cd72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	db04      	blt.n	800cd86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	6959      	ldr	r1, [r3, #20]
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4a15      	ldr	r2, [pc, #84]	; (800cdec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cd96:	4413      	add	r3, r2
 800cd98:	4299      	cmp	r1, r3
 800cd9a:	d101      	bne.n	800cda0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e000      	b.n	800cda2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800cda0:	2300      	movs	r3, #0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d01c      	beq.n	800cde0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fd ffee 	bl	800ad8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb4:	4b0e      	ldr	r3, [pc, #56]	; (800cdf0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d903      	bls.n	800cdc4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc0:	4a0b      	ldr	r2, [pc, #44]	; (800cdf0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cdc2:	6013      	str	r3, [r2, #0]
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdc8:	4613      	mov	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	4a06      	ldr	r2, [pc, #24]	; (800cdec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cdd2:	441a      	add	r2, r3
 800cdd4:	69bb      	ldr	r3, [r7, #24]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	4619      	mov	r1, r3
 800cdda:	4610      	mov	r0, r2
 800cddc:	f7fd ff7b 	bl	800acd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cde0:	bf00      	nop
 800cde2:	3720      	adds	r7, #32
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	200011bc 	.word	0x200011bc
 800cdec:	200011c0 	.word	0x200011c0
 800cdf0:	20001698 	.word	0x20001698

0800cdf4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800cdf4:	b480      	push	{r7}
 800cdf6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cdf8:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce06:	3201      	adds	r2, #1
 800ce08:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ce0a:	4b03      	ldr	r3, [pc, #12]	; (800ce18 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
	}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc80      	pop	{r7}
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	200011bc 	.word	0x200011bc

0800ce1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce26:	4b21      	ldr	r3, [pc, #132]	; (800ceac <prvAddCurrentTaskToDelayedList+0x90>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce2c:	4b20      	ldr	r3, [pc, #128]	; (800ceb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3304      	adds	r3, #4
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fd ffaa 	bl	800ad8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3e:	d10a      	bne.n	800ce56 <prvAddCurrentTaskToDelayedList+0x3a>
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d007      	beq.n	800ce56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce46:	4b1a      	ldr	r3, [pc, #104]	; (800ceb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4819      	ldr	r0, [pc, #100]	; (800ceb4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ce50:	f7fd ff41 	bl	800acd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce54:	e026      	b.n	800cea4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce5e:	4b14      	ldr	r3, [pc, #80]	; (800ceb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d209      	bcs.n	800ce82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce6e:	4b12      	ldr	r3, [pc, #72]	; (800ceb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	4b0f      	ldr	r3, [pc, #60]	; (800ceb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3304      	adds	r3, #4
 800ce78:	4619      	mov	r1, r3
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	f7fd ff4e 	bl	800ad1c <vListInsert>
}
 800ce80:	e010      	b.n	800cea4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce82:	4b0e      	ldr	r3, [pc, #56]	; (800cebc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	4b0a      	ldr	r3, [pc, #40]	; (800ceb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	3304      	adds	r3, #4
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	4610      	mov	r0, r2
 800ce90:	f7fd ff44 	bl	800ad1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce94:	4b0a      	ldr	r3, [pc, #40]	; (800cec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d202      	bcs.n	800cea4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce9e:	4a08      	ldr	r2, [pc, #32]	; (800cec0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	6013      	str	r3, [r2, #0]
}
 800cea4:	bf00      	nop
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	20001694 	.word	0x20001694
 800ceb0:	200011bc 	.word	0x200011bc
 800ceb4:	2000167c 	.word	0x2000167c
 800ceb8:	2000164c 	.word	0x2000164c
 800cebc:	20001648 	.word	0x20001648
 800cec0:	200016b0 	.word	0x200016b0

0800cec4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b08a      	sub	sp, #40	; 0x28
 800cec8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cece:	f000 facb 	bl	800d468 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ced2:	4b1c      	ldr	r3, [pc, #112]	; (800cf44 <xTimerCreateTimerTask+0x80>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d021      	beq.n	800cf1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ceda:	2300      	movs	r3, #0
 800cedc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cede:	2300      	movs	r3, #0
 800cee0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cee2:	1d3a      	adds	r2, r7, #4
 800cee4:	f107 0108 	add.w	r1, r7, #8
 800cee8:	f107 030c 	add.w	r3, r7, #12
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fd fead 	bl	800ac4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	9202      	str	r2, [sp, #8]
 800cefa:	9301      	str	r3, [sp, #4]
 800cefc:	2302      	movs	r3, #2
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	2300      	movs	r3, #0
 800cf02:	460a      	mov	r2, r1
 800cf04:	4910      	ldr	r1, [pc, #64]	; (800cf48 <xTimerCreateTimerTask+0x84>)
 800cf06:	4811      	ldr	r0, [pc, #68]	; (800cf4c <xTimerCreateTimerTask+0x88>)
 800cf08:	f7fe ffae 	bl	800be68 <xTaskCreateStatic>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	4a10      	ldr	r2, [pc, #64]	; (800cf50 <xTimerCreateTimerTask+0x8c>)
 800cf10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf12:	4b0f      	ldr	r3, [pc, #60]	; (800cf50 <xTimerCreateTimerTask+0x8c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d10a      	bne.n	800cf3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	613b      	str	r3, [r7, #16]
}
 800cf36:	bf00      	nop
 800cf38:	e7fe      	b.n	800cf38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cf3a:	697b      	ldr	r3, [r7, #20]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3718      	adds	r7, #24
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	200016ec 	.word	0x200016ec
 800cf48:	0800fa34 	.word	0x0800fa34
 800cf4c:	0800d071 	.word	0x0800d071
 800cf50:	200016f0 	.word	0x200016f0

0800cf54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10a      	bne.n	800cf82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	623b      	str	r3, [r7, #32]
}
 800cf7e:	bf00      	nop
 800cf80:	e7fe      	b.n	800cf80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf82:	4b1a      	ldr	r3, [pc, #104]	; (800cfec <xTimerGenericCommand+0x98>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d02a      	beq.n	800cfe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2b05      	cmp	r3, #5
 800cf9a:	dc18      	bgt.n	800cfce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf9c:	f7ff fdaa 	bl	800caf4 <xTaskGetSchedulerState>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b02      	cmp	r3, #2
 800cfa4:	d109      	bne.n	800cfba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cfa6:	4b11      	ldr	r3, [pc, #68]	; (800cfec <xTimerGenericCommand+0x98>)
 800cfa8:	6818      	ldr	r0, [r3, #0]
 800cfaa:	f107 0110 	add.w	r1, r7, #16
 800cfae:	2300      	movs	r3, #0
 800cfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfb2:	f7fe f8bf 	bl	800b134 <xQueueGenericSend>
 800cfb6:	6278      	str	r0, [r7, #36]	; 0x24
 800cfb8:	e012      	b.n	800cfe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cfba:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <xTimerGenericCommand+0x98>)
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	f107 0110 	add.w	r1, r7, #16
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f7fe f8b5 	bl	800b134 <xQueueGenericSend>
 800cfca:	6278      	str	r0, [r7, #36]	; 0x24
 800cfcc:	e008      	b.n	800cfe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cfce:	4b07      	ldr	r3, [pc, #28]	; (800cfec <xTimerGenericCommand+0x98>)
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f107 0110 	add.w	r1, r7, #16
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	683a      	ldr	r2, [r7, #0]
 800cfda:	f7fe f9a9 	bl	800b330 <xQueueGenericSendFromISR>
 800cfde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3728      	adds	r7, #40	; 0x28
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	200016ec 	.word	0x200016ec

0800cff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af02      	add	r7, sp, #8
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cffa:	4b1c      	ldr	r3, [pc, #112]	; (800d06c <prvProcessExpiredTimer+0x7c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	3304      	adds	r3, #4
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fd febf 	bl	800ad8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d122      	bne.n	800d05c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	699a      	ldr	r2, [r3, #24]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	18d1      	adds	r1, r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	683a      	ldr	r2, [r7, #0]
 800d022:	6978      	ldr	r0, [r7, #20]
 800d024:	f000 f8c8 	bl	800d1b8 <prvInsertTimerInActiveList>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d016      	beq.n	800d05c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d02e:	2300      	movs	r3, #0
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	2300      	movs	r3, #0
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	2100      	movs	r1, #0
 800d038:	6978      	ldr	r0, [r7, #20]
 800d03a:	f7ff ff8b 	bl	800cf54 <xTimerGenericCommand>
 800d03e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	60fb      	str	r3, [r7, #12]
}
 800d058:	bf00      	nop
 800d05a:	e7fe      	b.n	800d05a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d060:	6978      	ldr	r0, [r7, #20]
 800d062:	4798      	blx	r3
}
 800d064:	bf00      	nop
 800d066:	3718      	adds	r7, #24
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	200016e4 	.word	0x200016e4

0800d070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d078:	f107 0308 	add.w	r3, r7, #8
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 f857 	bl	800d130 <prvGetNextExpireTime>
 800d082:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	4619      	mov	r1, r3
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f000 f803 	bl	800d094 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d08e:	f000 f8d5 	bl	800d23c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d092:	e7f1      	b.n	800d078 <prvTimerTask+0x8>

0800d094 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d09e:	f7ff f937 	bl	800c310 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0a2:	f107 0308 	add.w	r3, r7, #8
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 f866 	bl	800d178 <prvSampleTimeNow>
 800d0ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d130      	bne.n	800d116 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10a      	bne.n	800d0d0 <prvProcessTimerOrBlockTask+0x3c>
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d806      	bhi.n	800d0d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d0c2:	f7ff f933 	bl	800c32c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d0c6:	68f9      	ldr	r1, [r7, #12]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7ff ff91 	bl	800cff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d0ce:	e024      	b.n	800d11a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d008      	beq.n	800d0e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d0d6:	4b13      	ldr	r3, [pc, #76]	; (800d124 <prvProcessTimerOrBlockTask+0x90>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	bf0c      	ite	eq
 800d0e0:	2301      	moveq	r3, #1
 800d0e2:	2300      	movne	r3, #0
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0e8:	4b0f      	ldr	r3, [pc, #60]	; (800d128 <prvProcessTimerOrBlockTask+0x94>)
 800d0ea:	6818      	ldr	r0, [r3, #0]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	f7fe fe83 	bl	800be00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0fa:	f7ff f917 	bl	800c32c <xTaskResumeAll>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10a      	bne.n	800d11a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d104:	4b09      	ldr	r3, [pc, #36]	; (800d12c <prvProcessTimerOrBlockTask+0x98>)
 800d106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10a:	601a      	str	r2, [r3, #0]
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	f3bf 8f6f 	isb	sy
}
 800d114:	e001      	b.n	800d11a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d116:	f7ff f909 	bl	800c32c <xTaskResumeAll>
}
 800d11a:	bf00      	nop
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	200016e8 	.word	0x200016e8
 800d128:	200016ec 	.word	0x200016ec
 800d12c:	e000ed04 	.word	0xe000ed04

0800d130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d138:	4b0e      	ldr	r3, [pc, #56]	; (800d174 <prvGetNextExpireTime+0x44>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	bf0c      	ite	eq
 800d142:	2301      	moveq	r3, #1
 800d144:	2300      	movne	r3, #0
 800d146:	b2db      	uxtb	r3, r3
 800d148:	461a      	mov	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d105      	bne.n	800d162 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d156:	4b07      	ldr	r3, [pc, #28]	; (800d174 <prvGetNextExpireTime+0x44>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	60fb      	str	r3, [r7, #12]
 800d160:	e001      	b.n	800d166 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d162:	2300      	movs	r3, #0
 800d164:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d166:	68fb      	ldr	r3, [r7, #12]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bc80      	pop	{r7}
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	200016e4 	.word	0x200016e4

0800d178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d180:	f7ff f972 	bl	800c468 <xTaskGetTickCount>
 800d184:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d186:	4b0b      	ldr	r3, [pc, #44]	; (800d1b4 <prvSampleTimeNow+0x3c>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d205      	bcs.n	800d19c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d190:	f000 f908 	bl	800d3a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	e002      	b.n	800d1a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d1a2:	4a04      	ldr	r2, [pc, #16]	; (800d1b4 <prvSampleTimeNow+0x3c>)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	200016f4 	.word	0x200016f4

0800d1b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d812      	bhi.n	800d204 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	1ad2      	subs	r2, r2, r3
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d302      	bcc.n	800d1f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	e01b      	b.n	800d22a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d1f2:	4b10      	ldr	r3, [pc, #64]	; (800d234 <prvInsertTimerInActiveList+0x7c>)
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	f7fd fd8d 	bl	800ad1c <vListInsert>
 800d202:	e012      	b.n	800d22a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d206      	bcs.n	800d21a <prvInsertTimerInActiveList+0x62>
 800d20c:	68ba      	ldr	r2, [r7, #8]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	429a      	cmp	r2, r3
 800d212:	d302      	bcc.n	800d21a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d214:	2301      	movs	r3, #1
 800d216:	617b      	str	r3, [r7, #20]
 800d218:	e007      	b.n	800d22a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d21a:	4b07      	ldr	r3, [pc, #28]	; (800d238 <prvInsertTimerInActiveList+0x80>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3304      	adds	r3, #4
 800d222:	4619      	mov	r1, r3
 800d224:	4610      	mov	r0, r2
 800d226:	f7fd fd79 	bl	800ad1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d22a:	697b      	ldr	r3, [r7, #20]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3718      	adds	r7, #24
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	200016e8 	.word	0x200016e8
 800d238:	200016e4 	.word	0x200016e4

0800d23c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b08e      	sub	sp, #56	; 0x38
 800d240:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d242:	e09d      	b.n	800d380 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2b00      	cmp	r3, #0
 800d248:	da18      	bge.n	800d27c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d24a:	1d3b      	adds	r3, r7, #4
 800d24c:	3304      	adds	r3, #4
 800d24e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10a      	bne.n	800d26c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25a:	f383 8811 	msr	BASEPRI, r3
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	61fb      	str	r3, [r7, #28]
}
 800d268:	bf00      	nop
 800d26a:	e7fe      	b.n	800d26a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d272:	6850      	ldr	r0, [r2, #4]
 800d274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d276:	6892      	ldr	r2, [r2, #8]
 800d278:	4611      	mov	r1, r2
 800d27a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	db7d      	blt.n	800d37e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d004      	beq.n	800d298 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	3304      	adds	r3, #4
 800d292:	4618      	mov	r0, r3
 800d294:	f7fd fd7a 	bl	800ad8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d298:	463b      	mov	r3, r7
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff ff6c 	bl	800d178 <prvSampleTimeNow>
 800d2a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b09      	cmp	r3, #9
 800d2a6:	d86b      	bhi.n	800d380 <prvProcessReceivedCommands+0x144>
 800d2a8:	a201      	add	r2, pc, #4	; (adr r2, 800d2b0 <prvProcessReceivedCommands+0x74>)
 800d2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ae:	bf00      	nop
 800d2b0:	0800d2d9 	.word	0x0800d2d9
 800d2b4:	0800d2d9 	.word	0x0800d2d9
 800d2b8:	0800d2d9 	.word	0x0800d2d9
 800d2bc:	0800d381 	.word	0x0800d381
 800d2c0:	0800d335 	.word	0x0800d335
 800d2c4:	0800d36d 	.word	0x0800d36d
 800d2c8:	0800d2d9 	.word	0x0800d2d9
 800d2cc:	0800d2d9 	.word	0x0800d2d9
 800d2d0:	0800d381 	.word	0x0800d381
 800d2d4:	0800d335 	.word	0x0800d335
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	699b      	ldr	r3, [r3, #24]
 800d2de:	18d1      	adds	r1, r2, r3
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2e6:	f7ff ff67 	bl	800d1b8 <prvInsertTimerInActiveList>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d047      	beq.n	800d380 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	69db      	ldr	r3, [r3, #28]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d13f      	bne.n	800d380 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	441a      	add	r2, r3
 800d308:	2300      	movs	r3, #0
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	2300      	movs	r3, #0
 800d30e:	2100      	movs	r1, #0
 800d310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d312:	f7ff fe1f 	bl	800cf54 <xTimerGenericCommand>
 800d316:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d130      	bne.n	800d380 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	61bb      	str	r3, [r7, #24]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10a      	bne.n	800d358 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	617b      	str	r3, [r7, #20]
}
 800d354:	bf00      	nop
 800d356:	e7fe      	b.n	800d356 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35a:	699a      	ldr	r2, [r3, #24]
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	18d1      	adds	r1, r2, r3
 800d360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d366:	f7ff ff27 	bl	800d1b8 <prvInsertTimerInActiveList>
					break;
 800d36a:	e009      	b.n	800d380 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d372:	2b00      	cmp	r3, #0
 800d374:	d104      	bne.n	800d380 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800d376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d378:	f000 fb6c 	bl	800da54 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d37c:	e000      	b.n	800d380 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d37e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d380:	4b07      	ldr	r3, [pc, #28]	; (800d3a0 <prvProcessReceivedCommands+0x164>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	1d39      	adds	r1, r7, #4
 800d386:	2200      	movs	r2, #0
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe f8f7 	bl	800b57c <xQueueReceive>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	f47f af57 	bne.w	800d244 <prvProcessReceivedCommands+0x8>
	}
}
 800d396:	bf00      	nop
 800d398:	bf00      	nop
 800d39a:	3730      	adds	r7, #48	; 0x30
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	200016ec 	.word	0x200016ec

0800d3a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b088      	sub	sp, #32
 800d3a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3aa:	e045      	b.n	800d438 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3ac:	4b2c      	ldr	r3, [pc, #176]	; (800d460 <prvSwitchTimerLists+0xbc>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3b6:	4b2a      	ldr	r3, [pc, #168]	; (800d460 <prvSwitchTimerLists+0xbc>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fd fce1 	bl	800ad8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d12e      	bne.n	800d438 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d90e      	bls.n	800d40a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3f8:	4b19      	ldr	r3, [pc, #100]	; (800d460 <prvSwitchTimerLists+0xbc>)
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	3304      	adds	r3, #4
 800d400:	4619      	mov	r1, r3
 800d402:	4610      	mov	r0, r2
 800d404:	f7fd fc8a 	bl	800ad1c <vListInsert>
 800d408:	e016      	b.n	800d438 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d40a:	2300      	movs	r3, #0
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	2300      	movs	r3, #0
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	2100      	movs	r1, #0
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff fd9d 	bl	800cf54 <xTimerGenericCommand>
 800d41a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10a      	bne.n	800d438 <prvSwitchTimerLists+0x94>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	603b      	str	r3, [r7, #0]
}
 800d434:	bf00      	nop
 800d436:	e7fe      	b.n	800d436 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d438:	4b09      	ldr	r3, [pc, #36]	; (800d460 <prvSwitchTimerLists+0xbc>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1b4      	bne.n	800d3ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d442:	4b07      	ldr	r3, [pc, #28]	; (800d460 <prvSwitchTimerLists+0xbc>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d448:	4b06      	ldr	r3, [pc, #24]	; (800d464 <prvSwitchTimerLists+0xc0>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a04      	ldr	r2, [pc, #16]	; (800d460 <prvSwitchTimerLists+0xbc>)
 800d44e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d450:	4a04      	ldr	r2, [pc, #16]	; (800d464 <prvSwitchTimerLists+0xc0>)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	6013      	str	r3, [r2, #0]
}
 800d456:	bf00      	nop
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	200016e4 	.word	0x200016e4
 800d464:	200016e8 	.word	0x200016e8

0800d468 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d46e:	f000 f92d 	bl	800d6cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d472:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <prvCheckForValidListAndQueue+0x60>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d120      	bne.n	800d4bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d47a:	4814      	ldr	r0, [pc, #80]	; (800d4cc <prvCheckForValidListAndQueue+0x64>)
 800d47c:	f7fd fc00 	bl	800ac80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d480:	4813      	ldr	r0, [pc, #76]	; (800d4d0 <prvCheckForValidListAndQueue+0x68>)
 800d482:	f7fd fbfd 	bl	800ac80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d486:	4b13      	ldr	r3, [pc, #76]	; (800d4d4 <prvCheckForValidListAndQueue+0x6c>)
 800d488:	4a10      	ldr	r2, [pc, #64]	; (800d4cc <prvCheckForValidListAndQueue+0x64>)
 800d48a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d48c:	4b12      	ldr	r3, [pc, #72]	; (800d4d8 <prvCheckForValidListAndQueue+0x70>)
 800d48e:	4a10      	ldr	r2, [pc, #64]	; (800d4d0 <prvCheckForValidListAndQueue+0x68>)
 800d490:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d492:	2300      	movs	r3, #0
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	4b11      	ldr	r3, [pc, #68]	; (800d4dc <prvCheckForValidListAndQueue+0x74>)
 800d498:	4a11      	ldr	r2, [pc, #68]	; (800d4e0 <prvCheckForValidListAndQueue+0x78>)
 800d49a:	2110      	movs	r1, #16
 800d49c:	200a      	movs	r0, #10
 800d49e:	f7fd fd07 	bl	800aeb0 <xQueueGenericCreateStatic>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	4a08      	ldr	r2, [pc, #32]	; (800d4c8 <prvCheckForValidListAndQueue+0x60>)
 800d4a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4a8:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <prvCheckForValidListAndQueue+0x60>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d005      	beq.n	800d4bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4b0:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <prvCheckForValidListAndQueue+0x60>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	490b      	ldr	r1, [pc, #44]	; (800d4e4 <prvCheckForValidListAndQueue+0x7c>)
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fe fc50 	bl	800bd5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4bc:	f000 f936 	bl	800d72c <vPortExitCritical>
}
 800d4c0:	bf00      	nop
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	200016ec 	.word	0x200016ec
 800d4cc:	200016bc 	.word	0x200016bc
 800d4d0:	200016d0 	.word	0x200016d0
 800d4d4:	200016e4 	.word	0x200016e4
 800d4d8:	200016e8 	.word	0x200016e8
 800d4dc:	20001798 	.word	0x20001798
 800d4e0:	200016f8 	.word	0x200016f8
 800d4e4:	0800fa3c 	.word	0x0800fa3c

0800d4e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	3b04      	subs	r3, #4
 800d4f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3b04      	subs	r3, #4
 800d506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	f023 0201 	bic.w	r2, r3, #1
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	3b04      	subs	r3, #4
 800d516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d518:	4a08      	ldr	r2, [pc, #32]	; (800d53c <pxPortInitialiseStack+0x54>)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3b14      	subs	r3, #20
 800d522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	3b20      	subs	r3, #32
 800d52e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d530:	68fb      	ldr	r3, [r7, #12]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3714      	adds	r7, #20
 800d536:	46bd      	mov	sp, r7
 800d538:	bc80      	pop	{r7}
 800d53a:	4770      	bx	lr
 800d53c:	0800d541 	.word	0x0800d541

0800d540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d540:	b480      	push	{r7}
 800d542:	b085      	sub	sp, #20
 800d544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d546:	2300      	movs	r3, #0
 800d548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d54a:	4b12      	ldr	r3, [pc, #72]	; (800d594 <prvTaskExitError+0x54>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d552:	d00a      	beq.n	800d56a <prvTaskExitError+0x2a>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	60fb      	str	r3, [r7, #12]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <prvTaskExitError+0x28>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	60bb      	str	r3, [r7, #8]
}
 800d57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d57e:	bf00      	nop
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d0fc      	beq.n	800d580 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d586:	bf00      	nop
 800d588:	bf00      	nop
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bc80      	pop	{r7}
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	20000314 	.word	0x20000314
	...

0800d5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5a0:	4b07      	ldr	r3, [pc, #28]	; (800d5c0 <pxCurrentTCBConst2>)
 800d5a2:	6819      	ldr	r1, [r3, #0]
 800d5a4:	6808      	ldr	r0, [r1, #0]
 800d5a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d5aa:	f380 8809 	msr	PSP, r0
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f04f 0000 	mov.w	r0, #0
 800d5b6:	f380 8811 	msr	BASEPRI, r0
 800d5ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800d5be:	4770      	bx	lr

0800d5c0 <pxCurrentTCBConst2>:
 800d5c0:	200011bc 	.word	0x200011bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop

0800d5c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d5c8:	4806      	ldr	r0, [pc, #24]	; (800d5e4 <prvPortStartFirstTask+0x1c>)
 800d5ca:	6800      	ldr	r0, [r0, #0]
 800d5cc:	6800      	ldr	r0, [r0, #0]
 800d5ce:	f380 8808 	msr	MSP, r0
 800d5d2:	b662      	cpsie	i
 800d5d4:	b661      	cpsie	f
 800d5d6:	f3bf 8f4f 	dsb	sy
 800d5da:	f3bf 8f6f 	isb	sy
 800d5de:	df00      	svc	0
 800d5e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5e2:	bf00      	nop
 800d5e4:	e000ed08 	.word	0xe000ed08

0800d5e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5ee:	4b32      	ldr	r3, [pc, #200]	; (800d6b8 <xPortStartScheduler+0xd0>)
 800d5f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	22ff      	movs	r2, #255	; 0xff
 800d5fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	b2db      	uxtb	r3, r3
 800d606:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d608:	78fb      	ldrb	r3, [r7, #3]
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d610:	b2da      	uxtb	r2, r3
 800d612:	4b2a      	ldr	r3, [pc, #168]	; (800d6bc <xPortStartScheduler+0xd4>)
 800d614:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d616:	4b2a      	ldr	r3, [pc, #168]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d618:	2207      	movs	r2, #7
 800d61a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d61c:	e009      	b.n	800d632 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d61e:	4b28      	ldr	r3, [pc, #160]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3b01      	subs	r3, #1
 800d624:	4a26      	ldr	r2, [pc, #152]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d626:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d628:	78fb      	ldrb	r3, [r7, #3]
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d632:	78fb      	ldrb	r3, [r7, #3]
 800d634:	b2db      	uxtb	r3, r3
 800d636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d63a:	2b80      	cmp	r3, #128	; 0x80
 800d63c:	d0ef      	beq.n	800d61e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d63e:	4b20      	ldr	r3, [pc, #128]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f1c3 0307 	rsb	r3, r3, #7
 800d646:	2b04      	cmp	r3, #4
 800d648:	d00a      	beq.n	800d660 <xPortStartScheduler+0x78>
	__asm volatile
 800d64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d64e:	f383 8811 	msr	BASEPRI, r3
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	f3bf 8f4f 	dsb	sy
 800d65a:	60bb      	str	r3, [r7, #8]
}
 800d65c:	bf00      	nop
 800d65e:	e7fe      	b.n	800d65e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d660:	4b17      	ldr	r3, [pc, #92]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	021b      	lsls	r3, r3, #8
 800d666:	4a16      	ldr	r2, [pc, #88]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d668:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d66a:	4b15      	ldr	r3, [pc, #84]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d672:	4a13      	ldr	r2, [pc, #76]	; (800d6c0 <xPortStartScheduler+0xd8>)
 800d674:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d67e:	4b11      	ldr	r3, [pc, #68]	; (800d6c4 <xPortStartScheduler+0xdc>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a10      	ldr	r2, [pc, #64]	; (800d6c4 <xPortStartScheduler+0xdc>)
 800d684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d688:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d68a:	4b0e      	ldr	r3, [pc, #56]	; (800d6c4 <xPortStartScheduler+0xdc>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a0d      	ldr	r2, [pc, #52]	; (800d6c4 <xPortStartScheduler+0xdc>)
 800d690:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d694:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d696:	f000 f8b9 	bl	800d80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d69a:	4b0b      	ldr	r3, [pc, #44]	; (800d6c8 <xPortStartScheduler+0xe0>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d6a0:	f7ff ff92 	bl	800d5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d6a4:	f7fe ffac 	bl	800c600 <vTaskSwitchContext>
	prvTaskExitError();
 800d6a8:	f7ff ff4a 	bl	800d540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	e000e400 	.word	0xe000e400
 800d6bc:	200017e8 	.word	0x200017e8
 800d6c0:	200017ec 	.word	0x200017ec
 800d6c4:	e000ed20 	.word	0xe000ed20
 800d6c8:	20000314 	.word	0x20000314

0800d6cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	607b      	str	r3, [r7, #4]
}
 800d6e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6e6:	4b0f      	ldr	r3, [pc, #60]	; (800d724 <vPortEnterCritical+0x58>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	4a0d      	ldr	r2, [pc, #52]	; (800d724 <vPortEnterCritical+0x58>)
 800d6ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d6f0:	4b0c      	ldr	r3, [pc, #48]	; (800d724 <vPortEnterCritical+0x58>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d10f      	bne.n	800d718 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d6f8:	4b0b      	ldr	r3, [pc, #44]	; (800d728 <vPortEnterCritical+0x5c>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d00a      	beq.n	800d718 <vPortEnterCritical+0x4c>
	__asm volatile
 800d702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d706:	f383 8811 	msr	BASEPRI, r3
 800d70a:	f3bf 8f6f 	isb	sy
 800d70e:	f3bf 8f4f 	dsb	sy
 800d712:	603b      	str	r3, [r7, #0]
}
 800d714:	bf00      	nop
 800d716:	e7fe      	b.n	800d716 <vPortEnterCritical+0x4a>
	}
}
 800d718:	bf00      	nop
 800d71a:	370c      	adds	r7, #12
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bc80      	pop	{r7}
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	20000314 	.word	0x20000314
 800d728:	e000ed04 	.word	0xe000ed04

0800d72c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d732:	4b11      	ldr	r3, [pc, #68]	; (800d778 <vPortExitCritical+0x4c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10a      	bne.n	800d750 <vPortExitCritical+0x24>
	__asm volatile
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	607b      	str	r3, [r7, #4]
}
 800d74c:	bf00      	nop
 800d74e:	e7fe      	b.n	800d74e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d750:	4b09      	ldr	r3, [pc, #36]	; (800d778 <vPortExitCritical+0x4c>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	3b01      	subs	r3, #1
 800d756:	4a08      	ldr	r2, [pc, #32]	; (800d778 <vPortExitCritical+0x4c>)
 800d758:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d75a:	4b07      	ldr	r3, [pc, #28]	; (800d778 <vPortExitCritical+0x4c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d105      	bne.n	800d76e <vPortExitCritical+0x42>
 800d762:	2300      	movs	r3, #0
 800d764:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	f383 8811 	msr	BASEPRI, r3
}
 800d76c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d76e:	bf00      	nop
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	bc80      	pop	{r7}
 800d776:	4770      	bx	lr
 800d778:	20000314 	.word	0x20000314
 800d77c:	00000000 	.word	0x00000000

0800d780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d780:	f3ef 8009 	mrs	r0, PSP
 800d784:	f3bf 8f6f 	isb	sy
 800d788:	4b0d      	ldr	r3, [pc, #52]	; (800d7c0 <pxCurrentTCBConst>)
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d790:	6010      	str	r0, [r2, #0]
 800d792:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d796:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d79a:	f380 8811 	msr	BASEPRI, r0
 800d79e:	f7fe ff2f 	bl	800c600 <vTaskSwitchContext>
 800d7a2:	f04f 0000 	mov.w	r0, #0
 800d7a6:	f380 8811 	msr	BASEPRI, r0
 800d7aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d7ae:	6819      	ldr	r1, [r3, #0]
 800d7b0:	6808      	ldr	r0, [r1, #0]
 800d7b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d7b6:	f380 8809 	msr	PSP, r0
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	4770      	bx	lr

0800d7c0 <pxCurrentTCBConst>:
 800d7c0:	200011bc 	.word	0x200011bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d7c4:	bf00      	nop
 800d7c6:	bf00      	nop

0800d7c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	607b      	str	r3, [r7, #4]
}
 800d7e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d7e2:	f7fe fe4f 	bl	800c484 <xTaskIncrementTick>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d003      	beq.n	800d7f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d7ec:	4b06      	ldr	r3, [pc, #24]	; (800d808 <SysTick_Handler+0x40>)
 800d7ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	f383 8811 	msr	BASEPRI, r3
}
 800d7fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	e000ed04 	.word	0xe000ed04

0800d80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d80c:	b480      	push	{r7}
 800d80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d810:	4b0a      	ldr	r3, [pc, #40]	; (800d83c <vPortSetupTimerInterrupt+0x30>)
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d816:	4b0a      	ldr	r3, [pc, #40]	; (800d840 <vPortSetupTimerInterrupt+0x34>)
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d81c:	4b09      	ldr	r3, [pc, #36]	; (800d844 <vPortSetupTimerInterrupt+0x38>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a09      	ldr	r2, [pc, #36]	; (800d848 <vPortSetupTimerInterrupt+0x3c>)
 800d822:	fba2 2303 	umull	r2, r3, r2, r3
 800d826:	099b      	lsrs	r3, r3, #6
 800d828:	4a08      	ldr	r2, [pc, #32]	; (800d84c <vPortSetupTimerInterrupt+0x40>)
 800d82a:	3b01      	subs	r3, #1
 800d82c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d82e:	4b03      	ldr	r3, [pc, #12]	; (800d83c <vPortSetupTimerInterrupt+0x30>)
 800d830:	2207      	movs	r2, #7
 800d832:	601a      	str	r2, [r3, #0]
}
 800d834:	bf00      	nop
 800d836:	46bd      	mov	sp, r7
 800d838:	bc80      	pop	{r7}
 800d83a:	4770      	bx	lr
 800d83c:	e000e010 	.word	0xe000e010
 800d840:	e000e018 	.word	0xe000e018
 800d844:	20000054 	.word	0x20000054
 800d848:	10624dd3 	.word	0x10624dd3
 800d84c:	e000e014 	.word	0xe000e014

0800d850 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d856:	f3ef 8305 	mrs	r3, IPSR
 800d85a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2b0f      	cmp	r3, #15
 800d860:	d914      	bls.n	800d88c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d862:	4a16      	ldr	r2, [pc, #88]	; (800d8bc <vPortValidateInterruptPriority+0x6c>)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4413      	add	r3, r2
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d86c:	4b14      	ldr	r3, [pc, #80]	; (800d8c0 <vPortValidateInterruptPriority+0x70>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	7afa      	ldrb	r2, [r7, #11]
 800d872:	429a      	cmp	r2, r3
 800d874:	d20a      	bcs.n	800d88c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	607b      	str	r3, [r7, #4]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d88c:	4b0d      	ldr	r3, [pc, #52]	; (800d8c4 <vPortValidateInterruptPriority+0x74>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d894:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <vPortValidateInterruptPriority+0x78>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d90a      	bls.n	800d8b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	603b      	str	r3, [r7, #0]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <vPortValidateInterruptPriority+0x60>
	}
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bc80      	pop	{r7}
 800d8ba:	4770      	bx	lr
 800d8bc:	e000e3f0 	.word	0xe000e3f0
 800d8c0:	200017e8 	.word	0x200017e8
 800d8c4:	e000ed0c 	.word	0xe000ed0c
 800d8c8:	200017ec 	.word	0x200017ec

0800d8cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08a      	sub	sp, #40	; 0x28
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d8d8:	f7fe fd1a 	bl	800c310 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d8dc:	4b58      	ldr	r3, [pc, #352]	; (800da40 <pvPortMalloc+0x174>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d101      	bne.n	800d8e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d8e4:	f000 f910 	bl	800db08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d8e8:	4b56      	ldr	r3, [pc, #344]	; (800da44 <pvPortMalloc+0x178>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f040 808e 	bne.w	800da12 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01d      	beq.n	800d938 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d8fc:	2208      	movs	r2, #8
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4413      	add	r3, r2
 800d902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f003 0307 	and.w	r3, r3, #7
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d014      	beq.n	800d938 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f023 0307 	bic.w	r3, r3, #7
 800d914:	3308      	adds	r3, #8
 800d916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f003 0307 	and.w	r3, r3, #7
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00a      	beq.n	800d938 <pvPortMalloc+0x6c>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	f383 8811 	msr	BASEPRI, r3
 800d92a:	f3bf 8f6f 	isb	sy
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	617b      	str	r3, [r7, #20]
}
 800d934:	bf00      	nop
 800d936:	e7fe      	b.n	800d936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d069      	beq.n	800da12 <pvPortMalloc+0x146>
 800d93e:	4b42      	ldr	r3, [pc, #264]	; (800da48 <pvPortMalloc+0x17c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	429a      	cmp	r2, r3
 800d946:	d864      	bhi.n	800da12 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d948:	4b40      	ldr	r3, [pc, #256]	; (800da4c <pvPortMalloc+0x180>)
 800d94a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d94c:	4b3f      	ldr	r3, [pc, #252]	; (800da4c <pvPortMalloc+0x180>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d952:	e004      	b.n	800d95e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	429a      	cmp	r2, r3
 800d966:	d903      	bls.n	800d970 <pvPortMalloc+0xa4>
 800d968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1f1      	bne.n	800d954 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d970:	4b33      	ldr	r3, [pc, #204]	; (800da40 <pvPortMalloc+0x174>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d976:	429a      	cmp	r2, r3
 800d978:	d04b      	beq.n	800da12 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2208      	movs	r2, #8
 800d980:	4413      	add	r3, r2
 800d982:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	1ad2      	subs	r2, r2, r3
 800d994:	2308      	movs	r3, #8
 800d996:	005b      	lsls	r3, r3, #1
 800d998:	429a      	cmp	r2, r3
 800d99a:	d91f      	bls.n	800d9dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	f003 0307 	and.w	r3, r3, #7
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00a      	beq.n	800d9c4 <pvPortMalloc+0xf8>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	613b      	str	r3, [r7, #16]
}
 800d9c0:	bf00      	nop
 800d9c2:	e7fe      	b.n	800d9c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	1ad2      	subs	r2, r2, r3
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d9d6:	69b8      	ldr	r0, [r7, #24]
 800d9d8:	f000 f8f8 	bl	800dbcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d9dc:	4b1a      	ldr	r3, [pc, #104]	; (800da48 <pvPortMalloc+0x17c>)
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	4a18      	ldr	r2, [pc, #96]	; (800da48 <pvPortMalloc+0x17c>)
 800d9e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d9ea:	4b17      	ldr	r3, [pc, #92]	; (800da48 <pvPortMalloc+0x17c>)
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	4b18      	ldr	r3, [pc, #96]	; (800da50 <pvPortMalloc+0x184>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d203      	bcs.n	800d9fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d9f6:	4b14      	ldr	r3, [pc, #80]	; (800da48 <pvPortMalloc+0x17c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a15      	ldr	r2, [pc, #84]	; (800da50 <pvPortMalloc+0x184>)
 800d9fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	685a      	ldr	r2, [r3, #4]
 800da02:	4b10      	ldr	r3, [pc, #64]	; (800da44 <pvPortMalloc+0x178>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	431a      	orrs	r2, r3
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	2200      	movs	r2, #0
 800da10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da12:	f7fe fc8b 	bl	800c32c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	f003 0307 	and.w	r3, r3, #7
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00a      	beq.n	800da36 <pvPortMalloc+0x16a>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	60fb      	str	r3, [r7, #12]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <pvPortMalloc+0x168>
	return pvReturn;
 800da36:	69fb      	ldr	r3, [r7, #28]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3728      	adds	r7, #40	; 0x28
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	200023f8 	.word	0x200023f8
 800da44:	20002404 	.word	0x20002404
 800da48:	200023fc 	.word	0x200023fc
 800da4c:	200023f0 	.word	0x200023f0
 800da50:	20002400 	.word	0x20002400

0800da54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d048      	beq.n	800daf8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800da66:	2308      	movs	r3, #8
 800da68:	425b      	negs	r3, r3
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	4413      	add	r3, r2
 800da6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	4b21      	ldr	r3, [pc, #132]	; (800db00 <vPortFree+0xac>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4013      	ands	r3, r2
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d10a      	bne.n	800da98 <vPortFree+0x44>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	f383 8811 	msr	BASEPRI, r3
 800da8a:	f3bf 8f6f 	isb	sy
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	60fb      	str	r3, [r7, #12]
}
 800da94:	bf00      	nop
 800da96:	e7fe      	b.n	800da96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00a      	beq.n	800dab6 <vPortFree+0x62>
	__asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	60bb      	str	r3, [r7, #8]
}
 800dab2:	bf00      	nop
 800dab4:	e7fe      	b.n	800dab4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	685a      	ldr	r2, [r3, #4]
 800daba:	4b11      	ldr	r3, [pc, #68]	; (800db00 <vPortFree+0xac>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4013      	ands	r3, r2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d019      	beq.n	800daf8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d115      	bne.n	800daf8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	685a      	ldr	r2, [r3, #4]
 800dad0:	4b0b      	ldr	r3, [pc, #44]	; (800db00 <vPortFree+0xac>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	43db      	mvns	r3, r3
 800dad6:	401a      	ands	r2, r3
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dadc:	f7fe fc18 	bl	800c310 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	685a      	ldr	r2, [r3, #4]
 800dae4:	4b07      	ldr	r3, [pc, #28]	; (800db04 <vPortFree+0xb0>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4413      	add	r3, r2
 800daea:	4a06      	ldr	r2, [pc, #24]	; (800db04 <vPortFree+0xb0>)
 800daec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800daee:	6938      	ldr	r0, [r7, #16]
 800daf0:	f000 f86c 	bl	800dbcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800daf4:	f7fe fc1a 	bl	800c32c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800daf8:	bf00      	nop
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	20002404 	.word	0x20002404
 800db04:	200023fc 	.word	0x200023fc

0800db08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800db12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db14:	4b27      	ldr	r3, [pc, #156]	; (800dbb4 <prvHeapInit+0xac>)
 800db16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f003 0307 	and.w	r3, r3, #7
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00c      	beq.n	800db3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	3307      	adds	r3, #7
 800db26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 0307 	bic.w	r3, r3, #7
 800db2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	4a1f      	ldr	r2, [pc, #124]	; (800dbb4 <prvHeapInit+0xac>)
 800db38:	4413      	add	r3, r2
 800db3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800db40:	4a1d      	ldr	r2, [pc, #116]	; (800dbb8 <prvHeapInit+0xb0>)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800db46:	4b1c      	ldr	r3, [pc, #112]	; (800dbb8 <prvHeapInit+0xb0>)
 800db48:	2200      	movs	r2, #0
 800db4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4413      	add	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800db54:	2208      	movs	r2, #8
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	1a9b      	subs	r3, r3, r2
 800db5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f023 0307 	bic.w	r3, r3, #7
 800db62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	4a15      	ldr	r2, [pc, #84]	; (800dbbc <prvHeapInit+0xb4>)
 800db68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800db6a:	4b14      	ldr	r3, [pc, #80]	; (800dbbc <prvHeapInit+0xb4>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2200      	movs	r2, #0
 800db70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800db72:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <prvHeapInit+0xb4>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2200      	movs	r2, #0
 800db78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	1ad2      	subs	r2, r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800db88:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <prvHeapInit+0xb4>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	4a0a      	ldr	r2, [pc, #40]	; (800dbc0 <prvHeapInit+0xb8>)
 800db96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	4a09      	ldr	r2, [pc, #36]	; (800dbc4 <prvHeapInit+0xbc>)
 800db9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dba0:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <prvHeapInit+0xc0>)
 800dba2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dba6:	601a      	str	r2, [r3, #0]
}
 800dba8:	bf00      	nop
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bc80      	pop	{r7}
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	200017f0 	.word	0x200017f0
 800dbb8:	200023f0 	.word	0x200023f0
 800dbbc:	200023f8 	.word	0x200023f8
 800dbc0:	20002400 	.word	0x20002400
 800dbc4:	200023fc 	.word	0x200023fc
 800dbc8:	20002404 	.word	0x20002404

0800dbcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dbd4:	4b27      	ldr	r3, [pc, #156]	; (800dc74 <prvInsertBlockIntoFreeList+0xa8>)
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	e002      	b.n	800dbe0 <prvInsertBlockIntoFreeList+0x14>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d8f7      	bhi.n	800dbda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d108      	bne.n	800dc0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	685a      	ldr	r2, [r3, #4]
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	441a      	add	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	441a      	add	r2, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d118      	bne.n	800dc54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <prvInsertBlockIntoFreeList+0xac>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d00d      	beq.n	800dc4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	685a      	ldr	r2, [r3, #4]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	441a      	add	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	601a      	str	r2, [r3, #0]
 800dc48:	e008      	b.n	800dc5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dc4a:	4b0b      	ldr	r3, [pc, #44]	; (800dc78 <prvInsertBlockIntoFreeList+0xac>)
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	601a      	str	r2, [r3, #0]
 800dc52:	e003      	b.n	800dc5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d002      	beq.n	800dc6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc6a:	bf00      	nop
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bc80      	pop	{r7}
 800dc72:	4770      	bx	lr
 800dc74:	200023f0 	.word	0x200023f0
 800dc78:	200023f8 	.word	0x200023f8

0800dc7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc80:	2200      	movs	r2, #0
 800dc82:	4912      	ldr	r1, [pc, #72]	; (800dccc <MX_USB_DEVICE_Init+0x50>)
 800dc84:	4812      	ldr	r0, [pc, #72]	; (800dcd0 <MX_USB_DEVICE_Init+0x54>)
 800dc86:	f7fb faf9 	bl	800927c <USBD_Init>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc90:	f7f2 ff54 	bl	8000b3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800dc94:	490f      	ldr	r1, [pc, #60]	; (800dcd4 <MX_USB_DEVICE_Init+0x58>)
 800dc96:	480e      	ldr	r0, [pc, #56]	; (800dcd0 <MX_USB_DEVICE_Init+0x54>)
 800dc98:	f7fb fb1b 	bl	80092d2 <USBD_RegisterClass>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d001      	beq.n	800dca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dca2:	f7f2 ff4b 	bl	8000b3c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800dca6:	490c      	ldr	r1, [pc, #48]	; (800dcd8 <MX_USB_DEVICE_Init+0x5c>)
 800dca8:	4809      	ldr	r0, [pc, #36]	; (800dcd0 <MX_USB_DEVICE_Init+0x54>)
 800dcaa:	f7fb fad5 	bl	8009258 <USBD_AUDIO_RegisterInterface>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d001      	beq.n	800dcb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dcb4:	f7f2 ff42 	bl	8000b3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dcb8:	4805      	ldr	r0, [pc, #20]	; (800dcd0 <MX_USB_DEVICE_Init+0x54>)
 800dcba:	f7fb fb23 	bl	8009304 <USBD_Start>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d001      	beq.n	800dcc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dcc4:	f7f2 ff3a 	bl	8000b3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dcc8:	bf00      	nop
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20000334 	.word	0x20000334
 800dcd0:	20002408 	.word	0x20002408
 800dcd4:	20000260 	.word	0x20000260
 800dcd8:	20000318 	.word	0x20000318

0800dcdc <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800dce8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bc80      	pop	{r7}
 800dcf2:	4770      	bx	lr

0800dcf4 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800dcfc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	370c      	adds	r7, #12
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bc80      	pop	{r7}
 800dd06:	4770      	bx	lr

0800dd08 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	4613      	mov	r3, r2
 800dd14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d001      	beq.n	800dd20 <AUDIO_AudioCmd_FS+0x18>
 800dd1c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800dd1e:	e000      	b.n	800dd22 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800dd20:	bf00      	nop
  }
  return (USBD_OK);
 800dd22:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bc80      	pop	{r7}
 800dd2c:	4770      	bx	lr

0800dd2e <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800dd2e:	b480      	push	{r7}
 800dd30:	b083      	sub	sp, #12
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	4603      	mov	r3, r0
 800dd36:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800dd38:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bc80      	pop	{r7}
 800dd42:	4770      	bx	lr

0800dd44 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dd4e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bc80      	pop	{r7}
 800dd58:	4770      	bx	lr

0800dd5a <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 800dd5a:	b480      	push	{r7}
 800dd5c:	b083      	sub	sp, #12
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	4603      	mov	r3, r0
 800dd62:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800dd64:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bc80      	pop	{r7}
 800dd6e:	4770      	bx	lr

0800dd70 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800dd70:	b480      	push	{r7}
 800dd72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800dd74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bc80      	pop	{r7}
 800dd7c:	4770      	bx	lr
	...

0800dd80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4603      	mov	r3, r0
 800dd88:	6039      	str	r1, [r7, #0]
 800dd8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2212      	movs	r2, #18
 800dd90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd92:	4b03      	ldr	r3, [pc, #12]	; (800dda0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bc80      	pop	{r7}
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	20000350 	.word	0x20000350

0800dda4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	2204      	movs	r2, #4
 800ddb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ddb6:	4b03      	ldr	r3, [pc, #12]	; (800ddc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	370c      	adds	r7, #12
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bc80      	pop	{r7}
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	20000364 	.word	0x20000364

0800ddc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	6039      	str	r1, [r7, #0]
 800ddd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d105      	bne.n	800dde6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	4907      	ldr	r1, [pc, #28]	; (800ddfc <USBD_FS_ProductStrDescriptor+0x34>)
 800ddde:	4808      	ldr	r0, [pc, #32]	; (800de00 <USBD_FS_ProductStrDescriptor+0x38>)
 800dde0:	f7fc fa08 	bl	800a1f4 <USBD_GetString>
 800dde4:	e004      	b.n	800ddf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	4904      	ldr	r1, [pc, #16]	; (800ddfc <USBD_FS_ProductStrDescriptor+0x34>)
 800ddea:	4805      	ldr	r0, [pc, #20]	; (800de00 <USBD_FS_ProductStrDescriptor+0x38>)
 800ddec:	f7fc fa02 	bl	800a1f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddf0:	4b02      	ldr	r3, [pc, #8]	; (800ddfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	200026cc 	.word	0x200026cc
 800de00:	0800fa44 	.word	0x0800fa44

0800de04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	6039      	str	r1, [r7, #0]
 800de0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de10:	683a      	ldr	r2, [r7, #0]
 800de12:	4904      	ldr	r1, [pc, #16]	; (800de24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de14:	4804      	ldr	r0, [pc, #16]	; (800de28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de16:	f7fc f9ed 	bl	800a1f4 <USBD_GetString>
  return USBD_StrDesc;
 800de1a:	4b02      	ldr	r3, [pc, #8]	; (800de24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	200026cc 	.word	0x200026cc
 800de28:	0800fa50 	.word	0x0800fa50

0800de2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	4603      	mov	r3, r0
 800de34:	6039      	str	r1, [r7, #0]
 800de36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	221a      	movs	r2, #26
 800de3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de3e:	f000 f843 	bl	800dec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de42:	4b02      	ldr	r3, [pc, #8]	; (800de4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de44:	4618      	mov	r0, r3
 800de46:	3708      	adds	r7, #8
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	20000368 	.word	0x20000368

0800de50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	4603      	mov	r3, r0
 800de58:	6039      	str	r1, [r7, #0]
 800de5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de5c:	79fb      	ldrb	r3, [r7, #7]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d105      	bne.n	800de6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	4907      	ldr	r1, [pc, #28]	; (800de84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de66:	4808      	ldr	r0, [pc, #32]	; (800de88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de68:	f7fc f9c4 	bl	800a1f4 <USBD_GetString>
 800de6c:	e004      	b.n	800de78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	4904      	ldr	r1, [pc, #16]	; (800de84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de72:	4805      	ldr	r0, [pc, #20]	; (800de88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de74:	f7fc f9be 	bl	800a1f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de78:	4b02      	ldr	r3, [pc, #8]	; (800de84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	200026cc 	.word	0x200026cc
 800de88:	0800fa60 	.word	0x0800fa60

0800de8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	4603      	mov	r3, r0
 800de94:	6039      	str	r1, [r7, #0]
 800de96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de98:	79fb      	ldrb	r3, [r7, #7]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d105      	bne.n	800deaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	4907      	ldr	r1, [pc, #28]	; (800dec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dea2:	4808      	ldr	r0, [pc, #32]	; (800dec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dea4:	f7fc f9a6 	bl	800a1f4 <USBD_GetString>
 800dea8:	e004      	b.n	800deb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800deaa:	683a      	ldr	r2, [r7, #0]
 800deac:	4904      	ldr	r1, [pc, #16]	; (800dec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800deae:	4805      	ldr	r0, [pc, #20]	; (800dec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800deb0:	f7fc f9a0 	bl	800a1f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800deb4:	4b02      	ldr	r3, [pc, #8]	; (800dec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	200026cc 	.word	0x200026cc
 800dec4:	0800fa70 	.word	0x0800fa70

0800dec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dece:	4b0f      	ldr	r3, [pc, #60]	; (800df0c <Get_SerialNum+0x44>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ded4:	4b0e      	ldr	r3, [pc, #56]	; (800df10 <Get_SerialNum+0x48>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800deda:	4b0e      	ldr	r3, [pc, #56]	; (800df14 <Get_SerialNum+0x4c>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	4413      	add	r3, r2
 800dee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d009      	beq.n	800df02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800deee:	2208      	movs	r2, #8
 800def0:	4909      	ldr	r1, [pc, #36]	; (800df18 <Get_SerialNum+0x50>)
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f000 f814 	bl	800df20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800def8:	2204      	movs	r2, #4
 800defa:	4908      	ldr	r1, [pc, #32]	; (800df1c <Get_SerialNum+0x54>)
 800defc:	68b8      	ldr	r0, [r7, #8]
 800defe:	f000 f80f 	bl	800df20 <IntToUnicode>
  }
}
 800df02:	bf00      	nop
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	1ffff7e8 	.word	0x1ffff7e8
 800df10:	1ffff7ec 	.word	0x1ffff7ec
 800df14:	1ffff7f0 	.word	0x1ffff7f0
 800df18:	2000036a 	.word	0x2000036a
 800df1c:	2000037a 	.word	0x2000037a

0800df20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df20:	b480      	push	{r7}
 800df22:	b087      	sub	sp, #28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	4613      	mov	r3, r2
 800df2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df2e:	2300      	movs	r3, #0
 800df30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df32:	2300      	movs	r3, #0
 800df34:	75fb      	strb	r3, [r7, #23]
 800df36:	e027      	b.n	800df88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	0f1b      	lsrs	r3, r3, #28
 800df3c:	2b09      	cmp	r3, #9
 800df3e:	d80b      	bhi.n	800df58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	0f1b      	lsrs	r3, r3, #28
 800df44:	b2da      	uxtb	r2, r3
 800df46:	7dfb      	ldrb	r3, [r7, #23]
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	4619      	mov	r1, r3
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	440b      	add	r3, r1
 800df50:	3230      	adds	r2, #48	; 0x30
 800df52:	b2d2      	uxtb	r2, r2
 800df54:	701a      	strb	r2, [r3, #0]
 800df56:	e00a      	b.n	800df6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	0f1b      	lsrs	r3, r3, #28
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	7dfb      	ldrb	r3, [r7, #23]
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	4619      	mov	r1, r3
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	440b      	add	r3, r1
 800df68:	3237      	adds	r2, #55	; 0x37
 800df6a:	b2d2      	uxtb	r2, r2
 800df6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	011b      	lsls	r3, r3, #4
 800df72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df74:	7dfb      	ldrb	r3, [r7, #23]
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	3301      	adds	r3, #1
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	4413      	add	r3, r2
 800df7e:	2200      	movs	r2, #0
 800df80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	3301      	adds	r3, #1
 800df86:	75fb      	strb	r3, [r7, #23]
 800df88:	7dfa      	ldrb	r2, [r7, #23]
 800df8a:	79fb      	ldrb	r3, [r7, #7]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d3d3      	bcc.n	800df38 <IntToUnicode+0x18>
  }
}
 800df90:	bf00      	nop
 800df92:	bf00      	nop
 800df94:	371c      	adds	r7, #28
 800df96:	46bd      	mov	sp, r7
 800df98:	bc80      	pop	{r7}
 800df9a:	4770      	bx	lr

0800df9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a0d      	ldr	r2, [pc, #52]	; (800dfe0 <HAL_PCD_MspInit+0x44>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d113      	bne.n	800dfd6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dfae:	4b0d      	ldr	r3, [pc, #52]	; (800dfe4 <HAL_PCD_MspInit+0x48>)
 800dfb0:	69db      	ldr	r3, [r3, #28]
 800dfb2:	4a0c      	ldr	r2, [pc, #48]	; (800dfe4 <HAL_PCD_MspInit+0x48>)
 800dfb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dfb8:	61d3      	str	r3, [r2, #28]
 800dfba:	4b0a      	ldr	r3, [pc, #40]	; (800dfe4 <HAL_PCD_MspInit+0x48>)
 800dfbc:	69db      	ldr	r3, [r3, #28]
 800dfbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dfc2:	60fb      	str	r3, [r7, #12]
 800dfc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	2105      	movs	r1, #5
 800dfca:	2014      	movs	r0, #20
 800dfcc:	f7f3 f9e3 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800dfd0:	2014      	movs	r0, #20
 800dfd2:	f7f3 f9fc 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	40005c00 	.word	0x40005c00
 800dfe4:	40021000 	.word	0x40021000

0800dfe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800dffc:	4619      	mov	r1, r3
 800dffe:	4610      	mov	r0, r2
 800e000:	f7fb f9c8 	bl	8009394 <USBD_LL_SetupStage>
}
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	460b      	mov	r3, r1
 800e016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e01e:	78fa      	ldrb	r2, [r7, #3]
 800e020:	6879      	ldr	r1, [r7, #4]
 800e022:	4613      	mov	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	440b      	add	r3, r1
 800e02c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	78fb      	ldrb	r3, [r7, #3]
 800e034:	4619      	mov	r1, r3
 800e036:	f7fb f9fa 	bl	800942e <USBD_LL_DataOutStage>
}
 800e03a:	bf00      	nop
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b082      	sub	sp, #8
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	460b      	mov	r3, r1
 800e04c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800e054:	78fa      	ldrb	r2, [r7, #3]
 800e056:	6879      	ldr	r1, [r7, #4]
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	00db      	lsls	r3, r3, #3
 800e060:	440b      	add	r3, r1
 800e062:	333c      	adds	r3, #60	; 0x3c
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	78fb      	ldrb	r3, [r7, #3]
 800e068:	4619      	mov	r1, r3
 800e06a:	f7fb fa51 	bl	8009510 <USBD_LL_DataInStage>
}
 800e06e:	bf00      	nop
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b082      	sub	sp, #8
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e084:	4618      	mov	r0, r3
 800e086:	f7fb fb61 	bl	800974c <USBD_LL_SOF>
}
 800e08a:	bf00      	nop
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b084      	sub	sp, #16
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e09a:	2301      	movs	r3, #1
 800e09c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	2b02      	cmp	r3, #2
 800e0a4:	d001      	beq.n	800e0aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e0a6:	f7f2 fd49 	bl	8000b3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0b0:	7bfa      	ldrb	r2, [r7, #15]
 800e0b2:	4611      	mov	r1, r2
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fb fb11 	bl	80096dc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fb faca 	bl	800965a <USBD_LL_Reset>
}
 800e0c6:	bf00      	nop
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
	...

0800e0d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fb fb0b 	bl	80096fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d005      	beq.n	800e0f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0ec:	4b04      	ldr	r3, [pc, #16]	; (800e100 <HAL_PCD_SuspendCallback+0x30>)
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	4a03      	ldr	r2, [pc, #12]	; (800e100 <HAL_PCD_SuspendCallback+0x30>)
 800e0f2:	f043 0306 	orr.w	r3, r3, #6
 800e0f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e0f8:	bf00      	nop
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	e000ed00 	.word	0xe000ed00

0800e104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800e112:	4618      	mov	r0, r3
 800e114:	f7fb fb05 	bl	8009722 <USBD_LL_Resume>
}
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e128:	4a1b      	ldr	r2, [pc, #108]	; (800e198 <USBD_LL_Init+0x78>)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	4a19      	ldr	r2, [pc, #100]	; (800e198 <USBD_LL_Init+0x78>)
 800e134:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e138:	4b17      	ldr	r3, [pc, #92]	; (800e198 <USBD_LL_Init+0x78>)
 800e13a:	4a18      	ldr	r2, [pc, #96]	; (800e19c <USBD_LL_Init+0x7c>)
 800e13c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e13e:	4b16      	ldr	r3, [pc, #88]	; (800e198 <USBD_LL_Init+0x78>)
 800e140:	2208      	movs	r2, #8
 800e142:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e144:	4b14      	ldr	r3, [pc, #80]	; (800e198 <USBD_LL_Init+0x78>)
 800e146:	2202      	movs	r2, #2
 800e148:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e14a:	4b13      	ldr	r3, [pc, #76]	; (800e198 <USBD_LL_Init+0x78>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e150:	4b11      	ldr	r3, [pc, #68]	; (800e198 <USBD_LL_Init+0x78>)
 800e152:	2200      	movs	r2, #0
 800e154:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e156:	4b10      	ldr	r3, [pc, #64]	; (800e198 <USBD_LL_Init+0x78>)
 800e158:	2200      	movs	r2, #0
 800e15a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e15c:	480e      	ldr	r0, [pc, #56]	; (800e198 <USBD_LL_Init+0x78>)
 800e15e:	f7f3 fd67 	bl	8001c30 <HAL_PCD_Init>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e168:	f7f2 fce8 	bl	8000b3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e172:	2318      	movs	r3, #24
 800e174:	2200      	movs	r2, #0
 800e176:	2100      	movs	r1, #0
 800e178:	f7f5 f9c4 	bl	8003504 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e182:	2358      	movs	r3, #88	; 0x58
 800e184:	2200      	movs	r2, #0
 800e186:	2180      	movs	r1, #128	; 0x80
 800e188:	f7f5 f9bc 	bl	8003504 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	200028cc 	.word	0x200028cc
 800e19c:	40005c00 	.word	0x40005c00

0800e1a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f3 fe45 	bl	8001e46 <HAL_PCD_Start>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1c0:	7bfb      	ldrb	r3, [r7, #15]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 f93c 	bl	800e440 <USBD_Get_USB_Status>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	4608      	mov	r0, r1
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	70fb      	strb	r3, [r7, #3]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70bb      	strb	r3, [r7, #2]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e1fe:	78bb      	ldrb	r3, [r7, #2]
 800e200:	883a      	ldrh	r2, [r7, #0]
 800e202:	78f9      	ldrb	r1, [r7, #3]
 800e204:	f7f3 ffbd 	bl	8002182 <HAL_PCD_EP_Open>
 800e208:	4603      	mov	r3, r0
 800e20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e20c:	7bfb      	ldrb	r3, [r7, #15]
 800e20e:	4618      	mov	r0, r3
 800e210:	f000 f916 	bl	800e440 <USBD_Get_USB_Status>
 800e214:	4603      	mov	r3, r0
 800e216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e218:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3710      	adds	r7, #16
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b084      	sub	sp, #16
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
 800e22a:	460b      	mov	r3, r1
 800e22c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e23c:	78fa      	ldrb	r2, [r7, #3]
 800e23e:	4611      	mov	r1, r2
 800e240:	4618      	mov	r0, r3
 800e242:	f7f4 f804 	bl	800224e <HAL_PCD_EP_Close>
 800e246:	4603      	mov	r3, r0
 800e248:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 f8f7 	bl	800e440 <USBD_Get_USB_Status>
 800e252:	4603      	mov	r3, r0
 800e254:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e256:	7bbb      	ldrb	r3, [r7, #14]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	460b      	mov	r3, r1
 800e26a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e26c:	2300      	movs	r3, #0
 800e26e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e27a:	78fa      	ldrb	r2, [r7, #3]
 800e27c:	4611      	mov	r1, r2
 800e27e:	4618      	mov	r0, r3
 800e280:	f7f4 f8ad 	bl	80023de <HAL_PCD_EP_SetStall>
 800e284:	4603      	mov	r3, r0
 800e286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e288:	7bfb      	ldrb	r3, [r7, #15]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f000 f8d8 	bl	800e440 <USBD_Get_USB_Status>
 800e290:	4603      	mov	r3, r0
 800e292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e294:	7bbb      	ldrb	r3, [r7, #14]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2b8:	78fa      	ldrb	r2, [r7, #3]
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7f4 f8ee 	bl	800249e <HAL_PCD_EP_ClrStall>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f000 f8b9 	bl	800e440 <USBD_Get_USB_Status>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da0c      	bge.n	800e312 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e2f8:	78fb      	ldrb	r3, [r7, #3]
 800e2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2fe:	68f9      	ldr	r1, [r7, #12]
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	00db      	lsls	r3, r3, #3
 800e30a:	440b      	add	r3, r1
 800e30c:	3302      	adds	r3, #2
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	e00b      	b.n	800e32a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e312:	78fb      	ldrb	r3, [r7, #3]
 800e314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e318:	68f9      	ldr	r1, [r7, #12]
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	00db      	lsls	r3, r3, #3
 800e322:	440b      	add	r3, r1
 800e324:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e328:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	bc80      	pop	{r7}
 800e332:	4770      	bx	lr

0800e334 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e34e:	78fa      	ldrb	r2, [r7, #3]
 800e350:	4611      	mov	r1, r2
 800e352:	4618      	mov	r0, r3
 800e354:	f7f3 fef0 	bl	8002138 <HAL_PCD_SetAddress>
 800e358:	4603      	mov	r3, r0
 800e35a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e35c:	7bfb      	ldrb	r3, [r7, #15]
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 f86e 	bl	800e440 <USBD_Get_USB_Status>
 800e364:	4603      	mov	r3, r0
 800e366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e368:	7bbb      	ldrb	r3, [r7, #14]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b086      	sub	sp, #24
 800e376:	af00      	add	r7, sp, #0
 800e378:	60f8      	str	r0, [r7, #12]
 800e37a:	607a      	str	r2, [r7, #4]
 800e37c:	461a      	mov	r2, r3
 800e37e:	460b      	mov	r3, r1
 800e380:	72fb      	strb	r3, [r7, #11]
 800e382:	4613      	mov	r3, r2
 800e384:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e394:	893b      	ldrh	r3, [r7, #8]
 800e396:	7af9      	ldrb	r1, [r7, #11]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	f7f3 ffdd 	bl	8002358 <HAL_PCD_EP_Transmit>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a2:	7dfb      	ldrb	r3, [r7, #23]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 f84b 	bl	800e440 <USBD_Get_USB_Status>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3718      	adds	r7, #24
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	607a      	str	r2, [r7, #4]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	72fb      	strb	r3, [r7, #11]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800e3da:	893b      	ldrh	r3, [r7, #8]
 800e3dc:	7af9      	ldrb	r1, [r7, #11]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	f7f3 ff7d 	bl	80022de <HAL_PCD_EP_Receive>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 f828 	bl	800e440 <USBD_Get_USB_Status>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3718      	adds	r7, #24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
	...

0800e400 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  static uint8_t mem[512];
  /* USER CODE END 4 */
  return mem;
 800e408:	4b02      	ldr	r3, [pc, #8]	; (800e414 <USBD_static_malloc+0x14>)
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	370c      	adds	r7, #12
 800e40e:	46bd      	mov	sp, r7
 800e410:	bc80      	pop	{r7}
 800e412:	4770      	bx	lr
 800e414:	20002bb8 	.word	0x20002bb8

0800e418 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]

}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	bc80      	pop	{r7}
 800e428:	4770      	bx	lr

0800e42a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e42a:	b480      	push	{r7}
 800e42c:	b083      	sub	sp, #12
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	460b      	mov	r3, r1
 800e434:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e436:	bf00      	nop
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bc80      	pop	{r7}
 800e43e:	4770      	bx	lr

0800e440 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	4603      	mov	r3, r0
 800e448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	2b03      	cmp	r3, #3
 800e452:	d817      	bhi.n	800e484 <USBD_Get_USB_Status+0x44>
 800e454:	a201      	add	r2, pc, #4	; (adr r2, 800e45c <USBD_Get_USB_Status+0x1c>)
 800e456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45a:	bf00      	nop
 800e45c:	0800e46d 	.word	0x0800e46d
 800e460:	0800e473 	.word	0x0800e473
 800e464:	0800e479 	.word	0x0800e479
 800e468:	0800e47f 	.word	0x0800e47f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	73fb      	strb	r3, [r7, #15]
    break;
 800e470:	e00b      	b.n	800e48a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e472:	2302      	movs	r3, #2
 800e474:	73fb      	strb	r3, [r7, #15]
    break;
 800e476:	e008      	b.n	800e48a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e478:	2301      	movs	r3, #1
 800e47a:	73fb      	strb	r3, [r7, #15]
    break;
 800e47c:	e005      	b.n	800e48a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e47e:	2302      	movs	r3, #2
 800e480:	73fb      	strb	r3, [r7, #15]
    break;
 800e482:	e002      	b.n	800e48a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e484:	2302      	movs	r3, #2
 800e486:	73fb      	strb	r3, [r7, #15]
    break;
 800e488:	bf00      	nop
  }
  return usb_status;
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3714      	adds	r7, #20
 800e490:	46bd      	mov	sp, r7
 800e492:	bc80      	pop	{r7}
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop

0800e498 <__errno>:
 800e498:	4b01      	ldr	r3, [pc, #4]	; (800e4a0 <__errno+0x8>)
 800e49a:	6818      	ldr	r0, [r3, #0]
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	20000384 	.word	0x20000384

0800e4a4 <std>:
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	b510      	push	{r4, lr}
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	e9c0 3300 	strd	r3, r3, [r0]
 800e4ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4b2:	6083      	str	r3, [r0, #8]
 800e4b4:	8181      	strh	r1, [r0, #12]
 800e4b6:	6643      	str	r3, [r0, #100]	; 0x64
 800e4b8:	81c2      	strh	r2, [r0, #14]
 800e4ba:	6183      	str	r3, [r0, #24]
 800e4bc:	4619      	mov	r1, r3
 800e4be:	2208      	movs	r2, #8
 800e4c0:	305c      	adds	r0, #92	; 0x5c
 800e4c2:	f000 f91a 	bl	800e6fa <memset>
 800e4c6:	4b05      	ldr	r3, [pc, #20]	; (800e4dc <std+0x38>)
 800e4c8:	6224      	str	r4, [r4, #32]
 800e4ca:	6263      	str	r3, [r4, #36]	; 0x24
 800e4cc:	4b04      	ldr	r3, [pc, #16]	; (800e4e0 <std+0x3c>)
 800e4ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4d0:	4b04      	ldr	r3, [pc, #16]	; (800e4e4 <std+0x40>)
 800e4d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4d4:	4b04      	ldr	r3, [pc, #16]	; (800e4e8 <std+0x44>)
 800e4d6:	6323      	str	r3, [r4, #48]	; 0x30
 800e4d8:	bd10      	pop	{r4, pc}
 800e4da:	bf00      	nop
 800e4dc:	0800e959 	.word	0x0800e959
 800e4e0:	0800e97b 	.word	0x0800e97b
 800e4e4:	0800e9b3 	.word	0x0800e9b3
 800e4e8:	0800e9d7 	.word	0x0800e9d7

0800e4ec <_cleanup_r>:
 800e4ec:	4901      	ldr	r1, [pc, #4]	; (800e4f4 <_cleanup_r+0x8>)
 800e4ee:	f000 b8af 	b.w	800e650 <_fwalk_reent>
 800e4f2:	bf00      	nop
 800e4f4:	0800eb29 	.word	0x0800eb29

0800e4f8 <__sfmoreglue>:
 800e4f8:	2268      	movs	r2, #104	; 0x68
 800e4fa:	b570      	push	{r4, r5, r6, lr}
 800e4fc:	1e4d      	subs	r5, r1, #1
 800e4fe:	4355      	muls	r5, r2
 800e500:	460e      	mov	r6, r1
 800e502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e506:	f000 f921 	bl	800e74c <_malloc_r>
 800e50a:	4604      	mov	r4, r0
 800e50c:	b140      	cbz	r0, 800e520 <__sfmoreglue+0x28>
 800e50e:	2100      	movs	r1, #0
 800e510:	e9c0 1600 	strd	r1, r6, [r0]
 800e514:	300c      	adds	r0, #12
 800e516:	60a0      	str	r0, [r4, #8]
 800e518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e51c:	f000 f8ed 	bl	800e6fa <memset>
 800e520:	4620      	mov	r0, r4
 800e522:	bd70      	pop	{r4, r5, r6, pc}

0800e524 <__sfp_lock_acquire>:
 800e524:	4801      	ldr	r0, [pc, #4]	; (800e52c <__sfp_lock_acquire+0x8>)
 800e526:	f000 b8d8 	b.w	800e6da <__retarget_lock_acquire_recursive>
 800e52a:	bf00      	nop
 800e52c:	20002db9 	.word	0x20002db9

0800e530 <__sfp_lock_release>:
 800e530:	4801      	ldr	r0, [pc, #4]	; (800e538 <__sfp_lock_release+0x8>)
 800e532:	f000 b8d3 	b.w	800e6dc <__retarget_lock_release_recursive>
 800e536:	bf00      	nop
 800e538:	20002db9 	.word	0x20002db9

0800e53c <__sinit_lock_acquire>:
 800e53c:	4801      	ldr	r0, [pc, #4]	; (800e544 <__sinit_lock_acquire+0x8>)
 800e53e:	f000 b8cc 	b.w	800e6da <__retarget_lock_acquire_recursive>
 800e542:	bf00      	nop
 800e544:	20002dba 	.word	0x20002dba

0800e548 <__sinit_lock_release>:
 800e548:	4801      	ldr	r0, [pc, #4]	; (800e550 <__sinit_lock_release+0x8>)
 800e54a:	f000 b8c7 	b.w	800e6dc <__retarget_lock_release_recursive>
 800e54e:	bf00      	nop
 800e550:	20002dba 	.word	0x20002dba

0800e554 <__sinit>:
 800e554:	b510      	push	{r4, lr}
 800e556:	4604      	mov	r4, r0
 800e558:	f7ff fff0 	bl	800e53c <__sinit_lock_acquire>
 800e55c:	69a3      	ldr	r3, [r4, #24]
 800e55e:	b11b      	cbz	r3, 800e568 <__sinit+0x14>
 800e560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e564:	f7ff bff0 	b.w	800e548 <__sinit_lock_release>
 800e568:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e56c:	6523      	str	r3, [r4, #80]	; 0x50
 800e56e:	4b13      	ldr	r3, [pc, #76]	; (800e5bc <__sinit+0x68>)
 800e570:	4a13      	ldr	r2, [pc, #76]	; (800e5c0 <__sinit+0x6c>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	62a2      	str	r2, [r4, #40]	; 0x28
 800e576:	42a3      	cmp	r3, r4
 800e578:	bf08      	it	eq
 800e57a:	2301      	moveq	r3, #1
 800e57c:	4620      	mov	r0, r4
 800e57e:	bf08      	it	eq
 800e580:	61a3      	streq	r3, [r4, #24]
 800e582:	f000 f81f 	bl	800e5c4 <__sfp>
 800e586:	6060      	str	r0, [r4, #4]
 800e588:	4620      	mov	r0, r4
 800e58a:	f000 f81b 	bl	800e5c4 <__sfp>
 800e58e:	60a0      	str	r0, [r4, #8]
 800e590:	4620      	mov	r0, r4
 800e592:	f000 f817 	bl	800e5c4 <__sfp>
 800e596:	2200      	movs	r2, #0
 800e598:	2104      	movs	r1, #4
 800e59a:	60e0      	str	r0, [r4, #12]
 800e59c:	6860      	ldr	r0, [r4, #4]
 800e59e:	f7ff ff81 	bl	800e4a4 <std>
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	2109      	movs	r1, #9
 800e5a6:	68a0      	ldr	r0, [r4, #8]
 800e5a8:	f7ff ff7c 	bl	800e4a4 <std>
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	2112      	movs	r1, #18
 800e5b0:	68e0      	ldr	r0, [r4, #12]
 800e5b2:	f7ff ff77 	bl	800e4a4 <std>
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	61a3      	str	r3, [r4, #24]
 800e5ba:	e7d1      	b.n	800e560 <__sinit+0xc>
 800e5bc:	0800fb1c 	.word	0x0800fb1c
 800e5c0:	0800e4ed 	.word	0x0800e4ed

0800e5c4 <__sfp>:
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c6:	4607      	mov	r7, r0
 800e5c8:	f7ff ffac 	bl	800e524 <__sfp_lock_acquire>
 800e5cc:	4b1e      	ldr	r3, [pc, #120]	; (800e648 <__sfp+0x84>)
 800e5ce:	681e      	ldr	r6, [r3, #0]
 800e5d0:	69b3      	ldr	r3, [r6, #24]
 800e5d2:	b913      	cbnz	r3, 800e5da <__sfp+0x16>
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f7ff ffbd 	bl	800e554 <__sinit>
 800e5da:	3648      	adds	r6, #72	; 0x48
 800e5dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	d503      	bpl.n	800e5ec <__sfp+0x28>
 800e5e4:	6833      	ldr	r3, [r6, #0]
 800e5e6:	b30b      	cbz	r3, 800e62c <__sfp+0x68>
 800e5e8:	6836      	ldr	r6, [r6, #0]
 800e5ea:	e7f7      	b.n	800e5dc <__sfp+0x18>
 800e5ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5f0:	b9d5      	cbnz	r5, 800e628 <__sfp+0x64>
 800e5f2:	4b16      	ldr	r3, [pc, #88]	; (800e64c <__sfp+0x88>)
 800e5f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5f8:	60e3      	str	r3, [r4, #12]
 800e5fa:	6665      	str	r5, [r4, #100]	; 0x64
 800e5fc:	f000 f86c 	bl	800e6d8 <__retarget_lock_init_recursive>
 800e600:	f7ff ff96 	bl	800e530 <__sfp_lock_release>
 800e604:	2208      	movs	r2, #8
 800e606:	4629      	mov	r1, r5
 800e608:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e60c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e610:	6025      	str	r5, [r4, #0]
 800e612:	61a5      	str	r5, [r4, #24]
 800e614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e618:	f000 f86f 	bl	800e6fa <memset>
 800e61c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e624:	4620      	mov	r0, r4
 800e626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e628:	3468      	adds	r4, #104	; 0x68
 800e62a:	e7d9      	b.n	800e5e0 <__sfp+0x1c>
 800e62c:	2104      	movs	r1, #4
 800e62e:	4638      	mov	r0, r7
 800e630:	f7ff ff62 	bl	800e4f8 <__sfmoreglue>
 800e634:	4604      	mov	r4, r0
 800e636:	6030      	str	r0, [r6, #0]
 800e638:	2800      	cmp	r0, #0
 800e63a:	d1d5      	bne.n	800e5e8 <__sfp+0x24>
 800e63c:	f7ff ff78 	bl	800e530 <__sfp_lock_release>
 800e640:	230c      	movs	r3, #12
 800e642:	603b      	str	r3, [r7, #0]
 800e644:	e7ee      	b.n	800e624 <__sfp+0x60>
 800e646:	bf00      	nop
 800e648:	0800fb1c 	.word	0x0800fb1c
 800e64c:	ffff0001 	.word	0xffff0001

0800e650 <_fwalk_reent>:
 800e650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e654:	4606      	mov	r6, r0
 800e656:	4688      	mov	r8, r1
 800e658:	2700      	movs	r7, #0
 800e65a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e65e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e662:	f1b9 0901 	subs.w	r9, r9, #1
 800e666:	d505      	bpl.n	800e674 <_fwalk_reent+0x24>
 800e668:	6824      	ldr	r4, [r4, #0]
 800e66a:	2c00      	cmp	r4, #0
 800e66c:	d1f7      	bne.n	800e65e <_fwalk_reent+0xe>
 800e66e:	4638      	mov	r0, r7
 800e670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e674:	89ab      	ldrh	r3, [r5, #12]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d907      	bls.n	800e68a <_fwalk_reent+0x3a>
 800e67a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e67e:	3301      	adds	r3, #1
 800e680:	d003      	beq.n	800e68a <_fwalk_reent+0x3a>
 800e682:	4629      	mov	r1, r5
 800e684:	4630      	mov	r0, r6
 800e686:	47c0      	blx	r8
 800e688:	4307      	orrs	r7, r0
 800e68a:	3568      	adds	r5, #104	; 0x68
 800e68c:	e7e9      	b.n	800e662 <_fwalk_reent+0x12>
	...

0800e690 <__libc_init_array>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	2600      	movs	r6, #0
 800e694:	4d0c      	ldr	r5, [pc, #48]	; (800e6c8 <__libc_init_array+0x38>)
 800e696:	4c0d      	ldr	r4, [pc, #52]	; (800e6cc <__libc_init_array+0x3c>)
 800e698:	1b64      	subs	r4, r4, r5
 800e69a:	10a4      	asrs	r4, r4, #2
 800e69c:	42a6      	cmp	r6, r4
 800e69e:	d109      	bne.n	800e6b4 <__libc_init_array+0x24>
 800e6a0:	f000 ff3a 	bl	800f518 <_init>
 800e6a4:	2600      	movs	r6, #0
 800e6a6:	4d0a      	ldr	r5, [pc, #40]	; (800e6d0 <__libc_init_array+0x40>)
 800e6a8:	4c0a      	ldr	r4, [pc, #40]	; (800e6d4 <__libc_init_array+0x44>)
 800e6aa:	1b64      	subs	r4, r4, r5
 800e6ac:	10a4      	asrs	r4, r4, #2
 800e6ae:	42a6      	cmp	r6, r4
 800e6b0:	d105      	bne.n	800e6be <__libc_init_array+0x2e>
 800e6b2:	bd70      	pop	{r4, r5, r6, pc}
 800e6b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6b8:	4798      	blx	r3
 800e6ba:	3601      	adds	r6, #1
 800e6bc:	e7ee      	b.n	800e69c <__libc_init_array+0xc>
 800e6be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6c2:	4798      	blx	r3
 800e6c4:	3601      	adds	r6, #1
 800e6c6:	e7f2      	b.n	800e6ae <__libc_init_array+0x1e>
 800e6c8:	0800fb54 	.word	0x0800fb54
 800e6cc:	0800fb54 	.word	0x0800fb54
 800e6d0:	0800fb54 	.word	0x0800fb54
 800e6d4:	0800fb58 	.word	0x0800fb58

0800e6d8 <__retarget_lock_init_recursive>:
 800e6d8:	4770      	bx	lr

0800e6da <__retarget_lock_acquire_recursive>:
 800e6da:	4770      	bx	lr

0800e6dc <__retarget_lock_release_recursive>:
 800e6dc:	4770      	bx	lr

0800e6de <memcpy>:
 800e6de:	440a      	add	r2, r1
 800e6e0:	4291      	cmp	r1, r2
 800e6e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6e6:	d100      	bne.n	800e6ea <memcpy+0xc>
 800e6e8:	4770      	bx	lr
 800e6ea:	b510      	push	{r4, lr}
 800e6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6f0:	4291      	cmp	r1, r2
 800e6f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6f6:	d1f9      	bne.n	800e6ec <memcpy+0xe>
 800e6f8:	bd10      	pop	{r4, pc}

0800e6fa <memset>:
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	4402      	add	r2, r0
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d100      	bne.n	800e704 <memset+0xa>
 800e702:	4770      	bx	lr
 800e704:	f803 1b01 	strb.w	r1, [r3], #1
 800e708:	e7f9      	b.n	800e6fe <memset+0x4>
	...

0800e70c <sbrk_aligned>:
 800e70c:	b570      	push	{r4, r5, r6, lr}
 800e70e:	4e0e      	ldr	r6, [pc, #56]	; (800e748 <sbrk_aligned+0x3c>)
 800e710:	460c      	mov	r4, r1
 800e712:	6831      	ldr	r1, [r6, #0]
 800e714:	4605      	mov	r5, r0
 800e716:	b911      	cbnz	r1, 800e71e <sbrk_aligned+0x12>
 800e718:	f000 f90e 	bl	800e938 <_sbrk_r>
 800e71c:	6030      	str	r0, [r6, #0]
 800e71e:	4621      	mov	r1, r4
 800e720:	4628      	mov	r0, r5
 800e722:	f000 f909 	bl	800e938 <_sbrk_r>
 800e726:	1c43      	adds	r3, r0, #1
 800e728:	d00a      	beq.n	800e740 <sbrk_aligned+0x34>
 800e72a:	1cc4      	adds	r4, r0, #3
 800e72c:	f024 0403 	bic.w	r4, r4, #3
 800e730:	42a0      	cmp	r0, r4
 800e732:	d007      	beq.n	800e744 <sbrk_aligned+0x38>
 800e734:	1a21      	subs	r1, r4, r0
 800e736:	4628      	mov	r0, r5
 800e738:	f000 f8fe 	bl	800e938 <_sbrk_r>
 800e73c:	3001      	adds	r0, #1
 800e73e:	d101      	bne.n	800e744 <sbrk_aligned+0x38>
 800e740:	f04f 34ff 	mov.w	r4, #4294967295
 800e744:	4620      	mov	r0, r4
 800e746:	bd70      	pop	{r4, r5, r6, pc}
 800e748:	20002dc0 	.word	0x20002dc0

0800e74c <_malloc_r>:
 800e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	1ccd      	adds	r5, r1, #3
 800e752:	f025 0503 	bic.w	r5, r5, #3
 800e756:	3508      	adds	r5, #8
 800e758:	2d0c      	cmp	r5, #12
 800e75a:	bf38      	it	cc
 800e75c:	250c      	movcc	r5, #12
 800e75e:	2d00      	cmp	r5, #0
 800e760:	4607      	mov	r7, r0
 800e762:	db01      	blt.n	800e768 <_malloc_r+0x1c>
 800e764:	42a9      	cmp	r1, r5
 800e766:	d905      	bls.n	800e774 <_malloc_r+0x28>
 800e768:	230c      	movs	r3, #12
 800e76a:	2600      	movs	r6, #0
 800e76c:	603b      	str	r3, [r7, #0]
 800e76e:	4630      	mov	r0, r6
 800e770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e774:	4e2e      	ldr	r6, [pc, #184]	; (800e830 <_malloc_r+0xe4>)
 800e776:	f000 fa25 	bl	800ebc4 <__malloc_lock>
 800e77a:	6833      	ldr	r3, [r6, #0]
 800e77c:	461c      	mov	r4, r3
 800e77e:	bb34      	cbnz	r4, 800e7ce <_malloc_r+0x82>
 800e780:	4629      	mov	r1, r5
 800e782:	4638      	mov	r0, r7
 800e784:	f7ff ffc2 	bl	800e70c <sbrk_aligned>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	4604      	mov	r4, r0
 800e78c:	d14d      	bne.n	800e82a <_malloc_r+0xde>
 800e78e:	6834      	ldr	r4, [r6, #0]
 800e790:	4626      	mov	r6, r4
 800e792:	2e00      	cmp	r6, #0
 800e794:	d140      	bne.n	800e818 <_malloc_r+0xcc>
 800e796:	6823      	ldr	r3, [r4, #0]
 800e798:	4631      	mov	r1, r6
 800e79a:	4638      	mov	r0, r7
 800e79c:	eb04 0803 	add.w	r8, r4, r3
 800e7a0:	f000 f8ca 	bl	800e938 <_sbrk_r>
 800e7a4:	4580      	cmp	r8, r0
 800e7a6:	d13a      	bne.n	800e81e <_malloc_r+0xd2>
 800e7a8:	6821      	ldr	r1, [r4, #0]
 800e7aa:	3503      	adds	r5, #3
 800e7ac:	1a6d      	subs	r5, r5, r1
 800e7ae:	f025 0503 	bic.w	r5, r5, #3
 800e7b2:	3508      	adds	r5, #8
 800e7b4:	2d0c      	cmp	r5, #12
 800e7b6:	bf38      	it	cc
 800e7b8:	250c      	movcc	r5, #12
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	4629      	mov	r1, r5
 800e7be:	f7ff ffa5 	bl	800e70c <sbrk_aligned>
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	d02b      	beq.n	800e81e <_malloc_r+0xd2>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	442b      	add	r3, r5
 800e7ca:	6023      	str	r3, [r4, #0]
 800e7cc:	e00e      	b.n	800e7ec <_malloc_r+0xa0>
 800e7ce:	6822      	ldr	r2, [r4, #0]
 800e7d0:	1b52      	subs	r2, r2, r5
 800e7d2:	d41e      	bmi.n	800e812 <_malloc_r+0xc6>
 800e7d4:	2a0b      	cmp	r2, #11
 800e7d6:	d916      	bls.n	800e806 <_malloc_r+0xba>
 800e7d8:	1961      	adds	r1, r4, r5
 800e7da:	42a3      	cmp	r3, r4
 800e7dc:	6025      	str	r5, [r4, #0]
 800e7de:	bf18      	it	ne
 800e7e0:	6059      	strne	r1, [r3, #4]
 800e7e2:	6863      	ldr	r3, [r4, #4]
 800e7e4:	bf08      	it	eq
 800e7e6:	6031      	streq	r1, [r6, #0]
 800e7e8:	5162      	str	r2, [r4, r5]
 800e7ea:	604b      	str	r3, [r1, #4]
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	f104 060b 	add.w	r6, r4, #11
 800e7f2:	f000 f9ed 	bl	800ebd0 <__malloc_unlock>
 800e7f6:	f026 0607 	bic.w	r6, r6, #7
 800e7fa:	1d23      	adds	r3, r4, #4
 800e7fc:	1af2      	subs	r2, r6, r3
 800e7fe:	d0b6      	beq.n	800e76e <_malloc_r+0x22>
 800e800:	1b9b      	subs	r3, r3, r6
 800e802:	50a3      	str	r3, [r4, r2]
 800e804:	e7b3      	b.n	800e76e <_malloc_r+0x22>
 800e806:	6862      	ldr	r2, [r4, #4]
 800e808:	42a3      	cmp	r3, r4
 800e80a:	bf0c      	ite	eq
 800e80c:	6032      	streq	r2, [r6, #0]
 800e80e:	605a      	strne	r2, [r3, #4]
 800e810:	e7ec      	b.n	800e7ec <_malloc_r+0xa0>
 800e812:	4623      	mov	r3, r4
 800e814:	6864      	ldr	r4, [r4, #4]
 800e816:	e7b2      	b.n	800e77e <_malloc_r+0x32>
 800e818:	4634      	mov	r4, r6
 800e81a:	6876      	ldr	r6, [r6, #4]
 800e81c:	e7b9      	b.n	800e792 <_malloc_r+0x46>
 800e81e:	230c      	movs	r3, #12
 800e820:	4638      	mov	r0, r7
 800e822:	603b      	str	r3, [r7, #0]
 800e824:	f000 f9d4 	bl	800ebd0 <__malloc_unlock>
 800e828:	e7a1      	b.n	800e76e <_malloc_r+0x22>
 800e82a:	6025      	str	r5, [r4, #0]
 800e82c:	e7de      	b.n	800e7ec <_malloc_r+0xa0>
 800e82e:	bf00      	nop
 800e830:	20002dbc 	.word	0x20002dbc

0800e834 <iprintf>:
 800e834:	b40f      	push	{r0, r1, r2, r3}
 800e836:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <iprintf+0x2c>)
 800e838:	b513      	push	{r0, r1, r4, lr}
 800e83a:	681c      	ldr	r4, [r3, #0]
 800e83c:	b124      	cbz	r4, 800e848 <iprintf+0x14>
 800e83e:	69a3      	ldr	r3, [r4, #24]
 800e840:	b913      	cbnz	r3, 800e848 <iprintf+0x14>
 800e842:	4620      	mov	r0, r4
 800e844:	f7ff fe86 	bl	800e554 <__sinit>
 800e848:	ab05      	add	r3, sp, #20
 800e84a:	4620      	mov	r0, r4
 800e84c:	9a04      	ldr	r2, [sp, #16]
 800e84e:	68a1      	ldr	r1, [r4, #8]
 800e850:	9301      	str	r3, [sp, #4]
 800e852:	f000 fa33 	bl	800ecbc <_vfiprintf_r>
 800e856:	b002      	add	sp, #8
 800e858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e85c:	b004      	add	sp, #16
 800e85e:	4770      	bx	lr
 800e860:	20000384 	.word	0x20000384

0800e864 <cleanup_glue>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	460c      	mov	r4, r1
 800e868:	6809      	ldr	r1, [r1, #0]
 800e86a:	4605      	mov	r5, r0
 800e86c:	b109      	cbz	r1, 800e872 <cleanup_glue+0xe>
 800e86e:	f7ff fff9 	bl	800e864 <cleanup_glue>
 800e872:	4621      	mov	r1, r4
 800e874:	4628      	mov	r0, r5
 800e876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e87a:	f000 b9af 	b.w	800ebdc <_free_r>
	...

0800e880 <_reclaim_reent>:
 800e880:	4b2c      	ldr	r3, [pc, #176]	; (800e934 <_reclaim_reent+0xb4>)
 800e882:	b570      	push	{r4, r5, r6, lr}
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4604      	mov	r4, r0
 800e888:	4283      	cmp	r3, r0
 800e88a:	d051      	beq.n	800e930 <_reclaim_reent+0xb0>
 800e88c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e88e:	b143      	cbz	r3, 800e8a2 <_reclaim_reent+0x22>
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d14a      	bne.n	800e92c <_reclaim_reent+0xac>
 800e896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e898:	6819      	ldr	r1, [r3, #0]
 800e89a:	b111      	cbz	r1, 800e8a2 <_reclaim_reent+0x22>
 800e89c:	4620      	mov	r0, r4
 800e89e:	f000 f99d 	bl	800ebdc <_free_r>
 800e8a2:	6961      	ldr	r1, [r4, #20]
 800e8a4:	b111      	cbz	r1, 800e8ac <_reclaim_reent+0x2c>
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 f998 	bl	800ebdc <_free_r>
 800e8ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e8ae:	b111      	cbz	r1, 800e8b6 <_reclaim_reent+0x36>
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 f993 	bl	800ebdc <_free_r>
 800e8b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e8b8:	b111      	cbz	r1, 800e8c0 <_reclaim_reent+0x40>
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f000 f98e 	bl	800ebdc <_free_r>
 800e8c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e8c2:	b111      	cbz	r1, 800e8ca <_reclaim_reent+0x4a>
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f000 f989 	bl	800ebdc <_free_r>
 800e8ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e8cc:	b111      	cbz	r1, 800e8d4 <_reclaim_reent+0x54>
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f000 f984 	bl	800ebdc <_free_r>
 800e8d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e8d6:	b111      	cbz	r1, 800e8de <_reclaim_reent+0x5e>
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f000 f97f 	bl	800ebdc <_free_r>
 800e8de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e8e0:	b111      	cbz	r1, 800e8e8 <_reclaim_reent+0x68>
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f000 f97a 	bl	800ebdc <_free_r>
 800e8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8ea:	b111      	cbz	r1, 800e8f2 <_reclaim_reent+0x72>
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	f000 f975 	bl	800ebdc <_free_r>
 800e8f2:	69a3      	ldr	r3, [r4, #24]
 800e8f4:	b1e3      	cbz	r3, 800e930 <_reclaim_reent+0xb0>
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e8fa:	4798      	blx	r3
 800e8fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e8fe:	b1b9      	cbz	r1, 800e930 <_reclaim_reent+0xb0>
 800e900:	4620      	mov	r0, r4
 800e902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e906:	f7ff bfad 	b.w	800e864 <cleanup_glue>
 800e90a:	5949      	ldr	r1, [r1, r5]
 800e90c:	b941      	cbnz	r1, 800e920 <_reclaim_reent+0xa0>
 800e90e:	3504      	adds	r5, #4
 800e910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e912:	2d80      	cmp	r5, #128	; 0x80
 800e914:	68d9      	ldr	r1, [r3, #12]
 800e916:	d1f8      	bne.n	800e90a <_reclaim_reent+0x8a>
 800e918:	4620      	mov	r0, r4
 800e91a:	f000 f95f 	bl	800ebdc <_free_r>
 800e91e:	e7ba      	b.n	800e896 <_reclaim_reent+0x16>
 800e920:	680e      	ldr	r6, [r1, #0]
 800e922:	4620      	mov	r0, r4
 800e924:	f000 f95a 	bl	800ebdc <_free_r>
 800e928:	4631      	mov	r1, r6
 800e92a:	e7ef      	b.n	800e90c <_reclaim_reent+0x8c>
 800e92c:	2500      	movs	r5, #0
 800e92e:	e7ef      	b.n	800e910 <_reclaim_reent+0x90>
 800e930:	bd70      	pop	{r4, r5, r6, pc}
 800e932:	bf00      	nop
 800e934:	20000384 	.word	0x20000384

0800e938 <_sbrk_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	2300      	movs	r3, #0
 800e93c:	4d05      	ldr	r5, [pc, #20]	; (800e954 <_sbrk_r+0x1c>)
 800e93e:	4604      	mov	r4, r0
 800e940:	4608      	mov	r0, r1
 800e942:	602b      	str	r3, [r5, #0]
 800e944:	f7f2 fbde 	bl	8001104 <_sbrk>
 800e948:	1c43      	adds	r3, r0, #1
 800e94a:	d102      	bne.n	800e952 <_sbrk_r+0x1a>
 800e94c:	682b      	ldr	r3, [r5, #0]
 800e94e:	b103      	cbz	r3, 800e952 <_sbrk_r+0x1a>
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	bd38      	pop	{r3, r4, r5, pc}
 800e954:	20002dc4 	.word	0x20002dc4

0800e958 <__sread>:
 800e958:	b510      	push	{r4, lr}
 800e95a:	460c      	mov	r4, r1
 800e95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e960:	f000 fc72 	bl	800f248 <_read_r>
 800e964:	2800      	cmp	r0, #0
 800e966:	bfab      	itete	ge
 800e968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e96a:	89a3      	ldrhlt	r3, [r4, #12]
 800e96c:	181b      	addge	r3, r3, r0
 800e96e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e972:	bfac      	ite	ge
 800e974:	6563      	strge	r3, [r4, #84]	; 0x54
 800e976:	81a3      	strhlt	r3, [r4, #12]
 800e978:	bd10      	pop	{r4, pc}

0800e97a <__swrite>:
 800e97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e97e:	461f      	mov	r7, r3
 800e980:	898b      	ldrh	r3, [r1, #12]
 800e982:	4605      	mov	r5, r0
 800e984:	05db      	lsls	r3, r3, #23
 800e986:	460c      	mov	r4, r1
 800e988:	4616      	mov	r6, r2
 800e98a:	d505      	bpl.n	800e998 <__swrite+0x1e>
 800e98c:	2302      	movs	r3, #2
 800e98e:	2200      	movs	r2, #0
 800e990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e994:	f000 f904 	bl	800eba0 <_lseek_r>
 800e998:	89a3      	ldrh	r3, [r4, #12]
 800e99a:	4632      	mov	r2, r6
 800e99c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9a0:	81a3      	strh	r3, [r4, #12]
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	463b      	mov	r3, r7
 800e9a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ae:	f000 b817 	b.w	800e9e0 <_write_r>

0800e9b2 <__sseek>:
 800e9b2:	b510      	push	{r4, lr}
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9ba:	f000 f8f1 	bl	800eba0 <_lseek_r>
 800e9be:	1c43      	adds	r3, r0, #1
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	bf15      	itete	ne
 800e9c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9ce:	81a3      	strheq	r3, [r4, #12]
 800e9d0:	bf18      	it	ne
 800e9d2:	81a3      	strhne	r3, [r4, #12]
 800e9d4:	bd10      	pop	{r4, pc}

0800e9d6 <__sclose>:
 800e9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9da:	f000 b813 	b.w	800ea04 <_close_r>
	...

0800e9e0 <_write_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	4608      	mov	r0, r1
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	4d05      	ldr	r5, [pc, #20]	; (800ea00 <_write_r+0x20>)
 800e9ec:	602a      	str	r2, [r5, #0]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	f7f2 fb3b 	bl	800106a <_write>
 800e9f4:	1c43      	adds	r3, r0, #1
 800e9f6:	d102      	bne.n	800e9fe <_write_r+0x1e>
 800e9f8:	682b      	ldr	r3, [r5, #0]
 800e9fa:	b103      	cbz	r3, 800e9fe <_write_r+0x1e>
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ea00:	20002dc4 	.word	0x20002dc4

0800ea04 <_close_r>:
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	2300      	movs	r3, #0
 800ea08:	4d05      	ldr	r5, [pc, #20]	; (800ea20 <_close_r+0x1c>)
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	4608      	mov	r0, r1
 800ea0e:	602b      	str	r3, [r5, #0]
 800ea10:	f7f2 fb47 	bl	80010a2 <_close>
 800ea14:	1c43      	adds	r3, r0, #1
 800ea16:	d102      	bne.n	800ea1e <_close_r+0x1a>
 800ea18:	682b      	ldr	r3, [r5, #0]
 800ea1a:	b103      	cbz	r3, 800ea1e <_close_r+0x1a>
 800ea1c:	6023      	str	r3, [r4, #0]
 800ea1e:	bd38      	pop	{r3, r4, r5, pc}
 800ea20:	20002dc4 	.word	0x20002dc4

0800ea24 <__sflush_r>:
 800ea24:	898a      	ldrh	r2, [r1, #12]
 800ea26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea28:	4605      	mov	r5, r0
 800ea2a:	0710      	lsls	r0, r2, #28
 800ea2c:	460c      	mov	r4, r1
 800ea2e:	d457      	bmi.n	800eae0 <__sflush_r+0xbc>
 800ea30:	684b      	ldr	r3, [r1, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	dc04      	bgt.n	800ea40 <__sflush_r+0x1c>
 800ea36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	dc01      	bgt.n	800ea40 <__sflush_r+0x1c>
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea42:	2e00      	cmp	r6, #0
 800ea44:	d0fa      	beq.n	800ea3c <__sflush_r+0x18>
 800ea46:	2300      	movs	r3, #0
 800ea48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea4c:	682f      	ldr	r7, [r5, #0]
 800ea4e:	602b      	str	r3, [r5, #0]
 800ea50:	d032      	beq.n	800eab8 <__sflush_r+0x94>
 800ea52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	075a      	lsls	r2, r3, #29
 800ea58:	d505      	bpl.n	800ea66 <__sflush_r+0x42>
 800ea5a:	6863      	ldr	r3, [r4, #4]
 800ea5c:	1ac0      	subs	r0, r0, r3
 800ea5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea60:	b10b      	cbz	r3, 800ea66 <__sflush_r+0x42>
 800ea62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea64:	1ac0      	subs	r0, r0, r3
 800ea66:	2300      	movs	r3, #0
 800ea68:	4602      	mov	r2, r0
 800ea6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	6a21      	ldr	r1, [r4, #32]
 800ea70:	47b0      	blx	r6
 800ea72:	1c43      	adds	r3, r0, #1
 800ea74:	89a3      	ldrh	r3, [r4, #12]
 800ea76:	d106      	bne.n	800ea86 <__sflush_r+0x62>
 800ea78:	6829      	ldr	r1, [r5, #0]
 800ea7a:	291d      	cmp	r1, #29
 800ea7c:	d82c      	bhi.n	800ead8 <__sflush_r+0xb4>
 800ea7e:	4a29      	ldr	r2, [pc, #164]	; (800eb24 <__sflush_r+0x100>)
 800ea80:	40ca      	lsrs	r2, r1
 800ea82:	07d6      	lsls	r6, r2, #31
 800ea84:	d528      	bpl.n	800ead8 <__sflush_r+0xb4>
 800ea86:	2200      	movs	r2, #0
 800ea88:	6062      	str	r2, [r4, #4]
 800ea8a:	6922      	ldr	r2, [r4, #16]
 800ea8c:	04d9      	lsls	r1, r3, #19
 800ea8e:	6022      	str	r2, [r4, #0]
 800ea90:	d504      	bpl.n	800ea9c <__sflush_r+0x78>
 800ea92:	1c42      	adds	r2, r0, #1
 800ea94:	d101      	bne.n	800ea9a <__sflush_r+0x76>
 800ea96:	682b      	ldr	r3, [r5, #0]
 800ea98:	b903      	cbnz	r3, 800ea9c <__sflush_r+0x78>
 800ea9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ea9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea9e:	602f      	str	r7, [r5, #0]
 800eaa0:	2900      	cmp	r1, #0
 800eaa2:	d0cb      	beq.n	800ea3c <__sflush_r+0x18>
 800eaa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eaa8:	4299      	cmp	r1, r3
 800eaaa:	d002      	beq.n	800eab2 <__sflush_r+0x8e>
 800eaac:	4628      	mov	r0, r5
 800eaae:	f000 f895 	bl	800ebdc <_free_r>
 800eab2:	2000      	movs	r0, #0
 800eab4:	6360      	str	r0, [r4, #52]	; 0x34
 800eab6:	e7c2      	b.n	800ea3e <__sflush_r+0x1a>
 800eab8:	6a21      	ldr	r1, [r4, #32]
 800eaba:	2301      	movs	r3, #1
 800eabc:	4628      	mov	r0, r5
 800eabe:	47b0      	blx	r6
 800eac0:	1c41      	adds	r1, r0, #1
 800eac2:	d1c7      	bne.n	800ea54 <__sflush_r+0x30>
 800eac4:	682b      	ldr	r3, [r5, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d0c4      	beq.n	800ea54 <__sflush_r+0x30>
 800eaca:	2b1d      	cmp	r3, #29
 800eacc:	d001      	beq.n	800ead2 <__sflush_r+0xae>
 800eace:	2b16      	cmp	r3, #22
 800ead0:	d101      	bne.n	800ead6 <__sflush_r+0xb2>
 800ead2:	602f      	str	r7, [r5, #0]
 800ead4:	e7b2      	b.n	800ea3c <__sflush_r+0x18>
 800ead6:	89a3      	ldrh	r3, [r4, #12]
 800ead8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eadc:	81a3      	strh	r3, [r4, #12]
 800eade:	e7ae      	b.n	800ea3e <__sflush_r+0x1a>
 800eae0:	690f      	ldr	r7, [r1, #16]
 800eae2:	2f00      	cmp	r7, #0
 800eae4:	d0aa      	beq.n	800ea3c <__sflush_r+0x18>
 800eae6:	0793      	lsls	r3, r2, #30
 800eae8:	bf18      	it	ne
 800eaea:	2300      	movne	r3, #0
 800eaec:	680e      	ldr	r6, [r1, #0]
 800eaee:	bf08      	it	eq
 800eaf0:	694b      	ldreq	r3, [r1, #20]
 800eaf2:	1bf6      	subs	r6, r6, r7
 800eaf4:	600f      	str	r7, [r1, #0]
 800eaf6:	608b      	str	r3, [r1, #8]
 800eaf8:	2e00      	cmp	r6, #0
 800eafa:	dd9f      	ble.n	800ea3c <__sflush_r+0x18>
 800eafc:	4633      	mov	r3, r6
 800eafe:	463a      	mov	r2, r7
 800eb00:	4628      	mov	r0, r5
 800eb02:	6a21      	ldr	r1, [r4, #32]
 800eb04:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800eb08:	47e0      	blx	ip
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	dc06      	bgt.n	800eb1c <__sflush_r+0xf8>
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	f04f 30ff 	mov.w	r0, #4294967295
 800eb14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb18:	81a3      	strh	r3, [r4, #12]
 800eb1a:	e790      	b.n	800ea3e <__sflush_r+0x1a>
 800eb1c:	4407      	add	r7, r0
 800eb1e:	1a36      	subs	r6, r6, r0
 800eb20:	e7ea      	b.n	800eaf8 <__sflush_r+0xd4>
 800eb22:	bf00      	nop
 800eb24:	20400001 	.word	0x20400001

0800eb28 <_fflush_r>:
 800eb28:	b538      	push	{r3, r4, r5, lr}
 800eb2a:	690b      	ldr	r3, [r1, #16]
 800eb2c:	4605      	mov	r5, r0
 800eb2e:	460c      	mov	r4, r1
 800eb30:	b913      	cbnz	r3, 800eb38 <_fflush_r+0x10>
 800eb32:	2500      	movs	r5, #0
 800eb34:	4628      	mov	r0, r5
 800eb36:	bd38      	pop	{r3, r4, r5, pc}
 800eb38:	b118      	cbz	r0, 800eb42 <_fflush_r+0x1a>
 800eb3a:	6983      	ldr	r3, [r0, #24]
 800eb3c:	b90b      	cbnz	r3, 800eb42 <_fflush_r+0x1a>
 800eb3e:	f7ff fd09 	bl	800e554 <__sinit>
 800eb42:	4b14      	ldr	r3, [pc, #80]	; (800eb94 <_fflush_r+0x6c>)
 800eb44:	429c      	cmp	r4, r3
 800eb46:	d11b      	bne.n	800eb80 <_fflush_r+0x58>
 800eb48:	686c      	ldr	r4, [r5, #4]
 800eb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d0ef      	beq.n	800eb32 <_fflush_r+0xa>
 800eb52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb54:	07d0      	lsls	r0, r2, #31
 800eb56:	d404      	bmi.n	800eb62 <_fflush_r+0x3a>
 800eb58:	0599      	lsls	r1, r3, #22
 800eb5a:	d402      	bmi.n	800eb62 <_fflush_r+0x3a>
 800eb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb5e:	f7ff fdbc 	bl	800e6da <__retarget_lock_acquire_recursive>
 800eb62:	4628      	mov	r0, r5
 800eb64:	4621      	mov	r1, r4
 800eb66:	f7ff ff5d 	bl	800ea24 <__sflush_r>
 800eb6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	07da      	lsls	r2, r3, #31
 800eb70:	d4e0      	bmi.n	800eb34 <_fflush_r+0xc>
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	059b      	lsls	r3, r3, #22
 800eb76:	d4dd      	bmi.n	800eb34 <_fflush_r+0xc>
 800eb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb7a:	f7ff fdaf 	bl	800e6dc <__retarget_lock_release_recursive>
 800eb7e:	e7d9      	b.n	800eb34 <_fflush_r+0xc>
 800eb80:	4b05      	ldr	r3, [pc, #20]	; (800eb98 <_fflush_r+0x70>)
 800eb82:	429c      	cmp	r4, r3
 800eb84:	d101      	bne.n	800eb8a <_fflush_r+0x62>
 800eb86:	68ac      	ldr	r4, [r5, #8]
 800eb88:	e7df      	b.n	800eb4a <_fflush_r+0x22>
 800eb8a:	4b04      	ldr	r3, [pc, #16]	; (800eb9c <_fflush_r+0x74>)
 800eb8c:	429c      	cmp	r4, r3
 800eb8e:	bf08      	it	eq
 800eb90:	68ec      	ldreq	r4, [r5, #12]
 800eb92:	e7da      	b.n	800eb4a <_fflush_r+0x22>
 800eb94:	0800fadc 	.word	0x0800fadc
 800eb98:	0800fafc 	.word	0x0800fafc
 800eb9c:	0800fabc 	.word	0x0800fabc

0800eba0 <_lseek_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4604      	mov	r4, r0
 800eba4:	4608      	mov	r0, r1
 800eba6:	4611      	mov	r1, r2
 800eba8:	2200      	movs	r2, #0
 800ebaa:	4d05      	ldr	r5, [pc, #20]	; (800ebc0 <_lseek_r+0x20>)
 800ebac:	602a      	str	r2, [r5, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	f7f2 fa9b 	bl	80010ea <_lseek>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	d102      	bne.n	800ebbe <_lseek_r+0x1e>
 800ebb8:	682b      	ldr	r3, [r5, #0]
 800ebba:	b103      	cbz	r3, 800ebbe <_lseek_r+0x1e>
 800ebbc:	6023      	str	r3, [r4, #0]
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	20002dc4 	.word	0x20002dc4

0800ebc4 <__malloc_lock>:
 800ebc4:	4801      	ldr	r0, [pc, #4]	; (800ebcc <__malloc_lock+0x8>)
 800ebc6:	f7ff bd88 	b.w	800e6da <__retarget_lock_acquire_recursive>
 800ebca:	bf00      	nop
 800ebcc:	20002db8 	.word	0x20002db8

0800ebd0 <__malloc_unlock>:
 800ebd0:	4801      	ldr	r0, [pc, #4]	; (800ebd8 <__malloc_unlock+0x8>)
 800ebd2:	f7ff bd83 	b.w	800e6dc <__retarget_lock_release_recursive>
 800ebd6:	bf00      	nop
 800ebd8:	20002db8 	.word	0x20002db8

0800ebdc <_free_r>:
 800ebdc:	b538      	push	{r3, r4, r5, lr}
 800ebde:	4605      	mov	r5, r0
 800ebe0:	2900      	cmp	r1, #0
 800ebe2:	d040      	beq.n	800ec66 <_free_r+0x8a>
 800ebe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebe8:	1f0c      	subs	r4, r1, #4
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	bfb8      	it	lt
 800ebee:	18e4      	addlt	r4, r4, r3
 800ebf0:	f7ff ffe8 	bl	800ebc4 <__malloc_lock>
 800ebf4:	4a1c      	ldr	r2, [pc, #112]	; (800ec68 <_free_r+0x8c>)
 800ebf6:	6813      	ldr	r3, [r2, #0]
 800ebf8:	b933      	cbnz	r3, 800ec08 <_free_r+0x2c>
 800ebfa:	6063      	str	r3, [r4, #4]
 800ebfc:	6014      	str	r4, [r2, #0]
 800ebfe:	4628      	mov	r0, r5
 800ec00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec04:	f7ff bfe4 	b.w	800ebd0 <__malloc_unlock>
 800ec08:	42a3      	cmp	r3, r4
 800ec0a:	d908      	bls.n	800ec1e <_free_r+0x42>
 800ec0c:	6820      	ldr	r0, [r4, #0]
 800ec0e:	1821      	adds	r1, r4, r0
 800ec10:	428b      	cmp	r3, r1
 800ec12:	bf01      	itttt	eq
 800ec14:	6819      	ldreq	r1, [r3, #0]
 800ec16:	685b      	ldreq	r3, [r3, #4]
 800ec18:	1809      	addeq	r1, r1, r0
 800ec1a:	6021      	streq	r1, [r4, #0]
 800ec1c:	e7ed      	b.n	800ebfa <_free_r+0x1e>
 800ec1e:	461a      	mov	r2, r3
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	b10b      	cbz	r3, 800ec28 <_free_r+0x4c>
 800ec24:	42a3      	cmp	r3, r4
 800ec26:	d9fa      	bls.n	800ec1e <_free_r+0x42>
 800ec28:	6811      	ldr	r1, [r2, #0]
 800ec2a:	1850      	adds	r0, r2, r1
 800ec2c:	42a0      	cmp	r0, r4
 800ec2e:	d10b      	bne.n	800ec48 <_free_r+0x6c>
 800ec30:	6820      	ldr	r0, [r4, #0]
 800ec32:	4401      	add	r1, r0
 800ec34:	1850      	adds	r0, r2, r1
 800ec36:	4283      	cmp	r3, r0
 800ec38:	6011      	str	r1, [r2, #0]
 800ec3a:	d1e0      	bne.n	800ebfe <_free_r+0x22>
 800ec3c:	6818      	ldr	r0, [r3, #0]
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	4401      	add	r1, r0
 800ec42:	6011      	str	r1, [r2, #0]
 800ec44:	6053      	str	r3, [r2, #4]
 800ec46:	e7da      	b.n	800ebfe <_free_r+0x22>
 800ec48:	d902      	bls.n	800ec50 <_free_r+0x74>
 800ec4a:	230c      	movs	r3, #12
 800ec4c:	602b      	str	r3, [r5, #0]
 800ec4e:	e7d6      	b.n	800ebfe <_free_r+0x22>
 800ec50:	6820      	ldr	r0, [r4, #0]
 800ec52:	1821      	adds	r1, r4, r0
 800ec54:	428b      	cmp	r3, r1
 800ec56:	bf01      	itttt	eq
 800ec58:	6819      	ldreq	r1, [r3, #0]
 800ec5a:	685b      	ldreq	r3, [r3, #4]
 800ec5c:	1809      	addeq	r1, r1, r0
 800ec5e:	6021      	streq	r1, [r4, #0]
 800ec60:	6063      	str	r3, [r4, #4]
 800ec62:	6054      	str	r4, [r2, #4]
 800ec64:	e7cb      	b.n	800ebfe <_free_r+0x22>
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	20002dbc 	.word	0x20002dbc

0800ec6c <__sfputc_r>:
 800ec6c:	6893      	ldr	r3, [r2, #8]
 800ec6e:	b410      	push	{r4}
 800ec70:	3b01      	subs	r3, #1
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	6093      	str	r3, [r2, #8]
 800ec76:	da07      	bge.n	800ec88 <__sfputc_r+0x1c>
 800ec78:	6994      	ldr	r4, [r2, #24]
 800ec7a:	42a3      	cmp	r3, r4
 800ec7c:	db01      	blt.n	800ec82 <__sfputc_r+0x16>
 800ec7e:	290a      	cmp	r1, #10
 800ec80:	d102      	bne.n	800ec88 <__sfputc_r+0x1c>
 800ec82:	bc10      	pop	{r4}
 800ec84:	f000 baf2 	b.w	800f26c <__swbuf_r>
 800ec88:	6813      	ldr	r3, [r2, #0]
 800ec8a:	1c58      	adds	r0, r3, #1
 800ec8c:	6010      	str	r0, [r2, #0]
 800ec8e:	7019      	strb	r1, [r3, #0]
 800ec90:	4608      	mov	r0, r1
 800ec92:	bc10      	pop	{r4}
 800ec94:	4770      	bx	lr

0800ec96 <__sfputs_r>:
 800ec96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec98:	4606      	mov	r6, r0
 800ec9a:	460f      	mov	r7, r1
 800ec9c:	4614      	mov	r4, r2
 800ec9e:	18d5      	adds	r5, r2, r3
 800eca0:	42ac      	cmp	r4, r5
 800eca2:	d101      	bne.n	800eca8 <__sfputs_r+0x12>
 800eca4:	2000      	movs	r0, #0
 800eca6:	e007      	b.n	800ecb8 <__sfputs_r+0x22>
 800eca8:	463a      	mov	r2, r7
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb0:	f7ff ffdc 	bl	800ec6c <__sfputc_r>
 800ecb4:	1c43      	adds	r3, r0, #1
 800ecb6:	d1f3      	bne.n	800eca0 <__sfputs_r+0xa>
 800ecb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ecbc <_vfiprintf_r>:
 800ecbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc0:	460d      	mov	r5, r1
 800ecc2:	4614      	mov	r4, r2
 800ecc4:	4698      	mov	r8, r3
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	b09d      	sub	sp, #116	; 0x74
 800ecca:	b118      	cbz	r0, 800ecd4 <_vfiprintf_r+0x18>
 800eccc:	6983      	ldr	r3, [r0, #24]
 800ecce:	b90b      	cbnz	r3, 800ecd4 <_vfiprintf_r+0x18>
 800ecd0:	f7ff fc40 	bl	800e554 <__sinit>
 800ecd4:	4b89      	ldr	r3, [pc, #548]	; (800eefc <_vfiprintf_r+0x240>)
 800ecd6:	429d      	cmp	r5, r3
 800ecd8:	d11b      	bne.n	800ed12 <_vfiprintf_r+0x56>
 800ecda:	6875      	ldr	r5, [r6, #4]
 800ecdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecde:	07d9      	lsls	r1, r3, #31
 800ece0:	d405      	bmi.n	800ecee <_vfiprintf_r+0x32>
 800ece2:	89ab      	ldrh	r3, [r5, #12]
 800ece4:	059a      	lsls	r2, r3, #22
 800ece6:	d402      	bmi.n	800ecee <_vfiprintf_r+0x32>
 800ece8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecea:	f7ff fcf6 	bl	800e6da <__retarget_lock_acquire_recursive>
 800ecee:	89ab      	ldrh	r3, [r5, #12]
 800ecf0:	071b      	lsls	r3, r3, #28
 800ecf2:	d501      	bpl.n	800ecf8 <_vfiprintf_r+0x3c>
 800ecf4:	692b      	ldr	r3, [r5, #16]
 800ecf6:	b9eb      	cbnz	r3, 800ed34 <_vfiprintf_r+0x78>
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	f000 fb08 	bl	800f310 <__swsetup_r>
 800ed00:	b1c0      	cbz	r0, 800ed34 <_vfiprintf_r+0x78>
 800ed02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed04:	07dc      	lsls	r4, r3, #31
 800ed06:	d50e      	bpl.n	800ed26 <_vfiprintf_r+0x6a>
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0c:	b01d      	add	sp, #116	; 0x74
 800ed0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed12:	4b7b      	ldr	r3, [pc, #492]	; (800ef00 <_vfiprintf_r+0x244>)
 800ed14:	429d      	cmp	r5, r3
 800ed16:	d101      	bne.n	800ed1c <_vfiprintf_r+0x60>
 800ed18:	68b5      	ldr	r5, [r6, #8]
 800ed1a:	e7df      	b.n	800ecdc <_vfiprintf_r+0x20>
 800ed1c:	4b79      	ldr	r3, [pc, #484]	; (800ef04 <_vfiprintf_r+0x248>)
 800ed1e:	429d      	cmp	r5, r3
 800ed20:	bf08      	it	eq
 800ed22:	68f5      	ldreq	r5, [r6, #12]
 800ed24:	e7da      	b.n	800ecdc <_vfiprintf_r+0x20>
 800ed26:	89ab      	ldrh	r3, [r5, #12]
 800ed28:	0598      	lsls	r0, r3, #22
 800ed2a:	d4ed      	bmi.n	800ed08 <_vfiprintf_r+0x4c>
 800ed2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed2e:	f7ff fcd5 	bl	800e6dc <__retarget_lock_release_recursive>
 800ed32:	e7e9      	b.n	800ed08 <_vfiprintf_r+0x4c>
 800ed34:	2300      	movs	r3, #0
 800ed36:	9309      	str	r3, [sp, #36]	; 0x24
 800ed38:	2320      	movs	r3, #32
 800ed3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed3e:	2330      	movs	r3, #48	; 0x30
 800ed40:	f04f 0901 	mov.w	r9, #1
 800ed44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed48:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ef08 <_vfiprintf_r+0x24c>
 800ed4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed50:	4623      	mov	r3, r4
 800ed52:	469a      	mov	sl, r3
 800ed54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed58:	b10a      	cbz	r2, 800ed5e <_vfiprintf_r+0xa2>
 800ed5a:	2a25      	cmp	r2, #37	; 0x25
 800ed5c:	d1f9      	bne.n	800ed52 <_vfiprintf_r+0x96>
 800ed5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ed62:	d00b      	beq.n	800ed7c <_vfiprintf_r+0xc0>
 800ed64:	465b      	mov	r3, fp
 800ed66:	4622      	mov	r2, r4
 800ed68:	4629      	mov	r1, r5
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	f7ff ff93 	bl	800ec96 <__sfputs_r>
 800ed70:	3001      	adds	r0, #1
 800ed72:	f000 80aa 	beq.w	800eeca <_vfiprintf_r+0x20e>
 800ed76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed78:	445a      	add	r2, fp
 800ed7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ed7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	f000 80a2 	beq.w	800eeca <_vfiprintf_r+0x20e>
 800ed86:	2300      	movs	r3, #0
 800ed88:	f04f 32ff 	mov.w	r2, #4294967295
 800ed8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed90:	f10a 0a01 	add.w	sl, sl, #1
 800ed94:	9304      	str	r3, [sp, #16]
 800ed96:	9307      	str	r3, [sp, #28]
 800ed98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ed9e:	4654      	mov	r4, sl
 800eda0:	2205      	movs	r2, #5
 800eda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda6:	4858      	ldr	r0, [pc, #352]	; (800ef08 <_vfiprintf_r+0x24c>)
 800eda8:	f000 fb86 	bl	800f4b8 <memchr>
 800edac:	9a04      	ldr	r2, [sp, #16]
 800edae:	b9d8      	cbnz	r0, 800ede8 <_vfiprintf_r+0x12c>
 800edb0:	06d1      	lsls	r1, r2, #27
 800edb2:	bf44      	itt	mi
 800edb4:	2320      	movmi	r3, #32
 800edb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edba:	0713      	lsls	r3, r2, #28
 800edbc:	bf44      	itt	mi
 800edbe:	232b      	movmi	r3, #43	; 0x2b
 800edc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc4:	f89a 3000 	ldrb.w	r3, [sl]
 800edc8:	2b2a      	cmp	r3, #42	; 0x2a
 800edca:	d015      	beq.n	800edf8 <_vfiprintf_r+0x13c>
 800edcc:	4654      	mov	r4, sl
 800edce:	2000      	movs	r0, #0
 800edd0:	f04f 0c0a 	mov.w	ip, #10
 800edd4:	9a07      	ldr	r2, [sp, #28]
 800edd6:	4621      	mov	r1, r4
 800edd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eddc:	3b30      	subs	r3, #48	; 0x30
 800edde:	2b09      	cmp	r3, #9
 800ede0:	d94e      	bls.n	800ee80 <_vfiprintf_r+0x1c4>
 800ede2:	b1b0      	cbz	r0, 800ee12 <_vfiprintf_r+0x156>
 800ede4:	9207      	str	r2, [sp, #28]
 800ede6:	e014      	b.n	800ee12 <_vfiprintf_r+0x156>
 800ede8:	eba0 0308 	sub.w	r3, r0, r8
 800edec:	fa09 f303 	lsl.w	r3, r9, r3
 800edf0:	4313      	orrs	r3, r2
 800edf2:	46a2      	mov	sl, r4
 800edf4:	9304      	str	r3, [sp, #16]
 800edf6:	e7d2      	b.n	800ed9e <_vfiprintf_r+0xe2>
 800edf8:	9b03      	ldr	r3, [sp, #12]
 800edfa:	1d19      	adds	r1, r3, #4
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	9103      	str	r1, [sp, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	bfbb      	ittet	lt
 800ee04:	425b      	neglt	r3, r3
 800ee06:	f042 0202 	orrlt.w	r2, r2, #2
 800ee0a:	9307      	strge	r3, [sp, #28]
 800ee0c:	9307      	strlt	r3, [sp, #28]
 800ee0e:	bfb8      	it	lt
 800ee10:	9204      	strlt	r2, [sp, #16]
 800ee12:	7823      	ldrb	r3, [r4, #0]
 800ee14:	2b2e      	cmp	r3, #46	; 0x2e
 800ee16:	d10c      	bne.n	800ee32 <_vfiprintf_r+0x176>
 800ee18:	7863      	ldrb	r3, [r4, #1]
 800ee1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee1c:	d135      	bne.n	800ee8a <_vfiprintf_r+0x1ce>
 800ee1e:	9b03      	ldr	r3, [sp, #12]
 800ee20:	3402      	adds	r4, #2
 800ee22:	1d1a      	adds	r2, r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	9203      	str	r2, [sp, #12]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	bfb8      	it	lt
 800ee2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee30:	9305      	str	r3, [sp, #20]
 800ee32:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ef0c <_vfiprintf_r+0x250>
 800ee36:	2203      	movs	r2, #3
 800ee38:	4650      	mov	r0, sl
 800ee3a:	7821      	ldrb	r1, [r4, #0]
 800ee3c:	f000 fb3c 	bl	800f4b8 <memchr>
 800ee40:	b140      	cbz	r0, 800ee54 <_vfiprintf_r+0x198>
 800ee42:	2340      	movs	r3, #64	; 0x40
 800ee44:	eba0 000a 	sub.w	r0, r0, sl
 800ee48:	fa03 f000 	lsl.w	r0, r3, r0
 800ee4c:	9b04      	ldr	r3, [sp, #16]
 800ee4e:	3401      	adds	r4, #1
 800ee50:	4303      	orrs	r3, r0
 800ee52:	9304      	str	r3, [sp, #16]
 800ee54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee58:	2206      	movs	r2, #6
 800ee5a:	482d      	ldr	r0, [pc, #180]	; (800ef10 <_vfiprintf_r+0x254>)
 800ee5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee60:	f000 fb2a 	bl	800f4b8 <memchr>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d03f      	beq.n	800eee8 <_vfiprintf_r+0x22c>
 800ee68:	4b2a      	ldr	r3, [pc, #168]	; (800ef14 <_vfiprintf_r+0x258>)
 800ee6a:	bb1b      	cbnz	r3, 800eeb4 <_vfiprintf_r+0x1f8>
 800ee6c:	9b03      	ldr	r3, [sp, #12]
 800ee6e:	3307      	adds	r3, #7
 800ee70:	f023 0307 	bic.w	r3, r3, #7
 800ee74:	3308      	adds	r3, #8
 800ee76:	9303      	str	r3, [sp, #12]
 800ee78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7a:	443b      	add	r3, r7
 800ee7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee7e:	e767      	b.n	800ed50 <_vfiprintf_r+0x94>
 800ee80:	460c      	mov	r4, r1
 800ee82:	2001      	movs	r0, #1
 800ee84:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee88:	e7a5      	b.n	800edd6 <_vfiprintf_r+0x11a>
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	f04f 0c0a 	mov.w	ip, #10
 800ee90:	4619      	mov	r1, r3
 800ee92:	3401      	adds	r4, #1
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	4620      	mov	r0, r4
 800ee98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee9c:	3a30      	subs	r2, #48	; 0x30
 800ee9e:	2a09      	cmp	r2, #9
 800eea0:	d903      	bls.n	800eeaa <_vfiprintf_r+0x1ee>
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d0c5      	beq.n	800ee32 <_vfiprintf_r+0x176>
 800eea6:	9105      	str	r1, [sp, #20]
 800eea8:	e7c3      	b.n	800ee32 <_vfiprintf_r+0x176>
 800eeaa:	4604      	mov	r4, r0
 800eeac:	2301      	movs	r3, #1
 800eeae:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeb2:	e7f0      	b.n	800ee96 <_vfiprintf_r+0x1da>
 800eeb4:	ab03      	add	r3, sp, #12
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	462a      	mov	r2, r5
 800eeba:	4630      	mov	r0, r6
 800eebc:	4b16      	ldr	r3, [pc, #88]	; (800ef18 <_vfiprintf_r+0x25c>)
 800eebe:	a904      	add	r1, sp, #16
 800eec0:	f3af 8000 	nop.w
 800eec4:	4607      	mov	r7, r0
 800eec6:	1c78      	adds	r0, r7, #1
 800eec8:	d1d6      	bne.n	800ee78 <_vfiprintf_r+0x1bc>
 800eeca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eecc:	07d9      	lsls	r1, r3, #31
 800eece:	d405      	bmi.n	800eedc <_vfiprintf_r+0x220>
 800eed0:	89ab      	ldrh	r3, [r5, #12]
 800eed2:	059a      	lsls	r2, r3, #22
 800eed4:	d402      	bmi.n	800eedc <_vfiprintf_r+0x220>
 800eed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eed8:	f7ff fc00 	bl	800e6dc <__retarget_lock_release_recursive>
 800eedc:	89ab      	ldrh	r3, [r5, #12]
 800eede:	065b      	lsls	r3, r3, #25
 800eee0:	f53f af12 	bmi.w	800ed08 <_vfiprintf_r+0x4c>
 800eee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eee6:	e711      	b.n	800ed0c <_vfiprintf_r+0x50>
 800eee8:	ab03      	add	r3, sp, #12
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	462a      	mov	r2, r5
 800eeee:	4630      	mov	r0, r6
 800eef0:	4b09      	ldr	r3, [pc, #36]	; (800ef18 <_vfiprintf_r+0x25c>)
 800eef2:	a904      	add	r1, sp, #16
 800eef4:	f000 f882 	bl	800effc <_printf_i>
 800eef8:	e7e4      	b.n	800eec4 <_vfiprintf_r+0x208>
 800eefa:	bf00      	nop
 800eefc:	0800fadc 	.word	0x0800fadc
 800ef00:	0800fafc 	.word	0x0800fafc
 800ef04:	0800fabc 	.word	0x0800fabc
 800ef08:	0800fb20 	.word	0x0800fb20
 800ef0c:	0800fb26 	.word	0x0800fb26
 800ef10:	0800fb2a 	.word	0x0800fb2a
 800ef14:	00000000 	.word	0x00000000
 800ef18:	0800ec97 	.word	0x0800ec97

0800ef1c <_printf_common>:
 800ef1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef20:	4616      	mov	r6, r2
 800ef22:	4699      	mov	r9, r3
 800ef24:	688a      	ldr	r2, [r1, #8]
 800ef26:	690b      	ldr	r3, [r1, #16]
 800ef28:	4607      	mov	r7, r0
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	bfb8      	it	lt
 800ef2e:	4613      	movlt	r3, r2
 800ef30:	6033      	str	r3, [r6, #0]
 800ef32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef36:	460c      	mov	r4, r1
 800ef38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef3c:	b10a      	cbz	r2, 800ef42 <_printf_common+0x26>
 800ef3e:	3301      	adds	r3, #1
 800ef40:	6033      	str	r3, [r6, #0]
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	0699      	lsls	r1, r3, #26
 800ef46:	bf42      	ittt	mi
 800ef48:	6833      	ldrmi	r3, [r6, #0]
 800ef4a:	3302      	addmi	r3, #2
 800ef4c:	6033      	strmi	r3, [r6, #0]
 800ef4e:	6825      	ldr	r5, [r4, #0]
 800ef50:	f015 0506 	ands.w	r5, r5, #6
 800ef54:	d106      	bne.n	800ef64 <_printf_common+0x48>
 800ef56:	f104 0a19 	add.w	sl, r4, #25
 800ef5a:	68e3      	ldr	r3, [r4, #12]
 800ef5c:	6832      	ldr	r2, [r6, #0]
 800ef5e:	1a9b      	subs	r3, r3, r2
 800ef60:	42ab      	cmp	r3, r5
 800ef62:	dc28      	bgt.n	800efb6 <_printf_common+0x9a>
 800ef64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef68:	1e13      	subs	r3, r2, #0
 800ef6a:	6822      	ldr	r2, [r4, #0]
 800ef6c:	bf18      	it	ne
 800ef6e:	2301      	movne	r3, #1
 800ef70:	0692      	lsls	r2, r2, #26
 800ef72:	d42d      	bmi.n	800efd0 <_printf_common+0xb4>
 800ef74:	4649      	mov	r1, r9
 800ef76:	4638      	mov	r0, r7
 800ef78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef7c:	47c0      	blx	r8
 800ef7e:	3001      	adds	r0, #1
 800ef80:	d020      	beq.n	800efc4 <_printf_common+0xa8>
 800ef82:	6823      	ldr	r3, [r4, #0]
 800ef84:	68e5      	ldr	r5, [r4, #12]
 800ef86:	f003 0306 	and.w	r3, r3, #6
 800ef8a:	2b04      	cmp	r3, #4
 800ef8c:	bf18      	it	ne
 800ef8e:	2500      	movne	r5, #0
 800ef90:	6832      	ldr	r2, [r6, #0]
 800ef92:	f04f 0600 	mov.w	r6, #0
 800ef96:	68a3      	ldr	r3, [r4, #8]
 800ef98:	bf08      	it	eq
 800ef9a:	1aad      	subeq	r5, r5, r2
 800ef9c:	6922      	ldr	r2, [r4, #16]
 800ef9e:	bf08      	it	eq
 800efa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efa4:	4293      	cmp	r3, r2
 800efa6:	bfc4      	itt	gt
 800efa8:	1a9b      	subgt	r3, r3, r2
 800efaa:	18ed      	addgt	r5, r5, r3
 800efac:	341a      	adds	r4, #26
 800efae:	42b5      	cmp	r5, r6
 800efb0:	d11a      	bne.n	800efe8 <_printf_common+0xcc>
 800efb2:	2000      	movs	r0, #0
 800efb4:	e008      	b.n	800efc8 <_printf_common+0xac>
 800efb6:	2301      	movs	r3, #1
 800efb8:	4652      	mov	r2, sl
 800efba:	4649      	mov	r1, r9
 800efbc:	4638      	mov	r0, r7
 800efbe:	47c0      	blx	r8
 800efc0:	3001      	adds	r0, #1
 800efc2:	d103      	bne.n	800efcc <_printf_common+0xb0>
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295
 800efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efcc:	3501      	adds	r5, #1
 800efce:	e7c4      	b.n	800ef5a <_printf_common+0x3e>
 800efd0:	2030      	movs	r0, #48	; 0x30
 800efd2:	18e1      	adds	r1, r4, r3
 800efd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efd8:	1c5a      	adds	r2, r3, #1
 800efda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efde:	4422      	add	r2, r4
 800efe0:	3302      	adds	r3, #2
 800efe2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efe6:	e7c5      	b.n	800ef74 <_printf_common+0x58>
 800efe8:	2301      	movs	r3, #1
 800efea:	4622      	mov	r2, r4
 800efec:	4649      	mov	r1, r9
 800efee:	4638      	mov	r0, r7
 800eff0:	47c0      	blx	r8
 800eff2:	3001      	adds	r0, #1
 800eff4:	d0e6      	beq.n	800efc4 <_printf_common+0xa8>
 800eff6:	3601      	adds	r6, #1
 800eff8:	e7d9      	b.n	800efae <_printf_common+0x92>
	...

0800effc <_printf_i>:
 800effc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f000:	7e0f      	ldrb	r7, [r1, #24]
 800f002:	4691      	mov	r9, r2
 800f004:	2f78      	cmp	r7, #120	; 0x78
 800f006:	4680      	mov	r8, r0
 800f008:	460c      	mov	r4, r1
 800f00a:	469a      	mov	sl, r3
 800f00c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f00e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f012:	d807      	bhi.n	800f024 <_printf_i+0x28>
 800f014:	2f62      	cmp	r7, #98	; 0x62
 800f016:	d80a      	bhi.n	800f02e <_printf_i+0x32>
 800f018:	2f00      	cmp	r7, #0
 800f01a:	f000 80d9 	beq.w	800f1d0 <_printf_i+0x1d4>
 800f01e:	2f58      	cmp	r7, #88	; 0x58
 800f020:	f000 80a4 	beq.w	800f16c <_printf_i+0x170>
 800f024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f02c:	e03a      	b.n	800f0a4 <_printf_i+0xa8>
 800f02e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f032:	2b15      	cmp	r3, #21
 800f034:	d8f6      	bhi.n	800f024 <_printf_i+0x28>
 800f036:	a101      	add	r1, pc, #4	; (adr r1, 800f03c <_printf_i+0x40>)
 800f038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f03c:	0800f095 	.word	0x0800f095
 800f040:	0800f0a9 	.word	0x0800f0a9
 800f044:	0800f025 	.word	0x0800f025
 800f048:	0800f025 	.word	0x0800f025
 800f04c:	0800f025 	.word	0x0800f025
 800f050:	0800f025 	.word	0x0800f025
 800f054:	0800f0a9 	.word	0x0800f0a9
 800f058:	0800f025 	.word	0x0800f025
 800f05c:	0800f025 	.word	0x0800f025
 800f060:	0800f025 	.word	0x0800f025
 800f064:	0800f025 	.word	0x0800f025
 800f068:	0800f1b7 	.word	0x0800f1b7
 800f06c:	0800f0d9 	.word	0x0800f0d9
 800f070:	0800f199 	.word	0x0800f199
 800f074:	0800f025 	.word	0x0800f025
 800f078:	0800f025 	.word	0x0800f025
 800f07c:	0800f1d9 	.word	0x0800f1d9
 800f080:	0800f025 	.word	0x0800f025
 800f084:	0800f0d9 	.word	0x0800f0d9
 800f088:	0800f025 	.word	0x0800f025
 800f08c:	0800f025 	.word	0x0800f025
 800f090:	0800f1a1 	.word	0x0800f1a1
 800f094:	682b      	ldr	r3, [r5, #0]
 800f096:	1d1a      	adds	r2, r3, #4
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	602a      	str	r2, [r5, #0]
 800f09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e0a4      	b.n	800f1f2 <_printf_i+0x1f6>
 800f0a8:	6820      	ldr	r0, [r4, #0]
 800f0aa:	6829      	ldr	r1, [r5, #0]
 800f0ac:	0606      	lsls	r6, r0, #24
 800f0ae:	f101 0304 	add.w	r3, r1, #4
 800f0b2:	d50a      	bpl.n	800f0ca <_printf_i+0xce>
 800f0b4:	680e      	ldr	r6, [r1, #0]
 800f0b6:	602b      	str	r3, [r5, #0]
 800f0b8:	2e00      	cmp	r6, #0
 800f0ba:	da03      	bge.n	800f0c4 <_printf_i+0xc8>
 800f0bc:	232d      	movs	r3, #45	; 0x2d
 800f0be:	4276      	negs	r6, r6
 800f0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c4:	230a      	movs	r3, #10
 800f0c6:	485e      	ldr	r0, [pc, #376]	; (800f240 <_printf_i+0x244>)
 800f0c8:	e019      	b.n	800f0fe <_printf_i+0x102>
 800f0ca:	680e      	ldr	r6, [r1, #0]
 800f0cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0d0:	602b      	str	r3, [r5, #0]
 800f0d2:	bf18      	it	ne
 800f0d4:	b236      	sxthne	r6, r6
 800f0d6:	e7ef      	b.n	800f0b8 <_printf_i+0xbc>
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	6820      	ldr	r0, [r4, #0]
 800f0dc:	1d19      	adds	r1, r3, #4
 800f0de:	6029      	str	r1, [r5, #0]
 800f0e0:	0601      	lsls	r1, r0, #24
 800f0e2:	d501      	bpl.n	800f0e8 <_printf_i+0xec>
 800f0e4:	681e      	ldr	r6, [r3, #0]
 800f0e6:	e002      	b.n	800f0ee <_printf_i+0xf2>
 800f0e8:	0646      	lsls	r6, r0, #25
 800f0ea:	d5fb      	bpl.n	800f0e4 <_printf_i+0xe8>
 800f0ec:	881e      	ldrh	r6, [r3, #0]
 800f0ee:	2f6f      	cmp	r7, #111	; 0x6f
 800f0f0:	bf0c      	ite	eq
 800f0f2:	2308      	moveq	r3, #8
 800f0f4:	230a      	movne	r3, #10
 800f0f6:	4852      	ldr	r0, [pc, #328]	; (800f240 <_printf_i+0x244>)
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0fe:	6865      	ldr	r5, [r4, #4]
 800f100:	2d00      	cmp	r5, #0
 800f102:	bfa8      	it	ge
 800f104:	6821      	ldrge	r1, [r4, #0]
 800f106:	60a5      	str	r5, [r4, #8]
 800f108:	bfa4      	itt	ge
 800f10a:	f021 0104 	bicge.w	r1, r1, #4
 800f10e:	6021      	strge	r1, [r4, #0]
 800f110:	b90e      	cbnz	r6, 800f116 <_printf_i+0x11a>
 800f112:	2d00      	cmp	r5, #0
 800f114:	d04d      	beq.n	800f1b2 <_printf_i+0x1b6>
 800f116:	4615      	mov	r5, r2
 800f118:	fbb6 f1f3 	udiv	r1, r6, r3
 800f11c:	fb03 6711 	mls	r7, r3, r1, r6
 800f120:	5dc7      	ldrb	r7, [r0, r7]
 800f122:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f126:	4637      	mov	r7, r6
 800f128:	42bb      	cmp	r3, r7
 800f12a:	460e      	mov	r6, r1
 800f12c:	d9f4      	bls.n	800f118 <_printf_i+0x11c>
 800f12e:	2b08      	cmp	r3, #8
 800f130:	d10b      	bne.n	800f14a <_printf_i+0x14e>
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	07de      	lsls	r6, r3, #31
 800f136:	d508      	bpl.n	800f14a <_printf_i+0x14e>
 800f138:	6923      	ldr	r3, [r4, #16]
 800f13a:	6861      	ldr	r1, [r4, #4]
 800f13c:	4299      	cmp	r1, r3
 800f13e:	bfde      	ittt	le
 800f140:	2330      	movle	r3, #48	; 0x30
 800f142:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f146:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f14a:	1b52      	subs	r2, r2, r5
 800f14c:	6122      	str	r2, [r4, #16]
 800f14e:	464b      	mov	r3, r9
 800f150:	4621      	mov	r1, r4
 800f152:	4640      	mov	r0, r8
 800f154:	f8cd a000 	str.w	sl, [sp]
 800f158:	aa03      	add	r2, sp, #12
 800f15a:	f7ff fedf 	bl	800ef1c <_printf_common>
 800f15e:	3001      	adds	r0, #1
 800f160:	d14c      	bne.n	800f1fc <_printf_i+0x200>
 800f162:	f04f 30ff 	mov.w	r0, #4294967295
 800f166:	b004      	add	sp, #16
 800f168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f16c:	4834      	ldr	r0, [pc, #208]	; (800f240 <_printf_i+0x244>)
 800f16e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f172:	6829      	ldr	r1, [r5, #0]
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	f851 6b04 	ldr.w	r6, [r1], #4
 800f17a:	6029      	str	r1, [r5, #0]
 800f17c:	061d      	lsls	r5, r3, #24
 800f17e:	d514      	bpl.n	800f1aa <_printf_i+0x1ae>
 800f180:	07df      	lsls	r7, r3, #31
 800f182:	bf44      	itt	mi
 800f184:	f043 0320 	orrmi.w	r3, r3, #32
 800f188:	6023      	strmi	r3, [r4, #0]
 800f18a:	b91e      	cbnz	r6, 800f194 <_printf_i+0x198>
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	f023 0320 	bic.w	r3, r3, #32
 800f192:	6023      	str	r3, [r4, #0]
 800f194:	2310      	movs	r3, #16
 800f196:	e7af      	b.n	800f0f8 <_printf_i+0xfc>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	f043 0320 	orr.w	r3, r3, #32
 800f19e:	6023      	str	r3, [r4, #0]
 800f1a0:	2378      	movs	r3, #120	; 0x78
 800f1a2:	4828      	ldr	r0, [pc, #160]	; (800f244 <_printf_i+0x248>)
 800f1a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1a8:	e7e3      	b.n	800f172 <_printf_i+0x176>
 800f1aa:	0659      	lsls	r1, r3, #25
 800f1ac:	bf48      	it	mi
 800f1ae:	b2b6      	uxthmi	r6, r6
 800f1b0:	e7e6      	b.n	800f180 <_printf_i+0x184>
 800f1b2:	4615      	mov	r5, r2
 800f1b4:	e7bb      	b.n	800f12e <_printf_i+0x132>
 800f1b6:	682b      	ldr	r3, [r5, #0]
 800f1b8:	6826      	ldr	r6, [r4, #0]
 800f1ba:	1d18      	adds	r0, r3, #4
 800f1bc:	6961      	ldr	r1, [r4, #20]
 800f1be:	6028      	str	r0, [r5, #0]
 800f1c0:	0635      	lsls	r5, r6, #24
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	d501      	bpl.n	800f1ca <_printf_i+0x1ce>
 800f1c6:	6019      	str	r1, [r3, #0]
 800f1c8:	e002      	b.n	800f1d0 <_printf_i+0x1d4>
 800f1ca:	0670      	lsls	r0, r6, #25
 800f1cc:	d5fb      	bpl.n	800f1c6 <_printf_i+0x1ca>
 800f1ce:	8019      	strh	r1, [r3, #0]
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	4615      	mov	r5, r2
 800f1d4:	6123      	str	r3, [r4, #16]
 800f1d6:	e7ba      	b.n	800f14e <_printf_i+0x152>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	2100      	movs	r1, #0
 800f1dc:	1d1a      	adds	r2, r3, #4
 800f1de:	602a      	str	r2, [r5, #0]
 800f1e0:	681d      	ldr	r5, [r3, #0]
 800f1e2:	6862      	ldr	r2, [r4, #4]
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	f000 f967 	bl	800f4b8 <memchr>
 800f1ea:	b108      	cbz	r0, 800f1f0 <_printf_i+0x1f4>
 800f1ec:	1b40      	subs	r0, r0, r5
 800f1ee:	6060      	str	r0, [r4, #4]
 800f1f0:	6863      	ldr	r3, [r4, #4]
 800f1f2:	6123      	str	r3, [r4, #16]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1fa:	e7a8      	b.n	800f14e <_printf_i+0x152>
 800f1fc:	462a      	mov	r2, r5
 800f1fe:	4649      	mov	r1, r9
 800f200:	4640      	mov	r0, r8
 800f202:	6923      	ldr	r3, [r4, #16]
 800f204:	47d0      	blx	sl
 800f206:	3001      	adds	r0, #1
 800f208:	d0ab      	beq.n	800f162 <_printf_i+0x166>
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	079b      	lsls	r3, r3, #30
 800f20e:	d413      	bmi.n	800f238 <_printf_i+0x23c>
 800f210:	68e0      	ldr	r0, [r4, #12]
 800f212:	9b03      	ldr	r3, [sp, #12]
 800f214:	4298      	cmp	r0, r3
 800f216:	bfb8      	it	lt
 800f218:	4618      	movlt	r0, r3
 800f21a:	e7a4      	b.n	800f166 <_printf_i+0x16a>
 800f21c:	2301      	movs	r3, #1
 800f21e:	4632      	mov	r2, r6
 800f220:	4649      	mov	r1, r9
 800f222:	4640      	mov	r0, r8
 800f224:	47d0      	blx	sl
 800f226:	3001      	adds	r0, #1
 800f228:	d09b      	beq.n	800f162 <_printf_i+0x166>
 800f22a:	3501      	adds	r5, #1
 800f22c:	68e3      	ldr	r3, [r4, #12]
 800f22e:	9903      	ldr	r1, [sp, #12]
 800f230:	1a5b      	subs	r3, r3, r1
 800f232:	42ab      	cmp	r3, r5
 800f234:	dcf2      	bgt.n	800f21c <_printf_i+0x220>
 800f236:	e7eb      	b.n	800f210 <_printf_i+0x214>
 800f238:	2500      	movs	r5, #0
 800f23a:	f104 0619 	add.w	r6, r4, #25
 800f23e:	e7f5      	b.n	800f22c <_printf_i+0x230>
 800f240:	0800fb31 	.word	0x0800fb31
 800f244:	0800fb42 	.word	0x0800fb42

0800f248 <_read_r>:
 800f248:	b538      	push	{r3, r4, r5, lr}
 800f24a:	4604      	mov	r4, r0
 800f24c:	4608      	mov	r0, r1
 800f24e:	4611      	mov	r1, r2
 800f250:	2200      	movs	r2, #0
 800f252:	4d05      	ldr	r5, [pc, #20]	; (800f268 <_read_r+0x20>)
 800f254:	602a      	str	r2, [r5, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	f7f1 feea 	bl	8001030 <_read>
 800f25c:	1c43      	adds	r3, r0, #1
 800f25e:	d102      	bne.n	800f266 <_read_r+0x1e>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	b103      	cbz	r3, 800f266 <_read_r+0x1e>
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	20002dc4 	.word	0x20002dc4

0800f26c <__swbuf_r>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	460e      	mov	r6, r1
 800f270:	4614      	mov	r4, r2
 800f272:	4605      	mov	r5, r0
 800f274:	b118      	cbz	r0, 800f27e <__swbuf_r+0x12>
 800f276:	6983      	ldr	r3, [r0, #24]
 800f278:	b90b      	cbnz	r3, 800f27e <__swbuf_r+0x12>
 800f27a:	f7ff f96b 	bl	800e554 <__sinit>
 800f27e:	4b21      	ldr	r3, [pc, #132]	; (800f304 <__swbuf_r+0x98>)
 800f280:	429c      	cmp	r4, r3
 800f282:	d12b      	bne.n	800f2dc <__swbuf_r+0x70>
 800f284:	686c      	ldr	r4, [r5, #4]
 800f286:	69a3      	ldr	r3, [r4, #24]
 800f288:	60a3      	str	r3, [r4, #8]
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	071a      	lsls	r2, r3, #28
 800f28e:	d52f      	bpl.n	800f2f0 <__swbuf_r+0x84>
 800f290:	6923      	ldr	r3, [r4, #16]
 800f292:	b36b      	cbz	r3, 800f2f0 <__swbuf_r+0x84>
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	6820      	ldr	r0, [r4, #0]
 800f298:	b2f6      	uxtb	r6, r6
 800f29a:	1ac0      	subs	r0, r0, r3
 800f29c:	6963      	ldr	r3, [r4, #20]
 800f29e:	4637      	mov	r7, r6
 800f2a0:	4283      	cmp	r3, r0
 800f2a2:	dc04      	bgt.n	800f2ae <__swbuf_r+0x42>
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	f7ff fc3e 	bl	800eb28 <_fflush_r>
 800f2ac:	bb30      	cbnz	r0, 800f2fc <__swbuf_r+0x90>
 800f2ae:	68a3      	ldr	r3, [r4, #8]
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	60a3      	str	r3, [r4, #8]
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	1c5a      	adds	r2, r3, #1
 800f2ba:	6022      	str	r2, [r4, #0]
 800f2bc:	701e      	strb	r6, [r3, #0]
 800f2be:	6963      	ldr	r3, [r4, #20]
 800f2c0:	4283      	cmp	r3, r0
 800f2c2:	d004      	beq.n	800f2ce <__swbuf_r+0x62>
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	07db      	lsls	r3, r3, #31
 800f2c8:	d506      	bpl.n	800f2d8 <__swbuf_r+0x6c>
 800f2ca:	2e0a      	cmp	r6, #10
 800f2cc:	d104      	bne.n	800f2d8 <__swbuf_r+0x6c>
 800f2ce:	4621      	mov	r1, r4
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f7ff fc29 	bl	800eb28 <_fflush_r>
 800f2d6:	b988      	cbnz	r0, 800f2fc <__swbuf_r+0x90>
 800f2d8:	4638      	mov	r0, r7
 800f2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2dc:	4b0a      	ldr	r3, [pc, #40]	; (800f308 <__swbuf_r+0x9c>)
 800f2de:	429c      	cmp	r4, r3
 800f2e0:	d101      	bne.n	800f2e6 <__swbuf_r+0x7a>
 800f2e2:	68ac      	ldr	r4, [r5, #8]
 800f2e4:	e7cf      	b.n	800f286 <__swbuf_r+0x1a>
 800f2e6:	4b09      	ldr	r3, [pc, #36]	; (800f30c <__swbuf_r+0xa0>)
 800f2e8:	429c      	cmp	r4, r3
 800f2ea:	bf08      	it	eq
 800f2ec:	68ec      	ldreq	r4, [r5, #12]
 800f2ee:	e7ca      	b.n	800f286 <__swbuf_r+0x1a>
 800f2f0:	4621      	mov	r1, r4
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	f000 f80c 	bl	800f310 <__swsetup_r>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d0cb      	beq.n	800f294 <__swbuf_r+0x28>
 800f2fc:	f04f 37ff 	mov.w	r7, #4294967295
 800f300:	e7ea      	b.n	800f2d8 <__swbuf_r+0x6c>
 800f302:	bf00      	nop
 800f304:	0800fadc 	.word	0x0800fadc
 800f308:	0800fafc 	.word	0x0800fafc
 800f30c:	0800fabc 	.word	0x0800fabc

0800f310 <__swsetup_r>:
 800f310:	4b32      	ldr	r3, [pc, #200]	; (800f3dc <__swsetup_r+0xcc>)
 800f312:	b570      	push	{r4, r5, r6, lr}
 800f314:	681d      	ldr	r5, [r3, #0]
 800f316:	4606      	mov	r6, r0
 800f318:	460c      	mov	r4, r1
 800f31a:	b125      	cbz	r5, 800f326 <__swsetup_r+0x16>
 800f31c:	69ab      	ldr	r3, [r5, #24]
 800f31e:	b913      	cbnz	r3, 800f326 <__swsetup_r+0x16>
 800f320:	4628      	mov	r0, r5
 800f322:	f7ff f917 	bl	800e554 <__sinit>
 800f326:	4b2e      	ldr	r3, [pc, #184]	; (800f3e0 <__swsetup_r+0xd0>)
 800f328:	429c      	cmp	r4, r3
 800f32a:	d10f      	bne.n	800f34c <__swsetup_r+0x3c>
 800f32c:	686c      	ldr	r4, [r5, #4]
 800f32e:	89a3      	ldrh	r3, [r4, #12]
 800f330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f334:	0719      	lsls	r1, r3, #28
 800f336:	d42c      	bmi.n	800f392 <__swsetup_r+0x82>
 800f338:	06dd      	lsls	r5, r3, #27
 800f33a:	d411      	bmi.n	800f360 <__swsetup_r+0x50>
 800f33c:	2309      	movs	r3, #9
 800f33e:	6033      	str	r3, [r6, #0]
 800f340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f344:	f04f 30ff 	mov.w	r0, #4294967295
 800f348:	81a3      	strh	r3, [r4, #12]
 800f34a:	e03e      	b.n	800f3ca <__swsetup_r+0xba>
 800f34c:	4b25      	ldr	r3, [pc, #148]	; (800f3e4 <__swsetup_r+0xd4>)
 800f34e:	429c      	cmp	r4, r3
 800f350:	d101      	bne.n	800f356 <__swsetup_r+0x46>
 800f352:	68ac      	ldr	r4, [r5, #8]
 800f354:	e7eb      	b.n	800f32e <__swsetup_r+0x1e>
 800f356:	4b24      	ldr	r3, [pc, #144]	; (800f3e8 <__swsetup_r+0xd8>)
 800f358:	429c      	cmp	r4, r3
 800f35a:	bf08      	it	eq
 800f35c:	68ec      	ldreq	r4, [r5, #12]
 800f35e:	e7e6      	b.n	800f32e <__swsetup_r+0x1e>
 800f360:	0758      	lsls	r0, r3, #29
 800f362:	d512      	bpl.n	800f38a <__swsetup_r+0x7a>
 800f364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f366:	b141      	cbz	r1, 800f37a <__swsetup_r+0x6a>
 800f368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f36c:	4299      	cmp	r1, r3
 800f36e:	d002      	beq.n	800f376 <__swsetup_r+0x66>
 800f370:	4630      	mov	r0, r6
 800f372:	f7ff fc33 	bl	800ebdc <_free_r>
 800f376:	2300      	movs	r3, #0
 800f378:	6363      	str	r3, [r4, #52]	; 0x34
 800f37a:	89a3      	ldrh	r3, [r4, #12]
 800f37c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f380:	81a3      	strh	r3, [r4, #12]
 800f382:	2300      	movs	r3, #0
 800f384:	6063      	str	r3, [r4, #4]
 800f386:	6923      	ldr	r3, [r4, #16]
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	89a3      	ldrh	r3, [r4, #12]
 800f38c:	f043 0308 	orr.w	r3, r3, #8
 800f390:	81a3      	strh	r3, [r4, #12]
 800f392:	6923      	ldr	r3, [r4, #16]
 800f394:	b94b      	cbnz	r3, 800f3aa <__swsetup_r+0x9a>
 800f396:	89a3      	ldrh	r3, [r4, #12]
 800f398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3a0:	d003      	beq.n	800f3aa <__swsetup_r+0x9a>
 800f3a2:	4621      	mov	r1, r4
 800f3a4:	4630      	mov	r0, r6
 800f3a6:	f000 f847 	bl	800f438 <__smakebuf_r>
 800f3aa:	89a0      	ldrh	r0, [r4, #12]
 800f3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3b0:	f010 0301 	ands.w	r3, r0, #1
 800f3b4:	d00a      	beq.n	800f3cc <__swsetup_r+0xbc>
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	60a3      	str	r3, [r4, #8]
 800f3ba:	6963      	ldr	r3, [r4, #20]
 800f3bc:	425b      	negs	r3, r3
 800f3be:	61a3      	str	r3, [r4, #24]
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	b943      	cbnz	r3, 800f3d6 <__swsetup_r+0xc6>
 800f3c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f3c8:	d1ba      	bne.n	800f340 <__swsetup_r+0x30>
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	0781      	lsls	r1, r0, #30
 800f3ce:	bf58      	it	pl
 800f3d0:	6963      	ldrpl	r3, [r4, #20]
 800f3d2:	60a3      	str	r3, [r4, #8]
 800f3d4:	e7f4      	b.n	800f3c0 <__swsetup_r+0xb0>
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	e7f7      	b.n	800f3ca <__swsetup_r+0xba>
 800f3da:	bf00      	nop
 800f3dc:	20000384 	.word	0x20000384
 800f3e0:	0800fadc 	.word	0x0800fadc
 800f3e4:	0800fafc 	.word	0x0800fafc
 800f3e8:	0800fabc 	.word	0x0800fabc

0800f3ec <__swhatbuf_r>:
 800f3ec:	b570      	push	{r4, r5, r6, lr}
 800f3ee:	460e      	mov	r6, r1
 800f3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3f4:	4614      	mov	r4, r2
 800f3f6:	2900      	cmp	r1, #0
 800f3f8:	461d      	mov	r5, r3
 800f3fa:	b096      	sub	sp, #88	; 0x58
 800f3fc:	da08      	bge.n	800f410 <__swhatbuf_r+0x24>
 800f3fe:	2200      	movs	r2, #0
 800f400:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f404:	602a      	str	r2, [r5, #0]
 800f406:	061a      	lsls	r2, r3, #24
 800f408:	d410      	bmi.n	800f42c <__swhatbuf_r+0x40>
 800f40a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f40e:	e00e      	b.n	800f42e <__swhatbuf_r+0x42>
 800f410:	466a      	mov	r2, sp
 800f412:	f000 f85f 	bl	800f4d4 <_fstat_r>
 800f416:	2800      	cmp	r0, #0
 800f418:	dbf1      	blt.n	800f3fe <__swhatbuf_r+0x12>
 800f41a:	9a01      	ldr	r2, [sp, #4]
 800f41c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f420:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f424:	425a      	negs	r2, r3
 800f426:	415a      	adcs	r2, r3
 800f428:	602a      	str	r2, [r5, #0]
 800f42a:	e7ee      	b.n	800f40a <__swhatbuf_r+0x1e>
 800f42c:	2340      	movs	r3, #64	; 0x40
 800f42e:	2000      	movs	r0, #0
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	b016      	add	sp, #88	; 0x58
 800f434:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f438 <__smakebuf_r>:
 800f438:	898b      	ldrh	r3, [r1, #12]
 800f43a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f43c:	079d      	lsls	r5, r3, #30
 800f43e:	4606      	mov	r6, r0
 800f440:	460c      	mov	r4, r1
 800f442:	d507      	bpl.n	800f454 <__smakebuf_r+0x1c>
 800f444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f448:	6023      	str	r3, [r4, #0]
 800f44a:	6123      	str	r3, [r4, #16]
 800f44c:	2301      	movs	r3, #1
 800f44e:	6163      	str	r3, [r4, #20]
 800f450:	b002      	add	sp, #8
 800f452:	bd70      	pop	{r4, r5, r6, pc}
 800f454:	466a      	mov	r2, sp
 800f456:	ab01      	add	r3, sp, #4
 800f458:	f7ff ffc8 	bl	800f3ec <__swhatbuf_r>
 800f45c:	9900      	ldr	r1, [sp, #0]
 800f45e:	4605      	mov	r5, r0
 800f460:	4630      	mov	r0, r6
 800f462:	f7ff f973 	bl	800e74c <_malloc_r>
 800f466:	b948      	cbnz	r0, 800f47c <__smakebuf_r+0x44>
 800f468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f46c:	059a      	lsls	r2, r3, #22
 800f46e:	d4ef      	bmi.n	800f450 <__smakebuf_r+0x18>
 800f470:	f023 0303 	bic.w	r3, r3, #3
 800f474:	f043 0302 	orr.w	r3, r3, #2
 800f478:	81a3      	strh	r3, [r4, #12]
 800f47a:	e7e3      	b.n	800f444 <__smakebuf_r+0xc>
 800f47c:	4b0d      	ldr	r3, [pc, #52]	; (800f4b4 <__smakebuf_r+0x7c>)
 800f47e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f480:	89a3      	ldrh	r3, [r4, #12]
 800f482:	6020      	str	r0, [r4, #0]
 800f484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f488:	81a3      	strh	r3, [r4, #12]
 800f48a:	9b00      	ldr	r3, [sp, #0]
 800f48c:	6120      	str	r0, [r4, #16]
 800f48e:	6163      	str	r3, [r4, #20]
 800f490:	9b01      	ldr	r3, [sp, #4]
 800f492:	b15b      	cbz	r3, 800f4ac <__smakebuf_r+0x74>
 800f494:	4630      	mov	r0, r6
 800f496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f49a:	f000 f82d 	bl	800f4f8 <_isatty_r>
 800f49e:	b128      	cbz	r0, 800f4ac <__smakebuf_r+0x74>
 800f4a0:	89a3      	ldrh	r3, [r4, #12]
 800f4a2:	f023 0303 	bic.w	r3, r3, #3
 800f4a6:	f043 0301 	orr.w	r3, r3, #1
 800f4aa:	81a3      	strh	r3, [r4, #12]
 800f4ac:	89a0      	ldrh	r0, [r4, #12]
 800f4ae:	4305      	orrs	r5, r0
 800f4b0:	81a5      	strh	r5, [r4, #12]
 800f4b2:	e7cd      	b.n	800f450 <__smakebuf_r+0x18>
 800f4b4:	0800e4ed 	.word	0x0800e4ed

0800f4b8 <memchr>:
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	b510      	push	{r4, lr}
 800f4bc:	b2c9      	uxtb	r1, r1
 800f4be:	4402      	add	r2, r0
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	d101      	bne.n	800f4ca <memchr+0x12>
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	e003      	b.n	800f4d2 <memchr+0x1a>
 800f4ca:	7804      	ldrb	r4, [r0, #0]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	428c      	cmp	r4, r1
 800f4d0:	d1f6      	bne.n	800f4c0 <memchr+0x8>
 800f4d2:	bd10      	pop	{r4, pc}

0800f4d4 <_fstat_r>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	4d06      	ldr	r5, [pc, #24]	; (800f4f4 <_fstat_r+0x20>)
 800f4da:	4604      	mov	r4, r0
 800f4dc:	4608      	mov	r0, r1
 800f4de:	4611      	mov	r1, r2
 800f4e0:	602b      	str	r3, [r5, #0]
 800f4e2:	f7f1 fde9 	bl	80010b8 <_fstat>
 800f4e6:	1c43      	adds	r3, r0, #1
 800f4e8:	d102      	bne.n	800f4f0 <_fstat_r+0x1c>
 800f4ea:	682b      	ldr	r3, [r5, #0]
 800f4ec:	b103      	cbz	r3, 800f4f0 <_fstat_r+0x1c>
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	bd38      	pop	{r3, r4, r5, pc}
 800f4f2:	bf00      	nop
 800f4f4:	20002dc4 	.word	0x20002dc4

0800f4f8 <_isatty_r>:
 800f4f8:	b538      	push	{r3, r4, r5, lr}
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	4d05      	ldr	r5, [pc, #20]	; (800f514 <_isatty_r+0x1c>)
 800f4fe:	4604      	mov	r4, r0
 800f500:	4608      	mov	r0, r1
 800f502:	602b      	str	r3, [r5, #0]
 800f504:	f7f1 fde7 	bl	80010d6 <_isatty>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	d102      	bne.n	800f512 <_isatty_r+0x1a>
 800f50c:	682b      	ldr	r3, [r5, #0]
 800f50e:	b103      	cbz	r3, 800f512 <_isatty_r+0x1a>
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	bd38      	pop	{r3, r4, r5, pc}
 800f514:	20002dc4 	.word	0x20002dc4

0800f518 <_init>:
 800f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51a:	bf00      	nop
 800f51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f51e:	bc08      	pop	{r3}
 800f520:	469e      	mov	lr, r3
 800f522:	4770      	bx	lr

0800f524 <_fini>:
 800f524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f526:	bf00      	nop
 800f528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f52a:	bc08      	pop	{r3}
 800f52c:	469e      	mov	lr, r3
 800f52e:	4770      	bx	lr
