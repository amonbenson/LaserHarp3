
LaserHarp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3e4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800c4f4  0800c4f4  0001c4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c610  0800c610  00020398  2**0
                  CONTENTS
  4 .ARM          00000000  0800c610  0800c610  00020398  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c610  0800c610  00020398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c610  0800c610  0001c610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c614  0800c614  0001c614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  0800c618  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002970  20000398  0800c9b0  00020398  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d08  0800c9b0  00022d08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002304a  00000000  00000000  000203c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f55  00000000  00000000  0004340b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  00048360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a78  00000000  00000000  00049fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000069fe  00000000  00000000  0004ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020db5  00000000  00000000  00052446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc03  00000000  00000000  000731fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010edfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079d4  00000000  00000000  0010ee50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000398 	.word	0x20000398
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c4dc 	.word	0x0800c4dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000039c 	.word	0x2000039c
 800014c:	0800c4dc 	.word	0x0800c4dc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b590      	push	{r4, r7, lr}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fc99 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f82d 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f9c7 	bl	80004f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000162:	f000 f9a7 	bl	80004b4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000166:	f000 f905 	bl	8000374 <MX_TIM3_Init>
  MX_SPI1_Init();
 800016a:	f000 f87f 	bl	800026c <MX_SPI1_Init>
  MX_TIM2_Init();
 800016e:	f000 f8b5 	bl	80002dc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f975 	bl	8000460 <MX_USART2_UART_Init>
  // enable the pwm output. This will also start the timer
  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK) {
      Error_Handler();
  } */

  const LaserArray_Config_t la_config = {
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <main+0x54>)
 8000178:	463c      	mov	r4, r7
 800017a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800017c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          .hspi = &hspi1,
          .htim_transfer = &htim3,
          .htim_fade = &htim2,
          .rclk_channel = TIM_CHANNEL_4
  };
  LaserArray_Init(&la, &la_config);
 8000180:	463b      	mov	r3, r7
 8000182:	4619      	mov	r1, r3
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <main+0x58>)
 8000186:	f007 fae7 	bl	8007758 <LaserArray_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800018a:	f008 ff9b 	bl	80090c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800018e:	4a07      	ldr	r2, [pc, #28]	; (80001ac <main+0x5c>)
 8000190:	2100      	movs	r1, #0
 8000192:	4807      	ldr	r0, [pc, #28]	; (80001b0 <main+0x60>)
 8000194:	f008 fffc 	bl	8009190 <osThreadNew>
 8000198:	4603      	mov	r3, r0
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <main+0x64>)
 800019c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800019e:	f008 ffc3 	bl	8009128 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a2:	e7fe      	b.n	80001a2 <main+0x52>
 80001a4:	0800c500 	.word	0x0800c500
 80001a8:	20000600 	.word	0x20000600
 80001ac:	0800c574 	.word	0x0800c574
 80001b0:	0800054d 	.word	0x0800054d
 80001b4:	200005fc 	.word	0x200005fc

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b094      	sub	sp, #80	; 0x50
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c2:	2228      	movs	r2, #40	; 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f00c f8c2 	bl	800c350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	f107 0314 	add.w	r3, r7, #20
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e8:	2301      	movs	r3, #1
 80001ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f6:	2301      	movs	r3, #1
 80001f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2302      	movs	r3, #2
 80001fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000204:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fd6c 	bl	8002cec <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021a:	f000 f9dd 	bl	80005d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f002 ffd8 	bl	80031f0 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000246:	f000 f9c7 	bl	80005d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024a:	2310      	movs	r3, #16
 800024c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f003 f993 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000260:	f000 f9ba 	bl	80005d8 <Error_Handler>
  }
}
 8000264:	bf00      	nop
 8000266:	3750      	adds	r7, #80	; 0x50
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_SPI1_Init+0x68>)
 8000272:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <MX_SPI1_Init+0x6c>)
 8000274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_SPI1_Init+0x68>)
 8000278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800027c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MX_SPI1_Init+0x68>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <MX_SPI1_Init+0x68>)
 8000286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800028a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_SPI1_Init+0x68>)
 800028e:	2200      	movs	r2, #0
 8000290:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_SPI1_Init+0x68>)
 8000294:	2200      	movs	r2, #0
 8000296:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_SPI1_Init+0x68>)
 800029a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800029e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_SPI1_Init+0x68>)
 80002a2:	2210      	movs	r2, #16
 80002a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <MX_SPI1_Init+0x68>)
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_SPI1_Init+0x68>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <MX_SPI1_Init+0x68>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_SPI1_Init+0x68>)
 80002ba:	220a      	movs	r2, #10
 80002bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_SPI1_Init+0x68>)
 80002c0:	f003 fa14 	bl	80036ec <HAL_SPI_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80002ca:	f000 f985 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200003b4 	.word	0x200003b4
 80002d8:	40013000 	.word	0x40013000

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	463b      	mov	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_TIM2_Init+0x94>)
 80002fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_TIM2_Init+0x94>)
 8000302:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000306:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <MX_TIM2_Init+0x94>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (10000 / LA_FADE_TICK_RATE) - 1;
 800030e:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_TIM2_Init+0x94>)
 8000310:	22a5      	movs	r2, #165	; 0xa5
 8000312:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000314:	4b16      	ldr	r3, [pc, #88]	; (8000370 <MX_TIM2_Init+0x94>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_TIM2_Init+0x94>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000320:	4813      	ldr	r0, [pc, #76]	; (8000370 <MX_TIM2_Init+0x94>)
 8000322:	f003 fa67 	bl	80037f4 <HAL_TIM_Base_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800032c:	f000 f954 	bl	80005d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000334:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000336:	f107 0308 	add.w	r3, r7, #8
 800033a:	4619      	mov	r1, r3
 800033c:	480c      	ldr	r0, [pc, #48]	; (8000370 <MX_TIM2_Init+0x94>)
 800033e:	f003 fd8f 	bl	8003e60 <HAL_TIM_ConfigClockSource>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000348:	f000 f946 	bl	80005d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034c:	2300      	movs	r3, #0
 800034e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000354:	463b      	mov	r3, r7
 8000356:	4619      	mov	r1, r3
 8000358:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_TIM2_Init+0x94>)
 800035a:	f004 fadd 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000364:	f000 f938 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	3718      	adds	r7, #24
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	2000040c 	.word	0x2000040c

08000374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08e      	sub	sp, #56	; 0x38
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000388:	f107 0320 	add.w	r3, r7, #32
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003a4:	4b2c      	ldr	r3, [pc, #176]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003a6:	4a2d      	ldr	r2, [pc, #180]	; (800045c <MX_TIM3_Init+0xe8>)
 80003a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = LA_TRANSFER_PRESCALAR - 1;
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003ac:	2207      	movs	r2, #7
 80003ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b29      	ldr	r3, [pc, #164]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18 - 1;
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003b8:	2211      	movs	r2, #17
 80003ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b26      	ldr	r3, [pc, #152]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003c8:	4823      	ldr	r0, [pc, #140]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003ca:	f003 fa13 	bl	80037f4 <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80003d4:	f000 f900 	bl	80005d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003e2:	4619      	mov	r1, r3
 80003e4:	481c      	ldr	r0, [pc, #112]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003e6:	f003 fd3b 	bl	8003e60 <HAL_TIM_ConfigClockSource>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80003f0:	f000 f8f2 	bl	80005d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80003f4:	4818      	ldr	r0, [pc, #96]	; (8000458 <MX_TIM3_Init+0xe4>)
 80003f6:	f003 faab 	bl	8003950 <HAL_TIM_OC_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000400:	f000 f8ea 	bl	80005d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000404:	2320      	movs	r3, #32
 8000406:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800040c:	f107 0320 	add.w	r3, r7, #32
 8000410:	4619      	mov	r1, r3
 8000412:	4811      	ldr	r0, [pc, #68]	; (8000458 <MX_TIM3_Init+0xe4>)
 8000414:	f004 fa80 	bl	8004918 <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800041e:	f000 f8db 	bl	80005d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000422:	2330      	movs	r3, #48	; 0x30
 8000424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800042a:	2302      	movs	r3, #2
 800042c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	220c      	movs	r2, #12
 8000436:	4619      	mov	r1, r3
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <MX_TIM3_Init+0xe4>)
 800043a:	f003 fcb9 	bl	8003db0 <HAL_TIM_OC_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000444:	f000 f8c8 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <MX_TIM3_Init+0xe4>)
 800044a:	f000 f9ab 	bl	80007a4 <HAL_TIM_MspPostInit>

}
 800044e:	bf00      	nop
 8000450:	3738      	adds	r7, #56	; 0x38
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200004c0 	.word	0x200004c0
 800045c:	40000400 	.word	0x40000400

08000460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000466:	4a12      	ldr	r2, [pc, #72]	; (80004b0 <MX_USART2_UART_Init+0x50>)
 8000468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 800046c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000486:	220c      	movs	r2, #12
 8000488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_USART2_UART_Init+0x4c>)
 8000498:	f004 fab7 	bl	8004a0a <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004a2:	f000 f899 	bl	80005d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200005b8 	.word	0x200005b8
 80004b0:	40004400 	.word	0x40004400

080004b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_DMA_Init+0x38>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <MX_DMA_Init+0x38>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_DMA_Init+0x38>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2105      	movs	r1, #5
 80004d6:	200d      	movs	r0, #13
 80004d8:	f000 fbbf 	bl	8000c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80004dc:	200d      	movs	r0, #13
 80004de:	f000 fbd8 	bl	8000c92 <HAL_NVIC_EnableIRQ>

}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <MX_GPIO_Init+0x58>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <MX_GPIO_Init+0x58>)
 80004fc:	f043 0320 	orr.w	r3, r3, #32
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_GPIO_Init+0x58>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0320 	and.w	r3, r3, #32
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_GPIO_Init+0x58>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <MX_GPIO_Init+0x58>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_GPIO_Init+0x58>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_GPIO_Init+0x58>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <MX_GPIO_Init+0x58>)
 800052c:	f043 0308 	orr.w	r3, r3, #8
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MX_GPIO_Init+0x58>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000554:	f00b faba 	bl	800bacc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      LaserArray_FadeBrightness(&la, 30, 63, 1000);
 8000558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055c:	223f      	movs	r2, #63	; 0x3f
 800055e:	211e      	movs	r1, #30
 8000560:	4810      	ldr	r0, [pc, #64]	; (80005a4 <StartDefaultTask+0x58>)
 8000562:	f007 f9df 	bl	8007924 <LaserArray_FadeBrightness>
      LaserArray_FadeBrightness(&la, 31, 0, 1000);
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	2200      	movs	r2, #0
 800056c:	211f      	movs	r1, #31
 800056e:	480d      	ldr	r0, [pc, #52]	; (80005a4 <StartDefaultTask+0x58>)
 8000570:	f007 f9d8 	bl	8007924 <LaserArray_FadeBrightness>
      osDelay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f008 feb4 	bl	80092e4 <osDelay>

      LaserArray_FadeBrightness(&la, 30, 0, 1000);
 800057c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000580:	2200      	movs	r2, #0
 8000582:	211e      	movs	r1, #30
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <StartDefaultTask+0x58>)
 8000586:	f007 f9cd 	bl	8007924 <LaserArray_FadeBrightness>
      LaserArray_FadeBrightness(&la, 31, 63, 1000);
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	223f      	movs	r2, #63	; 0x3f
 8000590:	211f      	movs	r1, #31
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <StartDefaultTask+0x58>)
 8000594:	f007 f9c6 	bl	8007924 <LaserArray_FadeBrightness>
      osDelay(1000);
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f008 fea2 	bl	80092e4 <osDelay>
      LaserArray_FadeBrightness(&la, 30, 63, 1000);
 80005a0:	e7da      	b.n	8000558 <StartDefaultTask+0xc>
 80005a2:	bf00      	nop
 80005a4:	20000600 	.word	0x20000600

080005a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ba:	f000 fa7d 	bl	8000ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  LaserArray_TIM_PeriodElapsedHandler(&la, htim);
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005c2:	f007 f9f5 	bl	80079b0 <LaserArray_TIM_PeriodElapsedHandler>

  /* USER CODE END Callback 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40000800 	.word	0x40000800
 80005d4:	20000600 	.word	0x20000600

080005d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005dc:	b672      	cpsid	i
}
 80005de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <Error_Handler+0x8>
	...

080005e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_MspInit+0x68>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <HAL_MspInit+0x68>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_MspInit+0x68>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_MspInit+0x68>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a11      	ldr	r2, [pc, #68]	; (800064c <HAL_MspInit+0x68>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x68>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	210f      	movs	r1, #15
 800061e:	f06f 0001 	mvn.w	r0, #1
 8000622:	f000 fb1a 	bl	8000c5a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_MspInit+0x6c>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_MspInit+0x6c>)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	40010000 	.word	0x40010000

08000654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <HAL_SPI_MspInit+0x70>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d123      	bne.n	80006bc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_SPI_MspInit+0x74>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <HAL_SPI_MspInit+0x74>)
 800067a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_SPI_MspInit+0x74>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_SPI_MspInit+0x74>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <HAL_SPI_MspInit+0x74>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_SPI_MspInit+0x74>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80006a4:	23a0      	movs	r3, #160	; 0xa0
 80006a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_SPI_MspInit+0x78>)
 80006b8:	f000 fce8 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40013000 	.word	0x40013000
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800

080006d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006e0:	d114      	bne.n	800070c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <HAL_TIM_Base_MspInit+0xc4>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <HAL_TIM_Base_MspInit+0xc4>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <HAL_TIM_Base_MspInit+0xc4>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2105      	movs	r1, #5
 80006fe:	201c      	movs	r0, #28
 8000700:	f000 faab 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000704:	201c      	movs	r0, #28
 8000706:	f000 fac4 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800070a:	e03f      	b.n	800078c <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM3)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <HAL_TIM_Base_MspInit+0xc8>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d13a      	bne.n	800078c <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <HAL_TIM_Base_MspInit+0xc4>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <HAL_TIM_Base_MspInit+0xc4>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_TIM_Base_MspInit+0xc4>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <HAL_TIM_Base_MspInit+0xd0>)
 8000732:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000736:	2210      	movs	r2, #16
 8000738:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000758:	2220      	movs	r2, #32
 800075a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 800075e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000762:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000766:	f000 faa3 	bl	8000cb0 <HAL_DMA_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8000770:	f7ff ff32 	bl	80005d8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000778:	631a      	str	r2, [r3, #48]	; 0x30
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000784:	621a      	str	r2, [r3, #32]
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <HAL_TIM_Base_MspInit+0xcc>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	40000400 	.word	0x40000400
 800079c:	20000574 	.word	0x20000574
 80007a0:	40020030 	.word	0x40020030

080007a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_TIM_MspPostInit+0x58>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d117      	bne.n	80007f4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_TIM_MspPostInit+0x5c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_TIM_MspPostInit+0x5c>)
 80007ca:	f043 0308 	orr.w	r3, r3, #8
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_TIM_MspPostInit+0x5c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007dc:	2302      	movs	r3, #2
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <HAL_TIM_MspPostInit+0x60>)
 80007f0:	f000 fc4c 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40000400 	.word	0x40000400
 8000800:	40021000 	.word	0x40021000
 8000804:	40010c00 	.word	0x40010c00

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <HAL_UART_MspInit+0x88>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d12f      	bne.n	8000888 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_UART_MspInit+0x8c>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_UART_MspInit+0x8c>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000832:	61d3      	str	r3, [r2, #28]
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0x8c>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_UART_MspInit+0x8c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <HAL_UART_MspInit+0x8c>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_MspInit+0x8c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000858:	2304      	movs	r3, #4
 800085a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <HAL_UART_MspInit+0x90>)
 800086c:	f000 fc0e 	bl	800108c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000870:	2308      	movs	r3, #8
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_UART_MspInit+0x90>)
 8000884:	f000 fc02 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800

0800089c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008b2:	4b36      	ldr	r3, [pc, #216]	; (800098c <HAL_InitTick+0xf0>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a35      	ldr	r2, [pc, #212]	; (800098c <HAL_InitTick+0xf0>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <HAL_InitTick+0xf0>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ca:	f107 0210 	add.w	r2, r7, #16
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fe05 	bl	80034e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d103      	bne.n	80008ec <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008e4:	f002 fdd6 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 80008e8:	6378      	str	r0, [r7, #52]	; 0x34
 80008ea:	e004      	b.n	80008f6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008ec:	f002 fdd2 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 80008f0:	4603      	mov	r3, r0
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f8:	4a25      	ldr	r2, [pc, #148]	; (8000990 <HAL_InitTick+0xf4>)
 80008fa:	fba2 2303 	umull	r2, r3, r2, r3
 80008fe:	0c9b      	lsrs	r3, r3, #18
 8000900:	3b01      	subs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <HAL_InitTick+0xf8>)
 8000906:	4a24      	ldr	r2, [pc, #144]	; (8000998 <HAL_InitTick+0xfc>)
 8000908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <HAL_InitTick+0xf8>)
 800090c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000910:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000912:	4a20      	ldr	r2, [pc, #128]	; (8000994 <HAL_InitTick+0xf8>)
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <HAL_InitTick+0xf8>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <HAL_InitTick+0xf8>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_InitTick+0xf8>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800092a:	481a      	ldr	r0, [pc, #104]	; (8000994 <HAL_InitTick+0xf8>)
 800092c:	f002 ff62 	bl	80037f4 <HAL_TIM_Base_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000936:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800093a:	2b00      	cmp	r3, #0
 800093c:	d11b      	bne.n	8000976 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800093e:	4815      	ldr	r0, [pc, #84]	; (8000994 <HAL_InitTick+0xf8>)
 8000940:	f002 ffb4 	bl	80038ac <HAL_TIM_Base_Start_IT>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800094a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800094e:	2b00      	cmp	r3, #0
 8000950:	d111      	bne.n	8000976 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000952:	201e      	movs	r0, #30
 8000954:	f000 f99d 	bl	8000c92 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b0f      	cmp	r3, #15
 800095c:	d808      	bhi.n	8000970 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800095e:	2200      	movs	r2, #0
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	201e      	movs	r0, #30
 8000964:	f000 f979 	bl	8000c5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_InitTick+0x100>)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e002      	b.n	8000976 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }
  HAL_TIM_RegisterCallback(&htim4, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_InitTick+0x104>)
 8000978:	210e      	movs	r1, #14
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <HAL_InitTick+0xf8>)
 800097c:	f003 fb86 	bl	800408c <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8000980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000984:	4618      	mov	r0, r3
 8000986:	3738      	adds	r7, #56	; 0x38
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	431bde83 	.word	0x431bde83
 8000994:	2000088c 	.word	0x2000088c
 8000998:	40000800 	.word	0x40000800
 800099c:	20000004 	.word	0x20000004
 80009a0:	080009a5 	.word	0x080009a5

080009a4 <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 80009ac:	f000 f884 	bl	8000ab8 <HAL_IncTick>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
	...

080009e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA1_Channel3_IRQHandler+0x10>)
 80009ea:	f000 fa1b 	bl	8000e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000574 	.word	0x20000574

080009f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009fe:	f000 fdfa 	bl	80015f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20002814 	.word	0x20002814

08000a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <TIM2_IRQHandler+0x10>)
 8000a12:	f003 f8a5 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	2000040c 	.word	0x2000040c

08000a20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM4_IRQHandler+0x10>)
 8000a26:	f003 f89b 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000088c 	.word	0x2000088c

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	; (8000a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a66:	f7ff ffe5 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f00b fc3d 	bl	800c2e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fb6f 	bl	8000150 <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 8000a7c:	0800c618 	.word	0x0800c618
  ldr r2, =_sbss
 8000a80:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 8000a84:	20002d08 	.word	0x20002d08

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f8d1 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f7ff fefa 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fd9c 	bl	80005e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000940 	.word	0x20000940

08000adc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	20000940 	.word	0x20000940

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4906      	ldr	r1, [pc, #24]	; (8000b88 <__NVIC_EnableIRQ+0x34>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff4f 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff64 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ffb2 	bl	8000be0 <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff81 	bl	8000b8c <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff57 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e043      	b.n	8000d4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_DMA_Init+0xa8>)
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <HAL_DMA_Init+0xac>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	009a      	lsls	r2, r3, #2
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <HAL_DMA_Init+0xb0>)
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cfa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	bffdfff8 	.word	0xbffdfff8
 8000d5c:	cccccccd 	.word	0xcccccccd
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <HAL_DMA_Start_IT+0x20>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e04a      	b.n	8000e1a <HAL_DMA_Start_IT+0xb6>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d13a      	bne.n	8000e0c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2202      	movs	r2, #2
 8000d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2200      	movs	r2, #0
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f938 	bl	8001030 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d008      	beq.n	8000dda <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 020e 	orr.w	r2, r2, #14
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e00f      	b.n	8000dfa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0204 	bic.w	r2, r2, #4
 8000de8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f042 020a 	orr.w	r2, r2, #10
 8000df8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f042 0201 	orr.w	r2, r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e005      	b.n	8000e18 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e14:	2302      	movs	r3, #2
 8000e16:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	2204      	movs	r2, #4
 8000e42:	409a      	lsls	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d04f      	beq.n	8000eec <HAL_DMA_IRQHandler+0xc8>
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d04a      	beq.n	8000eec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0320 	and.w	r3, r3, #32
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d107      	bne.n	8000e74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0204 	bic.w	r2, r2, #4
 8000e72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a66      	ldr	r2, [pc, #408]	; (8001014 <HAL_DMA_IRQHandler+0x1f0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d029      	beq.n	8000ed2 <HAL_DMA_IRQHandler+0xae>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a65      	ldr	r2, [pc, #404]	; (8001018 <HAL_DMA_IRQHandler+0x1f4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d022      	beq.n	8000ece <HAL_DMA_IRQHandler+0xaa>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a63      	ldr	r2, [pc, #396]	; (800101c <HAL_DMA_IRQHandler+0x1f8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01a      	beq.n	8000ec8 <HAL_DMA_IRQHandler+0xa4>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a62      	ldr	r2, [pc, #392]	; (8001020 <HAL_DMA_IRQHandler+0x1fc>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d012      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x9e>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a60      	ldr	r2, [pc, #384]	; (8001024 <HAL_DMA_IRQHandler+0x200>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00a      	beq.n	8000ebc <HAL_DMA_IRQHandler+0x98>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a5f      	ldr	r2, [pc, #380]	; (8001028 <HAL_DMA_IRQHandler+0x204>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d102      	bne.n	8000eb6 <HAL_DMA_IRQHandler+0x92>
 8000eb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb4:	e00e      	b.n	8000ed4 <HAL_DMA_IRQHandler+0xb0>
 8000eb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000eba:	e00b      	b.n	8000ed4 <HAL_DMA_IRQHandler+0xb0>
 8000ebc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ec0:	e008      	b.n	8000ed4 <HAL_DMA_IRQHandler+0xb0>
 8000ec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ec6:	e005      	b.n	8000ed4 <HAL_DMA_IRQHandler+0xb0>
 8000ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ecc:	e002      	b.n	8000ed4 <HAL_DMA_IRQHandler+0xb0>
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	e000      	b.n	8000ed4 <HAL_DMA_IRQHandler+0xb0>
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	4a55      	ldr	r2, [pc, #340]	; (800102c <HAL_DMA_IRQHandler+0x208>)
 8000ed6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 8094 	beq.w	800100a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000eea:	e08e      	b.n	800100a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d056      	beq.n	8000faa <HAL_DMA_IRQHandler+0x186>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d051      	beq.n	8000faa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10b      	bne.n	8000f2c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 020a 	bic.w	r2, r2, #10
 8000f22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a38      	ldr	r2, [pc, #224]	; (8001014 <HAL_DMA_IRQHandler+0x1f0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d029      	beq.n	8000f8a <HAL_DMA_IRQHandler+0x166>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a37      	ldr	r2, [pc, #220]	; (8001018 <HAL_DMA_IRQHandler+0x1f4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d022      	beq.n	8000f86 <HAL_DMA_IRQHandler+0x162>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a35      	ldr	r2, [pc, #212]	; (800101c <HAL_DMA_IRQHandler+0x1f8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01a      	beq.n	8000f80 <HAL_DMA_IRQHandler+0x15c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a34      	ldr	r2, [pc, #208]	; (8001020 <HAL_DMA_IRQHandler+0x1fc>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d012      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x156>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a32      	ldr	r2, [pc, #200]	; (8001024 <HAL_DMA_IRQHandler+0x200>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00a      	beq.n	8000f74 <HAL_DMA_IRQHandler+0x150>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <HAL_DMA_IRQHandler+0x204>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d102      	bne.n	8000f6e <HAL_DMA_IRQHandler+0x14a>
 8000f68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f6c:	e00e      	b.n	8000f8c <HAL_DMA_IRQHandler+0x168>
 8000f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f72:	e00b      	b.n	8000f8c <HAL_DMA_IRQHandler+0x168>
 8000f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f78:	e008      	b.n	8000f8c <HAL_DMA_IRQHandler+0x168>
 8000f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7e:	e005      	b.n	8000f8c <HAL_DMA_IRQHandler+0x168>
 8000f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f84:	e002      	b.n	8000f8c <HAL_DMA_IRQHandler+0x168>
 8000f86:	2320      	movs	r3, #32
 8000f88:	e000      	b.n	8000f8c <HAL_DMA_IRQHandler+0x168>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	4a27      	ldr	r2, [pc, #156]	; (800102c <HAL_DMA_IRQHandler+0x208>)
 8000f8e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d034      	beq.n	800100a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fa8:	e02f      	b.n	800100a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	2208      	movs	r2, #8
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d028      	beq.n	800100c <HAL_DMA_IRQHandler+0x1e8>
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d023      	beq.n	800100c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 020e 	bic.w	r2, r2, #14
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	4798      	blx	r3
    }
  }
  return;
 800100a:	bf00      	nop
 800100c:	bf00      	nop
}
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020008 	.word	0x40020008
 8001018:	4002001c 	.word	0x4002001c
 800101c:	40020030 	.word	0x40020030
 8001020:	40020044 	.word	0x40020044
 8001024:	40020058 	.word	0x40020058
 8001028:	4002006c 	.word	0x4002006c
 800102c:	40020000 	.word	0x40020000

08001030 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001046:	2101      	movs	r1, #1
 8001048:	fa01 f202 	lsl.w	r2, r1, r2
 800104c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b10      	cmp	r3, #16
 800105c:	d108      	bne.n	8001070 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800106e:	e007      	b.n	8001080 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	60da      	str	r2, [r3, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b08b      	sub	sp, #44	; 0x2c
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e169      	b.n	8001374 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a0:	2201      	movs	r2, #1
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8158 	bne.w	800136e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a9a      	ldr	r2, [pc, #616]	; (800132c <HAL_GPIO_Init+0x2a0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d05e      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010c8:	4a98      	ldr	r2, [pc, #608]	; (800132c <HAL_GPIO_Init+0x2a0>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d875      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010ce:	4a98      	ldr	r2, [pc, #608]	; (8001330 <HAL_GPIO_Init+0x2a4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d058      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010d4:	4a96      	ldr	r2, [pc, #600]	; (8001330 <HAL_GPIO_Init+0x2a4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d86f      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010da:	4a96      	ldr	r2, [pc, #600]	; (8001334 <HAL_GPIO_Init+0x2a8>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d052      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010e0:	4a94      	ldr	r2, [pc, #592]	; (8001334 <HAL_GPIO_Init+0x2a8>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d869      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010e6:	4a94      	ldr	r2, [pc, #592]	; (8001338 <HAL_GPIO_Init+0x2ac>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d04c      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010ec:	4a92      	ldr	r2, [pc, #584]	; (8001338 <HAL_GPIO_Init+0x2ac>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d863      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010f2:	4a92      	ldr	r2, [pc, #584]	; (800133c <HAL_GPIO_Init+0x2b0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d046      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
 80010f8:	4a90      	ldr	r2, [pc, #576]	; (800133c <HAL_GPIO_Init+0x2b0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d85d      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d82a      	bhi.n	8001158 <HAL_GPIO_Init+0xcc>
 8001102:	2b12      	cmp	r3, #18
 8001104:	d859      	bhi.n	80011ba <HAL_GPIO_Init+0x12e>
 8001106:	a201      	add	r2, pc, #4	; (adr r2, 800110c <HAL_GPIO_Init+0x80>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	08001187 	.word	0x08001187
 8001110:	08001161 	.word	0x08001161
 8001114:	08001173 	.word	0x08001173
 8001118:	080011b5 	.word	0x080011b5
 800111c:	080011bb 	.word	0x080011bb
 8001120:	080011bb 	.word	0x080011bb
 8001124:	080011bb 	.word	0x080011bb
 8001128:	080011bb 	.word	0x080011bb
 800112c:	080011bb 	.word	0x080011bb
 8001130:	080011bb 	.word	0x080011bb
 8001134:	080011bb 	.word	0x080011bb
 8001138:	080011bb 	.word	0x080011bb
 800113c:	080011bb 	.word	0x080011bb
 8001140:	080011bb 	.word	0x080011bb
 8001144:	080011bb 	.word	0x080011bb
 8001148:	080011bb 	.word	0x080011bb
 800114c:	080011bb 	.word	0x080011bb
 8001150:	08001169 	.word	0x08001169
 8001154:	0800117d 	.word	0x0800117d
 8001158:	4a79      	ldr	r2, [pc, #484]	; (8001340 <HAL_GPIO_Init+0x2b4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d013      	beq.n	8001186 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800115e:	e02c      	b.n	80011ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e029      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	3304      	adds	r3, #4
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e024      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	3308      	adds	r3, #8
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e01f      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	330c      	adds	r3, #12
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e01a      	b.n	80011bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800118e:	2304      	movs	r3, #4
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e013      	b.n	80011bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d105      	bne.n	80011a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800119c:	2308      	movs	r3, #8
 800119e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	611a      	str	r2, [r3, #16]
          break;
 80011a6:	e009      	b.n	80011bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a8:	2308      	movs	r3, #8
 80011aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	615a      	str	r2, [r3, #20]
          break;
 80011b2:	e003      	b.n	80011bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x130>
          break;
 80011ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2bff      	cmp	r3, #255	; 0xff
 80011c0:	d801      	bhi.n	80011c6 <HAL_GPIO_Init+0x13a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	e001      	b.n	80011ca <HAL_GPIO_Init+0x13e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3304      	adds	r3, #4
 80011ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d802      	bhi.n	80011d8 <HAL_GPIO_Init+0x14c>
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	e002      	b.n	80011de <HAL_GPIO_Init+0x152>
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	3b08      	subs	r3, #8
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	210f      	movs	r1, #15
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	401a      	ands	r2, r3
 80011f0:	6a39      	ldr	r1, [r7, #32]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	431a      	orrs	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80b1 	beq.w	800136e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800120c:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001224:	4a48      	ldr	r2, [pc, #288]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a40      	ldr	r2, [pc, #256]	; (800134c <HAL_GPIO_Init+0x2c0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d013      	beq.n	8001278 <HAL_GPIO_Init+0x1ec>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3f      	ldr	r2, [pc, #252]	; (8001350 <HAL_GPIO_Init+0x2c4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d00d      	beq.n	8001274 <HAL_GPIO_Init+0x1e8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <HAL_GPIO_Init+0x2c8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x1e4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3d      	ldr	r2, [pc, #244]	; (8001358 <HAL_GPIO_Init+0x2cc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_GPIO_Init+0x1e0>
 8001268:	2303      	movs	r3, #3
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 800126c:	2304      	movs	r3, #4
 800126e:	e004      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 8001270:	2302      	movs	r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_GPIO_Init+0x1ee>
 8001278:	2300      	movs	r3, #0
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127c:	f002 0203 	and.w	r2, r2, #3
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	4093      	lsls	r3, r2
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800128a:	492f      	ldr	r1, [pc, #188]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a4:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	492c      	ldr	r1, [pc, #176]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4928      	ldr	r1, [pc, #160]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012bc:	4013      	ands	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4922      	ldr	r1, [pc, #136]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	491e      	ldr	r1, [pc, #120]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	4918      	ldr	r1, [pc, #96]	; (800135c <HAL_GPIO_Init+0x2d0>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	608b      	str	r3, [r1, #8]
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_GPIO_Init+0x2d0>)
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	43db      	mvns	r3, r3
 800130a:	4914      	ldr	r1, [pc, #80]	; (800135c <HAL_GPIO_Init+0x2d0>)
 800130c:	4013      	ands	r3, r2
 800130e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d021      	beq.n	8001360 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_GPIO_Init+0x2d0>)
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	490e      	ldr	r1, [pc, #56]	; (800135c <HAL_GPIO_Init+0x2d0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	60cb      	str	r3, [r1, #12]
 8001328:	e021      	b.n	800136e <HAL_GPIO_Init+0x2e2>
 800132a:	bf00      	nop
 800132c:	10320000 	.word	0x10320000
 8001330:	10310000 	.word	0x10310000
 8001334:	10220000 	.word	0x10220000
 8001338:	10210000 	.word	0x10210000
 800133c:	10120000 	.word	0x10120000
 8001340:	10110000 	.word	0x10110000
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	40010800 	.word	0x40010800
 8001350:	40010c00 	.word	0x40010c00
 8001354:	40011000 	.word	0x40011000
 8001358:	40011400 	.word	0x40011400
 800135c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_GPIO_Init+0x304>)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	43db      	mvns	r3, r3
 8001368:	4909      	ldr	r1, [pc, #36]	; (8001390 <HAL_GPIO_Init+0x304>)
 800136a:	4013      	ands	r3, r2
 800136c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	3301      	adds	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f47f ae8e 	bne.w	80010a0 <HAL_GPIO_Init+0x14>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	372c      	adds	r7, #44	; 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001396:	b08b      	sub	sp, #44	; 0x2c
 8001398:	af06      	add	r7, sp, #24
 800139a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0fd      	b.n	80015a2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f00a fd16 	bl	800bdec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fc1d 	bl	8004c0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	687e      	ldr	r6, [r7, #4]
 80013da:	466d      	mov	r5, sp
 80013dc:	f106 0410 	add.w	r4, r6, #16
 80013e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	602b      	str	r3, [r5, #0]
 80013e8:	1d33      	adds	r3, r6, #4
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f003 fbe7 	bl	8004bc0 <USB_CoreInit>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0ce      	b.n	80015a2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2100      	movs	r1, #0
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fc18 	bl	8004c40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e04c      	b.n	80014b0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	3301      	adds	r3, #1
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	440b      	add	r3, r1
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	b298      	uxth	r0, r3
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3336      	adds	r3, #54	; 0x36
 8001454:	4602      	mov	r2, r0
 8001456:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	3303      	adds	r3, #3
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	3338      	adds	r3, #56	; 0x38
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	333c      	adds	r3, #60	; 0x3c
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3340      	adds	r3, #64	; 0x40
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	3301      	adds	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3ad      	bcc.n	8001416 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e044      	b.n	800154a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	440b      	add	r3, r1
 80014ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	440b      	add	r3, r1
 800153c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	3301      	adds	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3b5      	bcc.n	80014c0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	687e      	ldr	r6, [r7, #4]
 800155c:	466d      	mov	r5, sp
 800155e:	f106 0410 	add.w	r4, r6, #16
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	602b      	str	r3, [r5, #0]
 800156a:	1d33      	adds	r3, r6, #4
 800156c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f003 fb72 	bl	8004c58 <USB_DevInit>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2202      	movs	r2, #2
 800157e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00d      	b.n	80015a2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f006 f824 	bl	80075e8 <USB_DevDisconnect>

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_PCD_Start+0x16>
 80015bc:	2302      	movs	r3, #2
 80015be:	e016      	b.n	80015ee <HAL_PCD_Start+0x44>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fb07 	bl	8004be0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80015d2:	2101      	movs	r1, #1
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f00a fe50 	bl	800c27a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 fff8 	bl	80075d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b088      	sub	sp, #32
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fffa 	bl	80075fc <USB_ReadInterrupts>
 8001608:	4603      	mov	r3, r0
 800160a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800160e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001612:	d102      	bne.n	800161a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fb48 	bl	8001caa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f005 ffec 	bl	80075fc <USB_ReadInterrupts>
 8001624:	4603      	mov	r3, r0
 8001626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d112      	bne.n	8001656 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001642:	b292      	uxth	r2, r2
 8001644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f00a fc4a 	bl	800bee2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800164e:	2100      	movs	r1, #0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f923 	bl	800189c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f005 ffce 	bl	80075fc <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800166a:	d10b      	bne.n	8001684 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001674:	b29a      	uxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800167e:	b292      	uxth	r2, r2
 8001680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f005 ffb7 	bl	80075fc <USB_ReadInterrupts>
 800168e:	4603      	mov	r3, r0
 8001690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001698:	d10b      	bne.n	80016b2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ac:	b292      	uxth	r2, r2
 80016ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 ffa0 	bl	80075fc <USB_ReadInterrupts>
 80016bc:	4603      	mov	r3, r0
 80016be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c6:	d126      	bne.n	8001716 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0204 	bic.w	r2, r2, #4
 80016da:	b292      	uxth	r2, r2
 80016dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0208 	bic.w	r2, r2, #8
 80016f2:	b292      	uxth	r2, r2
 80016f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f00a fc2b 	bl	800bf54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001710:	b292      	uxth	r2, r2
 8001712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f005 ff6e 	bl	80075fc <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800172a:	f040 8082 	bne.w	8001832 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	77fb      	strb	r3, [r7, #31]
 8001732:	e010      	b.n	8001756 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	441a      	add	r2, r3
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	8812      	ldrh	r2, [r2, #0]
 8001744:	b292      	uxth	r2, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	3320      	adds	r3, #32
 800174a:	443b      	add	r3, r7
 800174c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001750:	7ffb      	ldrb	r3, [r7, #31]
 8001752:	3301      	adds	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	2b07      	cmp	r3, #7
 800175a:	d9eb      	bls.n	8001734 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001764:	b29a      	uxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	b292      	uxth	r2, r2
 8001770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800177c:	b29a      	uxth	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	b292      	uxth	r2, r2
 8001788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800178c:	bf00      	nop
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001796:	b29b      	uxth	r3, r3
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f6      	beq.n	800178e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017b2:	b292      	uxth	r2, r2
 80017b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	77fb      	strb	r3, [r7, #31]
 80017bc:	e00f      	b.n	80017de <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	4611      	mov	r1, r2
 80017c6:	7ffa      	ldrb	r2, [r7, #31]
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	440a      	add	r2, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	3320      	adds	r3, #32
 80017d0:	443b      	add	r3, r7
 80017d2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80017d6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80017d8:	7ffb      	ldrb	r3, [r7, #31]
 80017da:	3301      	adds	r3, #1
 80017dc:	77fb      	strb	r3, [r7, #31]
 80017de:	7ffb      	ldrb	r3, [r7, #31]
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	d9ec      	bls.n	80017be <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0208 	orr.w	r2, r2, #8
 80017f6:	b292      	uxth	r2, r2
 80017f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180e:	b292      	uxth	r2, r2
 8001810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0204 	orr.w	r2, r2, #4
 8001826:	b292      	uxth	r2, r2
 8001828:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f00a fb77 	bl	800bf20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f005 fee0 	bl	80075fc <USB_ReadInterrupts>
 800183c:	4603      	mov	r3, r0
 800183e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001846:	d10e      	bne.n	8001866 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800185a:	b292      	uxth	r2, r2
 800185c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f00a fb30 	bl	800bec6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f005 fec6 	bl	80075fc <USB_ReadInterrupts>
 8001870:	4603      	mov	r3, r0
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800187a:	d10b      	bne.n	8001894 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001894:	bf00      	nop
 8001896:	3720      	adds	r7, #32
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_PCD_SetAddress+0x1a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e013      	b.n	80018de <HAL_PCD_SetAddress+0x42>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f005 fe6d 	bl	80075ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	4608      	mov	r0, r1
 80018f0:	4611      	mov	r1, r2
 80018f2:	461a      	mov	r2, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	70fb      	strb	r3, [r7, #3]
 80018f8:	460b      	mov	r3, r1
 80018fa:	803b      	strh	r3, [r7, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001908:	2b00      	cmp	r3, #0
 800190a:	da0e      	bge.n	800192a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	705a      	strb	r2, [r3, #1]
 8001928:	e00e      	b.n	8001948 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f003 0207 	and.w	r2, r3, #7
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001954:	883a      	ldrh	r2, [r7, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	78ba      	ldrb	r2, [r7, #2]
 800195e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001972:	78bb      	ldrb	r3, [r7, #2]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d102      	bne.n	800197e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_PCD_EP_Open+0xa6>
 8001988:	2302      	movs	r3, #2
 800198a:	e00e      	b.n	80019aa <HAL_PCD_EP_Open+0xc4>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	4618      	mov	r0, r3
 800199c:	f003 f97c 	bl	8004c98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019a8:	7afb      	ldrb	r3, [r7, #11]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da0e      	bge.n	80019e4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	705a      	strb	r2, [r3, #1]
 80019e2:	e00e      	b.n	8001a02 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	f003 0207 	and.w	r2, r3, #7
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_EP_Close+0x6a>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e00e      	b.n	8001a3a <HAL_PCD_EP_Close+0x88>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fc9e 	bl	800536c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a52:	7afb      	ldrb	r3, [r7, #11]
 8001a54:	f003 0207 	and.w	r2, r3, #7
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fe50 	bl	8005744 <USB_EPStartXfer>
 8001aa4:	e005      	b.n	8001ab2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6979      	ldr	r1, [r7, #20]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 fe49 	bl	8005744 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2201      	movs	r2, #1
 8001b06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6979      	ldr	r1, [r7, #20]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fe0d 	bl	8005744 <USB_EPStartXfer>
 8001b2a:	e005      	b.n	8001b38 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fe06 	bl	8005744 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	f003 0207 	and.w	r2, r3, #7
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d901      	bls.n	8001b60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e04c      	b.n	8001bfa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	da0e      	bge.n	8001b86 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	705a      	strb	r2, [r3, #1]
 8001b84:	e00c      	b.n	8001ba0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_PCD_EP_SetStall+0x7e>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e01c      	b.n	8001bfa <HAL_PCD_EP_SetStall+0xb8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68f9      	ldr	r1, [r7, #12]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 fbf0 	bl	80073b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d108      	bne.n	8001bf0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f005 fd15 	bl	800761a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d901      	bls.n	8001c20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e040      	b.n	8001ca2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	da0e      	bge.n	8001c46 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	705a      	strb	r2, [r3, #1]
 8001c44:	e00e      	b.n	8001c64 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	f003 0207 	and.w	r2, r3, #7
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_PCD_EP_ClrStall+0x82>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e00e      	b.n	8001ca2 <HAL_PCD_EP_ClrStall+0xa0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 fbde 	bl	8007454 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b08e      	sub	sp, #56	; 0x38
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cb2:	e2ec      	b.n	800228e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cbc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001cbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001cca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f040 8161 	bne.w	8001f96 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d152      	bne.n	8001d84 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	81fb      	strh	r3, [r7, #14]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3328      	adds	r3, #40	; 0x28
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	441a      	add	r2, r3
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d42:	2100      	movs	r1, #0
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f00a f8a4 	bl	800be92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 829b 	beq.w	800228e <PCD_EP_ISR_Handler+0x5e4>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 8296 	bne.w	800228e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b292      	uxth	r2, r2
 8001d76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d82:	e284      	b.n	800228e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d034      	beq.n	8001e08 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	3306      	adds	r3, #6
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f005 fc6c 	bl	80076ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dee:	4013      	ands	r3, r2
 8001df0:	823b      	strh	r3, [r7, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	8a3a      	ldrh	r2, [r7, #16]
 8001df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dfc:	b292      	uxth	r2, r2
 8001dfe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f00a f819 	bl	800be38 <HAL_PCD_SetupStageCallback>
 8001e06:	e242      	b.n	800228e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e08:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f280 823e 	bge.w	800228e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e1e:	4013      	ands	r3, r2
 8001e20:	83bb      	strh	r3, [r7, #28]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	8bba      	ldrh	r2, [r7, #28]
 8001e28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e2c:	b292      	uxth	r2, r2
 8001e2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	3306      	adds	r3, #6
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d019      	beq.n	8001e98 <PCD_EP_ISR_Handler+0x1ee>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	6959      	ldr	r1, [r3, #20]
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	f005 fc1c 	bl	80076ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	441a      	add	r2, r3
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e90:	2100      	movs	r1, #0
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f009 ffe2 	bl	800be5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 81f2 	bne.w	800228e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d112      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0x24e>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	801a      	strh	r2, [r3, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	801a      	strh	r2, [r3, #0]
 8001ef6:	e02f      	b.n	8001f58 <PCD_EP_ISR_Handler+0x2ae>
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b3e      	cmp	r3, #62	; 0x3e
 8001efe:	d813      	bhi.n	8001f28 <PCD_EP_ISR_Handler+0x27e>
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	085b      	lsrs	r3, r3, #1
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <PCD_EP_ISR_Handler+0x270>
 8001f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f16:	3301      	adds	r3, #1
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	e017      	b.n	8001f58 <PCD_EP_ISR_Handler+0x2ae>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <PCD_EP_ISR_Handler+0x298>
 8001f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	633b      	str	r3, [r7, #48]	; 0x30
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	029b      	lsls	r3, r3, #10
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f68:	827b      	strh	r3, [r7, #18]
 8001f6a:	8a7b      	ldrh	r3, [r7, #18]
 8001f6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f70:	827b      	strh	r3, [r7, #18]
 8001f72:	8a7b      	ldrh	r3, [r7, #18]
 8001f74:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f78:	827b      	strh	r3, [r7, #18]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	8a7b      	ldrh	r3, [r7, #18]
 8001f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	8013      	strh	r3, [r2, #0]
 8001f94:	e17b      	b.n	800228e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fa8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f280 80ea 	bge.w	8002186 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fc8:	4013      	ands	r3, r2
 8001fca:	853b      	strh	r3, [r7, #40]	; 0x28
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fe0:	b292      	uxth	r2, r2
 8001fe2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fe4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	7b1b      	ldrb	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d122      	bne.n	8002048 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	3306      	adds	r3, #6
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800202c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8087 	beq.w	8002142 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	6959      	ldr	r1, [r3, #20]
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	88da      	ldrh	r2, [r3, #6]
 8002040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002042:	f005 fb3a 	bl	80076ba <USB_ReadPMA>
 8002046:	e07c      	b.n	8002142 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	78db      	ldrb	r3, [r3, #3]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d108      	bne.n	8002062 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002050:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002052:	461a      	mov	r2, r3
 8002054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f927 	bl	80022aa <HAL_PCD_EP_DB_Receive>
 800205c:	4603      	mov	r3, r0
 800205e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002060:	e06f      	b.n	8002142 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207c:	847b      	strh	r3, [r7, #34]	; 0x22
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	441a      	add	r2, r3
 800208c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800208e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800209e:	b29b      	uxth	r3, r3
 80020a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d021      	beq.n	8002100 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	3302      	adds	r3, #2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02a      	beq.n	8002142 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	6959      	ldr	r1, [r3, #20]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	891a      	ldrh	r2, [r3, #8]
 80020f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020fa:	f005 fade 	bl	80076ba <USB_ReadPMA>
 80020fe:	e020      	b.n	8002142 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002108:	b29b      	uxth	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	3306      	adds	r3, #6
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800212a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	6959      	ldr	r1, [r3, #20]
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	895a      	ldrh	r2, [r3, #10]
 800213c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800213e:	f005 fabc 	bl	80076ba <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002148:	441a      	add	r2, r3
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002154:	441a      	add	r2, r3
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d004      	beq.n	800216c <PCD_EP_ISR_Handler+0x4c2>
 8002162:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d206      	bcs.n	800217a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f009 fe72 	bl	800be5c <HAL_PCD_DataOutStageCallback>
 8002178:	e005      	b.n	8002186 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fadf 	bl	8005744 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002186:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d07e      	beq.n	800228e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002190:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	843b      	strh	r3, [r7, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	8c3b      	ldrh	r3, [r7, #32]
 80021d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d8:	b29b      	uxth	r3, r3
 80021da:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	78db      	ldrb	r3, [r3, #3]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d00c      	beq.n	80021fe <PCD_EP_ISR_Handler+0x554>
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	78db      	ldrb	r3, [r3, #3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d146      	bne.n	8002282 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d141      	bne.n	8002282 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	3302      	adds	r3, #2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002226:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	699a      	ldr	r2, [r3, #24]
 800222c:	8bfb      	ldrh	r3, [r7, #30]
 800222e:	429a      	cmp	r2, r3
 8002230:	d906      	bls.n	8002240 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	8bfb      	ldrh	r3, [r7, #30]
 8002238:	1ad2      	subs	r2, r2, r3
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	619a      	str	r2, [r3, #24]
 800223e:	e002      	b.n	8002246 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f009 fe1c 	bl	800be92 <HAL_PCD_DataInStageCallback>
 800225a:	e018      	b.n	800228e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	8bfb      	ldrh	r3, [r7, #30]
 8002262:	441a      	add	r2, r3
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	8bfb      	ldrh	r3, [r7, #30]
 800226e:	441a      	add	r2, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227a:	4618      	mov	r0, r3
 800227c:	f003 fa62 	bl	8005744 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002280:	e005      	b.n	800228e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002284:	461a      	mov	r2, r3
 8002286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f91b 	bl	80024c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002296:	b29b      	uxth	r3, r3
 8002298:	b21b      	sxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	f6ff ad0a 	blt.w	8001cb4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3738      	adds	r7, #56	; 0x38
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b088      	sub	sp, #32
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	4613      	mov	r3, r2
 80022b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07e      	beq.n	80023c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3302      	adds	r3, #2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	8b7b      	ldrh	r3, [r7, #26]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d306      	bcc.n	8002304 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	8b7b      	ldrh	r3, [r7, #26]
 80022fc:	1ad2      	subs	r2, r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	619a      	str	r2, [r3, #24]
 8002302:	e002      	b.n	800230a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d123      	bne.n	800235a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232c:	833b      	strh	r3, [r7, #24]
 800232e:	8b3b      	ldrh	r3, [r7, #24]
 8002330:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002334:	833b      	strh	r3, [r7, #24]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	441a      	add	r2, r3
 8002344:	8b3b      	ldrh	r3, [r7, #24]
 8002346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800234e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002356:	b29b      	uxth	r3, r3
 8002358:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01f      	beq.n	80023a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237e:	82fb      	strh	r3, [r7, #22]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	8afb      	ldrh	r3, [r7, #22]
 8002390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023a4:	8b7b      	ldrh	r3, [r7, #26]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	6959      	ldr	r1, [r3, #20]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	891a      	ldrh	r2, [r3, #8]
 80023b8:	8b7b      	ldrh	r3, [r7, #26]
 80023ba:	f005 f97e 	bl	80076ba <USB_ReadPMA>
 80023be:	e07c      	b.n	80024ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	3306      	adds	r3, #6
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	8b7b      	ldrh	r3, [r7, #26]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d306      	bcc.n	8002402 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	8b7b      	ldrh	r3, [r7, #26]
 80023fa:	1ad2      	subs	r2, r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	619a      	str	r2, [r3, #24]
 8002400:	e002      	b.n	8002408 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d123      	bne.n	8002458 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	b29b      	uxth	r3, r3
 8002422:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242a:	83fb      	strh	r3, [r7, #30]
 800242c:	8bfb      	ldrh	r3, [r7, #30]
 800242e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002432:	83fb      	strh	r3, [r7, #30]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	8bfb      	ldrh	r3, [r7, #30]
 8002444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800244c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	b29b      	uxth	r3, r3
 8002456:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d11f      	bne.n	80024a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247c:	83bb      	strh	r3, [r7, #28]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	441a      	add	r2, r3
 800248c:	8bbb      	ldrh	r3, [r7, #28]
 800248e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800249e:	b29b      	uxth	r3, r3
 80024a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80024a2:	8b7b      	ldrh	r3, [r7, #26]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	895a      	ldrh	r2, [r3, #10]
 80024b4:	8b7b      	ldrh	r3, [r7, #26]
 80024b6:	f005 f900 	bl	80076ba <USB_ReadPMA>
    }
  }

  return count;
 80024ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b0a2      	sub	sp, #136	; 0x88
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 81c7 	beq.w	800286c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	3302      	adds	r3, #2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002506:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002512:	429a      	cmp	r2, r3
 8002514:	d907      	bls.n	8002526 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	619a      	str	r2, [r3, #24]
 8002524:	e002      	b.n	800252c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 80b9 	bne.w	80026a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d126      	bne.n	800258c <HAL_PCD_EP_DB_Transmit+0xc8>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	4413      	add	r3, r2
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	011a      	lsls	r2, r3, #4
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	4413      	add	r3, r2
 8002560:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002570:	b29a      	uxth	r2, r3
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002584:	b29a      	uxth	r2, r3
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	e01a      	b.n	80025c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d116      	bne.n	80025c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	4413      	add	r3, r2
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	011a      	lsls	r2, r3, #4
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	4413      	add	r3, r2
 80025b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	2200      	movs	r2, #0
 80025c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d126      	bne.n	800261e <HAL_PCD_EP_DB_Transmit+0x15a>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	4413      	add	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	011a      	lsls	r2, r3, #4
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002602:	b29a      	uxth	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	801a      	strh	r2, [r3, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002616:	b29a      	uxth	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	801a      	strh	r2, [r3, #0]
 800261c:	e017      	b.n	800264e <HAL_PCD_EP_DB_Transmit+0x18a>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d113      	bne.n	800264e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	4413      	add	r3, r2
 8002636:	623b      	str	r3, [r7, #32]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	011a      	lsls	r2, r3, #4
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	4413      	add	r3, r2
 8002642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2200      	movs	r2, #0
 800264c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	4619      	mov	r1, r3
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f009 fc1c 	bl	800be92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 82d4 	beq.w	8002c0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002680:	827b      	strh	r3, [r7, #18]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	441a      	add	r2, r3
 8002690:	8a7b      	ldrh	r3, [r7, #18]
 8002692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800269a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800269e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	8013      	strh	r3, [r2, #0]
 80026a6:	e2b2      	b.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d021      	beq.n	80026f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	441a      	add	r2, r3
 80026de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80026e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 8286 	bne.w	8002c0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270a:	441a      	add	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002718:	441a      	add	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	6a1a      	ldr	r2, [r3, #32]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	429a      	cmp	r2, r3
 8002728:	d309      	bcc.n	800273e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	621a      	str	r2, [r3, #32]
 800273c:	e015      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d107      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002746:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800274a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002754:	e009      	b.n	800276a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d155      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002780:	b29b      	uxth	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002786:	4413      	add	r3, r2
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	011a      	lsls	r2, r3, #4
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	4413      	add	r3, r2
 8002794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
 800279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279c:	2b00      	cmp	r3, #0
 800279e:	d112      	bne.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x302>
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027be:	b29a      	uxth	r2, r3
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	801a      	strh	r2, [r3, #0]
 80027c4:	e047      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x392>
 80027c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c8:	2b3e      	cmp	r3, #62	; 0x3e
 80027ca:	d811      	bhi.n	80027f0 <HAL_PCD_EP_DB_Transmit+0x32c>
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x31e>
 80027dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027de:	3301      	adds	r3, #1
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	e032      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x392>
 80027f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <HAL_PCD_EP_DB_Transmit+0x342>
 8002800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002802:	3b01      	subs	r3, #1
 8002804:	64bb      	str	r3, [r7, #72]	; 0x48
 8002806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002808:	b29b      	uxth	r3, r3
 800280a:	029b      	lsls	r3, r3, #10
 800280c:	b29b      	uxth	r3, r3
 800280e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002816:	b29a      	uxth	r2, r3
 8002818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	e01b      	b.n	8002856 <HAL_PCD_EP_DB_Transmit+0x392>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d117      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0x392>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283a:	4413      	add	r3, r2
 800283c:	643b      	str	r3, [r7, #64]	; 0x40
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	011a      	lsls	r2, r3, #4
 8002844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002846:	4413      	add	r3, r2
 8002848:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002850:	b29a      	uxth	r2, r3
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	6959      	ldr	r1, [r3, #20]
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	891a      	ldrh	r2, [r3, #8]
 8002862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	f004 fee3 	bl	8007630 <USB_WritePMA>
 800286a:	e1d0      	b.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	3306      	adds	r3, #6
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002894:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d307      	bcc.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	699a      	ldr	r2, [r3, #24]
 80028a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028ac:	1ad2      	subs	r2, r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	619a      	str	r2, [r3, #24]
 80028b2:	e002      	b.n	80028ba <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 80c4 	bne.w	8002a4c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d126      	bne.n	800291a <HAL_PCD_EP_DB_Transmit+0x456>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028da:	b29b      	uxth	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e0:	4413      	add	r3, r2
 80028e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	011a      	lsls	r2, r3, #4
 80028ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ec:	4413      	add	r3, r2
 80028ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028fe:	b29a      	uxth	r2, r3
 8002900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002902:	801a      	strh	r2, [r3, #0]
 8002904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002912:	b29a      	uxth	r2, r3
 8002914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	e01a      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x48c>
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d116      	bne.n	8002950 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	677b      	str	r3, [r7, #116]	; 0x74
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002936:	4413      	add	r3, r2
 8002938:	677b      	str	r3, [r7, #116]	; 0x74
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	011a      	lsls	r2, r3, #4
 8002940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002942:	4413      	add	r3, r2
 8002944:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002948:	673b      	str	r3, [r7, #112]	; 0x70
 800294a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294c:	2200      	movs	r2, #0
 800294e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	67bb      	str	r3, [r7, #120]	; 0x78
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d12f      	bne.n	80029be <HAL_PCD_EP_DB_Transmit+0x4fa>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002976:	4413      	add	r3, r2
 8002978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	011a      	lsls	r2, r3, #4
 8002982:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002986:	4413      	add	r3, r2
 8002988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800298c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800299c:	b29a      	uxth	r2, r3
 800299e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e017      	b.n	80029ee <HAL_PCD_EP_DB_Transmit+0x52a>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	785b      	ldrb	r3, [r3, #1]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d113      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x52a>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d4:	4413      	add	r3, r2
 80029d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	011a      	lsls	r2, r3, #4
 80029de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029e0:	4413      	add	r3, r2
 80029e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f009 fa4c 	bl	800be92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 8104 	bne.w	8002c0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	441a      	add	r2, r3
 8002a32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	8013      	strh	r3, [r2, #0]
 8002a4a:	e0e0      	b.n	8002c0e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d121      	bne.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a70:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	f040 80b4 	bne.w	8002c0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aae:	441a      	add	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002abc:	441a      	add	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6a1a      	ldr	r2, [r3, #32]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d309      	bcc.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ada:	1ad2      	subs	r2, r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	621a      	str	r2, [r3, #32]
 8002ae0:	e015      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002aea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002af8:	e009      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	667b      	str	r3, [r7, #100]	; 0x64
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d155      	bne.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x704>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b30:	4413      	add	r3, r2
 8002b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	011a      	lsls	r2, r3, #4
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b42:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d112      	bne.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6c:	801a      	strh	r2, [r3, #0]
 8002b6e:	e044      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b72:	2b3e      	cmp	r3, #62	; 0x3e
 8002b74:	d811      	bhi.n	8002b9a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b88:	3301      	adds	r3, #1
 8002b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	e02f      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8002ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bac:	3b01      	subs	r3, #1
 8002bae:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	e018      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	785b      	ldrb	r3, [r3, #1]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d114      	bne.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bde:	4413      	add	r3, r2
 8002be0:	667b      	str	r3, [r7, #100]	; 0x64
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	011a      	lsls	r2, r3, #4
 8002be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bea:	4413      	add	r3, r2
 8002bec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6959      	ldr	r1, [r3, #20]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	895a      	ldrh	r2, [r3, #10]
 8002c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f004 fd11 	bl	8007630 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c28:	823b      	strh	r3, [r7, #16]
 8002c2a:	8a3b      	ldrh	r3, [r7, #16]
 8002c2c:	f083 0310 	eor.w	r3, r3, #16
 8002c30:	823b      	strh	r3, [r7, #16]
 8002c32:	8a3b      	ldrh	r3, [r7, #16]
 8002c34:	f083 0320 	eor.w	r3, r3, #32
 8002c38:	823b      	strh	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	8a3b      	ldrh	r3, [r7, #16]
 8002c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3788      	adds	r7, #136	; 0x88
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	4613      	mov	r3, r2
 8002c78:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c7a:	897b      	ldrh	r3, [r7, #10]
 8002c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	897b      	ldrh	r3, [r7, #10]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e009      	b.n	8002cb2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c9e:	897a      	ldrh	r2, [r7, #10]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002cb2:	893b      	ldrh	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d107      	bne.n	8002cc8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	80da      	strh	r2, [r3, #6]
 8002cc6:	e00b      	b.n	8002ce0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e272      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8087 	beq.w	8002e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0c:	4b92      	ldr	r3, [pc, #584]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d00c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d112      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
 8002d24:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d06c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x12c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d168      	bne.n	8002e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e24c      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x76>
 8002d54:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a7f      	ldr	r2, [pc, #508]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e02e      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7a      	ldr	r2, [pc, #488]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b78      	ldr	r3, [pc, #480]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0xbc>
 8002d8e:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002da8:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fd fe88 	bl	8000adc <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fd fe84 	bl	8000adc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e200      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe4>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fd fe74 	bl	8000adc <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fd fe70 	bl	8000adc <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1ec      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x10c>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1c0      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4939      	ldr	r1, [pc, #228]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fd fe29 	bl	8000adc <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fd fe25 	bl	8000adc <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1a1      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4927      	ldr	r1, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fe08 	bl	8000adc <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fd fe04 	bl	8000adc <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e180      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03a      	beq.n	8002f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fd fde8 	bl	8000adc <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fd fde4 	bl	8000adc <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e160      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 fb08 	bl	8003544 <RCC_Delay>
 8002f34:	e01c      	b.n	8002f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fdce 	bl	8000adc <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f42:	e00f      	b.n	8002f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fd fdca 	bl	8000adc <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e146      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	42420000 	.word	0x42420000
 8002f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b92      	ldr	r3, [pc, #584]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e9      	bne.n	8002f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a6 	beq.w	80030ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b8b      	ldr	r3, [pc, #556]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b88      	ldr	r3, [pc, #544]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a87      	ldr	r2, [pc, #540]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]
 8002f9a:	4b85      	ldr	r3, [pc, #532]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b82      	ldr	r3, [pc, #520]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b7f      	ldr	r3, [pc, #508]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7e      	ldr	r2, [pc, #504]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fd fd8b 	bl	8000adc <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fd fd87 	bl	8000adc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e103      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <HAL_RCC_OscConfig+0x4c8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x312>
 8002ff0:	4b6f      	ldr	r3, [pc, #444]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a6e      	ldr	r2, [pc, #440]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003006:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a69      	ldr	r2, [pc, #420]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a66      	ldr	r2, [pc, #408]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x356>
 8003028:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a60      	ldr	r2, [pc, #384]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	4b5e      	ldr	r3, [pc, #376]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a5d      	ldr	r2, [pc, #372]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003042:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a5a      	ldr	r2, [pc, #360]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	4b58      	ldr	r3, [pc, #352]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a57      	ldr	r2, [pc, #348]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fd fd3b 	bl	8000adc <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fd fd37 	bl	8000adc <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0b1      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x37e>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fd fd25 	bl	8000adc <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fd fd21 	bl	8000adc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e09b      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b3c      	ldr	r3, [pc, #240]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a3b      	ldr	r2, [pc, #236]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8087 	beq.w	80031e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d061      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d146      	bne.n	8003176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_RCC_OscConfig+0x4cc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fd fcf5 	bl	8000adc <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fd fcf1 	bl	8000adc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e06d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d108      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	4921      	ldr	r1, [pc, #132]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003130:	4b1f      	ldr	r3, [pc, #124]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a19      	ldr	r1, [r3, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	430b      	orrs	r3, r1
 8003142:	491b      	ldr	r1, [pc, #108]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x4cc>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fd fcc5 	bl	8000adc <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fd fcc1 	bl	8000adc <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x46a>
 8003174:	e035      	b.n	80031e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <HAL_RCC_OscConfig+0x4cc>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fd fcae 	bl	8000adc <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fd fcaa 	bl	8000adc <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e026      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x498>
 80031a2:	e01e      	b.n	80031e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e019      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
 80031b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x500>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000

080031f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0d0      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003204:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d910      	bls.n	8003234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4965      	ldr	r1, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003256:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800326e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d040      	beq.n	8003310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d115      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e073      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e06b      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ce:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4936      	ldr	r1, [pc, #216]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fd fbfc 	bl	8000adc <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fd fbf8 	bl	8000adc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e053      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 020c 	and.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1eb      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d210      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 0207 	bic.w	r2, r3, #7
 8003326:	4922      	ldr	r1, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1cc>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1d0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fa7c 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40021000 	.word	0x40021000
 80033b8:	0800c598 	.word	0x0800c598
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	b490      	push	{r4, r7}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033ca:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_GetSysClockFreq+0xac>)
 80033cc:	1d3c      	adds	r4, r7, #4
 80033ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033d4:	f240 2301 	movw	r3, #513	; 0x201
 80033d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ee:	4b21      	ldr	r3, [pc, #132]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d002      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0x46>
 8003402:	e02b      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003404:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003406:	623b      	str	r3, [r7, #32]
      break;
 8003408:	e02b      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	0c9b      	lsrs	r3, r3, #18
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3328      	adds	r3, #40	; 0x28
 8003414:	443b      	add	r3, r7
 8003416:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800341a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0c5b      	lsrs	r3, r3, #17
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	3328      	adds	r3, #40	; 0x28
 8003432:	443b      	add	r3, r7
 8003434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb4>)
 800343e:	fb03 f202 	mul.w	r2, r3, r2
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e004      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a0b      	ldr	r2, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	623b      	str	r3, [r7, #32]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb4>)
 800345e:	623b      	str	r3, [r7, #32]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6a3b      	ldr	r3, [r7, #32]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc90      	pop	{r4, r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	0800c510 	.word	0x0800c510
 8003474:	40021000 	.word	0x40021000
 8003478:	007a1200 	.word	0x007a1200
 800347c:	003d0900 	.word	0x003d0900

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <HAL_RCC_GetHCLKFreq+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff2 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	0800c5a8 	.word	0x0800c5a8

080034bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c0:	f7ff ffde 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0adb      	lsrs	r3, r3, #11
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800c5a8 	.word	0x0800c5a8

080034e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	220f      	movs	r2, #15
 80034f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_RCC_GetClockConfig+0x58>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <HAL_RCC_GetClockConfig+0x58>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_GetClockConfig+0x58>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCC_GetClockConfig+0x58>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	08db      	lsrs	r3, r3, #3
 800351e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_GetClockConfig+0x5c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0207 	and.w	r2, r3, #7
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40021000 	.word	0x40021000
 8003540:	40022000 	.word	0x40022000

08003544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <RCC_Delay+0x34>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <RCC_Delay+0x38>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0a5b      	lsrs	r3, r3, #9
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003560:	bf00      	nop
  }
  while (Delay --);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <RCC_Delay+0x1c>
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d07d      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
 80035b8:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d118      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d4:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a42      	ldr	r2, [pc, #264]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e0:	f7fd fa7c 	bl	8000adc <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	e008      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fd fa78 	bl	8000adc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e06d      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003606:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d02e      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	429a      	cmp	r2, r3
 8003622:	d027      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003624:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003634:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fd fa47 	bl	8000adc <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fa43 	bl	8000adc <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e036      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4917      	ldr	r1, [pc, #92]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	4313      	orrs	r3, r2
 8003684:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	490b      	ldr	r1, [pc, #44]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42420440 	.word	0x42420440

080036ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e076      	b.n	80037ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d108      	bne.n	8003718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800370e:	d009      	beq.n	8003724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
 8003716:	e005      	b.n	8003724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fc ff88 	bl	8000654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	ea42 0103 	orr.w	r1, r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	0c1a      	lsrs	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f002 0204 	and.w	r2, r2, #4
 80037ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69da      	ldr	r2, [r3, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e04c      	b.n	80038a0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d111      	bne.n	8003836 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f001 f824 	bl	8004868 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_TIM_Base_Init+0xb4>)
 800382c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 fd69 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	080006d1 	.word	0x080006d1

080038ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e03a      	b.n	800393a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a18      	ldr	r2, [pc, #96]	; (8003944 <HAL_TIM_Base_Start_IT+0x98>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x58>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d009      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x58>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <HAL_TIM_Base_Start_IT+0x9c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x58>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <HAL_TIM_Base_Start_IT+0xa0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d111      	bne.n	8003928 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d010      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	e007      	b.n	8003938 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800

08003950 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e04c      	b.n	80039fc <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d111      	bne.n	8003992 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 ff76 	bl	8004868 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_TIM_OC_Init+0xb4>)
 8003988:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f000 fcbb 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	08003a09 	.word	0x08003a09

08003a08 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d109      	bne.n	8003a40 <HAL_TIM_PWM_Start+0x24>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e022      	b.n	8003a86 <HAL_TIM_PWM_Start+0x6a>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d109      	bne.n	8003a5a <HAL_TIM_PWM_Start+0x3e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	bf14      	ite	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	2300      	moveq	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e015      	b.n	8003a86 <HAL_TIM_PWM_Start+0x6a>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d109      	bne.n	8003a74 <HAL_TIM_PWM_Start+0x58>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	e008      	b.n	8003a86 <HAL_TIM_PWM_Start+0x6a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e05e      	b.n	8003b4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Start+0x82>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a9c:	e013      	b.n	8003ac6 <HAL_TIM_PWM_Start+0xaa>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0x92>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aac:	e00b      	b.n	8003ac6 <HAL_TIM_PWM_Start+0xaa>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_PWM_Start+0xa2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003abc:	e003      	b.n	8003ac6 <HAL_TIM_PWM_Start+0xaa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	6839      	ldr	r1, [r7, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fea6 	bl	8004820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_TIM_PWM_Start+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d107      	bne.n	8003aee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_TIM_PWM_Start+0x138>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_TIM_PWM_Start+0xfa>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d009      	beq.n	8003b16 <HAL_TIM_PWM_Start+0xfa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_TIM_PWM_Start+0x13c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_TIM_PWM_Start+0xfa>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_TIM_PWM_Start+0x140>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d111      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d010      	beq.n	8003b4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b38:	e007      	b.n	8003b4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40000400 	.word	0x40000400
 8003b5c:	40000800 	.word	0x40000800

08003b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d128      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d121      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0202 	mvn.w	r2, #2
 8003b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e009      	b.n	8003bc2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d128      	bne.n	8003c28 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d121      	bne.n	8003c28 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0204 	mvn.w	r2, #4
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e009      	b.n	8003c22 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d128      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d121      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0208 	mvn.w	r2, #8
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2204      	movs	r2, #4
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
 8003c6c:	e009      	b.n	8003c82 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d128      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d121      	bne.n	8003ce8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0210 	mvn.w	r2, #16
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
 8003ccc:	e009      	b.n	8003ce2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d110      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d109      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0201 	mvn.w	r2, #1
 8003d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b80      	cmp	r3, #128	; 0x80
 8003d24:	d110      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b80      	cmp	r3, #128	; 0x80
 8003d32:	d109      	bne.n	8003d48 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b40      	cmp	r3, #64	; 0x40
 8003d54:	d110      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d109      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d110      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d109      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0220 	mvn.w	r2, #32
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_OC_ConfigChannel+0x1a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e046      	b.n	8003e58 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d839      	bhi.n	8003e4c <HAL_TIM_OC_ConfigChannel+0x9c>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003e4d 	.word	0x08003e4d
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	08003e23 	.word	0x08003e23
 8003df4:	08003e4d 	.word	0x08003e4d
 8003df8:	08003e4d 	.word	0x08003e4d
 8003dfc:	08003e4d 	.word	0x08003e4d
 8003e00:	08003e31 	.word	0x08003e31
 8003e04:	08003e4d 	.word	0x08003e4d
 8003e08:	08003e4d 	.word	0x08003e4d
 8003e0c:	08003e4d 	.word	0x08003e4d
 8003e10:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fae2 	bl	80043e4 <TIM_OC1_SetConfig>
      break;
 8003e20:	e015      	b.n	8003e4e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fb41 	bl	80044b0 <TIM_OC2_SetConfig>
      break;
 8003e2e:	e00e      	b.n	8003e4e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fba4 	bl	8004584 <TIM_OC3_SetConfig>
      break;
 8003e3c:	e007      	b.n	8003e4e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fc07 	bl	8004658 <TIM_OC4_SetConfig>
      break;
 8003e4a:	e000      	b.n	8003e4e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003e4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIM_ConfigClockSource+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e0b3      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x180>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb0:	d03e      	beq.n	8003f30 <HAL_TIM_ConfigClockSource+0xd0>
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	f200 8087 	bhi.w	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebe:	f000 8085 	beq.w	8003fcc <HAL_TIM_ConfigClockSource+0x16c>
 8003ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec6:	d87f      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ec8:	2b70      	cmp	r3, #112	; 0x70
 8003eca:	d01a      	beq.n	8003f02 <HAL_TIM_ConfigClockSource+0xa2>
 8003ecc:	2b70      	cmp	r3, #112	; 0x70
 8003ece:	d87b      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ed0:	2b60      	cmp	r3, #96	; 0x60
 8003ed2:	d050      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x116>
 8003ed4:	2b60      	cmp	r3, #96	; 0x60
 8003ed6:	d877      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ed8:	2b50      	cmp	r3, #80	; 0x50
 8003eda:	d03c      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0xf6>
 8003edc:	2b50      	cmp	r3, #80	; 0x50
 8003ede:	d873      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d058      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x136>
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d86f      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ee8:	2b30      	cmp	r3, #48	; 0x30
 8003eea:	d064      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x156>
 8003eec:	2b30      	cmp	r3, #48	; 0x30
 8003eee:	d86b      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d060      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x156>
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d867      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d05c      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x156>
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d05a      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f00:	e062      	b.n	8003fc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6899      	ldr	r1, [r3, #8]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f000 fc66 	bl	80047e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	609a      	str	r2, [r3, #8]
      break;
 8003f2e:	e04e      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f000 fc4f 	bl	80047e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f52:	609a      	str	r2, [r3, #8]
      break;
 8003f54:	e03b      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fbc6 	bl	80046f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2150      	movs	r1, #80	; 0x50
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fc1d 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8003f74:	e02b      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f000 fbe4 	bl	8004750 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2160      	movs	r1, #96	; 0x60
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fc0d 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8003f94:	e01b      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6859      	ldr	r1, [r3, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f000 fba6 	bl	80046f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2140      	movs	r1, #64	; 0x40
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fbfd 	bl	80047ae <TIM_ITRx_SetConfig>
      break;
 8003fb4:	e00b      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f000 fbf4 	bl	80047ae <TIM_ITRx_SetConfig>
        break;
 8003fc6:	e002      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr

08004066 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
	...

0800408c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	460b      	mov	r3, r1
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e135      	b.n	8004314 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_RegisterCallback+0x2a>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e12e      	b.n	8004314 <HAL_TIM_RegisterCallback+0x288>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 80ba 	bne.w	8004240 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80040cc:	7afb      	ldrb	r3, [r7, #11]
 80040ce:	2b1a      	cmp	r3, #26
 80040d0:	f200 80b3 	bhi.w	800423a <HAL_TIM_RegisterCallback+0x1ae>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_TIM_RegisterCallback+0x50>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004149 	.word	0x08004149
 80040e0:	08004151 	.word	0x08004151
 80040e4:	08004159 	.word	0x08004159
 80040e8:	08004161 	.word	0x08004161
 80040ec:	08004169 	.word	0x08004169
 80040f0:	08004171 	.word	0x08004171
 80040f4:	08004179 	.word	0x08004179
 80040f8:	08004181 	.word	0x08004181
 80040fc:	08004189 	.word	0x08004189
 8004100:	08004191 	.word	0x08004191
 8004104:	08004199 	.word	0x08004199
 8004108:	080041a1 	.word	0x080041a1
 800410c:	080041a9 	.word	0x080041a9
 8004110:	080041b1 	.word	0x080041b1
 8004114:	080041b9 	.word	0x080041b9
 8004118:	080041c3 	.word	0x080041c3
 800411c:	080041cd 	.word	0x080041cd
 8004120:	080041d7 	.word	0x080041d7
 8004124:	080041e1 	.word	0x080041e1
 8004128:	080041eb 	.word	0x080041eb
 800412c:	080041f5 	.word	0x080041f5
 8004130:	080041ff 	.word	0x080041ff
 8004134:	08004209 	.word	0x08004209
 8004138:	08004213 	.word	0x08004213
 800413c:	0800421d 	.word	0x0800421d
 8004140:	08004227 	.word	0x08004227
 8004144:	08004231 	.word	0x08004231
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800414e:	e0dc      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004156:	e0d8      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800415e:	e0d4      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004166:	e0d0      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800416e:	e0cc      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004176:	e0c8      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800417e:	e0c4      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004186:	e0c0      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800418e:	e0bc      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004196:	e0b8      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800419e:	e0b4      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80041a6:	e0b0      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80041ae:	e0ac      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80041b6:	e0a8      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80041c0:	e0a3      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80041ca:	e09e      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80041d4:	e099      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80041de:	e094      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80041e8:	e08f      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80041f2:	e08a      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80041fc:	e085      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004206:	e080      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004210:	e07b      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800421a:	e076      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004224:	e071      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800422e:	e06c      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004238:	e067      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
        break;
 800423e:	e064      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d15c      	bne.n	8004306 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800424c:	7afb      	ldrb	r3, [r7, #11]
 800424e:	2b0d      	cmp	r3, #13
 8004250:	d856      	bhi.n	8004300 <HAL_TIM_RegisterCallback+0x274>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <HAL_TIM_RegisterCallback+0x1cc>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004291 	.word	0x08004291
 800425c:	08004299 	.word	0x08004299
 8004260:	080042a1 	.word	0x080042a1
 8004264:	080042a9 	.word	0x080042a9
 8004268:	080042b1 	.word	0x080042b1
 800426c:	080042b9 	.word	0x080042b9
 8004270:	080042c1 	.word	0x080042c1
 8004274:	080042c9 	.word	0x080042c9
 8004278:	080042d1 	.word	0x080042d1
 800427c:	080042d9 	.word	0x080042d9
 8004280:	080042e1 	.word	0x080042e1
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080042f1 	.word	0x080042f1
 800428c:	080042f9 	.word	0x080042f9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004296:	e038      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800429e:	e034      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80042a6:	e030      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80042ae:	e02c      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80042b6:	e028      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80042be:	e024      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80042c6:	e020      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80042ce:	e01c      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80042d6:	e018      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80042de:	e014      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80042e6:	e010      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80042ee:	e00c      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80042f6:	e008      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80042fe:	e004      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
        break;
 8004304:	e001      	b.n	800430a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a29      	ldr	r2, [pc, #164]	; (80043d8 <TIM_Base_SetConfig+0xb8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00b      	beq.n	8004350 <TIM_Base_SetConfig+0x30>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d007      	beq.n	8004350 <TIM_Base_SetConfig+0x30>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a26      	ldr	r2, [pc, #152]	; (80043dc <TIM_Base_SetConfig+0xbc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0x30>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <TIM_Base_SetConfig+0xc0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <TIM_Base_SetConfig+0xb8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00b      	beq.n	8004382 <TIM_Base_SetConfig+0x62>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004370:	d007      	beq.n	8004382 <TIM_Base_SetConfig+0x62>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a19      	ldr	r2, [pc, #100]	; (80043dc <TIM_Base_SetConfig+0xbc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_Base_SetConfig+0x62>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <TIM_Base_SetConfig+0xc0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d108      	bne.n	8004394 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <TIM_Base_SetConfig+0xb8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d103      	bne.n	80043c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	615a      	str	r2, [r3, #20]
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800

080043e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0303 	bic.w	r3, r3, #3
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f023 0302 	bic.w	r3, r3, #2
 800442c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <TIM_OC1_SetConfig+0xc8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10c      	bne.n	800445a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f023 0308 	bic.w	r3, r3, #8
 8004446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f023 0304 	bic.w	r3, r3, #4
 8004458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a13      	ldr	r2, [pc, #76]	; (80044ac <TIM_OC1_SetConfig+0xc8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d111      	bne.n	8004486 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	621a      	str	r2, [r3, #32]
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40012c00 	.word	0x40012c00

080044b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 0210 	bic.w	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0320 	bic.w	r3, r3, #32
 80044fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1d      	ldr	r2, [pc, #116]	; (8004580 <TIM_OC2_SetConfig+0xd0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10d      	bne.n	800452c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a14      	ldr	r2, [pc, #80]	; (8004580 <TIM_OC2_SetConfig+0xd0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d113      	bne.n	800455c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00

08004584 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0303 	bic.w	r3, r3, #3
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <TIM_OC3_SetConfig+0xd0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d10d      	bne.n	80045fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a14      	ldr	r2, [pc, #80]	; (8004654 <TIM_OC3_SetConfig+0xd0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d113      	bne.n	800462e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800460c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	621a      	str	r2, [r3, #32]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40012c00 	.word	0x40012c00

08004658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	031b      	lsls	r3, r3, #12
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <TIM_OC4_SetConfig+0x98>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d109      	bne.n	80046cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f023 0201 	bic.w	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800471e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 030a 	bic.w	r3, r3, #10
 8004730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	621a      	str	r2, [r3, #32]
}
 8004746:	bf00      	nop
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f023 0210 	bic.w	r2, r3, #16
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800477a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	031b      	lsls	r3, r3, #12
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800478c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f043 0307 	orr.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	609a      	str	r2, [r3, #8]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	021a      	lsls	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	431a      	orrs	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4313      	orrs	r3, r2
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	609a      	str	r2, [r3, #8]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2201      	movs	r2, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1a      	ldr	r2, [r3, #32]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a1a      	ldr	r2, [r3, #32]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 031f 	and.w	r3, r3, #31
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <TIM_ResetCallback+0x7c>)
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <TIM_ResetCallback+0x80>)
 800487c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1a      	ldr	r2, [pc, #104]	; (80048ec <TIM_ResetCallback+0x84>)
 8004884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <TIM_ResetCallback+0x88>)
 800488c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <TIM_ResetCallback+0x8c>)
 8004894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <TIM_ResetCallback+0x90>)
 800489c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a16      	ldr	r2, [pc, #88]	; (80048fc <TIM_ResetCallback+0x94>)
 80048a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a15      	ldr	r2, [pc, #84]	; (8004900 <TIM_ResetCallback+0x98>)
 80048ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a14      	ldr	r2, [pc, #80]	; (8004904 <TIM_ResetCallback+0x9c>)
 80048b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a13      	ldr	r2, [pc, #76]	; (8004908 <TIM_ResetCallback+0xa0>)
 80048bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <TIM_ResetCallback+0xa4>)
 80048c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <TIM_ResetCallback+0xa8>)
 80048cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <TIM_ResetCallback+0xac>)
 80048d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	080005a9 	.word	0x080005a9
 80048e8:	08003fe9 	.word	0x08003fe9
 80048ec:	08004055 	.word	0x08004055
 80048f0:	08004067 	.word	0x08004067
 80048f4:	0800400d 	.word	0x0800400d
 80048f8:	0800401f 	.word	0x0800401f
 80048fc:	08003ffb 	.word	0x08003ffb
 8004900:	08004031 	.word	0x08004031
 8004904:	08004043 	.word	0x08004043
 8004908:	08004079 	.word	0x08004079
 800490c:	080049d5 	.word	0x080049d5
 8004910:	080049e7 	.word	0x080049e7
 8004914:	080049f9 	.word	0x080049f9

08004918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800492c:	2302      	movs	r3, #2
 800492e:	e046      	b.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d00e      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d009      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d004      	beq.n	8004992 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10c      	bne.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40000400 	.word	0x40000400
 80049d0:	40000800 	.word	0x40000800

080049d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e03f      	b.n	8004a9c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d106      	bne.n	8004a36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fb fee9 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2224      	movs	r2, #36	; 0x24
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f828 	bl	8004aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ade:	f023 030c 	bic.w	r3, r3, #12
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6812      	ldr	r2, [r2, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a2c      	ldr	r2, [pc, #176]	; (8004bb8 <UART_SetConfig+0x114>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d103      	bne.n	8004b14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b0c:	f7fe fcd6 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	e002      	b.n	8004b1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b14:	f7fe fcbe 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8004b18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	009a      	lsls	r2, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	4a22      	ldr	r2, [pc, #136]	; (8004bbc <UART_SetConfig+0x118>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	0119      	lsls	r1, r3, #4
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009a      	lsls	r2, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <UART_SetConfig+0x118>)
 8004b52:	fba3 0302 	umull	r0, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2064      	movs	r0, #100	; 0x64
 8004b5a:	fb00 f303 	mul.w	r3, r0, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <UART_SetConfig+0x118>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b70:	4419      	add	r1, r3
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009a      	lsls	r2, r3, #2
 8004b7c:	441a      	add	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b88:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <UART_SetConfig+0x118>)
 8004b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2064      	movs	r0, #100	; 0x64
 8004b92:	fb00 f303 	mul.w	r3, r0, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	3332      	adds	r3, #50	; 0x32
 8004b9c:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <UART_SetConfig+0x118>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	f003 020f 	and.w	r2, r3, #15
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	440a      	add	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40013800 	.word	0x40013800
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	f107 0014 	add.w	r0, r7, #20
 8004bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	b004      	add	sp, #16
 8004bde:	4770      	bx	lr

08004be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bf0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004bf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c18:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c58:	b084      	sub	sp, #16
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	f107 0014 	add.w	r0, r7, #20
 8004c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	b004      	add	sp, #16
 8004c96:	4770      	bx	lr

08004c98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b09b      	sub	sp, #108	; 0x6c
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	78db      	ldrb	r3, [r3, #3]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d81f      	bhi.n	8004d0a <USB_ActivateEndpoint+0x72>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <USB_ActivateEndpoint+0x38>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cfd 	.word	0x08004cfd
 8004cd8:	08004d13 	.word	0x08004d13
 8004cdc:	08004cef 	.word	0x08004cef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ce0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ce8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cec:	e012      	b.n	8004d14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cf2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004cf6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cfa:	e00b      	b.n	8004d14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cfc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d04:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d08:	e004      	b.n	8004d14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d10:	e000      	b.n	8004d14 <USB_ActivateEndpoint+0x7c>
      break;
 8004d12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	441a      	add	r2, r3
 8004d1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	441a      	add	r2, r3
 8004d64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	7b1b      	ldrb	r3, [r3, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 8149 	bne.w	8005018 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8084 	beq.w	8004e98 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4413      	add	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	011a      	lsls	r2, r3, #4
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	88db      	ldrh	r3, [r3, #6]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	81fb      	strh	r3, [r7, #14]
 8004dd2:	89fb      	ldrh	r3, [r7, #14]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <USB_ActivateEndpoint+0x17c>
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	81bb      	strh	r3, [r7, #12]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	89bb      	ldrh	r3, [r7, #12]
 8004e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	78db      	ldrb	r3, [r3, #3]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d020      	beq.n	8004e5e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e32:	813b      	strh	r3, [r7, #8]
 8004e34:	893b      	ldrh	r3, [r7, #8]
 8004e36:	f083 0320 	eor.w	r3, r3, #32
 8004e3a:	813b      	strh	r3, [r7, #8]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	893b      	ldrh	r3, [r7, #8]
 8004e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]
 8004e5c:	e27f      	b.n	800535e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	817b      	strh	r3, [r7, #10]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	897b      	ldrh	r3, [r7, #10]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
 8004e96:	e262      	b.n	800535e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	4413      	add	r3, r2
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	011a      	lsls	r2, r3, #4
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	88db      	ldrh	r3, [r3, #6]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	4413      	add	r3, r2
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	4413      	add	r3, r2
 8004eea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d112      	bne.n	8004f1e <USB_ActivateEndpoint+0x286>
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	e02f      	b.n	8004f7e <USB_ActivateEndpoint+0x2e6>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b3e      	cmp	r3, #62	; 0x3e
 8004f24:	d813      	bhi.n	8004f4e <USB_ActivateEndpoint+0x2b6>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <USB_ActivateEndpoint+0x2a8>
 8004f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e017      	b.n	8004f7e <USB_ActivateEndpoint+0x2e6>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	095b      	lsrs	r3, r3, #5
 8004f54:	663b      	str	r3, [r7, #96]	; 0x60
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <USB_ActivateEndpoint+0x2d0>
 8004f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f64:	3b01      	subs	r3, #1
 8004f66:	663b      	str	r3, [r7, #96]	; 0x60
 8004f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	83fb      	strh	r3, [r7, #30]
 8004f8c:	8bfb      	ldrh	r3, [r7, #30]
 8004f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01b      	beq.n	8004fce <USB_ActivateEndpoint+0x336>
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fac:	83bb      	strh	r3, [r7, #28]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	8bbb      	ldrh	r3, [r7, #28]
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	837b      	strh	r3, [r7, #26]
 8004fe6:	8b7b      	ldrh	r3, [r7, #26]
 8004fe8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fec:	837b      	strh	r3, [r7, #26]
 8004fee:	8b7b      	ldrh	r3, [r7, #26]
 8004ff0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ff4:	837b      	strh	r3, [r7, #26]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	441a      	add	r2, r3
 8005000:	8b7b      	ldrh	r3, [r7, #26]
 8005002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800500a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]
 8005016:	e1a2      	b.n	800535e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005048:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	b29b      	uxth	r3, r3
 8005052:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	65bb      	str	r3, [r7, #88]	; 0x58
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005064:	4413      	add	r3, r2
 8005066:	65bb      	str	r3, [r7, #88]	; 0x58
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	011a      	lsls	r2, r3, #4
 800506e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005070:	4413      	add	r3, r2
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	657b      	str	r3, [r7, #84]	; 0x54
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	891b      	ldrh	r3, [r3, #8]
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	b29b      	uxth	r3, r3
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	653b      	str	r3, [r7, #80]	; 0x50
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005098:	4413      	add	r3, r2
 800509a:	653b      	str	r3, [r7, #80]	; 0x50
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	011a      	lsls	r2, r3, #4
 80050a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	895b      	ldrh	r3, [r3, #10]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	785b      	ldrb	r3, [r3, #1]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 8091 	bne.w	80051e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01b      	beq.n	8005116 <USB_ActivateEndpoint+0x47e>
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800510e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005112:	b29b      	uxth	r3, r3
 8005114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	873b      	strh	r3, [r7, #56]	; 0x38
 8005124:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d01b      	beq.n	8005166 <USB_ActivateEndpoint+0x4ce>
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005162:	b29b      	uxth	r3, r3
 8005164:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800517e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005180:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005184:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005186:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005188:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800518c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800519a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	441a      	add	r2, r3
 80051d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	8013      	strh	r3, [r2, #0]
 80051e6:	e0ba      	b.n	800535e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80051f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01d      	beq.n	8005240 <USB_ActivateEndpoint+0x5a8>
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800522c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	b29b      	uxth	r3, r3
 800523e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005250:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01d      	beq.n	8005298 <USB_ActivateEndpoint+0x600>
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	441a      	add	r2, r3
 8005280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005284:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005288:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800528c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005290:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005294:	b29b      	uxth	r3, r3
 8005296:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	78db      	ldrb	r3, [r3, #3]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d024      	beq.n	80052ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052be:	f083 0320 	eor.w	r3, r3, #32
 80052c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	441a      	add	r2, r3
 80052d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	8013      	strh	r3, [r2, #0]
 80052e8:	e01d      	b.n	8005326 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005300:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	441a      	add	r2, r3
 800530e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005322:	b29b      	uxth	r3, r3
 8005324:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800534a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800534e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800535a:	b29b      	uxth	r3, r3
 800535c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800535e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005362:	4618      	mov	r0, r3
 8005364:	376c      	adds	r7, #108	; 0x6c
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800536c:	b480      	push	{r7}
 800536e:	b08d      	sub	sp, #52	; 0x34
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	7b1b      	ldrb	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f040 808e 	bne.w	800549c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d044      	beq.n	8005412 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	81bb      	strh	r3, [r7, #12]
 8005396:	89bb      	ldrh	r3, [r7, #12]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <USB_DeactivateEndpoint+0x6c>
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	817b      	strh	r3, [r7, #10]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	441a      	add	r2, r3
 80053c2:	897b      	ldrh	r3, [r7, #10]
 80053c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ee:	813b      	strh	r3, [r7, #8]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	893b      	ldrh	r3, [r7, #8]
 80053fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540c:	b29b      	uxth	r3, r3
 800540e:	8013      	strh	r3, [r2, #0]
 8005410:	e192      	b.n	8005738 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	827b      	strh	r3, [r7, #18]
 8005420:	8a7b      	ldrh	r3, [r7, #18]
 8005422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01b      	beq.n	8005462 <USB_DeactivateEndpoint+0xf6>
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	b29b      	uxth	r3, r3
 8005438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	823b      	strh	r3, [r7, #16]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	8a3b      	ldrh	r3, [r7, #16]
 800544e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800545a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545e:	b29b      	uxth	r3, r3
 8005460:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005478:	81fb      	strh	r3, [r7, #14]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	441a      	add	r2, r3
 8005484:	89fb      	ldrh	r3, [r7, #14]
 8005486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005496:	b29b      	uxth	r3, r3
 8005498:	8013      	strh	r3, [r2, #0]
 800549a:	e14d      	b.n	8005738 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f040 80a5 	bne.w	80055f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	843b      	strh	r3, [r7, #32]
 80054b4:	8c3b      	ldrh	r3, [r7, #32]
 80054b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01b      	beq.n	80054f6 <USB_DeactivateEndpoint+0x18a>
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d4:	83fb      	strh	r3, [r7, #30]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	441a      	add	r2, r3
 80054e0:	8bfb      	ldrh	r3, [r7, #30]
 80054e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	83bb      	strh	r3, [r7, #28]
 8005504:	8bbb      	ldrh	r3, [r7, #28]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01b      	beq.n	8005546 <USB_DeactivateEndpoint+0x1da>
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005524:	837b      	strh	r3, [r7, #26]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	441a      	add	r2, r3
 8005530:	8b7b      	ldrh	r3, [r7, #26]
 8005532:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005536:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005542:	b29b      	uxth	r3, r3
 8005544:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	833b      	strh	r3, [r7, #24]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	8b3b      	ldrh	r3, [r7, #24]
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005576:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	82fb      	strh	r3, [r7, #22]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	441a      	add	r2, r3
 80055a0:	8afb      	ldrh	r3, [r7, #22]
 80055a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055cc:	82bb      	strh	r3, [r7, #20]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	441a      	add	r2, r3
 80055d8:	8abb      	ldrh	r3, [r7, #20]
 80055da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	8013      	strh	r3, [r2, #0]
 80055ee:	e0a3      	b.n	8005738 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01b      	beq.n	8005640 <USB_DeactivateEndpoint+0x2d4>
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800561a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800562c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563c:	b29b      	uxth	r3, r3
 800563e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800564e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01b      	beq.n	8005690 <USB_DeactivateEndpoint+0x324>
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29b      	uxth	r3, r3
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800567c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005688:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800568c:	b29b      	uxth	r3, r3
 800568e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	441a      	add	r2, r3
 80056b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	847b      	strh	r3, [r7, #34]	; 0x22
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3734      	adds	r7, #52	; 0x34
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b0cc      	sub	sp, #304	; 0x130
 8005748:	af00      	add	r7, sp, #0
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005752:	6018      	str	r0, [r3, #0]
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	2b01      	cmp	r3, #1
 800576c:	f041 817d 	bne.w	8006a6a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	429a      	cmp	r2, r3
 800578a:	d908      	bls.n	800579e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800578c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800579c:	e007      	b.n	80057ae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800579e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80057ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	7b1b      	ldrb	r3, [r3, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d152      	bne.n	8005864 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80057be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6959      	ldr	r1, [r3, #20]
 80057ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	88da      	ldrh	r2, [r3, #6]
 80057d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057e0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	f001 ff23 	bl	8007630 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80057f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057f6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	4619      	mov	r1, r3
 8005810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005814:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005818:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800581c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	440a      	add	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	011a      	lsls	r2, r3, #4
 8005834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005838:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4413      	add	r3, r2
 8005840:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005852:	b29a      	uxth	r2, r3
 8005854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005858:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	801a      	strh	r2, [r3, #0]
 8005860:	f001 b8b5 	b.w	80069ce <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	78db      	ldrb	r3, [r3, #3]
 8005870:	2b02      	cmp	r3, #2
 8005872:	f040 84c6 	bne.w	8006202 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6a1a      	ldr	r2, [r3, #32]
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	429a      	cmp	r2, r3
 8005890:	f240 8443 	bls.w	800611a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	441a      	add	r2, r3
 80058d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005900:	1ad2      	subs	r2, r2, r3
 8005902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800590e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 823e 	beq.w	8005db2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800593e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005942:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f040 809a 	bne.w	8005a90 <USB_EPStartXfer+0x34c>
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005964:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005968:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597e:	b29b      	uxth	r3, r3
 8005980:	4619      	mov	r1, r3
 8005982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800598e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	440a      	add	r2, r1
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	011a      	lsls	r2, r3, #4
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d122      	bne.n	8005a0e <USB_EPStartXfer+0x2ca>
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059da:	b29a      	uxth	r2, r3
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	e079      	b.n	8005b02 <USB_EPStartXfer+0x3be>
 8005a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a12:	2b3e      	cmp	r3, #62	; 0x3e
 8005a14:	d81b      	bhi.n	8005a4e <USB_EPStartXfer+0x30a>
 8005a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <USB_EPStartXfer+0x2f2>
 8005a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a30:	3301      	adds	r3, #1
 8005a32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	029b      	lsls	r3, r3, #10
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e059      	b.n	8005b02 <USB_EPStartXfer+0x3be>
 8005a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <USB_EPStartXfer+0x32a>
 8005a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e038      	b.n	8005b02 <USB_EPStartXfer+0x3be>
 8005a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d130      	bne.n	8005b02 <USB_EPStartXfer+0x3be>
 8005aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005aba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005abe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	895b      	ldrh	r3, [r3, #10]
 8005b0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6959      	ldr	r1, [r3, #20]
 8005b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b30:	6800      	ldr	r0, [r0, #0]
 8005b32:	f001 fd7d 	bl	8007630 <USB_WritePMA>
            ep->xfer_buff += len;
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b46:	441a      	add	r2, r3
 8005b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6a1a      	ldr	r2, [r3, #32]
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d90f      	bls.n	8005b90 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6a1a      	ldr	r2, [r3, #32]
 8005b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b80:	1ad2      	subs	r2, r2, r3
 8005b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	621a      	str	r2, [r3, #32]
 8005b8e:	e00e      	b.n	8005bae <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 809a 	bne.w	8005cf4 <USB_EPStartXfer+0x5b0>
 8005bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005bc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bcc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	4619      	mov	r1, r3
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005bee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bf2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	011a      	lsls	r2, r3, #4
 8005c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d122      	bne.n	8005c72 <USB_EPStartXfer+0x52e>
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c44:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e083      	b.n	8005d7a <USB_EPStartXfer+0x636>
 8005c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c76:	2b3e      	cmp	r3, #62	; 0x3e
 8005c78:	d81b      	bhi.n	8005cb2 <USB_EPStartXfer+0x56e>
 8005c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <USB_EPStartXfer+0x556>
 8005c90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c94:	3301      	adds	r3, #1
 8005c96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	801a      	strh	r2, [r3, #0]
 8005cb0:	e063      	b.n	8005d7a <USB_EPStartXfer+0x636>
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc0:	f003 031f 	and.w	r3, r3, #31
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <USB_EPStartXfer+0x58e>
 8005cc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005cd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	029b      	lsls	r3, r3, #10
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e042      	b.n	8005d7a <USB_EPStartXfer+0x636>
 8005cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d13a      	bne.n	8005d7a <USB_EPStartXfer+0x636>
 8005d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d36:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d52:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	891b      	ldrh	r3, [r3, #8]
 8005d86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6959      	ldr	r1, [r3, #20]
 8005d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005da0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005da4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005da8:	6800      	ldr	r0, [r0, #0]
 8005daa:	f001 fc41 	bl	8007630 <USB_WritePMA>
 8005dae:	f000 be0e 	b.w	80069ce <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d16d      	bne.n	8005e9e <USB_EPStartXfer+0x75a>
 8005dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de2:	4413      	add	r3, r2
 8005de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d112      	bne.n	8005e2c <USB_EPStartXfer+0x6e8>
 8005e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e28:	801a      	strh	r2, [r3, #0]
 8005e2a:	e063      	b.n	8005ef4 <USB_EPStartXfer+0x7b0>
 8005e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e30:	2b3e      	cmp	r3, #62	; 0x3e
 8005e32:	d817      	bhi.n	8005e64 <USB_EPStartXfer+0x720>
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e38:	085b      	lsrs	r3, r3, #1
 8005e3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d004      	beq.n	8005e54 <USB_EPStartXfer+0x710>
 8005e4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e4e:	3301      	adds	r3, #1
 8005e50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	029b      	lsls	r3, r3, #10
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	e047      	b.n	8005ef4 <USB_EPStartXfer+0x7b0>
 8005e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <USB_EPStartXfer+0x740>
 8005e7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e02a      	b.n	8005ef4 <USB_EPStartXfer+0x7b0>
 8005e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d122      	bne.n	8005ef4 <USB_EPStartXfer+0x7b0>
 8005eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ece:	4413      	add	r3, r2
 8005ed0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	011a      	lsls	r2, r3, #4
 8005ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	891b      	ldrh	r3, [r3, #8]
 8005f00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6959      	ldr	r1, [r3, #20]
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f1a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f1e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	f001 fb84 	bl	8007630 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f38:	441a      	add	r2, r3
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6a1a      	ldr	r2, [r3, #32]
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d90f      	bls.n	8005f82 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6a1a      	ldr	r2, [r3, #32]
 8005f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	621a      	str	r2, [r3, #32]
 8005f80:	e00e      	b.n	8005fa0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	643b      	str	r3, [r7, #64]	; 0x40
 8005fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d16d      	bne.n	8006098 <USB_EPStartXfer+0x954>
 8005fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	4413      	add	r3, r2
 8005fde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	011a      	lsls	r2, r3, #4
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d112      	bne.n	8006026 <USB_EPStartXfer+0x8e2>
 8006000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800600a:	b29a      	uxth	r2, r3
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800601a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601e:	b29a      	uxth	r2, r3
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e05d      	b.n	80060e2 <USB_EPStartXfer+0x99e>
 8006026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602a:	2b3e      	cmp	r3, #62	; 0x3e
 800602c:	d817      	bhi.n	800605e <USB_EPStartXfer+0x91a>
 800602e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <USB_EPStartXfer+0x90a>
 8006044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006048:	3301      	adds	r3, #1
 800604a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800604e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006052:	b29b      	uxth	r3, r3
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	b29a      	uxth	r2, r3
 8006058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	e041      	b.n	80060e2 <USB_EPStartXfer+0x99e>
 800605e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <USB_EPStartXfer+0x93a>
 8006074:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006078:	3b01      	subs	r3, #1
 800607a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800607e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006082:	b29b      	uxth	r3, r3
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	b29b      	uxth	r3, r3
 8006088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006090:	b29a      	uxth	r2, r3
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	e024      	b.n	80060e2 <USB_EPStartXfer+0x99e>
 8006098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d11c      	bne.n	80060e2 <USB_EPStartXfer+0x99e>
 80060a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060bc:	4413      	add	r3, r2
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
 80060c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	011a      	lsls	r2, r3, #4
 80060ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	895b      	ldrh	r3, [r3, #10]
 80060ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6959      	ldr	r1, [r3, #20]
 80060fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006102:	b29b      	uxth	r3, r3
 8006104:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006108:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800610c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006110:	6800      	ldr	r0, [r0, #0]
 8006112:	f001 fa8d 	bl	8007630 <USB_WritePMA>
 8006116:	f000 bc5a 	b.w	80069ce <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800611a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800612a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800614c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006150:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a6:	4413      	add	r3, r2
 80061a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	011a      	lsls	r2, r3, #4
 80061b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80061c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	891b      	ldrh	r3, [r3, #8]
 80061d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6959      	ldr	r1, [r3, #20]
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061fa:	6800      	ldr	r0, [r0, #0]
 80061fc:	f001 fa18 	bl	8007630 <USB_WritePMA>
 8006200:	e3e5      	b.n	80069ce <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006206:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006228:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800623a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800624a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006252:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800625e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6a1a      	ldr	r2, [r3, #32]
 800626a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800627c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 81bc 	beq.w	800661c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d16d      	bne.n	800639e <USB_EPStartXfer+0xc5a>
 80062c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062dc:	b29b      	uxth	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062e2:	4413      	add	r3, r2
 80062e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80062e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	011a      	lsls	r2, r3, #4
 80062f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f6:	4413      	add	r3, r2
 80062f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062fc:	677b      	str	r3, [r7, #116]	; 0x74
 80062fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d112      	bne.n	800632c <USB_EPStartXfer+0xbe8>
 8006306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006310:	b29a      	uxth	r2, r3
 8006312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006324:	b29a      	uxth	r2, r3
 8006326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e060      	b.n	80063ee <USB_EPStartXfer+0xcaa>
 800632c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006330:	2b3e      	cmp	r3, #62	; 0x3e
 8006332:	d817      	bhi.n	8006364 <USB_EPStartXfer+0xc20>
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800633e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <USB_EPStartXfer+0xc10>
 800634a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800634e:	3301      	adds	r3, #1
 8006350:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006354:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006358:	b29b      	uxth	r3, r3
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	b29a      	uxth	r2, r3
 800635e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006360:	801a      	strh	r2, [r3, #0]
 8006362:	e044      	b.n	80063ee <USB_EPStartXfer+0xcaa>
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800636e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <USB_EPStartXfer+0xc40>
 800637a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800637e:	3b01      	subs	r3, #1
 8006380:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006384:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006388:	b29b      	uxth	r3, r3
 800638a:	029b      	lsls	r3, r3, #10
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e027      	b.n	80063ee <USB_EPStartXfer+0xcaa>
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	785b      	ldrb	r3, [r3, #1]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d11f      	bne.n	80063ee <USB_EPStartXfer+0xcaa>
 80063ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063bc:	b29b      	uxth	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063c4:	4413      	add	r3, r2
 80063c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	011a      	lsls	r2, r3, #4
 80063d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063dc:	4413      	add	r3, r2
 80063de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	895b      	ldrh	r3, [r3, #10]
 80063fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6959      	ldr	r1, [r3, #20]
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	b29b      	uxth	r3, r3
 8006410:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006414:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006418:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f001 f907 	bl	8007630 <USB_WritePMA>
          ep->xfer_buff += len;
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006432:	441a      	add	r2, r3
 8006434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006444:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	429a      	cmp	r2, r3
 800645a:	d90f      	bls.n	800647c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800645c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646c:	1ad2      	subs	r2, r2, r3
 800646e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	621a      	str	r2, [r3, #32]
 800647a:	e00e      	b.n	800649a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800649a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8295 	beq.w	80069ce <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d16d      	bne.n	8006590 <USB_EPStartXfer+0xe4c>
 80064b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064d4:	4413      	add	r3, r2
 80064d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	011a      	lsls	r2, r3, #4
 80064e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064e8:	4413      	add	r3, r2
 80064ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ee:	667b      	str	r3, [r7, #100]	; 0x64
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d112      	bne.n	800651e <USB_EPStartXfer+0xdda>
 80064f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006502:	b29a      	uxth	r2, r3
 8006504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006516:	b29a      	uxth	r2, r3
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	e063      	b.n	80065e6 <USB_EPStartXfer+0xea2>
 800651e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006522:	2b3e      	cmp	r3, #62	; 0x3e
 8006524:	d817      	bhi.n	8006556 <USB_EPStartXfer+0xe12>
 8006526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <USB_EPStartXfer+0xe02>
 800653c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006540:	3301      	adds	r3, #1
 8006542:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654a:	b29b      	uxth	r3, r3
 800654c:	029b      	lsls	r3, r3, #10
 800654e:	b29a      	uxth	r2, r3
 8006550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e047      	b.n	80065e6 <USB_EPStartXfer+0xea2>
 8006556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <USB_EPStartXfer+0xe32>
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006570:	3b01      	subs	r3, #1
 8006572:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657a:	b29b      	uxth	r3, r3
 800657c:	029b      	lsls	r3, r3, #10
 800657e:	b29b      	uxth	r3, r3
 8006580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006588:	b29a      	uxth	r2, r3
 800658a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	e02a      	b.n	80065e6 <USB_EPStartXfer+0xea2>
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d122      	bne.n	80065e6 <USB_EPStartXfer+0xea2>
 80065a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	673b      	str	r3, [r7, #112]	; 0x70
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c0:	4413      	add	r3, r2
 80065c2:	673b      	str	r3, [r7, #112]	; 0x70
 80065c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d4:	4413      	add	r3, r2
 80065d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80065e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	891b      	ldrh	r3, [r3, #8]
 80065f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6959      	ldr	r1, [r3, #20]
 8006602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006606:	b29b      	uxth	r3, r3
 8006608:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800660c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006610:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006614:	6800      	ldr	r0, [r0, #0]
 8006616:	f001 f80b 	bl	8007630 <USB_WritePMA>
 800661a:	e1d8      	b.n	80069ce <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800661c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d178      	bne.n	800671e <USB_EPStartXfer+0xfda>
 800662c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800663a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006648:	b29b      	uxth	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006650:	4413      	add	r3, r2
 8006652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	011a      	lsls	r2, r3, #4
 8006664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006668:	4413      	add	r3, r2
 800666a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800666e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d116      	bne.n	80066a8 <USB_EPStartXfer+0xf64>
 800667a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006686:	b29a      	uxth	r2, r3
 8006688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	b29b      	uxth	r3, r3
 8006696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	e06b      	b.n	8006780 <USB_EPStartXfer+0x103c>
 80066a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ac:	2b3e      	cmp	r3, #62	; 0x3e
 80066ae:	d818      	bhi.n	80066e2 <USB_EPStartXfer+0xf9e>
 80066b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d004      	beq.n	80066d0 <USB_EPStartXfer+0xf8c>
 80066c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066ca:	3301      	adds	r3, #1
 80066cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	029b      	lsls	r3, r3, #10
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e04e      	b.n	8006780 <USB_EPStartXfer+0x103c>
 80066e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <USB_EPStartXfer+0xfbe>
 80066f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80066fc:	3b01      	subs	r3, #1
 80066fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006702:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006706:	b29b      	uxth	r3, r3
 8006708:	029b      	lsls	r3, r3, #10
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006714:	b29a      	uxth	r2, r3
 8006716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800671a:	801a      	strh	r2, [r3, #0]
 800671c:	e030      	b.n	8006780 <USB_EPStartXfer+0x103c>
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	785b      	ldrb	r3, [r3, #1]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d128      	bne.n	8006780 <USB_EPStartXfer+0x103c>
 800672e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674a:	b29b      	uxth	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006752:	4413      	add	r3, r2
 8006754:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	011a      	lsls	r2, r3, #4
 8006766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800676a:	4413      	add	r3, r2
 800676c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006778:	b29a      	uxth	r2, r3
 800677a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800677e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	891b      	ldrh	r3, [r3, #8]
 800678c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	6959      	ldr	r1, [r3, #20]
 800679c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067a6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80067aa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80067ae:	6800      	ldr	r0, [r0, #0]
 80067b0:	f000 ff3e 	bl	8007630 <USB_WritePMA>
          ep->xfer_buff += len;
 80067b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695a      	ldr	r2, [r3, #20]
 80067c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c4:	441a      	add	r2, r3
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80067d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d90f      	bls.n	800680e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80067ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	621a      	str	r2, [r3, #32]
 800680c:	e00e      	b.n	800682c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2200      	movs	r2, #0
 800682a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800682c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 80cc 	beq.w	80069ce <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d178      	bne.n	8006946 <USB_EPStartXfer+0x1202>
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006878:	4413      	add	r3, r2
 800687a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800687e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	011a      	lsls	r2, r3, #4
 800688c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006890:	4413      	add	r3, r2
 8006892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800689a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d116      	bne.n	80068d0 <USB_EPStartXfer+0x118c>
 80068a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068b4:	801a      	strh	r2, [r3, #0]
 80068b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068cc:	801a      	strh	r2, [r3, #0]
 80068ce:	e064      	b.n	800699a <USB_EPStartXfer+0x1256>
 80068d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d4:	2b3e      	cmp	r3, #62	; 0x3e
 80068d6:	d818      	bhi.n	800690a <USB_EPStartXfer+0x11c6>
 80068d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068dc:	085b      	lsrs	r3, r3, #1
 80068de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80068e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <USB_EPStartXfer+0x11b4>
 80068ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f2:	3301      	adds	r3, #1
 80068f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80068f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	029b      	lsls	r3, r3, #10
 8006900:	b29a      	uxth	r2, r3
 8006902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006906:	801a      	strh	r2, [r3, #0]
 8006908:	e047      	b.n	800699a <USB_EPStartXfer+0x1256>
 800690a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <USB_EPStartXfer+0x11e6>
 8006920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006924:	3b01      	subs	r3, #1
 8006926:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800692a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692e:	b29b      	uxth	r3, r3
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	b29b      	uxth	r3, r3
 8006934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800693c:	b29a      	uxth	r2, r3
 800693e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006942:	801a      	strh	r2, [r3, #0]
 8006944:	e029      	b.n	800699a <USB_EPStartXfer+0x1256>
 8006946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d121      	bne.n	800699a <USB_EPStartXfer+0x1256>
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006964:	b29b      	uxth	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800696c:	4413      	add	r3, r2
 800696e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	011a      	lsls	r2, r3, #4
 8006980:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006984:	4413      	add	r3, r2
 8006986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800698a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800698e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006992:	b29a      	uxth	r2, r3
 8006994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006998:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800699a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	895b      	ldrh	r3, [r3, #10]
 80069a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6959      	ldr	r1, [r3, #20]
 80069b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069c8:	6800      	ldr	r0, [r0, #0]
 80069ca:	f000 fe31 	bl	8007630 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069f0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80069f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069fc:	8013      	strh	r3, [r2, #0]
 80069fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a02:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a0a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a0e:	8812      	ldrh	r2, [r2, #0]
 8006a10:	f082 0210 	eor.w	r2, r2, #16
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a22:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a26:	8812      	ldrh	r2, [r2, #0]
 8006a28:	f082 0220 	eor.w	r2, r2, #32
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	8013      	strh	r3, [r2, #0]
 8006a66:	f000 bc9f 	b.w	80073a8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	7b1b      	ldrb	r3, [r3, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 80ae 	bne.w	8006bd8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d917      	bls.n	8006ac8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699a      	ldr	r2, [r3, #24]
 8006ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab8:	1ad2      	subs	r2, r2, r3
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	619a      	str	r2, [r3, #24]
 8006ac6:	e00e      	b.n	8006ae6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	011a      	lsls	r2, r3, #4
 8006b1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b22:	4413      	add	r3, r2
 8006b24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d116      	bne.n	8006b62 <USB_EPStartXfer+0x141e>
 8006b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b46:	801a      	strh	r2, [r3, #0]
 8006b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b5e:	801a      	strh	r2, [r3, #0]
 8006b60:	e3e8      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
 8006b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b66:	2b3e      	cmp	r3, #62	; 0x3e
 8006b68:	d818      	bhi.n	8006b9c <USB_EPStartXfer+0x1458>
 8006b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <USB_EPStartXfer+0x1446>
 8006b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b84:	3301      	adds	r3, #1
 8006b86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	029b      	lsls	r3, r3, #10
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	e3cb      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
 8006b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <USB_EPStartXfer+0x1478>
 8006bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	029b      	lsls	r3, r3, #10
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e3ad      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	78db      	ldrb	r3, [r3, #3]
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	f040 8200 	bne.w	8006fea <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f040 8091 	bne.w	8006d1e <USB_EPStartXfer+0x15da>
 8006bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c20:	4413      	add	r3, r2
 8006c22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	011a      	lsls	r2, r3, #4
 8006c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c38:	4413      	add	r3, r2
 8006c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d116      	bne.n	8006c80 <USB_EPStartXfer+0x153c>
 8006c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c64:	801a      	strh	r2, [r3, #0]
 8006c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e083      	b.n	8006d88 <USB_EPStartXfer+0x1644>
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c8e:	d820      	bhi.n	8006cd2 <USB_EPStartXfer+0x158e>
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	085b      	lsrs	r3, r3, #1
 8006c9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <USB_EPStartXfer+0x157c>
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cba:	3301      	adds	r3, #1
 8006cbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	029b      	lsls	r3, r3, #10
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cce:	801a      	strh	r2, [r3, #0]
 8006cd0:	e05a      	b.n	8006d88 <USB_EPStartXfer+0x1644>
 8006cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 031f 	and.w	r3, r3, #31
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d104      	bne.n	8006d02 <USB_EPStartXfer+0x15be>
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	029b      	lsls	r3, r3, #10
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	e034      	b.n	8006d88 <USB_EPStartXfer+0x1644>
 8006d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d12c      	bne.n	8006d88 <USB_EPStartXfer+0x1644>
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d52:	4413      	add	r3, r2
 8006d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	011a      	lsls	r2, r3, #4
 8006d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 8091 	bne.w	8006eca <USB_EPStartXfer+0x1786>
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006dcc:	4413      	add	r3, r2
 8006dce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	011a      	lsls	r2, r3, #4
 8006de0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de4:	4413      	add	r3, r2
 8006de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d116      	bne.n	8006e2c <USB_EPStartXfer+0x16e8>
 8006dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e28:	801a      	strh	r2, [r3, #0]
 8006e2a:	e07c      	b.n	8006f26 <USB_EPStartXfer+0x17e2>
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b3e      	cmp	r3, #62	; 0x3e
 8006e3a:	d820      	bhi.n	8006e7e <USB_EPStartXfer+0x173a>
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <USB_EPStartXfer+0x1728>
 8006e62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e66:	3301      	adds	r3, #1
 8006e68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	029b      	lsls	r3, r3, #10
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e053      	b.n	8006f26 <USB_EPStartXfer+0x17e2>
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <USB_EPStartXfer+0x176a>
 8006ea4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006eae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	029b      	lsls	r3, r3, #10
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	e02d      	b.n	8006f26 <USB_EPStartXfer+0x17e2>
 8006eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d125      	bne.n	8006f26 <USB_EPStartXfer+0x17e2>
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	011a      	lsls	r2, r3, #4
 8006f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f24:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 81fe 	beq.w	8007334 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f58:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <USB_EPStartXfer+0x182c>
 8006f64:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10d      	bne.n	8006f8c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f70:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 81db 	bne.w	8007334 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f7e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 81d4 	bne.w	8007334 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	441a      	add	r2, r3
 8006fd0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]
 8006fe8:	e1a4      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	f040 819a 	bne.w	8007330 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	429a      	cmp	r2, r3
 8007016:	d917      	bls.n	8007048 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007038:	1ad2      	subs	r2, r2, r3
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	619a      	str	r2, [r3, #24]
 8007046:	e00e      	b.n	8007066 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2200      	movs	r2, #0
 8007064:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d178      	bne.n	8007168 <USB_EPStartXfer+0x1a24>
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007092:	b29b      	uxth	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800709a:	4413      	add	r3, r2
 800709c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80070a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	011a      	lsls	r2, r3, #4
 80070ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d116      	bne.n	80070f2 <USB_EPStartXfer+0x19ae>
 80070c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070d6:	801a      	strh	r2, [r3, #0]
 80070d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070ee:	801a      	strh	r2, [r3, #0]
 80070f0:	e06b      	b.n	80071ca <USB_EPStartXfer+0x1a86>
 80070f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f6:	2b3e      	cmp	r3, #62	; 0x3e
 80070f8:	d818      	bhi.n	800712c <USB_EPStartXfer+0x19e8>
 80070fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <USB_EPStartXfer+0x19d6>
 8007110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007114:	3301      	adds	r3, #1
 8007116:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800711a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800711e:	b29b      	uxth	r3, r3
 8007120:	029b      	lsls	r3, r3, #10
 8007122:	b29a      	uxth	r2, r3
 8007124:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	e04e      	b.n	80071ca <USB_EPStartXfer+0x1a86>
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <USB_EPStartXfer+0x1a08>
 8007142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007146:	3b01      	subs	r3, #1
 8007148:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800714c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007150:	b29b      	uxth	r3, r3
 8007152:	029b      	lsls	r3, r3, #10
 8007154:	b29b      	uxth	r3, r3
 8007156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715e:	b29a      	uxth	r2, r3
 8007160:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	e030      	b.n	80071ca <USB_EPStartXfer+0x1a86>
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d128      	bne.n	80071ca <USB_EPStartXfer+0x1a86>
 8007178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007194:	b29b      	uxth	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	4413      	add	r3, r2
 800719e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	011a      	lsls	r2, r3, #4
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b4:	4413      	add	r3, r2
 80071b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d178      	bne.n	80072da <USB_EPStartXfer+0x1b96>
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007204:	b29b      	uxth	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720c:	4413      	add	r3, r2
 800720e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	011a      	lsls	r2, r3, #4
 8007220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007224:	4413      	add	r3, r2
 8007226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800722a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d116      	bne.n	8007264 <USB_EPStartXfer+0x1b20>
 8007236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007242:	b29a      	uxth	r2, r3
 8007244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725a:	b29a      	uxth	r2, r3
 800725c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	e067      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	2b3e      	cmp	r3, #62	; 0x3e
 800726a:	d818      	bhi.n	800729e <USB_EPStartXfer+0x1b5a>
 800726c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <USB_EPStartXfer+0x1b48>
 8007282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007286:	3301      	adds	r3, #1
 8007288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800728c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007290:	b29b      	uxth	r3, r3
 8007292:	029b      	lsls	r3, r3, #10
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	e04a      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d104      	bne.n	80072be <USB_EPStartXfer+0x1b7a>
 80072b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072b8:	3b01      	subs	r3, #1
 80072ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	029b      	lsls	r3, r3, #10
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	e02c      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d124      	bne.n	8007334 <USB_EPStartXfer+0x1bf0>
 80072ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007300:	4413      	add	r3, r2
 8007302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	011a      	lsls	r2, r3, #4
 8007314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007318:	4413      	add	r3, r2
 800731a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800731e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e001      	b.n	8007334 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e03a      	b.n	80073aa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800735e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007362:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007366:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800736a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800736e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007372:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	441a      	add	r2, r3
 8007390:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d020      	beq.n	8007408 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073dc:	81bb      	strh	r3, [r7, #12]
 80073de:	89bb      	ldrh	r3, [r7, #12]
 80073e0:	f083 0310 	eor.w	r3, r3, #16
 80073e4:	81bb      	strh	r3, [r7, #12]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	441a      	add	r2, r3
 80073f0:	89bb      	ldrh	r3, [r7, #12]
 80073f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007402:	b29b      	uxth	r3, r3
 8007404:	8013      	strh	r3, [r2, #0]
 8007406:	e01f      	b.n	8007448 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	b29b      	uxth	r3, r3
 8007416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800741a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741e:	81fb      	strh	r3, [r7, #14]
 8007420:	89fb      	ldrh	r3, [r7, #14]
 8007422:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007426:	81fb      	strh	r3, [r7, #14]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	441a      	add	r2, r3
 8007432:	89fb      	ldrh	r3, [r7, #14]
 8007434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800743c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007444:	b29b      	uxth	r3, r3
 8007446:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr

08007454 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	7b1b      	ldrb	r3, [r3, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 809d 	bne.w	80075a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d04c      	beq.n	800750a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	823b      	strh	r3, [r7, #16]
 800747e:	8a3b      	ldrh	r3, [r7, #16]
 8007480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <USB_EPClearStall+0x6c>
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	81fb      	strh	r3, [r7, #14]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	441a      	add	r2, r3
 80074aa:	89fb      	ldrh	r3, [r7, #14]
 80074ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074bc:	b29b      	uxth	r3, r3
 80074be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	78db      	ldrb	r3, [r3, #3]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d06c      	beq.n	80075a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074de:	81bb      	strh	r3, [r7, #12]
 80074e0:	89bb      	ldrh	r3, [r7, #12]
 80074e2:	f083 0320 	eor.w	r3, r3, #32
 80074e6:	81bb      	strh	r3, [r7, #12]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	441a      	add	r2, r3
 80074f2:	89bb      	ldrh	r3, [r7, #12]
 80074f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007504:	b29b      	uxth	r3, r3
 8007506:	8013      	strh	r3, [r2, #0]
 8007508:	e04b      	b.n	80075a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	82fb      	strh	r3, [r7, #22]
 8007518:	8afb      	ldrh	r3, [r7, #22]
 800751a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01b      	beq.n	800755a <USB_EPClearStall+0x106>
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007538:	82bb      	strh	r3, [r7, #20]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	441a      	add	r2, r3
 8007544:	8abb      	ldrh	r3, [r7, #20]
 8007546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800754a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800754e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007556:	b29b      	uxth	r3, r3
 8007558:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007570:	827b      	strh	r3, [r7, #18]
 8007572:	8a7b      	ldrh	r3, [r7, #18]
 8007574:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007578:	827b      	strh	r3, [r7, #18]
 800757a:	8a7b      	ldrh	r3, [r7, #18]
 800757c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007580:	827b      	strh	r3, [r7, #18]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	441a      	add	r2, r3
 800758c:	8a7b      	ldrh	r3, [r7, #18]
 800758e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759e:	b29b      	uxth	r3, r3
 80075a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d103      	bne.n	80075c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2280      	movs	r2, #128	; 0x80
 80075c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr

080075d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr

080075e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bc80      	pop	{r7}
 80075fa:	4770      	bx	lr

080075fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800760a:	b29b      	uxth	r3, r3
 800760c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800760e:	68fb      	ldr	r3, [r7, #12]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr

0800761a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007630:	b480      	push	{r7}
 8007632:	b08d      	sub	sp, #52	; 0x34
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4611      	mov	r1, r2
 800763c:	461a      	mov	r2, r3
 800763e:	460b      	mov	r3, r1
 8007640:	80fb      	strh	r3, [r7, #6]
 8007642:	4613      	mov	r3, r2
 8007644:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007646:	88bb      	ldrh	r3, [r7, #4]
 8007648:	3301      	adds	r3, #1
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	005a      	lsls	r2, r3, #1
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007662:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007668:	e01e      	b.n	80076a8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	3301      	adds	r3, #1
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	b29b      	uxth	r3, r3
 8007680:	461a      	mov	r2, r3
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	b29a      	uxth	r2, r3
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	3302      	adds	r3, #2
 8007694:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	3302      	adds	r3, #2
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	3301      	adds	r3, #1
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80076a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a4:	3b01      	subs	r3, #1
 80076a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1dd      	bne.n	800766a <USB_WritePMA+0x3a>
  }
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	3734      	adds	r7, #52	; 0x34
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr

080076ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b08b      	sub	sp, #44	; 0x2c
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	4611      	mov	r1, r2
 80076c6:	461a      	mov	r2, r3
 80076c8:	460b      	mov	r3, r1
 80076ca:	80fb      	strh	r3, [r7, #6]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80076d0:	88bb      	ldrh	r3, [r7, #4]
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076e0:	88fb      	ldrh	r3, [r7, #6]
 80076e2:	005a      	lsls	r2, r3, #1
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ec:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
 80076f2:	e01b      	b.n	800772c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	3302      	adds	r3, #2
 8007700:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	b2da      	uxtb	r2, r3
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	3301      	adds	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	0a1b      	lsrs	r3, r3, #8
 8007714:	b2da      	uxtb	r2, r3
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	3301      	adds	r3, #1
 800771e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	3302      	adds	r3, #2
 8007724:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	3b01      	subs	r3, #1
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e0      	bne.n	80076f4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007732:	88bb      	ldrh	r3, [r7, #4]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	701a      	strb	r2, [r3, #0]
  }
}
 800774e:	bf00      	nop
 8007750:	372c      	adds	r7, #44	; 0x2c
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <LaserArray_Init>:
        UINT64_C(0b0111111111111111111110111111111111111111110111111111111111111111),
        UINT64_C(0b0111111111111111111111111111111111111111111111111111111111111111)
};


HAL_StatusTypeDef LaserArray_Init(LaserArray_t *la, const LaserArray_Config_t *config) {
 8007758:	b590      	push	{r4, r7, lr}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret;

    // store the config
    la->config = *config;
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	4614      	mov	r4, r2
 8007768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800776a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // clear the diode state and transfer data arrays
    memset(la->diodes, 0, sizeof(la->diodes));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3310      	adds	r3, #16
 8007772:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007776:	2100      	movs	r1, #0
 8007778:	4618      	mov	r0, r3
 800777a:	f004 fde9 	bl	800c350 <memset>
    memset(la->tx_data, 0, sizeof(la->tx_data));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007784:	22fc      	movs	r2, #252	; 0xfc
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f004 fde1 	bl	800c350 <memset>

    // enable spi
    __HAL_SPI_ENABLE(la->config.hspi);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a0:	601a      	str	r2, [r3, #0]

    // setup timer dma to trigger the transmission of spi data
    ret = HAL_DMA_Start_IT(la->config.htim_transfer->hdma[TIM_DMA_ID_UPDATE],
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	6a18      	ldr	r0, [r3, #32]
            (uint32_t) la->tx_data,
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f503 73c8 	add.w	r3, r3, #400	; 0x190
    ret = HAL_DMA_Start_IT(la->config.htim_transfer->hdma[TIM_DMA_ID_UPDATE],
 80077ae:	4619      	mov	r1, r3
            (uint32_t) &la->config.hspi->Instance->DR,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	330c      	adds	r3, #12
    ret = HAL_DMA_Start_IT(la->config.htim_transfer->hdma[TIM_DMA_ID_UPDATE],
 80077b8:	461a      	mov	r2, r3
 80077ba:	237e      	movs	r3, #126	; 0x7e
 80077bc:	f7f9 fad2 	bl	8000d64 <HAL_DMA_Start_IT>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]
            sizeof(la->tx_data) / sizeof(uint16_t));
    if (ret != HAL_OK) {
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <LaserArray_Init+0x76>
        return ret;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	e025      	b.n	800781a <LaserArray_Init+0xc2>
    }

    // enable dma on the timer
    __HAL_TIM_ENABLE_DMA(la->config.htim_transfer, TIM_DMA_UPDATE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e0:	60da      	str	r2, [r3, #12]

    // start the timer with pwm enabled
    ret = HAL_TIM_PWM_Start(la->config.htim_transfer, la->config.rclk_channel);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f7fc f915 	bl	8003a1c <HAL_TIM_PWM_Start>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <LaserArray_Init+0xa8>
        return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	e00c      	b.n	800781a <LaserArray_Init+0xc2>
    }

    // start the fade update timer
    ret = HAL_TIM_Base_Start_IT(la->config.htim_fade);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f7fc f851 	bl	80038ac <HAL_TIM_Base_Start_IT>
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <LaserArray_Init+0xc0>
        return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	e000      	b.n	800781a <LaserArray_Init+0xc2>
    }

    return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bd90      	pop	{r4, r7, pc}
	...

08007824 <LaserArray_SetBrightness>:

HAL_StatusTypeDef LaserArray_SetBrightness(LaserArray_t *la, uint8_t diode_index, uint8_t brightness) {
 8007824:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
 8007832:	4613      	mov	r3, r2
 8007834:	70bb      	strb	r3, [r7, #2]
    // validate the diode index
    if (diode_index >= LA_NUM_DIODES) {
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	2b1f      	cmp	r3, #31
 800783a:	d901      	bls.n	8007840 <LaserArray_SetBrightness+0x1c>
        return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e068      	b.n	8007912 <LaserArray_SetBrightness+0xee>
    }

    // clamp the brightness
    if (brightness >= LA_NUM_BRIGHTNESS_LEVELS) {
 8007840:	78bb      	ldrb	r3, [r7, #2]
 8007842:	2b3f      	cmp	r3, #63	; 0x3f
 8007844:	d901      	bls.n	800784a <LaserArray_SetBrightness+0x26>
        brightness = LA_NUM_BRIGHTNESS_LEVELS - 1;
 8007846:	233f      	movs	r3, #63	; 0x3f
 8007848:	70bb      	strb	r3, [r7, #2]
    }

    // skip if the brightness did not change
    if (la->diodes[diode_index].current_brightness == brightness) {
 800784a:	78fa      	ldrb	r2, [r7, #3]
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	3310      	adds	r3, #16
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	78ba      	ldrb	r2, [r7, #2]
 800785e:	429a      	cmp	r2, r3
 8007860:	d101      	bne.n	8007866 <LaserArray_SetBrightness+0x42>
        return HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e055      	b.n	8007912 <LaserArray_SetBrightness+0xee>
    }

    // store the new brightness value
    la->diodes[diode_index].current_brightness = brightness;
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3310      	adds	r3, #16
 8007876:	78ba      	ldrb	r2, [r7, #2]
 8007878:	701a      	strb	r2, [r3, #0]

    // lookup the brightness pattern
    la_brightness_pattern_t pattern = la_brightness_patterns[brightness];
 800787a:	78bb      	ldrb	r3, [r7, #2]
 800787c:	4a28      	ldr	r2, [pc, #160]	; (8007920 <LaserArray_SetBrightness+0xfc>)
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4413      	add	r3, r2
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // iterate through each diode bitmask
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	e03c      	b.n	800790a <LaserArray_SetBrightness+0xe6>
        // either set or unset the corresponding bit depending on the pattern
        if ((pattern >> i) & UINT32_C(1)) {
 8007890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007894:	6979      	ldr	r1, [r7, #20]
 8007896:	f1c1 0620 	rsb	r6, r1, #32
 800789a:	f1a1 0020 	sub.w	r0, r1, #32
 800789e:	fa22 f401 	lsr.w	r4, r2, r1
 80078a2:	fa03 f606 	lsl.w	r6, r3, r6
 80078a6:	4334      	orrs	r4, r6
 80078a8:	fa23 f000 	lsr.w	r0, r3, r0
 80078ac:	4304      	orrs	r4, r0
 80078ae:	fa23 f501 	lsr.w	r5, r3, r1
 80078b2:	f004 0801 	and.w	r8, r4, #1
 80078b6:	f04f 0900 	mov.w	r9, #0
 80078ba:	ea58 0309 	orrs.w	r3, r8, r9
 80078be:	d010      	beq.n	80078e2 <LaserArray_SetBrightness+0xbe>
            la->tx_data[i] |= UINT32_C(1) << diode_index;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	3264      	adds	r2, #100	; 0x64
 80078c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	2101      	movs	r1, #1
 80078ce:	fa01 f303 	lsl.w	r3, r1, r3
 80078d2:	ea42 0103 	orr.w	r1, r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	3264      	adds	r2, #100	; 0x64
 80078dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80078e0:	e010      	b.n	8007904 <LaserArray_SetBrightness+0xe0>
        } else {
            la->tx_data[i] &= ~(UINT32_C(1) << diode_index);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	3264      	adds	r2, #100	; 0x64
 80078e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	2101      	movs	r1, #1
 80078f0:	fa01 f303 	lsl.w	r3, r1, r3
 80078f4:	43db      	mvns	r3, r3
 80078f6:	ea02 0103 	and.w	r1, r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	3264      	adds	r2, #100	; 0x64
 8007900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	3301      	adds	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b3e      	cmp	r3, #62	; 0x3e
 800790e:	ddbf      	ble.n	8007890 <LaserArray_SetBrightness+0x6c>
        }
    }

    return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20000010 	.word	0x20000010

08007924 <LaserArray_FadeBrightness>:

HAL_StatusTypeDef LaserArray_FadeBrightness(LaserArray_t *la, uint8_t diode_index, uint8_t brightness, uint32_t duration) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	72fb      	strb	r3, [r7, #11]
 8007932:	4613      	mov	r3, r2
 8007934:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef ret;

    // validate the diode index
    if (diode_index >= LA_NUM_DIODES) {
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	2b1f      	cmp	r3, #31
 800793a:	d901      	bls.n	8007940 <LaserArray_FadeBrightness+0x1c>
        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e030      	b.n	80079a2 <LaserArray_FadeBrightness+0x7e>
    }

    // setup the diode_index reference
    LaserArray_Diode_t *diode = &la->diodes[diode_index];
 8007940:	7afa      	ldrb	r2, [r7, #11]
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	3310      	adds	r3, #16
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4413      	add	r3, r2
 8007950:	617b      	str	r3, [r7, #20]
    diode->source_brightness = diode->current_brightness;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	705a      	strb	r2, [r3, #1]
    diode->target_brightness = brightness;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	7aba      	ldrb	r2, [r7, #10]
 800795e:	709a      	strb	r2, [r3, #2]
    diode->transition_duration = duration * LA_FADE_TICK_RATE / 1000;
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	461a      	mov	r2, r3
 800796c:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <LaserArray_FadeBrightness+0x88>)
 800796e:	fba3 2302 	umull	r2, r3, r3, r2
 8007972:	099a      	lsrs	r2, r3, #6
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	605a      	str	r2, [r3, #4]
    diode->transition_tick = 0;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]

    // if duration is zero, set the brightness immediately
    if (diode->transition_duration == 0) {
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10c      	bne.n	80079a0 <LaserArray_FadeBrightness+0x7c>
        ret = LaserArray_SetBrightness(la, diode_index, brightness);
 8007986:	7aba      	ldrb	r2, [r7, #10]
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	4619      	mov	r1, r3
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff ff49 	bl	8007824 <LaserArray_SetBrightness>
 8007992:	4603      	mov	r3, r0
 8007994:	74fb      	strb	r3, [r7, #19]
        if (ret != HAL_OK) {
 8007996:	7cfb      	ldrb	r3, [r7, #19]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <LaserArray_FadeBrightness+0x7c>
            return ret;
 800799c:	7cfb      	ldrb	r3, [r7, #19]
 800799e:	e000      	b.n	80079a2 <LaserArray_FadeBrightness+0x7e>
        }
    }

    return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	10624dd3 	.word	0x10624dd3

080079b0 <LaserArray_TIM_PeriodElapsedHandler>:

HAL_StatusTypeDef LaserArray_TIM_PeriodElapsedHandler(LaserArray_t *la, TIM_HandleTypeDef *htim) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef ret;

    // ignore callbacks addressed to other timers
    if (htim->Instance != la->config.htim_fade->Instance) {
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <LaserArray_TIM_PeriodElapsedHandler+0x1c>
        return HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	e046      	b.n	8007a5a <LaserArray_TIM_PeriodElapsedHandler+0xaa>
    }

    // update the fade for each diode
    for (uint8_t diode_index = 0; diode_index < LA_NUM_DIODES; diode_index++) {
 80079cc:	2300      	movs	r3, #0
 80079ce:	77fb      	strb	r3, [r7, #31]
 80079d0:	e03f      	b.n	8007a52 <LaserArray_TIM_PeriodElapsedHandler+0xa2>
        LaserArray_Diode_t *diode = &la->diodes[diode_index];
 80079d2:	7ffa      	ldrb	r2, [r7, #31]
 80079d4:	4613      	mov	r3, r2
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	3310      	adds	r3, #16
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]

        // skip finished transitions
        if (diode->transition_tick == diode->transition_duration) {
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d02c      	beq.n	8007a4a <LaserArray_TIM_PeriodElapsedHandler+0x9a>
            continue;
        }

        // calculate the new brightness
        int32_t source = diode->source_brightness;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	617b      	str	r3, [r7, #20]
        int32_t range = diode->target_brightness - diode->source_brightness;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	789b      	ldrb	r3, [r3, #2]
 80079fa:	461a      	mov	r2, r3
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	613b      	str	r3, [r7, #16]
        uint8_t brightness = source + range * (int32_t) (diode->transition_tick + 1) / (int32_t) diode->transition_duration;
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	69ba      	ldr	r2, [r7, #24]
 8007a14:	6852      	ldr	r2, [r2, #4]
 8007a16:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4413      	add	r3, r2
 8007a22:	73fb      	strb	r3, [r7, #15]

        // set the new brightness value
        ret = LaserArray_SetBrightness(la, diode_index, brightness);
 8007a24:	7bfa      	ldrb	r2, [r7, #15]
 8007a26:	7ffb      	ldrb	r3, [r7, #31]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7ff fefa 	bl	8007824 <LaserArray_SetBrightness>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73bb      	strb	r3, [r7, #14]
        if (ret != HAL_OK) {
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <LaserArray_TIM_PeriodElapsedHandler+0x8e>
            return ret;
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	e00d      	b.n	8007a5a <LaserArray_TIM_PeriodElapsedHandler+0xaa>
        }

        // update the tick counter
        diode->transition_tick++;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	609a      	str	r2, [r3, #8]
 8007a48:	e000      	b.n	8007a4c <LaserArray_TIM_PeriodElapsedHandler+0x9c>
            continue;
 8007a4a:	bf00      	nop
    for (uint8_t diode_index = 0; diode_index < LA_NUM_DIODES; diode_index++) {
 8007a4c:	7ffb      	ldrb	r3, [r7, #31]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	77fb      	strb	r3, [r7, #31]
 8007a52:	7ffb      	ldrb	r3, [r7, #31]
 8007a54:	2b1f      	cmp	r3, #31
 8007a56:	d9bc      	bls.n	80079d2 <LaserArray_TIM_PeriodElapsedHandler+0x22>
    }

    return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3720      	adds	r7, #32
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b084      	sub	sp, #16
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8007a6e:	2358      	movs	r3, #88	; 0x58
 8007a70:	2201      	movs	r2, #1
 8007a72:	2101      	movs	r1, #1
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f004 fad6 	bl	800c026 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8007a82:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8007a86:	f004 fbe3 	bl	800c250 <USBD_static_malloc>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <USBD_AUDIO_Init+0x3e>
  {
    return USBD_FAIL;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	e034      	b.n	8007b0a <USBD_AUDIO_Init+0xa8>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
    haudio->wr_ptr = 0U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88
    haudio->rd_ptr = 0U;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8a3 2b86 	strh.w	r2, [r3, #2950]	; 0xb86
    haudio->rd_enable = 0U;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2146      	movs	r1, #70	; 0x46
 8007aea:	f245 6054 	movw	r0, #22100	; 0x5654
 8007aee:	4798      	blx	r3
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <USBD_AUDIO_Init+0x98>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 8007af6:	2302      	movs	r3, #2
 8007af8:	e007      	b.n	8007b0a <USBD_AUDIO_Init+0xa8>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1d1a      	adds	r2, r3, #4
 8007afe:	2358      	movs	r3, #88	; 0x58
 8007b00:	2101      	movs	r1, #1
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f004 fb80 	bl	800c208 <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70fb      	strb	r3, [r7, #3]
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8007b1e:	2101      	movs	r1, #1
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f004 faa6 	bl	800c072 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00f      	beq.n	8007b58 <USBD_AUDIO_DeInit+0x46>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2000      	movs	r0, #0
 8007b42:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f004 fb8c 	bl	800c268 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01a      	beq.n	8007bc0 <USBD_AUDIO_Setup+0x5c>
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	f040 809c 	bne.w	8007cc8 <USBD_AUDIO_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d006      	beq.n	8007ba6 <USBD_AUDIO_Setup+0x42>
 8007b98:	2b81      	cmp	r3, #129	; 0x81
 8007b9a:	d109      	bne.n	8007bb0 <USBD_AUDIO_Setup+0x4c>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f980 	bl	8007ea4 <AUDIO_REQ_GetCurrent>
          break;
 8007ba4:	e00b      	b.n	8007bbe <USBD_AUDIO_Setup+0x5a>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f99b 	bl	8007ee4 <AUDIO_REQ_SetCurrent>
          break;
 8007bae:	e006      	b.n	8007bbe <USBD_AUDIO_Setup+0x5a>

        default:
          USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f997 	bl	8008ee6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbc:	bf00      	nop
      }
      break;
 8007bbe:	e08a      	b.n	8007cd6 <USBD_AUDIO_Setup+0x172>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b0b      	cmp	r3, #11
 8007bc6:	d876      	bhi.n	8007cb6 <USBD_AUDIO_Setup+0x152>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <USBD_AUDIO_Setup+0x6c>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c01 	.word	0x08007c01
 8007bd4:	08007cb7 	.word	0x08007cb7
 8007bd8:	08007cb7 	.word	0x08007cb7
 8007bdc:	08007cb7 	.word	0x08007cb7
 8007be0:	08007cb7 	.word	0x08007cb7
 8007be4:	08007cb7 	.word	0x08007cb7
 8007be8:	08007c29 	.word	0x08007c29
 8007bec:	08007cb7 	.word	0x08007cb7
 8007bf0:	08007cb7 	.word	0x08007cb7
 8007bf4:	08007cb7 	.word	0x08007cb7
 8007bf8:	08007c53 	.word	0x08007c53
 8007bfc:	08007c79 	.word	0x08007c79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d107      	bne.n	8007c1a <USBD_AUDIO_Setup+0xb6>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 f9d1 	bl	8008fba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c18:	e055      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 f962 	bl	8008ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c22:	2302      	movs	r3, #2
 8007c24:	75fb      	strb	r3, [r7, #23]
          break;
 8007c26:	e04e      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	885b      	ldrh	r3, [r3, #2]
 8007c2c:	0a1b      	lsrs	r3, r3, #8
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b21      	cmp	r3, #33	; 0x21
 8007c32:	d147      	bne.n	8007cc4 <USBD_AUDIO_Setup+0x160>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8007c34:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <USBD_AUDIO_Setup+0x17c>)
 8007c36:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	88db      	ldrh	r3, [r3, #6]
 8007c3c:	2b09      	cmp	r3, #9
 8007c3e:	bf28      	it	cs
 8007c40:	2309      	movcs	r3, #9
 8007c42:	817b      	strh	r3, [r7, #10]

            USBD_CtlSendData(pdev, pbuf, len);
 8007c44:	897b      	ldrh	r3, [r7, #10]
 8007c46:	461a      	mov	r2, r3
 8007c48:	68f9      	ldr	r1, [r7, #12]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 f9b5 	bl	8008fba <USBD_CtlSendData>
          }
          break;
 8007c50:	e038      	b.n	8007cc4 <USBD_AUDIO_Setup+0x160>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d106      	bne.n	8007c6a <USBD_AUDIO_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 f9a9 	bl	8008fba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c68:	e02d      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 f93a 	bl	8008ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c72:	2302      	movs	r3, #2
 8007c74:	75fb      	strb	r3, [r7, #23]
          break;
 8007c76:	e026      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d112      	bne.n	8007ca8 <USBD_AUDIO_Setup+0x144>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d806      	bhi.n	8007c9a <USBD_AUDIO_Setup+0x136>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	885b      	ldrh	r3, [r3, #2]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	461a      	mov	r2, r3
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c98:	e015      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>
              USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 f922 	bl	8008ee6 <USBD_CtlError>
              ret = USBD_FAIL;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ca6:	e00e      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 f91b 	bl	8008ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	75fb      	strb	r3, [r7, #23]
          break;
 8007cb4:	e007      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>

        default:
          USBD_CtlError(pdev, req);
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f914 	bl	8008ee6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cc2:	e000      	b.n	8007cc6 <USBD_AUDIO_Setup+0x162>
          break;
 8007cc4:	bf00      	nop
      }
      break;
 8007cc6:	e006      	b.n	8007cd6 <USBD_AUDIO_Setup+0x172>
    default:
      USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 f90b 	bl	8008ee6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	bf00      	nop
  }

  return ret;
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	2000025a 	.word	0x2000025a

08007ce4 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_CfgDesc);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	226d      	movs	r2, #109	; 0x6d
 8007cf0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8007cf2:	4b03      	ldr	r3, [pc, #12]	; (8007d00 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20000248 	.word	0x20000248

08007d04 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
  /* Only OUT data are processed */
  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2a:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d32:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	; 0xb8a
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d11d      	bne.n	8007d76 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d40:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	; 0xbcc
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d116      	bne.n	8007d76 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d56:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	; 0xb8b
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
      haudio->control.len = 0U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    }
  }

  return USBD_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dea:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d153      	bne.n	8007e9a <USBD_AUDIO_DataOut+0xc2>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df8:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8007dfc:	3358      	adds	r3, #88	; 0x58
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e06:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e10:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8007e14:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8007e18:	d11c      	bne.n	8007e54 <USBD_AUDIO_DataOut+0x7c>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2c:	f893 3b84 	ldrb.w	r3, [r3, #2948]	; 0xb84
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d10f      	bne.n	8007e54 <USBD_AUDIO_DataOut+0x7c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	1d10      	adds	r0, r2, #4
 8007e40:	2201      	movs	r2, #1
 8007e42:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8007e46:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5a:	f893 3b85 	ldrb.w	r3, [r3, #2949]	; 0xb85
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10d      	bne.n	8007e7e <USBD_AUDIO_DataOut+0xa6>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8007e6c:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8007e70:	d105      	bne.n	8007e7e <USBD_AUDIO_DataOut+0xa6>
      {
        haudio->rd_enable = 1U;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e84:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8007e88:	461a      	mov	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	2358      	movs	r3, #88	; 0x58
 8007e92:	2101      	movs	r1, #1
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f004 f9b7 	bl	800c208 <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb4:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8007ebc:	330b      	adds	r3, #11
 8007ebe:	2240      	movs	r2, #64	; 0x40
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f004 fa44 	bl	800c350 <memset>

  /* Send the current mute state */
  USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8007ece:	330b      	adds	r3, #11
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	88d2      	ldrh	r2, [r2, #6]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f86f 	bl	8008fba <USBD_CtlSendData>
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef4:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d021      	beq.n	8007f42 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8007f04:	330b      	adds	r3, #11
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	88d2      	ldrh	r2, [r2, #6]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 f882 	bl	8009016 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	88db      	ldrh	r3, [r3, #6]
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2a:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	889b      	ldrh	r3, [r3, #4]
 8007f32:	0a1b      	lsrs	r3, r3, #8
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3e:	f883 2bcc 	strb.w	r2, [r3, #3020]	; 0xbcc
  }
}
 8007f42:	bf00      	nop
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	220a      	movs	r2, #10
 8007f58:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8007f5a:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	200002b8 	.word	0x200002b8

08007f6c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                      USBD_AUDIO_ItfTypeDef *fops)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData = fops;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bc80      	pop	{r7}
 8007f8e:	4770      	bx	lr

08007f90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e01a      	b.n	8007fde <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	79fa      	ldrb	r2, [r7, #7]
 8007fd4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fd6:	68f8      	ldr	r0, [r7, #12]
 8007fd8:	f003 ffca 	bl	800bf70 <USBD_LL_Init>

  return USBD_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d006      	beq.n	8008008 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]
 8008006:	e001      	b.n	800800c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008008:	2302      	movs	r3, #2
 800800a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f003 ffe5 	bl	800bff0 <USBD_LL_Start>

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3708      	adds	r7, #8
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008050:	2302      	movs	r3, #2
 8008052:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00c      	beq.n	8008078 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	78fa      	ldrb	r2, [r7, #3]
 8008068:	4611      	mov	r1, r2
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fed7 	bl	8008e6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d016      	beq.n	8008112 <USBD_LL_SetupStage+0x6a>
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d81c      	bhi.n	8008122 <USBD_LL_SetupStage+0x7a>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <USBD_LL_SetupStage+0x4a>
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d008      	beq.n	8008102 <USBD_LL_SetupStage+0x5a>
 80080f0:	e017      	b.n	8008122 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f9ca 	bl	8008494 <USBD_StdDevReq>
      break;
 8008100:	e01a      	b.n	8008138 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa2c 	bl	8008568 <USBD_StdItfReq>
      break;
 8008110:	e012      	b.n	8008138 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa6c 	bl	80085f8 <USBD_StdEPReq>
      break;
 8008120:	e00a      	b.n	8008138 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800812c:	b2db      	uxtb	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f003 ffbd 	bl	800c0b0 <USBD_LL_StallEP>
      break;
 8008136:	bf00      	nop
  }

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b086      	sub	sp, #24
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	460b      	mov	r3, r1
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d14b      	bne.n	80081ee <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800815c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008164:	2b03      	cmp	r3, #3
 8008166:	d134      	bne.n	80081d2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	429a      	cmp	r2, r3
 8008172:	d919      	bls.n	80081a8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	1ad2      	subs	r2, r2, r3
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800818a:	429a      	cmp	r2, r3
 800818c:	d203      	bcs.n	8008196 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008192:	b29b      	uxth	r3, r3
 8008194:	e002      	b.n	800819c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800819a:	b29b      	uxth	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 ff56 	bl	8009052 <USBD_CtlContinueRx>
 80081a6:	e038      	b.n	800821a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d105      	bne.n	80081ca <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 ff53 	bl	8009076 <USBD_CtlSendStatus>
 80081d0:	e023      	b.n	800821a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081d8:	2b05      	cmp	r3, #5
 80081da:	d11e      	bne.n	800821a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80081e4:	2100      	movs	r1, #0
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f003 ff62 	bl	800c0b0 <USBD_LL_StallEP>
 80081ec:	e015      	b.n	800821a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00d      	beq.n	8008216 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008200:	2b03      	cmp	r3, #3
 8008202:	d108      	bne.n	8008216 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	7afa      	ldrb	r2, [r7, #11]
 800820e:	4611      	mov	r1, r2
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	4798      	blx	r3
 8008214:	e001      	b.n	800821a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008216:	2302      	movs	r3, #2
 8008218:	e000      	b.n	800821c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	460b      	mov	r3, r1
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d17f      	bne.n	8008338 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3314      	adds	r3, #20
 800823c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008244:	2b02      	cmp	r3, #2
 8008246:	d15c      	bne.n	8008302 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	429a      	cmp	r2, r3
 8008252:	d915      	bls.n	8008280 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	1ad2      	subs	r2, r2, r3
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	b29b      	uxth	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 fec0 	bl	8008ff2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008272:	2300      	movs	r3, #0
 8008274:	2200      	movs	r2, #0
 8008276:	2100      	movs	r1, #0
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f003 ffc5 	bl	800c208 <USBD_LL_PrepareReceive>
 800827e:	e04e      	b.n	800831e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	6912      	ldr	r2, [r2, #16]
 8008288:	fbb3 f1f2 	udiv	r1, r3, r2
 800828c:	fb01 f202 	mul.w	r2, r1, r2
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11c      	bne.n	80082d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800829e:	429a      	cmp	r2, r3
 80082a0:	d316      	bcc.n	80082d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d20f      	bcs.n	80082d0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082b0:	2200      	movs	r2, #0
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fe9c 	bl	8008ff2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c2:	2300      	movs	r3, #0
 80082c4:	2200      	movs	r2, #0
 80082c6:	2100      	movs	r1, #0
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f003 ff9d 	bl	800c208 <USBD_LL_PrepareReceive>
 80082ce:	e026      	b.n	800831e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00a      	beq.n	80082f2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d105      	bne.n	80082f2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082f2:	2180      	movs	r1, #128	; 0x80
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f003 fedb 	bl	800c0b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fece 	bl	800909c <USBD_CtlReceiveStatus>
 8008300:	e00d      	b.n	800831e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008308:	2b04      	cmp	r3, #4
 800830a:	d004      	beq.n	8008316 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008316:	2180      	movs	r1, #128	; 0x80
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f003 fec9 	bl	800c0b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008324:	2b01      	cmp	r3, #1
 8008326:	d11d      	bne.n	8008364 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff fe81 	bl	8008030 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008336:	e015      	b.n	8008364 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00d      	beq.n	8008360 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800834a:	2b03      	cmp	r3, #3
 800834c:	d108      	bne.n	8008360 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	7afa      	ldrb	r2, [r7, #11]
 8008358:	4611      	mov	r1, r2
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	4798      	blx	r3
 800835e:	e001      	b.n	8008364 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008360:	2302      	movs	r3, #2
 8008362:	e000      	b.n	8008366 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008376:	2340      	movs	r3, #64	; 0x40
 8008378:	2200      	movs	r2, #0
 800837a:	2100      	movs	r1, #0
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f003 fe52 	bl	800c026 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2240      	movs	r2, #64	; 0x40
 800838e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008392:	2340      	movs	r3, #64	; 0x40
 8008394:	2200      	movs	r2, #0
 8008396:	2180      	movs	r1, #128	; 0x80
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f003 fe44 	bl	800c026 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2240      	movs	r2, #64	; 0x40
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d009      	beq.n	80083e6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6852      	ldr	r2, [r2, #4]
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	4611      	mov	r1, r2
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	4798      	blx	r3
  }

  return USBD_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr

0800840e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2204      	movs	r2, #4
 8008426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	bc80      	pop	{r7}
 8008434:	4770      	bx	lr

08008436 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008444:	2b04      	cmp	r3, #4
 8008446:	d105      	bne.n	8008454 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	bc80      	pop	{r7}
 800845e:	4770      	bx	lr

08008460 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846e:	2b03      	cmp	r3, #3
 8008470:	d10b      	bne.n	800848a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084aa:	2b40      	cmp	r3, #64	; 0x40
 80084ac:	d005      	beq.n	80084ba <USBD_StdDevReq+0x26>
 80084ae:	2b40      	cmp	r3, #64	; 0x40
 80084b0:	d84f      	bhi.n	8008552 <USBD_StdDevReq+0xbe>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d009      	beq.n	80084ca <USBD_StdDevReq+0x36>
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d14b      	bne.n	8008552 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
      break;
 80084c8:	e048      	b.n	800855c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	785b      	ldrb	r3, [r3, #1]
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d839      	bhi.n	8008546 <USBD_StdDevReq+0xb2>
 80084d2:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <USBD_StdDevReq+0x44>)
 80084d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d8:	08008529 	.word	0x08008529
 80084dc:	0800853d 	.word	0x0800853d
 80084e0:	08008547 	.word	0x08008547
 80084e4:	08008533 	.word	0x08008533
 80084e8:	08008547 	.word	0x08008547
 80084ec:	0800850b 	.word	0x0800850b
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008547 	.word	0x08008547
 80084f8:	0800851f 	.word	0x0800851f
 80084fc:	08008515 	.word	0x08008515
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f9dc 	bl	80088c0 <USBD_GetDescriptor>
          break;
 8008508:	e022      	b.n	8008550 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fb3f 	bl	8008b90 <USBD_SetAddress>
          break;
 8008512:	e01d      	b.n	8008550 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fb7e 	bl	8008c18 <USBD_SetConfig>
          break;
 800851c:	e018      	b.n	8008550 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fc07 	bl	8008d34 <USBD_GetConfig>
          break;
 8008526:	e013      	b.n	8008550 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fc37 	bl	8008d9e <USBD_GetStatus>
          break;
 8008530:	e00e      	b.n	8008550 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc65 	bl	8008e04 <USBD_SetFeature>
          break;
 800853a:	e009      	b.n	8008550 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fc74 	bl	8008e2c <USBD_ClrFeature>
          break;
 8008544:	e004      	b.n	8008550 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fccc 	bl	8008ee6 <USBD_CtlError>
          break;
 800854e:	bf00      	nop
      }
      break;
 8008550:	e004      	b.n	800855c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fcc6 	bl	8008ee6 <USBD_CtlError>
      break;
 800855a:	bf00      	nop
  }

  return ret;
 800855c:	7bfb      	ldrb	r3, [r7, #15]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop

08008568 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800857e:	2b40      	cmp	r3, #64	; 0x40
 8008580:	d005      	beq.n	800858e <USBD_StdItfReq+0x26>
 8008582:	2b40      	cmp	r3, #64	; 0x40
 8008584:	d82e      	bhi.n	80085e4 <USBD_StdItfReq+0x7c>
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <USBD_StdItfReq+0x26>
 800858a:	2b20      	cmp	r3, #32
 800858c:	d12a      	bne.n	80085e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008594:	3b01      	subs	r3, #1
 8008596:	2b02      	cmp	r3, #2
 8008598:	d81d      	bhi.n	80085d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	889b      	ldrh	r3, [r3, #4]
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d813      	bhi.n	80085cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	88db      	ldrh	r3, [r3, #6]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d110      	bne.n	80085e0 <USBD_StdItfReq+0x78>
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10d      	bne.n	80085e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fd56 	bl	8009076 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085ca:	e009      	b.n	80085e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fc89 	bl	8008ee6 <USBD_CtlError>
          break;
 80085d4:	e004      	b.n	80085e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fc84 	bl	8008ee6 <USBD_CtlError>
          break;
 80085de:	e000      	b.n	80085e2 <USBD_StdItfReq+0x7a>
          break;
 80085e0:	bf00      	nop
      }
      break;
 80085e2:	e004      	b.n	80085ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fc7d 	bl	8008ee6 <USBD_CtlError>
      break;
 80085ec:	bf00      	nop
  }

  return USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	889b      	ldrh	r3, [r3, #4]
 800860a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008614:	2b40      	cmp	r3, #64	; 0x40
 8008616:	d007      	beq.n	8008628 <USBD_StdEPReq+0x30>
 8008618:	2b40      	cmp	r3, #64	; 0x40
 800861a:	f200 8146 	bhi.w	80088aa <USBD_StdEPReq+0x2b2>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <USBD_StdEPReq+0x40>
 8008622:	2b20      	cmp	r3, #32
 8008624:	f040 8141 	bne.w	80088aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
      break;
 8008636:	e13d      	b.n	80088b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008640:	2b20      	cmp	r3, #32
 8008642:	d10a      	bne.n	800865a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	e12d      	b.n	80088b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	2b03      	cmp	r3, #3
 8008660:	d007      	beq.n	8008672 <USBD_StdEPReq+0x7a>
 8008662:	2b03      	cmp	r3, #3
 8008664:	f300 811b 	bgt.w	800889e <USBD_StdEPReq+0x2a6>
 8008668:	2b00      	cmp	r3, #0
 800866a:	d072      	beq.n	8008752 <USBD_StdEPReq+0x15a>
 800866c:	2b01      	cmp	r3, #1
 800866e:	d03a      	beq.n	80086e6 <USBD_StdEPReq+0xee>
 8008670:	e115      	b.n	800889e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008678:	2b02      	cmp	r3, #2
 800867a:	d002      	beq.n	8008682 <USBD_StdEPReq+0x8a>
 800867c:	2b03      	cmp	r3, #3
 800867e:	d015      	beq.n	80086ac <USBD_StdEPReq+0xb4>
 8008680:	e02b      	b.n	80086da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <USBD_StdEPReq+0xaa>
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b80      	cmp	r3, #128	; 0x80
 800868c:	d009      	beq.n	80086a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f003 fd0c 	bl	800c0b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008698:	2180      	movs	r1, #128	; 0x80
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f003 fd08 	bl	800c0b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086a0:	e020      	b.n	80086e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fc1e 	bl	8008ee6 <USBD_CtlError>
              break;
 80086aa:	e01b      	b.n	80086e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	885b      	ldrh	r3, [r3, #2]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10e      	bne.n	80086d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <USBD_StdEPReq+0xda>
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b80      	cmp	r3, #128	; 0x80
 80086be:	d008      	beq.n	80086d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	88db      	ldrh	r3, [r3, #6]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d104      	bne.n	80086d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f003 fcef 	bl	800c0b0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fccf 	bl	8009076 <USBD_CtlSendStatus>

              break;
 80086d8:	e004      	b.n	80086e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fc02 	bl	8008ee6 <USBD_CtlError>
              break;
 80086e2:	bf00      	nop
          }
          break;
 80086e4:	e0e0      	b.n	80088a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d002      	beq.n	80086f6 <USBD_StdEPReq+0xfe>
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d015      	beq.n	8008720 <USBD_StdEPReq+0x128>
 80086f4:	e026      	b.n	8008744 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00c      	beq.n	8008716 <USBD_StdEPReq+0x11e>
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b80      	cmp	r3, #128	; 0x80
 8008700:	d009      	beq.n	8008716 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f003 fcd2 	bl	800c0b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800870c:	2180      	movs	r1, #128	; 0x80
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f003 fcce 	bl	800c0b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008714:	e01c      	b.n	8008750 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fbe4 	bl	8008ee6 <USBD_CtlError>
              break;
 800871e:	e017      	b.n	8008750 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	885b      	ldrh	r3, [r3, #2]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d112      	bne.n	800874e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f003 fcd9 	bl	800c0ee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc9a 	bl	8009076 <USBD_CtlSendStatus>
              }
              break;
 8008742:	e004      	b.n	800874e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fbcd 	bl	8008ee6 <USBD_CtlError>
              break;
 800874c:	e000      	b.n	8008750 <USBD_StdEPReq+0x158>
              break;
 800874e:	bf00      	nop
          }
          break;
 8008750:	e0aa      	b.n	80088a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008758:	2b02      	cmp	r3, #2
 800875a:	d002      	beq.n	8008762 <USBD_StdEPReq+0x16a>
 800875c:	2b03      	cmp	r3, #3
 800875e:	d032      	beq.n	80087c6 <USBD_StdEPReq+0x1ce>
 8008760:	e097      	b.n	8008892 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d007      	beq.n	8008778 <USBD_StdEPReq+0x180>
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b80      	cmp	r3, #128	; 0x80
 800876c:	d004      	beq.n	8008778 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fbb8 	bl	8008ee6 <USBD_CtlError>
                break;
 8008776:	e091      	b.n	800889c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800877c:	2b00      	cmp	r3, #0
 800877e:	da0b      	bge.n	8008798 <USBD_StdEPReq+0x1a0>
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008786:	4613      	mov	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	3310      	adds	r3, #16
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	4413      	add	r3, r2
 8008794:	3304      	adds	r3, #4
 8008796:	e00b      	b.n	80087b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	3304      	adds	r3, #4
 80087b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2202      	movs	r2, #2
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fbfb 	bl	8008fba <USBD_CtlSendData>
              break;
 80087c4:	e06a      	b.n	800889c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	da11      	bge.n	80087f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 020f 	and.w	r2, r3, #15
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	3318      	adds	r3, #24
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d117      	bne.n	8008818 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 fb7b 	bl	8008ee6 <USBD_CtlError>
                  break;
 80087f0:	e054      	b.n	800889c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d104      	bne.n	8008818 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb68 	bl	8008ee6 <USBD_CtlError>
                  break;
 8008816:	e041      	b.n	800889c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800881c:	2b00      	cmp	r3, #0
 800881e:	da0b      	bge.n	8008838 <USBD_StdEPReq+0x240>
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008826:	4613      	mov	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	3310      	adds	r3, #16
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	4413      	add	r3, r2
 8008834:	3304      	adds	r3, #4
 8008836:	e00b      	b.n	8008850 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	3304      	adds	r3, #4
 8008850:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <USBD_StdEPReq+0x266>
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d103      	bne.n	8008866 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	e00e      	b.n	8008884 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f003 fc5e 	bl	800c12c <USBD_LL_IsStallEP>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d003      	beq.n	800887e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2201      	movs	r2, #1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e002      	b.n	8008884 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2202      	movs	r2, #2
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fb95 	bl	8008fba <USBD_CtlSendData>
              break;
 8008890:	e004      	b.n	800889c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fb26 	bl	8008ee6 <USBD_CtlError>
              break;
 800889a:	bf00      	nop
          }
          break;
 800889c:	e004      	b.n	80088a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800889e:	6839      	ldr	r1, [r7, #0]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fb20 	bl	8008ee6 <USBD_CtlError>
          break;
 80088a6:	bf00      	nop
      }
      break;
 80088a8:	e004      	b.n	80088b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fb1a 	bl	8008ee6 <USBD_CtlError>
      break;
 80088b2:	bf00      	nop
  }

  return ret;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	885b      	ldrh	r3, [r3, #2]
 80088da:	0a1b      	lsrs	r3, r3, #8
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	2b06      	cmp	r3, #6
 80088e2:	f200 8128 	bhi.w	8008b36 <USBD_GetDescriptor+0x276>
 80088e6:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <USBD_GetDescriptor+0x2c>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	08008909 	.word	0x08008909
 80088f0:	08008921 	.word	0x08008921
 80088f4:	08008961 	.word	0x08008961
 80088f8:	08008b37 	.word	0x08008b37
 80088fc:	08008b37 	.word	0x08008b37
 8008900:	08008ad7 	.word	0x08008ad7
 8008904:	08008b03 	.word	0x08008b03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7c12      	ldrb	r2, [r2, #16]
 8008914:	f107 0108 	add.w	r1, r7, #8
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	60f8      	str	r0, [r7, #12]
      break;
 800891e:	e112      	b.n	8008b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	7c1b      	ldrb	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10d      	bne.n	8008944 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008930:	f107 0208 	add.w	r2, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3301      	adds	r3, #1
 800893e:	2202      	movs	r2, #2
 8008940:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008942:	e100      	b.n	8008b46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	f107 0208 	add.w	r2, r7, #8
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
 8008954:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3301      	adds	r3, #1
 800895a:	2202      	movs	r2, #2
 800895c:	701a      	strb	r2, [r3, #0]
      break;
 800895e:	e0f2      	b.n	8008b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	885b      	ldrh	r3, [r3, #2]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b05      	cmp	r3, #5
 8008968:	f200 80ac 	bhi.w	8008ac4 <USBD_GetDescriptor+0x204>
 800896c:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <USBD_GetDescriptor+0xb4>)
 800896e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008972:	bf00      	nop
 8008974:	0800898d 	.word	0x0800898d
 8008978:	080089c1 	.word	0x080089c1
 800897c:	080089f5 	.word	0x080089f5
 8008980:	08008a29 	.word	0x08008a29
 8008984:	08008a5d 	.word	0x08008a5d
 8008988:	08008a91 	.word	0x08008a91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ae:	e091      	b.n	8008ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa97 	bl	8008ee6 <USBD_CtlError>
            err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
          break;
 80089be:	e089      	b.n	8008ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e2:	e077      	b.n	8008ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa7d 	bl	8008ee6 <USBD_CtlError>
            err++;
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	3301      	adds	r3, #1
 80089f0:	72fb      	strb	r3, [r7, #11]
          break;
 80089f2:	e06f      	b.n	8008ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a16:	e05d      	b.n	8008ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa63 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
          break;
 8008a26:	e055      	b.n	8008ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4a:	e043      	b.n	8008ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa49 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5a:	e03b      	b.n	8008ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7c12      	ldrb	r2, [r2, #16]
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a7e:	e029      	b.n	8008ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa2f 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a8e:	e021      	b.n	8008ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7c12      	ldrb	r2, [r2, #16]
 8008aa8:	f107 0108 	add.w	r1, r7, #8
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab2:	e00f      	b.n	8008ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa15 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac2:	e007      	b.n	8008ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fa0d 	bl	8008ee6 <USBD_CtlError>
          err++;
 8008acc:	7afb      	ldrb	r3, [r7, #11]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008ad2:	e038      	b.n	8008b46 <USBD_GetDescriptor+0x286>
 8008ad4:	e037      	b.n	8008b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7c1b      	ldrb	r3, [r3, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d109      	bne.n	8008af2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae6:	f107 0208 	add.w	r2, r7, #8
 8008aea:	4610      	mov	r0, r2
 8008aec:	4798      	blx	r3
 8008aee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008af0:	e029      	b.n	8008b46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f9f6 	bl	8008ee6 <USBD_CtlError>
        err++;
 8008afa:	7afb      	ldrb	r3, [r7, #11]
 8008afc:	3301      	adds	r3, #1
 8008afe:	72fb      	strb	r3, [r7, #11]
      break;
 8008b00:	e021      	b.n	8008b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	7c1b      	ldrb	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10d      	bne.n	8008b26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f107 0208 	add.w	r2, r7, #8
 8008b16:	4610      	mov	r0, r2
 8008b18:	4798      	blx	r3
 8008b1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	2207      	movs	r2, #7
 8008b22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b24:	e00f      	b.n	8008b46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f9dc 	bl	8008ee6 <USBD_CtlError>
        err++;
 8008b2e:	7afb      	ldrb	r3, [r7, #11]
 8008b30:	3301      	adds	r3, #1
 8008b32:	72fb      	strb	r3, [r7, #11]
      break;
 8008b34:	e007      	b.n	8008b46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f9d4 	bl	8008ee6 <USBD_CtlError>
      err++;
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	3301      	adds	r3, #1
 8008b42:	72fb      	strb	r3, [r7, #11]
      break;
 8008b44:	bf00      	nop
  }

  if (err != 0U)
 8008b46:	7afb      	ldrb	r3, [r7, #11]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d11c      	bne.n	8008b86 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b4c:	893b      	ldrh	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d011      	beq.n	8008b76 <USBD_GetDescriptor+0x2b6>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00d      	beq.n	8008b76 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88da      	ldrh	r2, [r3, #6]
 8008b5e:	893b      	ldrh	r3, [r7, #8]
 8008b60:	4293      	cmp	r3, r2
 8008b62:	bf28      	it	cs
 8008b64:	4613      	movcs	r3, r2
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b6a:	893b      	ldrh	r3, [r7, #8]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	68f9      	ldr	r1, [r7, #12]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fa22 	bl	8008fba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	88db      	ldrh	r3, [r3, #6]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d104      	bne.n	8008b88 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa79 	bl	8009076 <USBD_CtlSendStatus>
 8008b84:	e000      	b.n	8008b88 <USBD_GetDescriptor+0x2c8>
    return;
 8008b86:	bf00      	nop
    }
  }
}
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop

08008b90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	889b      	ldrh	r3, [r3, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d130      	bne.n	8008c04 <USBD_SetAddress+0x74>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	88db      	ldrh	r3, [r3, #6]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d12c      	bne.n	8008c04 <USBD_SetAddress+0x74>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	885b      	ldrh	r3, [r3, #2]
 8008bae:	2b7f      	cmp	r3, #127	; 0x7f
 8008bb0:	d828      	bhi.n	8008c04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	885b      	ldrh	r3, [r3, #2]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d104      	bne.n	8008bd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f98b 	bl	8008ee6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd0:	e01d      	b.n	8008c0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	7bfa      	ldrb	r2, [r7, #15]
 8008bd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f003 fad0 	bl	800c184 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fa46 	bl	8009076 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d004      	beq.n	8008bfa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf8:	e009      	b.n	8008c0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c02:	e004      	b.n	8008c0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f96d 	bl	8008ee6 <USBD_CtlError>
  }
}
 8008c0c:	bf00      	nop
 8008c0e:	bf00      	nop
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	885b      	ldrh	r3, [r3, #2]
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	4b41      	ldr	r3, [pc, #260]	; (8008d30 <USBD_SetConfig+0x118>)
 8008c2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c2c:	4b40      	ldr	r3, [pc, #256]	; (8008d30 <USBD_SetConfig+0x118>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d904      	bls.n	8008c3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f955 	bl	8008ee6 <USBD_CtlError>
 8008c3c:	e075      	b.n	8008d2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d002      	beq.n	8008c4e <USBD_SetConfig+0x36>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d023      	beq.n	8008c94 <USBD_SetConfig+0x7c>
 8008c4c:	e062      	b.n	8008d14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c4e:	4b38      	ldr	r3, [pc, #224]	; (8008d30 <USBD_SetConfig+0x118>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d01a      	beq.n	8008c8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c56:	4b36      	ldr	r3, [pc, #216]	; (8008d30 <USBD_SetConfig+0x118>)
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2203      	movs	r2, #3
 8008c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c68:	4b31      	ldr	r3, [pc, #196]	; (8008d30 <USBD_SetConfig+0x118>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff f9e8 	bl	8008044 <USBD_SetClassConfig>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d104      	bne.n	8008c84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f932 	bl	8008ee6 <USBD_CtlError>
            return;
 8008c82:	e052      	b.n	8008d2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9f6 	bl	8009076 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c8a:	e04e      	b.n	8008d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f9f2 	bl	8009076 <USBD_CtlSendStatus>
        break;
 8008c92:	e04a      	b.n	8008d2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c94:	4b26      	ldr	r3, [pc, #152]	; (8008d30 <USBD_SetConfig+0x118>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d112      	bne.n	8008cc2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008ca4:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <USBD_SetConfig+0x118>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008cae:	4b20      	ldr	r3, [pc, #128]	; (8008d30 <USBD_SetConfig+0x118>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff f9e4 	bl	8008082 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f9db 	bl	8009076 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008cc0:	e033      	b.n	8008d2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008cc2:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <USBD_SetConfig+0x118>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d01d      	beq.n	8008d0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff f9d2 	bl	8008082 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cde:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <USBD_SetConfig+0x118>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ce8:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <USBD_SetConfig+0x118>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff f9a8 	bl	8008044 <USBD_SetClassConfig>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d104      	bne.n	8008d04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f8f2 	bl	8008ee6 <USBD_CtlError>
            return;
 8008d02:	e012      	b.n	8008d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f9b6 	bl	8009076 <USBD_CtlSendStatus>
        break;
 8008d0a:	e00e      	b.n	8008d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f9b2 	bl	8009076 <USBD_CtlSendStatus>
        break;
 8008d12:	e00a      	b.n	8008d2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f8e5 	bl	8008ee6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008d1c:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <USBD_SetConfig+0x118>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff f9ad 	bl	8008082 <USBD_ClrClassConfig>
        break;
 8008d28:	bf00      	nop
    }
  }
}
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000944 	.word	0x20000944

08008d34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d004      	beq.n	8008d50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8cc 	bl	8008ee6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d4e:	e022      	b.n	8008d96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	dc02      	bgt.n	8008d60 <USBD_GetConfig+0x2c>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dc03      	bgt.n	8008d66 <USBD_GetConfig+0x32>
 8008d5e:	e015      	b.n	8008d8c <USBD_GetConfig+0x58>
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d00b      	beq.n	8008d7c <USBD_GetConfig+0x48>
 8008d64:	e012      	b.n	8008d8c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	2201      	movs	r2, #1
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f920 	bl	8008fba <USBD_CtlSendData>
        break;
 8008d7a:	e00c      	b.n	8008d96 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	2201      	movs	r2, #1
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f918 	bl	8008fba <USBD_CtlSendData>
        break;
 8008d8a:	e004      	b.n	8008d96 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f8a9 	bl	8008ee6 <USBD_CtlError>
        break;
 8008d94:	bf00      	nop
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dae:	3b01      	subs	r3, #1
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d81e      	bhi.n	8008df2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	88db      	ldrh	r3, [r3, #6]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d004      	beq.n	8008dc6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f891 	bl	8008ee6 <USBD_CtlError>
        break;
 8008dc4:	e01a      	b.n	8008dfc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d005      	beq.n	8008de2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f043 0202 	orr.w	r2, r3, #2
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	330c      	adds	r3, #12
 8008de6:	2202      	movs	r2, #2
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f8e5 	bl	8008fba <USBD_CtlSendData>
      break;
 8008df0:	e004      	b.n	8008dfc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f876 	bl	8008ee6 <USBD_CtlError>
      break;
 8008dfa:	bf00      	nop
  }
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	885b      	ldrh	r3, [r3, #2]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d106      	bne.n	8008e24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f929 	bl	8009076 <USBD_CtlSendStatus>
  }
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d80b      	bhi.n	8008e5a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	885b      	ldrh	r3, [r3, #2]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d10c      	bne.n	8008e64 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f90f 	bl	8009076 <USBD_CtlSendStatus>
      }
      break;
 8008e58:	e004      	b.n	8008e64 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f842 	bl	8008ee6 <USBD_CtlError>
      break;
 8008e62:	e000      	b.n	8008e66 <USBD_ClrFeature+0x3a>
      break;
 8008e64:	bf00      	nop
  }
}
 8008e66:	bf00      	nop
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	785a      	ldrb	r2, [r3, #1]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	3302      	adds	r3, #2
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	3303      	adds	r3, #3
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	3305      	adds	r3, #5
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	021b      	lsls	r3, r3, #8
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	4413      	add	r3, r2
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	3306      	adds	r3, #6
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	3307      	adds	r3, #7
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	80da      	strh	r2, [r3, #6]

}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ef0:	2180      	movs	r1, #128	; 0x80
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f003 f8dc 	bl	800c0b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008ef8:	2100      	movs	r1, #0
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f003 f8d8 	bl	800c0b0 <USBD_LL_StallEP>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d032      	beq.n	8008f84 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 f834 	bl	8008f8c <USBD_GetLen>
 8008f24:	4603      	mov	r3, r0
 8008f26:	3301      	adds	r3, #1
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	75fa      	strb	r2, [r7, #23]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	7812      	ldrb	r2, [r2, #0]
 8008f42:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	75fa      	strb	r2, [r7, #23]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4413      	add	r3, r2
 8008f50:	2203      	movs	r2, #3
 8008f52:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f54:	e012      	b.n	8008f7c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	60fa      	str	r2, [r7, #12]
 8008f5c:	7dfa      	ldrb	r2, [r7, #23]
 8008f5e:	1c51      	adds	r1, r2, #1
 8008f60:	75f9      	strb	r1, [r7, #23]
 8008f62:	4611      	mov	r1, r2
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	440a      	add	r2, r1
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f6c:	7dfb      	ldrb	r3, [r7, #23]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	75fa      	strb	r2, [r7, #23]
 8008f72:	461a      	mov	r2, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4413      	add	r3, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e8      	bne.n	8008f56 <USBD_GetString+0x4e>
    }
  }
}
 8008f84:	bf00      	nop
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f98:	e005      	b.n	8008fa6 <USBD_GetLen+0x1a>
  {
    len++;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1f5      	bne.n	8008f9a <USBD_GetLen+0xe>
  }

  return len;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr

08008fba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fd0:	88fa      	ldrh	r2, [r7, #6]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008fd6:	88fa      	ldrh	r2, [r7, #6]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fdc:	88fb      	ldrh	r3, [r7, #6]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f003 f8ed 	bl	800c1c2 <USBD_LL_Transmit>

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	2100      	movs	r1, #0
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f003 f8db 	bl	800c1c2 <USBD_LL_Transmit>

  return USBD_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	4613      	mov	r3, r2
 8009022:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2203      	movs	r2, #3
 8009028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800902c:	88fa      	ldrh	r2, [r7, #6]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009034:	88fa      	ldrh	r2, [r7, #6]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800903c:	88fb      	ldrh	r3, [r7, #6]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	2100      	movs	r1, #0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f003 f8e0 	bl	800c208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	4613      	mov	r3, r2
 800905e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	2100      	movs	r1, #0
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f003 f8ce 	bl	800c208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b082      	sub	sp, #8
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2204      	movs	r2, #4
 8009082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009086:	2300      	movs	r3, #0
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f003 f898 	bl	800c1c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2205      	movs	r2, #5
 80090a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ac:	2300      	movs	r3, #0
 80090ae:	2200      	movs	r2, #0
 80090b0:	2100      	movs	r1, #0
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f003 f8a8 	bl	800c208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ca:	f3ef 8305 	mrs	r3, IPSR
 80090ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80090d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10f      	bne.n	80090f6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090d6:	f3ef 8310 	mrs	r3, PRIMASK
 80090da:	607b      	str	r3, [r7, #4]
  return(result);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <osKernelInitialize+0x32>
 80090e2:	4b10      	ldr	r3, [pc, #64]	; (8009124 <osKernelInitialize+0x60>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d109      	bne.n	80090fe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090ea:	f3ef 8311 	mrs	r3, BASEPRI
 80090ee:	603b      	str	r3, [r7, #0]
  return(result);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80090f6:	f06f 0305 	mvn.w	r3, #5
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	e00c      	b.n	8009118 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80090fe:	4b09      	ldr	r3, [pc, #36]	; (8009124 <osKernelInitialize+0x60>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d105      	bne.n	8009112 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009106:	4b07      	ldr	r3, [pc, #28]	; (8009124 <osKernelInitialize+0x60>)
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	e002      	b.n	8009118 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009112:	f04f 33ff 	mov.w	r3, #4294967295
 8009116:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009118:	68fb      	ldr	r3, [r7, #12]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr
 8009124:	20000948 	.word	0x20000948

08009128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800912e:	f3ef 8305 	mrs	r3, IPSR
 8009132:	60bb      	str	r3, [r7, #8]
  return(result);
 8009134:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10f      	bne.n	800915a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800913a:	f3ef 8310 	mrs	r3, PRIMASK
 800913e:	607b      	str	r3, [r7, #4]
  return(result);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d109      	bne.n	800915a <osKernelStart+0x32>
 8009146:	4b11      	ldr	r3, [pc, #68]	; (800918c <osKernelStart+0x64>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d109      	bne.n	8009162 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800914e:	f3ef 8311 	mrs	r3, BASEPRI
 8009152:	603b      	str	r3, [r7, #0]
  return(result);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <osKernelStart+0x3a>
    stat = osErrorISR;
 800915a:	f06f 0305 	mvn.w	r3, #5
 800915e:	60fb      	str	r3, [r7, #12]
 8009160:	e00e      	b.n	8009180 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009162:	4b0a      	ldr	r3, [pc, #40]	; (800918c <osKernelStart+0x64>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d107      	bne.n	800917a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800916a:	4b08      	ldr	r3, [pc, #32]	; (800918c <osKernelStart+0x64>)
 800916c:	2202      	movs	r2, #2
 800916e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009170:	f001 f890 	bl	800a294 <vTaskStartScheduler>
      stat = osOK;
 8009174:	2300      	movs	r3, #0
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	e002      	b.n	8009180 <osKernelStart+0x58>
    } else {
      stat = osError;
 800917a:	f04f 33ff 	mov.w	r3, #4294967295
 800917e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009180:	68fb      	ldr	r3, [r7, #12]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000948 	.word	0x20000948

08009190 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b092      	sub	sp, #72	; 0x48
 8009194:	af04      	add	r7, sp, #16
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091a0:	f3ef 8305 	mrs	r3, IPSR
 80091a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f040 8094 	bne.w	80092d6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ae:	f3ef 8310 	mrs	r3, PRIMASK
 80091b2:	623b      	str	r3, [r7, #32]
  return(result);
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f040 808d 	bne.w	80092d6 <osThreadNew+0x146>
 80091bc:	4b48      	ldr	r3, [pc, #288]	; (80092e0 <osThreadNew+0x150>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d106      	bne.n	80091d2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091c4:	f3ef 8311 	mrs	r3, BASEPRI
 80091c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f040 8082 	bne.w	80092d6 <osThreadNew+0x146>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d07e      	beq.n	80092d6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80091d8:	2380      	movs	r3, #128	; 0x80
 80091da:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80091dc:	2318      	movs	r3, #24
 80091de:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80091e0:	2300      	movs	r3, #0
 80091e2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80091e4:	f107 031b 	add.w	r3, r7, #27
 80091e8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80091ea:	f04f 33ff 	mov.w	r3, #4294967295
 80091ee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d045      	beq.n	8009282 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <osThreadNew+0x74>
        name = attr->name;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	2b00      	cmp	r3, #0
 8009216:	d008      	beq.n	800922a <osThreadNew+0x9a>
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	2b38      	cmp	r3, #56	; 0x38
 800921c:	d805      	bhi.n	800922a <osThreadNew+0x9a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <osThreadNew+0x9e>
        return (NULL);
 800922a:	2300      	movs	r3, #0
 800922c:	e054      	b.n	80092d8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	089b      	lsrs	r3, r3, #2
 800923c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00e      	beq.n	8009264 <osThreadNew+0xd4>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2bbb      	cmp	r3, #187	; 0xbb
 800924c:	d90a      	bls.n	8009264 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009252:	2b00      	cmp	r3, #0
 8009254:	d006      	beq.n	8009264 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <osThreadNew+0xd4>
        mem = 1;
 800925e:	2301      	movs	r3, #1
 8009260:	62bb      	str	r3, [r7, #40]	; 0x28
 8009262:	e010      	b.n	8009286 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10c      	bne.n	8009286 <osThreadNew+0xf6>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d108      	bne.n	8009286 <osThreadNew+0xf6>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <osThreadNew+0xf6>
          mem = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009280:	e001      	b.n	8009286 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	2b01      	cmp	r3, #1
 800928a:	d110      	bne.n	80092ae <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009294:	9202      	str	r2, [sp, #8]
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fe12 	bl	8009ecc <xTaskCreateStatic>
 80092a8:	4603      	mov	r3, r0
 80092aa:	617b      	str	r3, [r7, #20]
 80092ac:	e013      	b.n	80092d6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80092ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d110      	bne.n	80092d6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fe5c 	bl	8009f84 <xTaskCreate>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d001      	beq.n	80092d6 <osThreadNew+0x146>
          hTask = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80092d6:	697b      	ldr	r3, [r7, #20]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3738      	adds	r7, #56	; 0x38
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20000948 	.word	0x20000948

080092e4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ec:	f3ef 8305 	mrs	r3, IPSR
 80092f0:	613b      	str	r3, [r7, #16]
  return(result);
 80092f2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10f      	bne.n	8009318 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092f8:	f3ef 8310 	mrs	r3, PRIMASK
 80092fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d109      	bne.n	8009318 <osDelay+0x34>
 8009304:	4b0d      	ldr	r3, [pc, #52]	; (800933c <osDelay+0x58>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b02      	cmp	r3, #2
 800930a:	d109      	bne.n	8009320 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800930c:	f3ef 8311 	mrs	r3, BASEPRI
 8009310:	60bb      	str	r3, [r7, #8]
  return(result);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <osDelay+0x3c>
    stat = osErrorISR;
 8009318:	f06f 0305 	mvn.w	r3, #5
 800931c:	617b      	str	r3, [r7, #20]
 800931e:	e007      	b.n	8009330 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <osDelay+0x4c>
      vTaskDelay(ticks);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 ff7e 	bl	800a22c <vTaskDelay>
    }
  }

  return (stat);
 8009330:	697b      	ldr	r3, [r7, #20]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000948 	.word	0x20000948

08009340 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4a06      	ldr	r2, [pc, #24]	; (8009368 <vApplicationGetIdleTaskMemory+0x28>)
 8009350:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	4a05      	ldr	r2, [pc, #20]	; (800936c <vApplicationGetIdleTaskMemory+0x2c>)
 8009356:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2280      	movs	r2, #128	; 0x80
 800935c:	601a      	str	r2, [r3, #0]
}
 800935e:	bf00      	nop
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr
 8009368:	2000094c 	.word	0x2000094c
 800936c:	20000a08 	.word	0x20000a08

08009370 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a07      	ldr	r2, [pc, #28]	; (800939c <vApplicationGetTimerTaskMemory+0x2c>)
 8009380:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	4a06      	ldr	r2, [pc, #24]	; (80093a0 <vApplicationGetTimerTaskMemory+0x30>)
 8009386:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800938e:	601a      	str	r2, [r3, #0]
}
 8009390:	bf00      	nop
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20000c08 	.word	0x20000c08
 80093a0:	20000cc4 	.word	0x20000cc4

080093a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f103 0208 	add.w	r2, r3, #8
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f04f 32ff 	mov.w	r2, #4294967295
 80093bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f103 0208 	add.w	r2, r3, #8
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f103 0208 	add.w	r2, r3, #8
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	601a      	str	r2, [r3, #0]
}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr

08009440 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d103      	bne.n	8009460 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e00c      	b.n	800947a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3308      	adds	r3, #8
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e002      	b.n	800946e <vListInsert+0x2e>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	60fb      	str	r3, [r7, #12]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	429a      	cmp	r2, r3
 8009478:	d2f6      	bcs.n	8009468 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bc80      	pop	{r7}
 80094ae:	4770      	bx	lr

080094b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	6892      	ldr	r2, [r2, #8]
 80094c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	6852      	ldr	r2, [r2, #4]
 80094d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d103      	bne.n	80094e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	1e5a      	subs	r2, r3, #1
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr
	...

08009504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800952e:	f001 fff5 	bl	800b51c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953a:	68f9      	ldr	r1, [r7, #12]
 800953c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	441a      	add	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800955e:	3b01      	subs	r3, #1
 8009560:	68f9      	ldr	r1, [r7, #12]
 8009562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009564:	fb01 f303 	mul.w	r3, r1, r3
 8009568:	441a      	add	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	22ff      	movs	r2, #255	; 0xff
 8009572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	22ff      	movs	r2, #255	; 0xff
 800957a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d114      	bne.n	80095ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01a      	beq.n	80095c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	3310      	adds	r3, #16
 8009590:	4618      	mov	r0, r3
 8009592:	f001 f91b 	bl	800a7cc <xTaskRemoveFromEventList>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d012      	beq.n	80095c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800959c:	4b0c      	ldr	r3, [pc, #48]	; (80095d0 <xQueueGenericReset+0xcc>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	e009      	b.n	80095c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3310      	adds	r3, #16
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff fef6 	bl	80093a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3324      	adds	r3, #36	; 0x24
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff fef1 	bl	80093a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80095c2:	f001 ffdb 	bl	800b57c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80095c6:	2301      	movs	r3, #1
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08e      	sub	sp, #56	; 0x38
 80095d8:	af02      	add	r7, sp, #8
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10a      	bne.n	80095fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10a      	bne.n	800961a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009616:	bf00      	nop
 8009618:	e7fe      	b.n	8009618 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <xQueueGenericCreateStatic+0x52>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <xQueueGenericCreateStatic+0x56>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <xQueueGenericCreateStatic+0x58>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	623b      	str	r3, [r7, #32]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d102      	bne.n	8009652 <xQueueGenericCreateStatic+0x7e>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <xQueueGenericCreateStatic+0x82>
 8009652:	2301      	movs	r3, #1
 8009654:	e000      	b.n	8009658 <xQueueGenericCreateStatic+0x84>
 8009656:	2300      	movs	r3, #0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	61fb      	str	r3, [r7, #28]
}
 800966e:	bf00      	nop
 8009670:	e7fe      	b.n	8009670 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009672:	2350      	movs	r3, #80	; 0x50
 8009674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b50      	cmp	r3, #80	; 0x50
 800967a:	d00a      	beq.n	8009692 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	61bb      	str	r3, [r7, #24]
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00d      	beq.n	80096b8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80096a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80096a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	4613      	mov	r3, r2
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 f805 	bl	80096c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3730      	adds	r7, #48	; 0x30
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d103      	bne.n	80096de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e002      	b.n	80096e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096f0:	2101      	movs	r1, #1
 80096f2:	69b8      	ldr	r0, [r7, #24]
 80096f4:	f7ff ff06 	bl	8009504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	78fa      	ldrb	r2, [r7, #3]
 80096fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b08e      	sub	sp, #56	; 0x38
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009716:	2300      	movs	r3, #0
 8009718:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xQueueGenericSend+0x32>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d103      	bne.n	8009748 <xQueueGenericSend+0x40>
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <xQueueGenericSend+0x44>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <xQueueGenericSend+0x46>
 800974c:	2300      	movs	r3, #0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <xQueueGenericSend+0x60>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b02      	cmp	r3, #2
 800976c:	d103      	bne.n	8009776 <xQueueGenericSend+0x6e>
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <xQueueGenericSend+0x72>
 8009776:	2301      	movs	r3, #1
 8009778:	e000      	b.n	800977c <xQueueGenericSend+0x74>
 800977a:	2300      	movs	r3, #0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xQueueGenericSend+0x8e>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	623b      	str	r3, [r7, #32]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009796:	f001 f9df 	bl	800ab58 <xTaskGetSchedulerState>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <xQueueGenericSend+0x9e>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <xQueueGenericSend+0xa2>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <xQueueGenericSend+0xa4>
 80097aa:	2300      	movs	r3, #0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d10a      	bne.n	80097c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	61fb      	str	r3, [r7, #28]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097c6:	f001 fea9 	bl	800b51c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d302      	bcc.n	80097dc <xQueueGenericSend+0xd4>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d129      	bne.n	8009830 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	68b9      	ldr	r1, [r7, #8]
 80097e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097e2:	f000 fa07 	bl	8009bf4 <prvCopyDataToQueue>
 80097e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d010      	beq.n	8009812 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	3324      	adds	r3, #36	; 0x24
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 ffe9 	bl	800a7cc <xTaskRemoveFromEventList>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d013      	beq.n	8009828 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009800:	4b3f      	ldr	r3, [pc, #252]	; (8009900 <xQueueGenericSend+0x1f8>)
 8009802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009806:	601a      	str	r2, [r3, #0]
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	f3bf 8f6f 	isb	sy
 8009810:	e00a      	b.n	8009828 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d007      	beq.n	8009828 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009818:	4b39      	ldr	r3, [pc, #228]	; (8009900 <xQueueGenericSend+0x1f8>)
 800981a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009828:	f001 fea8 	bl	800b57c <vPortExitCritical>
				return pdPASS;
 800982c:	2301      	movs	r3, #1
 800982e:	e063      	b.n	80098f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d103      	bne.n	800983e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009836:	f001 fea1 	bl	800b57c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800983a:	2300      	movs	r3, #0
 800983c:	e05c      	b.n	80098f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800983e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009844:	f107 0314 	add.w	r3, r7, #20
 8009848:	4618      	mov	r0, r3
 800984a:	f001 f823 	bl	800a894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800984e:	2301      	movs	r3, #1
 8009850:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009852:	f001 fe93 	bl	800b57c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009856:	f000 fd8d 	bl	800a374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800985a:	f001 fe5f 	bl	800b51c <vPortEnterCritical>
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009864:	b25b      	sxtb	r3, r3
 8009866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986a:	d103      	bne.n	8009874 <xQueueGenericSend+0x16c>
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800987a:	b25b      	sxtb	r3, r3
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009880:	d103      	bne.n	800988a <xQueueGenericSend+0x182>
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800988a:	f001 fe77 	bl	800b57c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800988e:	1d3a      	adds	r2, r7, #4
 8009890:	f107 0314 	add.w	r3, r7, #20
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f001 f812 	bl	800a8c0 <xTaskCheckForTimeOut>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d124      	bne.n	80098ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098a4:	f000 fa9e 	bl	8009de4 <prvIsQueueFull>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d018      	beq.n	80098e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	3310      	adds	r3, #16
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 ff38 	bl	800a72c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098be:	f000 fa29 	bl	8009d14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098c2:	f000 fd65 	bl	800a390 <xTaskResumeAll>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f47f af7c 	bne.w	80097c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80098ce:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <xQueueGenericSend+0x1f8>)
 80098d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	e772      	b.n	80097c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80098e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e2:	f000 fa17 	bl	8009d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098e6:	f000 fd53 	bl	800a390 <xTaskResumeAll>
 80098ea:	e76c      	b.n	80097c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80098ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098ee:	f000 fa11 	bl	8009d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098f2:	f000 fd4d 	bl	800a390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098f6:	2300      	movs	r3, #0
		}
	}
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3738      	adds	r7, #56	; 0x38
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	e000ed04 	.word	0xe000ed04

08009904 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08e      	sub	sp, #56	; 0x38
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d103      	bne.n	8009940 <xQueueGenericSendFromISR+0x3c>
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <xQueueGenericSendFromISR+0x40>
 8009940:	2301      	movs	r3, #1
 8009942:	e000      	b.n	8009946 <xQueueGenericSendFromISR+0x42>
 8009944:	2300      	movs	r3, #0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10a      	bne.n	8009960 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	623b      	str	r3, [r7, #32]
}
 800995c:	bf00      	nop
 800995e:	e7fe      	b.n	800995e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d103      	bne.n	800996e <xQueueGenericSendFromISR+0x6a>
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <xQueueGenericSendFromISR+0x6e>
 800996e:	2301      	movs	r3, #1
 8009970:	e000      	b.n	8009974 <xQueueGenericSendFromISR+0x70>
 8009972:	2300      	movs	r3, #0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	61fb      	str	r3, [r7, #28]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800998e:	f001 fe87 	bl	800b6a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009992:	f3ef 8211 	mrs	r2, BASEPRI
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	61ba      	str	r2, [r7, #24]
 80099a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d302      	bcc.n	80099c0 <xQueueGenericSendFromISR+0xbc>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d12c      	bne.n	8009a1a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099d0:	f000 f910 	bl	8009bf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d112      	bne.n	8009a04 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d016      	beq.n	8009a14 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	3324      	adds	r3, #36	; 0x24
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 feee 	bl	800a7cc <xTaskRemoveFromEventList>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00e      	beq.n	8009a14 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	e007      	b.n	8009a14 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a08:	3301      	adds	r3, #1
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	b25a      	sxtb	r2, r3
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a14:	2301      	movs	r3, #1
 8009a16:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009a18:	e001      	b.n	8009a1e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a20:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a28:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3738      	adds	r7, #56	; 0x38
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08c      	sub	sp, #48	; 0x30
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a40:	2300      	movs	r3, #0
 8009a42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <xQueueReceive+0x30>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	623b      	str	r3, [r7, #32]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d103      	bne.n	8009a72 <xQueueReceive+0x3e>
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <xQueueReceive+0x42>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <xQueueReceive+0x44>
 8009a76:	2300      	movs	r3, #0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <xQueueReceive+0x5e>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	61fb      	str	r3, [r7, #28]
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a92:	f001 f861 	bl	800ab58 <xTaskGetSchedulerState>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <xQueueReceive+0x6e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <xQueueReceive+0x72>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <xQueueReceive+0x74>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <xQueueReceive+0x8e>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	61bb      	str	r3, [r7, #24]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ac2:	f001 fd2b 	bl	800b51c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01f      	beq.n	8009b12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ad2:	68b9      	ldr	r1, [r7, #8]
 8009ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ad6:	f000 f8f7 	bl	8009cc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	1e5a      	subs	r2, r3, #1
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00f      	beq.n	8009b0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	3310      	adds	r3, #16
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fe6c 	bl	800a7cc <xTaskRemoveFromEventList>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d007      	beq.n	8009b0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009afa:	4b3d      	ldr	r3, [pc, #244]	; (8009bf0 <xQueueReceive+0x1bc>)
 8009afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b0a:	f001 fd37 	bl	800b57c <vPortExitCritical>
				return pdPASS;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e069      	b.n	8009be6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b18:	f001 fd30 	bl	800b57c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e062      	b.n	8009be6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b26:	f107 0310 	add.w	r3, r7, #16
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 feb2 	bl	800a894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b30:	2301      	movs	r3, #1
 8009b32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b34:	f001 fd22 	bl	800b57c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b38:	f000 fc1c 	bl	800a374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b3c:	f001 fcee 	bl	800b51c <vPortEnterCritical>
 8009b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b46:	b25b      	sxtb	r3, r3
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d103      	bne.n	8009b56 <xQueueReceive+0x122>
 8009b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b5c:	b25b      	sxtb	r3, r3
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	d103      	bne.n	8009b6c <xQueueReceive+0x138>
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b6c:	f001 fd06 	bl	800b57c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b70:	1d3a      	adds	r2, r7, #4
 8009b72:	f107 0310 	add.w	r3, r7, #16
 8009b76:	4611      	mov	r1, r2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fea1 	bl	800a8c0 <xTaskCheckForTimeOut>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d123      	bne.n	8009bcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b86:	f000 f917 	bl	8009db8 <prvIsQueueEmpty>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d017      	beq.n	8009bc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	3324      	adds	r3, #36	; 0x24
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	4611      	mov	r1, r2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fdc7 	bl	800a72c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ba0:	f000 f8b8 	bl	8009d14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ba4:	f000 fbf4 	bl	800a390 <xTaskResumeAll>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d189      	bne.n	8009ac2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009bae:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <xQueueReceive+0x1bc>)
 8009bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	e780      	b.n	8009ac2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc2:	f000 f8a7 	bl	8009d14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bc6:	f000 fbe3 	bl	800a390 <xTaskResumeAll>
 8009bca:	e77a      	b.n	8009ac2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bce:	f000 f8a1 	bl	8009d14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bd2:	f000 fbdd 	bl	800a390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd8:	f000 f8ee 	bl	8009db8 <prvIsQueueEmpty>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f43f af6f 	beq.w	8009ac2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3730      	adds	r7, #48	; 0x30
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	e000ed04 	.word	0xe000ed04

08009bf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10d      	bne.n	8009c2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d14d      	bne.n	8009cb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ffb8 	bl	800ab94 <xTaskPriorityDisinherit>
 8009c24:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	605a      	str	r2, [r3, #4]
 8009c2c:	e043      	b.n	8009cb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d119      	bne.n	8009c68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6898      	ldr	r0, [r3, #8]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	68b9      	ldr	r1, [r7, #8]
 8009c40:	f002 fb78 	bl	800c334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4c:	441a      	add	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d32b      	bcc.n	8009cb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	609a      	str	r2, [r3, #8]
 8009c66:	e026      	b.n	8009cb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68d8      	ldr	r0, [r3, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c70:	461a      	mov	r2, r3
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	f002 fb5e 	bl	800c334 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c80:	425b      	negs	r3, r3
 8009c82:	441a      	add	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	68da      	ldr	r2, [r3, #12]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d207      	bcs.n	8009ca4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	425b      	negs	r3, r3
 8009c9e:	441a      	add	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d105      	bne.n	8009cb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d018      	beq.n	8009d0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68da      	ldr	r2, [r3, #12]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	441a      	add	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d303      	bcc.n	8009cfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68d9      	ldr	r1, [r3, #12]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	461a      	mov	r2, r3
 8009d06:	6838      	ldr	r0, [r7, #0]
 8009d08:	f002 fb14 	bl	800c334 <memcpy>
	}
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d1c:	f001 fbfe 	bl	800b51c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d28:	e011      	b.n	8009d4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d012      	beq.n	8009d58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3324      	adds	r3, #36	; 0x24
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fd48 	bl	800a7cc <xTaskRemoveFromEventList>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d42:	f000 fe1f 	bl	800a984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dce9      	bgt.n	8009d2a <prvUnlockQueue+0x16>
 8009d56:	e000      	b.n	8009d5a <prvUnlockQueue+0x46>
					break;
 8009d58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	22ff      	movs	r2, #255	; 0xff
 8009d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d62:	f001 fc0b 	bl	800b57c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d66:	f001 fbd9 	bl	800b51c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d72:	e011      	b.n	8009d98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d012      	beq.n	8009da2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3310      	adds	r3, #16
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fd23 	bl	800a7cc <xTaskRemoveFromEventList>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d001      	beq.n	8009d90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d8c:	f000 fdfa 	bl	800a984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dce9      	bgt.n	8009d74 <prvUnlockQueue+0x60>
 8009da0:	e000      	b.n	8009da4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009da2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	22ff      	movs	r2, #255	; 0xff
 8009da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009dac:	f001 fbe6 	bl	800b57c <vPortExitCritical>
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dc0:	f001 fbac 	bl	800b51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e001      	b.n	8009dd6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009dd6:	f001 fbd1 	bl	800b57c <vPortExitCritical>

	return xReturn;
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009dec:	f001 fb96 	bl	800b51c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d102      	bne.n	8009e02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e001      	b.n	8009e06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e06:	f001 fbb9 	bl	800b57c <vPortExitCritical>

	return xReturn;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	e014      	b.n	8009e4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e24:	4a0e      	ldr	r2, [pc, #56]	; (8009e60 <vQueueAddToRegistry+0x4c>)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10b      	bne.n	8009e48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e30:	490b      	ldr	r1, [pc, #44]	; (8009e60 <vQueueAddToRegistry+0x4c>)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e3a:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <vQueueAddToRegistry+0x4c>)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	00db      	lsls	r3, r3, #3
 8009e40:	4413      	add	r3, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e46:	e006      	b.n	8009e56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b07      	cmp	r3, #7
 8009e52:	d9e7      	bls.n	8009e24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bc80      	pop	{r7}
 8009e5e:	4770      	bx	lr
 8009e60:	200010c4 	.word	0x200010c4

08009e64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e74:	f001 fb52 	bl	800b51c <vPortEnterCritical>
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e7e:	b25b      	sxtb	r3, r3
 8009e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e84:	d103      	bne.n	8009e8e <vQueueWaitForMessageRestricted+0x2a>
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e94:	b25b      	sxtb	r3, r3
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d103      	bne.n	8009ea4 <vQueueWaitForMessageRestricted+0x40>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ea4:	f001 fb6a 	bl	800b57c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d106      	bne.n	8009ebe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	3324      	adds	r3, #36	; 0x24
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fc5b 	bl	800a774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ebe:	6978      	ldr	r0, [r7, #20]
 8009ec0:	f7ff ff28 	bl	8009d14 <prvUnlockQueue>
	}
 8009ec4:	bf00      	nop
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b08e      	sub	sp, #56	; 0x38
 8009ed0:	af04      	add	r7, sp, #16
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
 8009ed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	623b      	str	r3, [r7, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	e7fe      	b.n	8009ef4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d10a      	bne.n	8009f12 <xTaskCreateStatic+0x46>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	61fb      	str	r3, [r7, #28]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f12:	23bc      	movs	r3, #188	; 0xbc
 8009f14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2bbc      	cmp	r3, #188	; 0xbc
 8009f1a:	d00a      	beq.n	8009f32 <xTaskCreateStatic+0x66>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	61bb      	str	r3, [r7, #24]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01e      	beq.n	8009f76 <xTaskCreateStatic+0xaa>
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d01b      	beq.n	8009f76 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f50:	2300      	movs	r3, #0
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	9302      	str	r3, [sp, #8]
 8009f58:	f107 0314 	add.w	r3, r7, #20
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	68b9      	ldr	r1, [r7, #8]
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f851 	bl	800a010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f70:	f000 f8ec 	bl	800a14c <prvAddNewTaskToReadyList>
 8009f74:	e001      	b.n	8009f7a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f7a:	697b      	ldr	r3, [r7, #20]
	}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3728      	adds	r7, #40	; 0x28
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08c      	sub	sp, #48	; 0x30
 8009f88:	af04      	add	r7, sp, #16
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	4613      	mov	r3, r2
 8009f92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f94:	88fb      	ldrh	r3, [r7, #6]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f001 fbbf 	bl	800b71c <pvPortMalloc>
 8009f9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00e      	beq.n	8009fc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009fa6:	20bc      	movs	r0, #188	; 0xbc
 8009fa8:	f001 fbb8 	bl	800b71c <pvPortMalloc>
 8009fac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8009fba:	e005      	b.n	8009fc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fbc:	6978      	ldr	r0, [r7, #20]
 8009fbe:	f001 fc71 	bl	800b8a4 <vPortFree>
 8009fc2:	e001      	b.n	8009fc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d017      	beq.n	8009ffe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fd6:	88fa      	ldrh	r2, [r7, #6]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9303      	str	r3, [sp, #12]
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	9302      	str	r3, [sp, #8]
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 f80f 	bl	800a010 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ff2:	69f8      	ldr	r0, [r7, #28]
 8009ff4:	f000 f8aa 	bl	800a14c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	61bb      	str	r3, [r7, #24]
 8009ffc:	e002      	b.n	800a004 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ffe:	f04f 33ff 	mov.w	r3, #4294967295
 800a002:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a004:	69bb      	ldr	r3, [r7, #24]
	}
 800a006:	4618      	mov	r0, r3
 800a008:	3720      	adds	r7, #32
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b088      	sub	sp, #32
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	461a      	mov	r2, r3
 800a028:	21a5      	movs	r1, #165	; 0xa5
 800a02a:	f002 f991 	bl	800c350 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a038:	3b01      	subs	r3, #1
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	f023 0307 	bic.w	r3, r3, #7
 800a046:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	f003 0307 	and.w	r3, r3, #7
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00a      	beq.n	800a068 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	617b      	str	r3, [r7, #20]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a068:	2300      	movs	r3, #0
 800a06a:	61fb      	str	r3, [r7, #28]
 800a06c:	e012      	b.n	800a094 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	4413      	add	r3, r2
 800a074:	7819      	ldrb	r1, [r3, #0]
 800a076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	4413      	add	r3, r2
 800a07c:	3334      	adds	r3, #52	; 0x34
 800a07e:	460a      	mov	r2, r1
 800a080:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	4413      	add	r3, r2
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d006      	beq.n	800a09c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	3301      	adds	r3, #1
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b0f      	cmp	r3, #15
 800a098:	d9e9      	bls.n	800a06e <prvInitialiseNewTask+0x5e>
 800a09a:	e000      	b.n	800a09e <prvInitialiseNewTask+0x8e>
		{
			break;
 800a09c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	2b37      	cmp	r3, #55	; 0x37
 800a0aa:	d901      	bls.n	800a0b0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0ac:	2337      	movs	r3, #55	; 0x37
 800a0ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	2200      	movs	r2, #0
 800a0c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff f98b 	bl	80093e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	3318      	adds	r3, #24
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff f986 	bl	80093e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	3354      	adds	r3, #84	; 0x54
 800a100:	2260      	movs	r2, #96	; 0x60
 800a102:	2100      	movs	r1, #0
 800a104:	4618      	mov	r0, r3
 800a106:	f002 f923 	bl	800c350 <memset>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10c:	4a0c      	ldr	r2, [pc, #48]	; (800a140 <prvInitialiseNewTask+0x130>)
 800a10e:	659a      	str	r2, [r3, #88]	; 0x58
 800a110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a112:	4a0c      	ldr	r2, [pc, #48]	; (800a144 <prvInitialiseNewTask+0x134>)
 800a114:	65da      	str	r2, [r3, #92]	; 0x5c
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	4a0b      	ldr	r2, [pc, #44]	; (800a148 <prvInitialiseNewTask+0x138>)
 800a11a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	68f9      	ldr	r1, [r7, #12]
 800a120:	69b8      	ldr	r0, [r7, #24]
 800a122:	f001 f90b 	bl	800b33c <pxPortInitialiseStack>
 800a126:	4602      	mov	r2, r0
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a136:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a138:	bf00      	nop
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	0800c5d0 	.word	0x0800c5d0
 800a144:	0800c5f0 	.word	0x0800c5f0
 800a148:	0800c5b0 	.word	0x0800c5b0

0800a14c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a154:	f001 f9e2 	bl	800b51c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a158:	4b2d      	ldr	r3, [pc, #180]	; (800a210 <prvAddNewTaskToReadyList+0xc4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	4a2c      	ldr	r2, [pc, #176]	; (800a210 <prvAddNewTaskToReadyList+0xc4>)
 800a160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a162:	4b2c      	ldr	r3, [pc, #176]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d109      	bne.n	800a17e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a16a:	4a2a      	ldr	r2, [pc, #168]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a170:	4b27      	ldr	r3, [pc, #156]	; (800a210 <prvAddNewTaskToReadyList+0xc4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d110      	bne.n	800a19a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a178:	f000 fc28 	bl	800a9cc <prvInitialiseTaskLists>
 800a17c:	e00d      	b.n	800a19a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a17e:	4b26      	ldr	r3, [pc, #152]	; (800a218 <prvAddNewTaskToReadyList+0xcc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d109      	bne.n	800a19a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a186:	4b23      	ldr	r3, [pc, #140]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	429a      	cmp	r2, r3
 800a192:	d802      	bhi.n	800a19a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a194:	4a1f      	ldr	r2, [pc, #124]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a19a:	4b20      	ldr	r3, [pc, #128]	; (800a21c <prvAddNewTaskToReadyList+0xd0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	4a1e      	ldr	r2, [pc, #120]	; (800a21c <prvAddNewTaskToReadyList+0xd0>)
 800a1a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1a4:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <prvAddNewTaskToReadyList+0xd0>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b0:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <prvAddNewTaskToReadyList+0xd4>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d903      	bls.n	800a1c0 <prvAddNewTaskToReadyList+0x74>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	4a18      	ldr	r2, [pc, #96]	; (800a220 <prvAddNewTaskToReadyList+0xd4>)
 800a1be:	6013      	str	r3, [r2, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	4a15      	ldr	r2, [pc, #84]	; (800a224 <prvAddNewTaskToReadyList+0xd8>)
 800a1ce:	441a      	add	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	f7ff f90f 	bl	80093fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a1dc:	f001 f9ce 	bl	800b57c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a1e0:	4b0d      	ldr	r3, [pc, #52]	; (800a218 <prvAddNewTaskToReadyList+0xcc>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00e      	beq.n	800a206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1e8:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <prvAddNewTaskToReadyList+0xc8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d207      	bcs.n	800a206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1f6:	4b0c      	ldr	r3, [pc, #48]	; (800a228 <prvAddNewTaskToReadyList+0xdc>)
 800a1f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fc:	601a      	str	r2, [r3, #0]
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a206:	bf00      	nop
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	200015d8 	.word	0x200015d8
 800a214:	20001104 	.word	0x20001104
 800a218:	200015e4 	.word	0x200015e4
 800a21c:	200015f4 	.word	0x200015f4
 800a220:	200015e0 	.word	0x200015e0
 800a224:	20001108 	.word	0x20001108
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d017      	beq.n	800a26e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <vTaskDelay+0x60>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <vTaskDelay+0x30>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	60bb      	str	r3, [r7, #8]
}
 800a258:	bf00      	nop
 800a25a:	e7fe      	b.n	800a25a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a25c:	f000 f88a 	bl	800a374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a260:	2100      	movs	r1, #0
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fd04 	bl	800ac70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a268:	f000 f892 	bl	800a390 <xTaskResumeAll>
 800a26c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d107      	bne.n	800a284 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a274:	4b06      	ldr	r3, [pc, #24]	; (800a290 <vTaskDelay+0x64>)
 800a276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20001600 	.word	0x20001600
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	1d39      	adds	r1, r7, #4
 800a2a6:	f107 0308 	add.w	r3, r7, #8
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff f848 	bl	8009340 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	9202      	str	r2, [sp, #8]
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	4924      	ldr	r1, [pc, #144]	; (800a354 <vTaskStartScheduler+0xc0>)
 800a2c4:	4824      	ldr	r0, [pc, #144]	; (800a358 <vTaskStartScheduler+0xc4>)
 800a2c6:	f7ff fe01 	bl	8009ecc <xTaskCreateStatic>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	4a23      	ldr	r2, [pc, #140]	; (800a35c <vTaskStartScheduler+0xc8>)
 800a2ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2d0:	4b22      	ldr	r3, [pc, #136]	; (800a35c <vTaskStartScheduler+0xc8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	617b      	str	r3, [r7, #20]
 800a2dc:	e001      	b.n	800a2e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d102      	bne.n	800a2ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2e8:	f000 fd16 	bl	800ad18 <xTimerCreateTimerTask>
 800a2ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d11b      	bne.n	800a32c <vTaskStartScheduler+0x98>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	613b      	str	r3, [r7, #16]
}
 800a306:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a308:	4b15      	ldr	r3, [pc, #84]	; (800a360 <vTaskStartScheduler+0xcc>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3354      	adds	r3, #84	; 0x54
 800a30e:	4a15      	ldr	r2, [pc, #84]	; (800a364 <vTaskStartScheduler+0xd0>)
 800a310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a312:	4b15      	ldr	r3, [pc, #84]	; (800a368 <vTaskStartScheduler+0xd4>)
 800a314:	f04f 32ff 	mov.w	r2, #4294967295
 800a318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a31a:	4b14      	ldr	r3, [pc, #80]	; (800a36c <vTaskStartScheduler+0xd8>)
 800a31c:	2201      	movs	r2, #1
 800a31e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a320:	4b13      	ldr	r3, [pc, #76]	; (800a370 <vTaskStartScheduler+0xdc>)
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a326:	f001 f887 	bl	800b438 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a32a:	e00e      	b.n	800a34a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a332:	d10a      	bne.n	800a34a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	60fb      	str	r3, [r7, #12]
}
 800a346:	bf00      	nop
 800a348:	e7fe      	b.n	800a348 <vTaskStartScheduler+0xb4>
}
 800a34a:	bf00      	nop
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	0800c520 	.word	0x0800c520
 800a358:	0800a99d 	.word	0x0800a99d
 800a35c:	200015fc 	.word	0x200015fc
 800a360:	20001104 	.word	0x20001104
 800a364:	20000334 	.word	0x20000334
 800a368:	200015f8 	.word	0x200015f8
 800a36c:	200015e4 	.word	0x200015e4
 800a370:	200015dc 	.word	0x200015dc

0800a374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a378:	4b04      	ldr	r3, [pc, #16]	; (800a38c <vTaskSuspendAll+0x18>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	4a03      	ldr	r2, [pc, #12]	; (800a38c <vTaskSuspendAll+0x18>)
 800a380:	6013      	str	r3, [r2, #0]
}
 800a382:	bf00      	nop
 800a384:	46bd      	mov	sp, r7
 800a386:	bc80      	pop	{r7}
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	20001600 	.word	0x20001600

0800a390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a39e:	4b42      	ldr	r3, [pc, #264]	; (800a4a8 <xTaskResumeAll+0x118>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10a      	bne.n	800a3bc <xTaskResumeAll+0x2c>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	603b      	str	r3, [r7, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	e7fe      	b.n	800a3ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3bc:	f001 f8ae 	bl	800b51c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3c0:	4b39      	ldr	r3, [pc, #228]	; (800a4a8 <xTaskResumeAll+0x118>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	4a38      	ldr	r2, [pc, #224]	; (800a4a8 <xTaskResumeAll+0x118>)
 800a3c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3ca:	4b37      	ldr	r3, [pc, #220]	; (800a4a8 <xTaskResumeAll+0x118>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d162      	bne.n	800a498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3d2:	4b36      	ldr	r3, [pc, #216]	; (800a4ac <xTaskResumeAll+0x11c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d05e      	beq.n	800a498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3da:	e02f      	b.n	800a43c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a3dc:	4b34      	ldr	r3, [pc, #208]	; (800a4b0 <xTaskResumeAll+0x120>)
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3318      	adds	r3, #24
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff f861 	bl	80094b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff f85c 	bl	80094b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fc:	4b2d      	ldr	r3, [pc, #180]	; (800a4b4 <xTaskResumeAll+0x124>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	429a      	cmp	r2, r3
 800a402:	d903      	bls.n	800a40c <xTaskResumeAll+0x7c>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	4a2a      	ldr	r2, [pc, #168]	; (800a4b4 <xTaskResumeAll+0x124>)
 800a40a:	6013      	str	r3, [r2, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4a27      	ldr	r2, [pc, #156]	; (800a4b8 <xTaskResumeAll+0x128>)
 800a41a:	441a      	add	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3304      	adds	r3, #4
 800a420:	4619      	mov	r1, r3
 800a422:	4610      	mov	r0, r2
 800a424:	f7fe ffe9 	bl	80093fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42c:	4b23      	ldr	r3, [pc, #140]	; (800a4bc <xTaskResumeAll+0x12c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	429a      	cmp	r2, r3
 800a434:	d302      	bcc.n	800a43c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a436:	4b22      	ldr	r3, [pc, #136]	; (800a4c0 <xTaskResumeAll+0x130>)
 800a438:	2201      	movs	r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a43c:	4b1c      	ldr	r3, [pc, #112]	; (800a4b0 <xTaskResumeAll+0x120>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1cb      	bne.n	800a3dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a44a:	f000 fb61 	bl	800ab10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <xTaskResumeAll+0x134>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d010      	beq.n	800a47c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a45a:	f000 f845 	bl	800a4e8 <xTaskIncrementTick>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a464:	4b16      	ldr	r3, [pc, #88]	; (800a4c0 <xTaskResumeAll+0x130>)
 800a466:	2201      	movs	r2, #1
 800a468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f1      	bne.n	800a45a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a476:	4b13      	ldr	r3, [pc, #76]	; (800a4c4 <xTaskResumeAll+0x134>)
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a47c:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <xTaskResumeAll+0x130>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d009      	beq.n	800a498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a484:	2301      	movs	r3, #1
 800a486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <xTaskResumeAll+0x138>)
 800a48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a48e:	601a      	str	r2, [r3, #0]
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a498:	f001 f870 	bl	800b57c <vPortExitCritical>

	return xAlreadyYielded;
 800a49c:	68bb      	ldr	r3, [r7, #8]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20001600 	.word	0x20001600
 800a4ac:	200015d8 	.word	0x200015d8
 800a4b0:	20001598 	.word	0x20001598
 800a4b4:	200015e0 	.word	0x200015e0
 800a4b8:	20001108 	.word	0x20001108
 800a4bc:	20001104 	.word	0x20001104
 800a4c0:	200015ec 	.word	0x200015ec
 800a4c4:	200015e8 	.word	0x200015e8
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4d2:	4b04      	ldr	r3, [pc, #16]	; (800a4e4 <xTaskGetTickCount+0x18>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4d8:	687b      	ldr	r3, [r7, #4]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bc80      	pop	{r7}
 800a4e2:	4770      	bx	lr
 800a4e4:	200015dc 	.word	0x200015dc

0800a4e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4f2:	4b51      	ldr	r3, [pc, #324]	; (800a638 <xTaskIncrementTick+0x150>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f040 808e 	bne.w	800a618 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4fc:	4b4f      	ldr	r3, [pc, #316]	; (800a63c <xTaskIncrementTick+0x154>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a504:	4a4d      	ldr	r2, [pc, #308]	; (800a63c <xTaskIncrementTick+0x154>)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d120      	bne.n	800a552 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a510:	4b4b      	ldr	r3, [pc, #300]	; (800a640 <xTaskIncrementTick+0x158>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <xTaskIncrementTick+0x48>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	603b      	str	r3, [r7, #0]
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <xTaskIncrementTick+0x46>
 800a530:	4b43      	ldr	r3, [pc, #268]	; (800a640 <xTaskIncrementTick+0x158>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60fb      	str	r3, [r7, #12]
 800a536:	4b43      	ldr	r3, [pc, #268]	; (800a644 <xTaskIncrementTick+0x15c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a41      	ldr	r2, [pc, #260]	; (800a640 <xTaskIncrementTick+0x158>)
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	4a41      	ldr	r2, [pc, #260]	; (800a644 <xTaskIncrementTick+0x15c>)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	4b40      	ldr	r3, [pc, #256]	; (800a648 <xTaskIncrementTick+0x160>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3301      	adds	r3, #1
 800a54a:	4a3f      	ldr	r2, [pc, #252]	; (800a648 <xTaskIncrementTick+0x160>)
 800a54c:	6013      	str	r3, [r2, #0]
 800a54e:	f000 fadf 	bl	800ab10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a552:	4b3e      	ldr	r3, [pc, #248]	; (800a64c <xTaskIncrementTick+0x164>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d34e      	bcc.n	800a5fa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a55c:	4b38      	ldr	r3, [pc, #224]	; (800a640 <xTaskIncrementTick+0x158>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <xTaskIncrementTick+0x82>
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <xTaskIncrementTick+0x84>
 800a56a:	2300      	movs	r3, #0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a570:	4b36      	ldr	r3, [pc, #216]	; (800a64c <xTaskIncrementTick+0x164>)
 800a572:	f04f 32ff 	mov.w	r2, #4294967295
 800a576:	601a      	str	r2, [r3, #0]
					break;
 800a578:	e03f      	b.n	800a5fa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a57a:	4b31      	ldr	r3, [pc, #196]	; (800a640 <xTaskIncrementTick+0x158>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d203      	bcs.n	800a59a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a592:	4a2e      	ldr	r2, [pc, #184]	; (800a64c <xTaskIncrementTick+0x164>)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6013      	str	r3, [r2, #0]
						break;
 800a598:	e02f      	b.n	800a5fa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	3304      	adds	r3, #4
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe ff86 	bl	80094b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	3318      	adds	r3, #24
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe ff7d 	bl	80094b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ba:	4b25      	ldr	r3, [pc, #148]	; (800a650 <xTaskIncrementTick+0x168>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d903      	bls.n	800a5ca <xTaskIncrementTick+0xe2>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c6:	4a22      	ldr	r2, [pc, #136]	; (800a650 <xTaskIncrementTick+0x168>)
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	4a1f      	ldr	r2, [pc, #124]	; (800a654 <xTaskIncrementTick+0x16c>)
 800a5d8:	441a      	add	r2, r3
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	f7fe ff0a 	bl	80093fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ea:	4b1b      	ldr	r3, [pc, #108]	; (800a658 <xTaskIncrementTick+0x170>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d3b3      	bcc.n	800a55c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5f8:	e7b0      	b.n	800a55c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5fa:	4b17      	ldr	r3, [pc, #92]	; (800a658 <xTaskIncrementTick+0x170>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a600:	4914      	ldr	r1, [pc, #80]	; (800a654 <xTaskIncrementTick+0x16c>)
 800a602:	4613      	mov	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d907      	bls.n	800a622 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a612:	2301      	movs	r3, #1
 800a614:	617b      	str	r3, [r7, #20]
 800a616:	e004      	b.n	800a622 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a618:	4b10      	ldr	r3, [pc, #64]	; (800a65c <xTaskIncrementTick+0x174>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3301      	adds	r3, #1
 800a61e:	4a0f      	ldr	r2, [pc, #60]	; (800a65c <xTaskIncrementTick+0x174>)
 800a620:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a622:	4b0f      	ldr	r3, [pc, #60]	; (800a660 <xTaskIncrementTick+0x178>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800a62a:	2301      	movs	r3, #1
 800a62c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a62e:	697b      	ldr	r3, [r7, #20]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20001600 	.word	0x20001600
 800a63c:	200015dc 	.word	0x200015dc
 800a640:	20001590 	.word	0x20001590
 800a644:	20001594 	.word	0x20001594
 800a648:	200015f0 	.word	0x200015f0
 800a64c:	200015f8 	.word	0x200015f8
 800a650:	200015e0 	.word	0x200015e0
 800a654:	20001108 	.word	0x20001108
 800a658:	20001104 	.word	0x20001104
 800a65c:	200015e8 	.word	0x200015e8
 800a660:	200015ec 	.word	0x200015ec

0800a664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a66a:	4b2a      	ldr	r3, [pc, #168]	; (800a714 <vTaskSwitchContext+0xb0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a672:	4b29      	ldr	r3, [pc, #164]	; (800a718 <vTaskSwitchContext+0xb4>)
 800a674:	2201      	movs	r2, #1
 800a676:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a678:	e046      	b.n	800a708 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a67a:	4b27      	ldr	r3, [pc, #156]	; (800a718 <vTaskSwitchContext+0xb4>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a680:	4b26      	ldr	r3, [pc, #152]	; (800a71c <vTaskSwitchContext+0xb8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	e010      	b.n	800a6aa <vTaskSwitchContext+0x46>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	607b      	str	r3, [r7, #4]
}
 800a6a0:	bf00      	nop
 800a6a2:	e7fe      	b.n	800a6a2 <vTaskSwitchContext+0x3e>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	491d      	ldr	r1, [pc, #116]	; (800a720 <vTaskSwitchContext+0xbc>)
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	440b      	add	r3, r1
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0e4      	beq.n	800a688 <vTaskSwitchContext+0x24>
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4a15      	ldr	r2, [pc, #84]	; (800a720 <vTaskSwitchContext+0xbc>)
 800a6ca:	4413      	add	r3, r2
 800a6cc:	60bb      	str	r3, [r7, #8]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	605a      	str	r2, [r3, #4]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d104      	bne.n	800a6ee <vTaskSwitchContext+0x8a>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	605a      	str	r2, [r3, #4]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	4a0b      	ldr	r2, [pc, #44]	; (800a724 <vTaskSwitchContext+0xc0>)
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	4a08      	ldr	r2, [pc, #32]	; (800a71c <vTaskSwitchContext+0xb8>)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6fe:	4b09      	ldr	r3, [pc, #36]	; (800a724 <vTaskSwitchContext+0xc0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3354      	adds	r3, #84	; 0x54
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <vTaskSwitchContext+0xc4>)
 800a706:	6013      	str	r3, [r2, #0]
}
 800a708:	bf00      	nop
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bc80      	pop	{r7}
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20001600 	.word	0x20001600
 800a718:	200015ec 	.word	0x200015ec
 800a71c:	200015e0 	.word	0x200015e0
 800a720:	20001108 	.word	0x20001108
 800a724:	20001104 	.word	0x20001104
 800a728:	20000334 	.word	0x20000334

0800a72c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	60fb      	str	r3, [r7, #12]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a752:	4b07      	ldr	r3, [pc, #28]	; (800a770 <vTaskPlaceOnEventList+0x44>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3318      	adds	r3, #24
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fe fe70 	bl	8009440 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a760:	2101      	movs	r1, #1
 800a762:	6838      	ldr	r0, [r7, #0]
 800a764:	f000 fa84 	bl	800ac70 <prvAddCurrentTaskToDelayedList>
}
 800a768:	bf00      	nop
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20001104 	.word	0x20001104

0800a774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	617b      	str	r3, [r7, #20]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3318      	adds	r3, #24
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7fe fe28 	bl	80093fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	68b8      	ldr	r0, [r7, #8]
 800a7ba:	f000 fa59 	bl	800ac70 <prvAddCurrentTaskToDelayedList>
	}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20001104 	.word	0x20001104

0800a7cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	60fb      	str	r3, [r7, #12]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3318      	adds	r3, #24
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fe fe57 	bl	80094b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a802:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <xTaskRemoveFromEventList+0xb0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d11d      	bne.n	800a846 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3304      	adds	r3, #4
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fe4e 	bl	80094b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	4b19      	ldr	r3, [pc, #100]	; (800a880 <xTaskRemoveFromEventList+0xb4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d903      	bls.n	800a828 <xTaskRemoveFromEventList+0x5c>
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	4a16      	ldr	r2, [pc, #88]	; (800a880 <xTaskRemoveFromEventList+0xb4>)
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4a13      	ldr	r2, [pc, #76]	; (800a884 <xTaskRemoveFromEventList+0xb8>)
 800a836:	441a      	add	r2, r3
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4619      	mov	r1, r3
 800a83e:	4610      	mov	r0, r2
 800a840:	f7fe fddb 	bl	80093fa <vListInsertEnd>
 800a844:	e005      	b.n	800a852 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	3318      	adds	r3, #24
 800a84a:	4619      	mov	r1, r3
 800a84c:	480e      	ldr	r0, [pc, #56]	; (800a888 <xTaskRemoveFromEventList+0xbc>)
 800a84e:	f7fe fdd4 	bl	80093fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a856:	4b0d      	ldr	r3, [pc, #52]	; (800a88c <xTaskRemoveFromEventList+0xc0>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d905      	bls.n	800a86c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <xTaskRemoveFromEventList+0xc4>)
 800a866:	2201      	movs	r2, #1
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	e001      	b.n	800a870 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a870:	697b      	ldr	r3, [r7, #20]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20001600 	.word	0x20001600
 800a880:	200015e0 	.word	0x200015e0
 800a884:	20001108 	.word	0x20001108
 800a888:	20001598 	.word	0x20001598
 800a88c:	20001104 	.word	0x20001104
 800a890:	200015ec 	.word	0x200015ec

0800a894 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <vTaskInternalSetTimeOutState+0x24>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <vTaskInternalSetTimeOutState+0x28>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	605a      	str	r2, [r3, #4]
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	200015f0 	.word	0x200015f0
 800a8bc:	200015dc 	.word	0x200015dc

0800a8c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	613b      	str	r3, [r7, #16]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	60fb      	str	r3, [r7, #12]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a902:	f000 fe0b 	bl	800b51c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a906:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <xTaskCheckForTimeOut+0xbc>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d102      	bne.n	800a926 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a920:	2300      	movs	r3, #0
 800a922:	61fb      	str	r3, [r7, #28]
 800a924:	e023      	b.n	800a96e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4b15      	ldr	r3, [pc, #84]	; (800a980 <xTaskCheckForTimeOut+0xc0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d007      	beq.n	800a942 <xTaskCheckForTimeOut+0x82>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d302      	bcc.n	800a942 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a93c:	2301      	movs	r3, #1
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	e015      	b.n	800a96e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d20b      	bcs.n	800a964 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	1ad2      	subs	r2, r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ff9b 	bl	800a894 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a95e:	2300      	movs	r3, #0
 800a960:	61fb      	str	r3, [r7, #28]
 800a962:	e004      	b.n	800a96e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a96a:	2301      	movs	r3, #1
 800a96c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a96e:	f000 fe05 	bl	800b57c <vPortExitCritical>

	return xReturn;
 800a972:	69fb      	ldr	r3, [r7, #28]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3720      	adds	r7, #32
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	200015dc 	.word	0x200015dc
 800a980:	200015f0 	.word	0x200015f0

0800a984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a988:	4b03      	ldr	r3, [pc, #12]	; (800a998 <vTaskMissedYield+0x14>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	601a      	str	r2, [r3, #0]
}
 800a98e:	bf00      	nop
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	200015ec 	.word	0x200015ec

0800a99c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9a4:	f000 f852 	bl	800aa4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9a8:	4b06      	ldr	r3, [pc, #24]	; (800a9c4 <prvIdleTask+0x28>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d9f9      	bls.n	800a9a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9b0:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <prvIdleTask+0x2c>)
 800a9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9c0:	e7f0      	b.n	800a9a4 <prvIdleTask+0x8>
 800a9c2:	bf00      	nop
 800a9c4:	20001108 	.word	0x20001108
 800a9c8:	e000ed04 	.word	0xe000ed04

0800a9cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	607b      	str	r3, [r7, #4]
 800a9d6:	e00c      	b.n	800a9f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4a12      	ldr	r2, [pc, #72]	; (800aa2c <prvInitialiseTaskLists+0x60>)
 800a9e4:	4413      	add	r3, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe fcdc 	bl	80093a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	607b      	str	r3, [r7, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b37      	cmp	r3, #55	; 0x37
 800a9f6:	d9ef      	bls.n	800a9d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9f8:	480d      	ldr	r0, [pc, #52]	; (800aa30 <prvInitialiseTaskLists+0x64>)
 800a9fa:	f7fe fcd3 	bl	80093a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9fe:	480d      	ldr	r0, [pc, #52]	; (800aa34 <prvInitialiseTaskLists+0x68>)
 800aa00:	f7fe fcd0 	bl	80093a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa04:	480c      	ldr	r0, [pc, #48]	; (800aa38 <prvInitialiseTaskLists+0x6c>)
 800aa06:	f7fe fccd 	bl	80093a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa0a:	480c      	ldr	r0, [pc, #48]	; (800aa3c <prvInitialiseTaskLists+0x70>)
 800aa0c:	f7fe fcca 	bl	80093a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa10:	480b      	ldr	r0, [pc, #44]	; (800aa40 <prvInitialiseTaskLists+0x74>)
 800aa12:	f7fe fcc7 	bl	80093a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa16:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <prvInitialiseTaskLists+0x78>)
 800aa18:	4a05      	ldr	r2, [pc, #20]	; (800aa30 <prvInitialiseTaskLists+0x64>)
 800aa1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <prvInitialiseTaskLists+0x7c>)
 800aa1e:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <prvInitialiseTaskLists+0x68>)
 800aa20:	601a      	str	r2, [r3, #0]
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20001108 	.word	0x20001108
 800aa30:	20001568 	.word	0x20001568
 800aa34:	2000157c 	.word	0x2000157c
 800aa38:	20001598 	.word	0x20001598
 800aa3c:	200015ac 	.word	0x200015ac
 800aa40:	200015c4 	.word	0x200015c4
 800aa44:	20001590 	.word	0x20001590
 800aa48:	20001594 	.word	0x20001594

0800aa4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa52:	e019      	b.n	800aa88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa54:	f000 fd62 	bl	800b51c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800aa58:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <prvCheckTasksWaitingTermination+0x50>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3304      	adds	r3, #4
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe fd23 	bl	80094b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <prvCheckTasksWaitingTermination+0x54>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <prvCheckTasksWaitingTermination+0x54>)
 800aa72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa74:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <prvCheckTasksWaitingTermination+0x58>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	4a0a      	ldr	r2, [pc, #40]	; (800aaa4 <prvCheckTasksWaitingTermination+0x58>)
 800aa7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa7e:	f000 fd7d 	bl	800b57c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f810 	bl	800aaa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa88:	4b06      	ldr	r3, [pc, #24]	; (800aaa4 <prvCheckTasksWaitingTermination+0x58>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e1      	bne.n	800aa54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200015ac 	.word	0x200015ac
 800aaa0:	200015d8 	.word	0x200015d8
 800aaa4:	200015c0 	.word	0x200015c0

0800aaa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3354      	adds	r3, #84	; 0x54
 800aab4:	4618      	mov	r0, r3
 800aab6:	f001 fc61 	bl	800c37c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d108      	bne.n	800aad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 feeb 	bl	800b8a4 <vPortFree>
				vPortFree( pxTCB );
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fee8 	bl	800b8a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aad4:	e018      	b.n	800ab08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d103      	bne.n	800aae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fedf 	bl	800b8a4 <vPortFree>
	}
 800aae6:	e00f      	b.n	800ab08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d00a      	beq.n	800ab08 <prvDeleteTCB+0x60>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	60fb      	str	r3, [r7, #12]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <prvDeleteTCB+0x5e>
	}
 800ab08:	bf00      	nop
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab16:	4b0e      	ldr	r3, [pc, #56]	; (800ab50 <prvResetNextTaskUnblockTime+0x40>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <prvResetNextTaskUnblockTime+0x14>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e000      	b.n	800ab26 <prvResetNextTaskUnblockTime+0x16>
 800ab24:	2300      	movs	r3, #0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d004      	beq.n	800ab34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab2a:	4b0a      	ldr	r3, [pc, #40]	; (800ab54 <prvResetNextTaskUnblockTime+0x44>)
 800ab2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab32:	e008      	b.n	800ab46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab34:	4b06      	ldr	r3, [pc, #24]	; (800ab50 <prvResetNextTaskUnblockTime+0x40>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	4a04      	ldr	r2, [pc, #16]	; (800ab54 <prvResetNextTaskUnblockTime+0x44>)
 800ab44:	6013      	str	r3, [r2, #0]
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bc80      	pop	{r7}
 800ab4e:	4770      	bx	lr
 800ab50:	20001590 	.word	0x20001590
 800ab54:	200015f8 	.word	0x200015f8

0800ab58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab5e:	4b0b      	ldr	r3, [pc, #44]	; (800ab8c <xTaskGetSchedulerState+0x34>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab66:	2301      	movs	r3, #1
 800ab68:	607b      	str	r3, [r7, #4]
 800ab6a:	e008      	b.n	800ab7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab6c:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <xTaskGetSchedulerState+0x38>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d102      	bne.n	800ab7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab74:	2302      	movs	r3, #2
 800ab76:	607b      	str	r3, [r7, #4]
 800ab78:	e001      	b.n	800ab7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab7e:	687b      	ldr	r3, [r7, #4]
	}
 800ab80:	4618      	mov	r0, r3
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bc80      	pop	{r7}
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	200015e4 	.word	0x200015e4
 800ab90:	20001600 	.word	0x20001600

0800ab94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aba0:	2300      	movs	r3, #0
 800aba2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d056      	beq.n	800ac58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abaa:	4b2e      	ldr	r3, [pc, #184]	; (800ac64 <xTaskPriorityDisinherit+0xd0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d00a      	beq.n	800abca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	60fb      	str	r3, [r7, #12]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	60bb      	str	r3, [r7, #8]
}
 800abe4:	bf00      	nop
 800abe6:	e7fe      	b.n	800abe6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abec:	1e5a      	subs	r2, r3, #1
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d02c      	beq.n	800ac58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d128      	bne.n	800ac58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	3304      	adds	r3, #4
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fc50 	bl	80094b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac28:	4b0f      	ldr	r3, [pc, #60]	; (800ac68 <xTaskPriorityDisinherit+0xd4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d903      	bls.n	800ac38 <xTaskPriorityDisinherit+0xa4>
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	4a0c      	ldr	r2, [pc, #48]	; (800ac68 <xTaskPriorityDisinherit+0xd4>)
 800ac36:	6013      	str	r3, [r2, #0]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <xTaskPriorityDisinherit+0xd8>)
 800ac46:	441a      	add	r2, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4610      	mov	r0, r2
 800ac50:	f7fe fbd3 	bl	80093fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac54:	2301      	movs	r3, #1
 800ac56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac58:	697b      	ldr	r3, [r7, #20]
	}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3718      	adds	r7, #24
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	20001104 	.word	0x20001104
 800ac68:	200015e0 	.word	0x200015e0
 800ac6c:	20001108 	.word	0x20001108

0800ac70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac7a:	4b21      	ldr	r3, [pc, #132]	; (800ad00 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac80:	4b20      	ldr	r3, [pc, #128]	; (800ad04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3304      	adds	r3, #4
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fe fc12 	bl	80094b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac92:	d10a      	bne.n	800acaa <prvAddCurrentTaskToDelayedList+0x3a>
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d007      	beq.n	800acaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac9a:	4b1a      	ldr	r3, [pc, #104]	; (800ad04 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	4619      	mov	r1, r3
 800aca2:	4819      	ldr	r0, [pc, #100]	; (800ad08 <prvAddCurrentTaskToDelayedList+0x98>)
 800aca4:	f7fe fba9 	bl	80093fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aca8:	e026      	b.n	800acf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acb2:	4b14      	ldr	r3, [pc, #80]	; (800ad04 <prvAddCurrentTaskToDelayedList+0x94>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d209      	bcs.n	800acd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acc2:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <prvAddCurrentTaskToDelayedList+0x94>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3304      	adds	r3, #4
 800accc:	4619      	mov	r1, r3
 800acce:	4610      	mov	r0, r2
 800acd0:	f7fe fbb6 	bl	8009440 <vListInsert>
}
 800acd4:	e010      	b.n	800acf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acd6:	4b0e      	ldr	r3, [pc, #56]	; (800ad10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <prvAddCurrentTaskToDelayedList+0x94>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3304      	adds	r3, #4
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f7fe fbac 	bl	8009440 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ace8:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d202      	bcs.n	800acf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800acf2:	4a08      	ldr	r2, [pc, #32]	; (800ad14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	6013      	str	r3, [r2, #0]
}
 800acf8:	bf00      	nop
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	200015dc 	.word	0x200015dc
 800ad04:	20001104 	.word	0x20001104
 800ad08:	200015c4 	.word	0x200015c4
 800ad0c:	20001594 	.word	0x20001594
 800ad10:	20001590 	.word	0x20001590
 800ad14:	200015f8 	.word	0x200015f8

0800ad18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08a      	sub	sp, #40	; 0x28
 800ad1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad22:	f000 facb 	bl	800b2bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad26:	4b1c      	ldr	r3, [pc, #112]	; (800ad98 <xTimerCreateTimerTask+0x80>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d021      	beq.n	800ad72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad36:	1d3a      	adds	r2, r7, #4
 800ad38:	f107 0108 	add.w	r1, r7, #8
 800ad3c:	f107 030c 	add.w	r3, r7, #12
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fe fb15 	bl	8009370 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	9202      	str	r2, [sp, #8]
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	2302      	movs	r3, #2
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	2300      	movs	r3, #0
 800ad56:	460a      	mov	r2, r1
 800ad58:	4910      	ldr	r1, [pc, #64]	; (800ad9c <xTimerCreateTimerTask+0x84>)
 800ad5a:	4811      	ldr	r0, [pc, #68]	; (800ada0 <xTimerCreateTimerTask+0x88>)
 800ad5c:	f7ff f8b6 	bl	8009ecc <xTaskCreateStatic>
 800ad60:	4603      	mov	r3, r0
 800ad62:	4a10      	ldr	r2, [pc, #64]	; (800ada4 <xTimerCreateTimerTask+0x8c>)
 800ad64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad66:	4b0f      	ldr	r3, [pc, #60]	; (800ada4 <xTimerCreateTimerTask+0x8c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	613b      	str	r3, [r7, #16]
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad8e:	697b      	ldr	r3, [r7, #20]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20001634 	.word	0x20001634
 800ad9c:	0800c528 	.word	0x0800c528
 800ada0:	0800aec5 	.word	0x0800aec5
 800ada4:	20001638 	.word	0x20001638

0800ada8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08a      	sub	sp, #40	; 0x28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10a      	bne.n	800add6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	623b      	str	r3, [r7, #32]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800add6:	4b1a      	ldr	r3, [pc, #104]	; (800ae40 <xTimerGenericCommand+0x98>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d02a      	beq.n	800ae34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2b05      	cmp	r3, #5
 800adee:	dc18      	bgt.n	800ae22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adf0:	f7ff feb2 	bl	800ab58 <xTaskGetSchedulerState>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d109      	bne.n	800ae0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800adfa:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <xTimerGenericCommand+0x98>)
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f107 0110 	add.w	r1, r7, #16
 800ae02:	2300      	movs	r3, #0
 800ae04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae06:	f7fe fc7f 	bl	8009708 <xQueueGenericSend>
 800ae0a:	6278      	str	r0, [r7, #36]	; 0x24
 800ae0c:	e012      	b.n	800ae34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae0e:	4b0c      	ldr	r3, [pc, #48]	; (800ae40 <xTimerGenericCommand+0x98>)
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	f107 0110 	add.w	r1, r7, #16
 800ae16:	2300      	movs	r3, #0
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f7fe fc75 	bl	8009708 <xQueueGenericSend>
 800ae1e:	6278      	str	r0, [r7, #36]	; 0x24
 800ae20:	e008      	b.n	800ae34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae22:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <xTimerGenericCommand+0x98>)
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f107 0110 	add.w	r1, r7, #16
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	f7fe fd69 	bl	8009904 <xQueueGenericSendFromISR>
 800ae32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3728      	adds	r7, #40	; 0x28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20001634 	.word	0x20001634

0800ae44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b088      	sub	sp, #32
 800ae48:	af02      	add	r7, sp, #8
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae4e:	4b1c      	ldr	r3, [pc, #112]	; (800aec0 <prvProcessExpiredTimer+0x7c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe fb27 	bl	80094b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	69db      	ldr	r3, [r3, #28]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d122      	bne.n	800aeb0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	699a      	ldr	r2, [r3, #24]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	18d1      	adds	r1, r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	683a      	ldr	r2, [r7, #0]
 800ae76:	6978      	ldr	r0, [r7, #20]
 800ae78:	f000 f8c8 	bl	800b00c <prvInsertTimerInActiveList>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d016      	beq.n	800aeb0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae82:	2300      	movs	r3, #0
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	2300      	movs	r3, #0
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	6978      	ldr	r0, [r7, #20]
 800ae8e:	f7ff ff8b 	bl	800ada8 <xTimerGenericCommand>
 800ae92:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	60fb      	str	r3, [r7, #12]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb4:	6978      	ldr	r0, [r7, #20]
 800aeb6:	4798      	blx	r3
}
 800aeb8:	bf00      	nop
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	2000162c 	.word	0x2000162c

0800aec4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aecc:	f107 0308 	add.w	r3, r7, #8
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f857 	bl	800af84 <prvGetNextExpireTime>
 800aed6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	4619      	mov	r1, r3
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f803 	bl	800aee8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aee2:	f000 f8d5 	bl	800b090 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aee6:	e7f1      	b.n	800aecc <prvTimerTask+0x8>

0800aee8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aef2:	f7ff fa3f 	bl	800a374 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aef6:	f107 0308 	add.w	r3, r7, #8
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 f866 	bl	800afcc <prvSampleTimeNow>
 800af00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d130      	bne.n	800af6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10a      	bne.n	800af24 <prvProcessTimerOrBlockTask+0x3c>
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	429a      	cmp	r2, r3
 800af14:	d806      	bhi.n	800af24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af16:	f7ff fa3b 	bl	800a390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af1a:	68f9      	ldr	r1, [r7, #12]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff91 	bl	800ae44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af22:	e024      	b.n	800af6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d008      	beq.n	800af3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af2a:	4b13      	ldr	r3, [pc, #76]	; (800af78 <prvProcessTimerOrBlockTask+0x90>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	bf0c      	ite	eq
 800af34:	2301      	moveq	r3, #1
 800af36:	2300      	movne	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af3c:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <prvProcessTimerOrBlockTask+0x94>)
 800af3e:	6818      	ldr	r0, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	4619      	mov	r1, r3
 800af4a:	f7fe ff8b 	bl	8009e64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af4e:	f7ff fa1f 	bl	800a390 <xTaskResumeAll>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af58:	4b09      	ldr	r3, [pc, #36]	; (800af80 <prvProcessTimerOrBlockTask+0x98>)
 800af5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	f3bf 8f6f 	isb	sy
}
 800af68:	e001      	b.n	800af6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af6a:	f7ff fa11 	bl	800a390 <xTaskResumeAll>
}
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20001630 	.word	0x20001630
 800af7c:	20001634 	.word	0x20001634
 800af80:	e000ed04 	.word	0xe000ed04

0800af84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af8c:	4b0e      	ldr	r3, [pc, #56]	; (800afc8 <prvGetNextExpireTime+0x44>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	bf0c      	ite	eq
 800af96:	2301      	moveq	r3, #1
 800af98:	2300      	movne	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	461a      	mov	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d105      	bne.n	800afb6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afaa:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <prvGetNextExpireTime+0x44>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	e001      	b.n	800afba <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afb6:	2300      	movs	r3, #0
 800afb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afba:	68fb      	ldr	r3, [r7, #12]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bc80      	pop	{r7}
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	2000162c 	.word	0x2000162c

0800afcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800afd4:	f7ff fa7a 	bl	800a4cc <xTaskGetTickCount>
 800afd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800afda:	4b0b      	ldr	r3, [pc, #44]	; (800b008 <prvSampleTimeNow+0x3c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d205      	bcs.n	800aff0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afe4:	f000 f908 	bl	800b1f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e002      	b.n	800aff6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aff6:	4a04      	ldr	r2, [pc, #16]	; (800b008 <prvSampleTimeNow+0x3c>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800affc:	68fb      	ldr	r3, [r7, #12]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	2000163c 	.word	0x2000163c

0800b00c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
 800b018:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d812      	bhi.n	800b058 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	1ad2      	subs	r2, r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d302      	bcc.n	800b046 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b040:	2301      	movs	r3, #1
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	e01b      	b.n	800b07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b046:	4b10      	ldr	r3, [pc, #64]	; (800b088 <prvInsertTimerInActiveList+0x7c>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3304      	adds	r3, #4
 800b04e:	4619      	mov	r1, r3
 800b050:	4610      	mov	r0, r2
 800b052:	f7fe f9f5 	bl	8009440 <vListInsert>
 800b056:	e012      	b.n	800b07e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d206      	bcs.n	800b06e <prvInsertTimerInActiveList+0x62>
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	429a      	cmp	r2, r3
 800b066:	d302      	bcc.n	800b06e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b068:	2301      	movs	r3, #1
 800b06a:	617b      	str	r3, [r7, #20]
 800b06c:	e007      	b.n	800b07e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b06e:	4b07      	ldr	r3, [pc, #28]	; (800b08c <prvInsertTimerInActiveList+0x80>)
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3304      	adds	r3, #4
 800b076:	4619      	mov	r1, r3
 800b078:	4610      	mov	r0, r2
 800b07a:	f7fe f9e1 	bl	8009440 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b07e:	697b      	ldr	r3, [r7, #20]
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20001630 	.word	0x20001630
 800b08c:	2000162c 	.word	0x2000162c

0800b090 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08e      	sub	sp, #56	; 0x38
 800b094:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b096:	e09d      	b.n	800b1d4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da18      	bge.n	800b0d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b09e:	1d3b      	adds	r3, r7, #4
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10a      	bne.n	800b0c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	61fb      	str	r3, [r7, #28]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0c6:	6850      	ldr	r0, [r2, #4]
 800b0c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ca:	6892      	ldr	r2, [r2, #8]
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	db7d      	blt.n	800b1d2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d004      	beq.n	800b0ec <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe f9e2 	bl	80094b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0ec:	463b      	mov	r3, r7
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff ff6c 	bl	800afcc <prvSampleTimeNow>
 800b0f4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	d86b      	bhi.n	800b1d4 <prvProcessReceivedCommands+0x144>
 800b0fc:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <prvProcessReceivedCommands+0x74>)
 800b0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b102:	bf00      	nop
 800b104:	0800b12d 	.word	0x0800b12d
 800b108:	0800b12d 	.word	0x0800b12d
 800b10c:	0800b12d 	.word	0x0800b12d
 800b110:	0800b1d5 	.word	0x0800b1d5
 800b114:	0800b189 	.word	0x0800b189
 800b118:	0800b1c1 	.word	0x0800b1c1
 800b11c:	0800b12d 	.word	0x0800b12d
 800b120:	0800b12d 	.word	0x0800b12d
 800b124:	0800b1d5 	.word	0x0800b1d5
 800b128:	0800b189 	.word	0x0800b189
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	18d1      	adds	r1, r2, r3
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b13a:	f7ff ff67 	bl	800b00c <prvInsertTimerInActiveList>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d047      	beq.n	800b1d4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b14a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	69db      	ldr	r3, [r3, #28]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d13f      	bne.n	800b1d4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	441a      	add	r2, r3
 800b15c:	2300      	movs	r3, #0
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	2300      	movs	r3, #0
 800b162:	2100      	movs	r1, #0
 800b164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b166:	f7ff fe1f 	bl	800ada8 <xTimerGenericCommand>
 800b16a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d130      	bne.n	800b1d4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	61bb      	str	r3, [r7, #24]
}
 800b184:	bf00      	nop
 800b186:	e7fe      	b.n	800b186 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10a      	bne.n	800b1ac <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	617b      	str	r3, [r7, #20]
}
 800b1a8:	bf00      	nop
 800b1aa:	e7fe      	b.n	800b1aa <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	699a      	ldr	r2, [r3, #24]
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	18d1      	adds	r1, r2, r3
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ba:	f7ff ff27 	bl	800b00c <prvInsertTimerInActiveList>
					break;
 800b1be:	e009      	b.n	800b1d4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d104      	bne.n	800b1d4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800b1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1cc:	f000 fb6a 	bl	800b8a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1d0:	e000      	b.n	800b1d4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b1d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1d4:	4b07      	ldr	r3, [pc, #28]	; (800b1f4 <prvProcessReceivedCommands+0x164>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	1d39      	adds	r1, r7, #4
 800b1da:	2200      	movs	r2, #0
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe fc29 	bl	8009a34 <xQueueReceive>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f47f af57 	bne.w	800b098 <prvProcessReceivedCommands+0x8>
	}
}
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	3730      	adds	r7, #48	; 0x30
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20001634 	.word	0x20001634

0800b1f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b088      	sub	sp, #32
 800b1fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1fe:	e045      	b.n	800b28c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b200:	4b2c      	ldr	r3, [pc, #176]	; (800b2b4 <prvSwitchTimerLists+0xbc>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b20a:	4b2a      	ldr	r3, [pc, #168]	; (800b2b4 <prvSwitchTimerLists+0xbc>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3304      	adds	r3, #4
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe f949 	bl	80094b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d12e      	bne.n	800b28c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	4413      	add	r3, r2
 800b236:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d90e      	bls.n	800b25e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b24c:	4b19      	ldr	r3, [pc, #100]	; (800b2b4 <prvSwitchTimerLists+0xbc>)
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3304      	adds	r3, #4
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fe f8f2 	bl	8009440 <vListInsert>
 800b25c:	e016      	b.n	800b28c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b25e:	2300      	movs	r3, #0
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	2300      	movs	r3, #0
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	2100      	movs	r1, #0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fd9d 	bl	800ada8 <xTimerGenericCommand>
 800b26e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10a      	bne.n	800b28c <prvSwitchTimerLists+0x94>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	603b      	str	r3, [r7, #0]
}
 800b288:	bf00      	nop
 800b28a:	e7fe      	b.n	800b28a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b28c:	4b09      	ldr	r3, [pc, #36]	; (800b2b4 <prvSwitchTimerLists+0xbc>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1b4      	bne.n	800b200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b296:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <prvSwitchTimerLists+0xbc>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <prvSwitchTimerLists+0xc0>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <prvSwitchTimerLists+0xbc>)
 800b2a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2a4:	4a04      	ldr	r2, [pc, #16]	; (800b2b8 <prvSwitchTimerLists+0xc0>)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	6013      	str	r3, [r2, #0]
}
 800b2aa:	bf00      	nop
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	2000162c 	.word	0x2000162c
 800b2b8:	20001630 	.word	0x20001630

0800b2bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2c2:	f000 f92b 	bl	800b51c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2c6:	4b15      	ldr	r3, [pc, #84]	; (800b31c <prvCheckForValidListAndQueue+0x60>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d120      	bne.n	800b310 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2ce:	4814      	ldr	r0, [pc, #80]	; (800b320 <prvCheckForValidListAndQueue+0x64>)
 800b2d0:	f7fe f868 	bl	80093a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2d4:	4813      	ldr	r0, [pc, #76]	; (800b324 <prvCheckForValidListAndQueue+0x68>)
 800b2d6:	f7fe f865 	bl	80093a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2da:	4b13      	ldr	r3, [pc, #76]	; (800b328 <prvCheckForValidListAndQueue+0x6c>)
 800b2dc:	4a10      	ldr	r2, [pc, #64]	; (800b320 <prvCheckForValidListAndQueue+0x64>)
 800b2de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2e0:	4b12      	ldr	r3, [pc, #72]	; (800b32c <prvCheckForValidListAndQueue+0x70>)
 800b2e2:	4a10      	ldr	r2, [pc, #64]	; (800b324 <prvCheckForValidListAndQueue+0x68>)
 800b2e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	4b11      	ldr	r3, [pc, #68]	; (800b330 <prvCheckForValidListAndQueue+0x74>)
 800b2ec:	4a11      	ldr	r2, [pc, #68]	; (800b334 <prvCheckForValidListAndQueue+0x78>)
 800b2ee:	2110      	movs	r1, #16
 800b2f0:	200a      	movs	r0, #10
 800b2f2:	f7fe f96f 	bl	80095d4 <xQueueGenericCreateStatic>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4a08      	ldr	r2, [pc, #32]	; (800b31c <prvCheckForValidListAndQueue+0x60>)
 800b2fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2fc:	4b07      	ldr	r3, [pc, #28]	; (800b31c <prvCheckForValidListAndQueue+0x60>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d005      	beq.n	800b310 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <prvCheckForValidListAndQueue+0x60>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	490b      	ldr	r1, [pc, #44]	; (800b338 <prvCheckForValidListAndQueue+0x7c>)
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fe fd82 	bl	8009e14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b310:	f000 f934 	bl	800b57c <vPortExitCritical>
}
 800b314:	bf00      	nop
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20001634 	.word	0x20001634
 800b320:	20001604 	.word	0x20001604
 800b324:	20001618 	.word	0x20001618
 800b328:	2000162c 	.word	0x2000162c
 800b32c:	20001630 	.word	0x20001630
 800b330:	200016e0 	.word	0x200016e0
 800b334:	20001640 	.word	0x20001640
 800b338:	0800c530 	.word	0x0800c530

0800b33c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3b04      	subs	r3, #4
 800b34c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3b04      	subs	r3, #4
 800b35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	f023 0201 	bic.w	r2, r3, #1
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3b04      	subs	r3, #4
 800b36a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b36c:	4a08      	ldr	r2, [pc, #32]	; (800b390 <pxPortInitialiseStack+0x54>)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3b14      	subs	r3, #20
 800b376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3b20      	subs	r3, #32
 800b382:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b384:	68fb      	ldr	r3, [r7, #12]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bc80      	pop	{r7}
 800b38e:	4770      	bx	lr
 800b390:	0800b395 	.word	0x0800b395

0800b394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b39e:	4b12      	ldr	r3, [pc, #72]	; (800b3e8 <prvTaskExitError+0x54>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a6:	d00a      	beq.n	800b3be <prvTaskExitError+0x2a>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	60fb      	str	r3, [r7, #12]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <prvTaskExitError+0x28>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	60bb      	str	r3, [r7, #8]
}
 800b3d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3d2:	bf00      	nop
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0fc      	beq.n	800b3d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3da:	bf00      	nop
 800b3dc:	bf00      	nop
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bc80      	pop	{r7}
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	200002c4 	.word	0x200002c4
 800b3ec:	00000000 	.word	0x00000000

0800b3f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3f0:	4b07      	ldr	r3, [pc, #28]	; (800b410 <pxCurrentTCBConst2>)
 800b3f2:	6819      	ldr	r1, [r3, #0]
 800b3f4:	6808      	ldr	r0, [r1, #0]
 800b3f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b3fa:	f380 8809 	msr	PSP, r0
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f04f 0000 	mov.w	r0, #0
 800b406:	f380 8811 	msr	BASEPRI, r0
 800b40a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b40e:	4770      	bx	lr

0800b410 <pxCurrentTCBConst2>:
 800b410:	20001104 	.word	0x20001104
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop

0800b418 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b418:	4806      	ldr	r0, [pc, #24]	; (800b434 <prvPortStartFirstTask+0x1c>)
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	6800      	ldr	r0, [r0, #0]
 800b41e:	f380 8808 	msr	MSP, r0
 800b422:	b662      	cpsie	i
 800b424:	b661      	cpsie	f
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	df00      	svc	0
 800b430:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b432:	bf00      	nop
 800b434:	e000ed08 	.word	0xe000ed08

0800b438 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b43e:	4b32      	ldr	r3, [pc, #200]	; (800b508 <xPortStartScheduler+0xd0>)
 800b440:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	22ff      	movs	r2, #255	; 0xff
 800b44e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	b2db      	uxtb	r3, r3
 800b456:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b458:	78fb      	ldrb	r3, [r7, #3]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b460:	b2da      	uxtb	r2, r3
 800b462:	4b2a      	ldr	r3, [pc, #168]	; (800b50c <xPortStartScheduler+0xd4>)
 800b464:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b466:	4b2a      	ldr	r3, [pc, #168]	; (800b510 <xPortStartScheduler+0xd8>)
 800b468:	2207      	movs	r2, #7
 800b46a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b46c:	e009      	b.n	800b482 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b46e:	4b28      	ldr	r3, [pc, #160]	; (800b510 <xPortStartScheduler+0xd8>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3b01      	subs	r3, #1
 800b474:	4a26      	ldr	r2, [pc, #152]	; (800b510 <xPortStartScheduler+0xd8>)
 800b476:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b482:	78fb      	ldrb	r3, [r7, #3]
 800b484:	b2db      	uxtb	r3, r3
 800b486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48a:	2b80      	cmp	r3, #128	; 0x80
 800b48c:	d0ef      	beq.n	800b46e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b48e:	4b20      	ldr	r3, [pc, #128]	; (800b510 <xPortStartScheduler+0xd8>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f1c3 0307 	rsb	r3, r3, #7
 800b496:	2b04      	cmp	r3, #4
 800b498:	d00a      	beq.n	800b4b0 <xPortStartScheduler+0x78>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	60bb      	str	r3, [r7, #8]
}
 800b4ac:	bf00      	nop
 800b4ae:	e7fe      	b.n	800b4ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4b0:	4b17      	ldr	r3, [pc, #92]	; (800b510 <xPortStartScheduler+0xd8>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	4a16      	ldr	r2, [pc, #88]	; (800b510 <xPortStartScheduler+0xd8>)
 800b4b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4ba:	4b15      	ldr	r3, [pc, #84]	; (800b510 <xPortStartScheduler+0xd8>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4c2:	4a13      	ldr	r2, [pc, #76]	; (800b510 <xPortStartScheduler+0xd8>)
 800b4c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4ce:	4b11      	ldr	r3, [pc, #68]	; (800b514 <xPortStartScheduler+0xdc>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a10      	ldr	r2, [pc, #64]	; (800b514 <xPortStartScheduler+0xdc>)
 800b4d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4da:	4b0e      	ldr	r3, [pc, #56]	; (800b514 <xPortStartScheduler+0xdc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a0d      	ldr	r2, [pc, #52]	; (800b514 <xPortStartScheduler+0xdc>)
 800b4e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4e6:	f000 f8b9 	bl	800b65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4ea:	4b0b      	ldr	r3, [pc, #44]	; (800b518 <xPortStartScheduler+0xe0>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4f0:	f7ff ff92 	bl	800b418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4f4:	f7ff f8b6 	bl	800a664 <vTaskSwitchContext>
	prvTaskExitError();
 800b4f8:	f7ff ff4c 	bl	800b394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	e000e400 	.word	0xe000e400
 800b50c:	20001730 	.word	0x20001730
 800b510:	20001734 	.word	0x20001734
 800b514:	e000ed20 	.word	0xe000ed20
 800b518:	200002c4 	.word	0x200002c4

0800b51c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	607b      	str	r3, [r7, #4]
}
 800b534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b536:	4b0f      	ldr	r3, [pc, #60]	; (800b574 <vPortEnterCritical+0x58>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3301      	adds	r3, #1
 800b53c:	4a0d      	ldr	r2, [pc, #52]	; (800b574 <vPortEnterCritical+0x58>)
 800b53e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b540:	4b0c      	ldr	r3, [pc, #48]	; (800b574 <vPortEnterCritical+0x58>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d10f      	bne.n	800b568 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b548:	4b0b      	ldr	r3, [pc, #44]	; (800b578 <vPortEnterCritical+0x5c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <vPortEnterCritical+0x4c>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	603b      	str	r3, [r7, #0]
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <vPortEnterCritical+0x4a>
	}
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bc80      	pop	{r7}
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	200002c4 	.word	0x200002c4
 800b578:	e000ed04 	.word	0xe000ed04

0800b57c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b582:	4b11      	ldr	r3, [pc, #68]	; (800b5c8 <vPortExitCritical+0x4c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10a      	bne.n	800b5a0 <vPortExitCritical+0x24>
	__asm volatile
 800b58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58e:	f383 8811 	msr	BASEPRI, r3
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	f3bf 8f4f 	dsb	sy
 800b59a:	607b      	str	r3, [r7, #4]
}
 800b59c:	bf00      	nop
 800b59e:	e7fe      	b.n	800b59e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5a0:	4b09      	ldr	r3, [pc, #36]	; (800b5c8 <vPortExitCritical+0x4c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	4a08      	ldr	r2, [pc, #32]	; (800b5c8 <vPortExitCritical+0x4c>)
 800b5a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5aa:	4b07      	ldr	r3, [pc, #28]	; (800b5c8 <vPortExitCritical+0x4c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d105      	bne.n	800b5be <vPortExitCritical+0x42>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	f383 8811 	msr	BASEPRI, r3
}
 800b5bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bc80      	pop	{r7}
 800b5c6:	4770      	bx	lr
 800b5c8:	200002c4 	.word	0x200002c4
 800b5cc:	00000000 	.word	0x00000000

0800b5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5d0:	f3ef 8009 	mrs	r0, PSP
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	4b0d      	ldr	r3, [pc, #52]	; (800b610 <pxCurrentTCBConst>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b5e0:	6010      	str	r0, [r2, #0]
 800b5e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b5e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5ea:	f380 8811 	msr	BASEPRI, r0
 800b5ee:	f7ff f839 	bl	800a664 <vTaskSwitchContext>
 800b5f2:	f04f 0000 	mov.w	r0, #0
 800b5f6:	f380 8811 	msr	BASEPRI, r0
 800b5fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b5fe:	6819      	ldr	r1, [r3, #0]
 800b600:	6808      	ldr	r0, [r1, #0]
 800b602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b606:	f380 8809 	msr	PSP, r0
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	4770      	bx	lr

0800b610 <pxCurrentTCBConst>:
 800b610:	20001104 	.word	0x20001104
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop

0800b618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b632:	f7fe ff59 	bl	800a4e8 <xTaskIncrementTick>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <SysTick_Handler+0x40>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	2300      	movs	r3, #0
 800b646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	f383 8811 	msr	BASEPRI, r3
}
 800b64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b660:	4b0a      	ldr	r3, [pc, #40]	; (800b68c <vPortSetupTimerInterrupt+0x30>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b666:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b66c:	4b09      	ldr	r3, [pc, #36]	; (800b694 <vPortSetupTimerInterrupt+0x38>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a09      	ldr	r2, [pc, #36]	; (800b698 <vPortSetupTimerInterrupt+0x3c>)
 800b672:	fba2 2303 	umull	r2, r3, r2, r3
 800b676:	099b      	lsrs	r3, r3, #6
 800b678:	4a08      	ldr	r2, [pc, #32]	; (800b69c <vPortSetupTimerInterrupt+0x40>)
 800b67a:	3b01      	subs	r3, #1
 800b67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b67e:	4b03      	ldr	r3, [pc, #12]	; (800b68c <vPortSetupTimerInterrupt+0x30>)
 800b680:	2207      	movs	r2, #7
 800b682:	601a      	str	r2, [r3, #0]
}
 800b684:	bf00      	nop
 800b686:	46bd      	mov	sp, r7
 800b688:	bc80      	pop	{r7}
 800b68a:	4770      	bx	lr
 800b68c:	e000e010 	.word	0xe000e010
 800b690:	e000e018 	.word	0xe000e018
 800b694:	20000000 	.word	0x20000000
 800b698:	10624dd3 	.word	0x10624dd3
 800b69c:	e000e014 	.word	0xe000e014

0800b6a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6a6:	f3ef 8305 	mrs	r3, IPSR
 800b6aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b0f      	cmp	r3, #15
 800b6b0:	d914      	bls.n	800b6dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6b2:	4a16      	ldr	r2, [pc, #88]	; (800b70c <vPortValidateInterruptPriority+0x6c>)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6bc:	4b14      	ldr	r3, [pc, #80]	; (800b710 <vPortValidateInterruptPriority+0x70>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	7afa      	ldrb	r2, [r7, #11]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d20a      	bcs.n	800b6dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	607b      	str	r3, [r7, #4]
}
 800b6d8:	bf00      	nop
 800b6da:	e7fe      	b.n	800b6da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6dc:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <vPortValidateInterruptPriority+0x74>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b6e4:	4b0c      	ldr	r3, [pc, #48]	; (800b718 <vPortValidateInterruptPriority+0x78>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d90a      	bls.n	800b702 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	603b      	str	r3, [r7, #0]
}
 800b6fe:	bf00      	nop
 800b700:	e7fe      	b.n	800b700 <vPortValidateInterruptPriority+0x60>
	}
 800b702:	bf00      	nop
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	bc80      	pop	{r7}
 800b70a:	4770      	bx	lr
 800b70c:	e000e3f0 	.word	0xe000e3f0
 800b710:	20001730 	.word	0x20001730
 800b714:	e000ed0c 	.word	0xe000ed0c
 800b718:	20001734 	.word	0x20001734

0800b71c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08a      	sub	sp, #40	; 0x28
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b724:	2300      	movs	r3, #0
 800b726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b728:	f7fe fe24 	bl	800a374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b72c:	4b58      	ldr	r3, [pc, #352]	; (800b890 <pvPortMalloc+0x174>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b734:	f000 f910 	bl	800b958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b738:	4b56      	ldr	r3, [pc, #344]	; (800b894 <pvPortMalloc+0x178>)
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4013      	ands	r3, r2
 800b740:	2b00      	cmp	r3, #0
 800b742:	f040 808e 	bne.w	800b862 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01d      	beq.n	800b788 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b74c:	2208      	movs	r2, #8
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d014      	beq.n	800b788 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f023 0307 	bic.w	r3, r3, #7
 800b764:	3308      	adds	r3, #8
 800b766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f003 0307 	and.w	r3, r3, #7
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <pvPortMalloc+0x6c>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	617b      	str	r3, [r7, #20]
}
 800b784:	bf00      	nop
 800b786:	e7fe      	b.n	800b786 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d069      	beq.n	800b862 <pvPortMalloc+0x146>
 800b78e:	4b42      	ldr	r3, [pc, #264]	; (800b898 <pvPortMalloc+0x17c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	429a      	cmp	r2, r3
 800b796:	d864      	bhi.n	800b862 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b798:	4b40      	ldr	r3, [pc, #256]	; (800b89c <pvPortMalloc+0x180>)
 800b79a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b79c:	4b3f      	ldr	r3, [pc, #252]	; (800b89c <pvPortMalloc+0x180>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7a2:	e004      	b.n	800b7ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d903      	bls.n	800b7c0 <pvPortMalloc+0xa4>
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f1      	bne.n	800b7a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7c0:	4b33      	ldr	r3, [pc, #204]	; (800b890 <pvPortMalloc+0x174>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d04b      	beq.n	800b862 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2208      	movs	r2, #8
 800b7d0:	4413      	add	r3, r2
 800b7d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	1ad2      	subs	r2, r2, r3
 800b7e4:	2308      	movs	r3, #8
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d91f      	bls.n	800b82c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	f003 0307 	and.w	r3, r3, #7
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <pvPortMalloc+0xf8>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	613b      	str	r3, [r7, #16]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	1ad2      	subs	r2, r2, r3
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b826:	69b8      	ldr	r0, [r7, #24]
 800b828:	f000 f8f8 	bl	800ba1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b82c:	4b1a      	ldr	r3, [pc, #104]	; (800b898 <pvPortMalloc+0x17c>)
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	4a18      	ldr	r2, [pc, #96]	; (800b898 <pvPortMalloc+0x17c>)
 800b838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b83a:	4b17      	ldr	r3, [pc, #92]	; (800b898 <pvPortMalloc+0x17c>)
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	4b18      	ldr	r3, [pc, #96]	; (800b8a0 <pvPortMalloc+0x184>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d203      	bcs.n	800b84e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b846:	4b14      	ldr	r3, [pc, #80]	; (800b898 <pvPortMalloc+0x17c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a15      	ldr	r2, [pc, #84]	; (800b8a0 <pvPortMalloc+0x184>)
 800b84c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	4b10      	ldr	r3, [pc, #64]	; (800b894 <pvPortMalloc+0x178>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	431a      	orrs	r2, r3
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85e:	2200      	movs	r2, #0
 800b860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b862:	f7fe fd95 	bl	800a390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	f003 0307 	and.w	r3, r3, #7
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00a      	beq.n	800b886 <pvPortMalloc+0x16a>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	60fb      	str	r3, [r7, #12]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <pvPortMalloc+0x168>
	return pvReturn;
 800b886:	69fb      	ldr	r3, [r7, #28]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3728      	adds	r7, #40	; 0x28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	20002340 	.word	0x20002340
 800b894:	2000234c 	.word	0x2000234c
 800b898:	20002344 	.word	0x20002344
 800b89c:	20002338 	.word	0x20002338
 800b8a0:	20002348 	.word	0x20002348

0800b8a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d048      	beq.n	800b948 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8b6:	2308      	movs	r3, #8
 800b8b8:	425b      	negs	r3, r3
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	4413      	add	r3, r2
 800b8be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	4b21      	ldr	r3, [pc, #132]	; (800b950 <vPortFree+0xac>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <vPortFree+0x44>
	__asm volatile
 800b8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	60fb      	str	r3, [r7, #12]
}
 800b8e4:	bf00      	nop
 800b8e6:	e7fe      	b.n	800b8e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <vPortFree+0x62>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	60bb      	str	r3, [r7, #8]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	4b11      	ldr	r3, [pc, #68]	; (800b950 <vPortFree+0xac>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4013      	ands	r3, r2
 800b910:	2b00      	cmp	r3, #0
 800b912:	d019      	beq.n	800b948 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d115      	bne.n	800b948 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	4b0b      	ldr	r3, [pc, #44]	; (800b950 <vPortFree+0xac>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	43db      	mvns	r3, r3
 800b926:	401a      	ands	r2, r3
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b92c:	f7fe fd22 	bl	800a374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	4b07      	ldr	r3, [pc, #28]	; (800b954 <vPortFree+0xb0>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4413      	add	r3, r2
 800b93a:	4a06      	ldr	r2, [pc, #24]	; (800b954 <vPortFree+0xb0>)
 800b93c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b93e:	6938      	ldr	r0, [r7, #16]
 800b940:	f000 f86c 	bl	800ba1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b944:	f7fe fd24 	bl	800a390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b948:	bf00      	nop
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	2000234c 	.word	0x2000234c
 800b954:	20002344 	.word	0x20002344

0800b958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b95e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b964:	4b27      	ldr	r3, [pc, #156]	; (800ba04 <prvHeapInit+0xac>)
 800b966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f003 0307 	and.w	r3, r3, #7
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00c      	beq.n	800b98c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	3307      	adds	r3, #7
 800b976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f023 0307 	bic.w	r3, r3, #7
 800b97e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	4a1f      	ldr	r2, [pc, #124]	; (800ba04 <prvHeapInit+0xac>)
 800b988:	4413      	add	r3, r2
 800b98a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b990:	4a1d      	ldr	r2, [pc, #116]	; (800ba08 <prvHeapInit+0xb0>)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b996:	4b1c      	ldr	r3, [pc, #112]	; (800ba08 <prvHeapInit+0xb0>)
 800b998:	2200      	movs	r2, #0
 800b99a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9a4:	2208      	movs	r2, #8
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	1a9b      	subs	r3, r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0307 	bic.w	r3, r3, #7
 800b9b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4a15      	ldr	r2, [pc, #84]	; (800ba0c <prvHeapInit+0xb4>)
 800b9b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9ba:	4b14      	ldr	r3, [pc, #80]	; (800ba0c <prvHeapInit+0xb4>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <prvHeapInit+0xb4>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	1ad2      	subs	r2, r2, r3
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9d8:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <prvHeapInit+0xb4>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	4a0a      	ldr	r2, [pc, #40]	; (800ba10 <prvHeapInit+0xb8>)
 800b9e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	4a09      	ldr	r2, [pc, #36]	; (800ba14 <prvHeapInit+0xbc>)
 800b9ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9f0:	4b09      	ldr	r3, [pc, #36]	; (800ba18 <prvHeapInit+0xc0>)
 800b9f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9f6:	601a      	str	r2, [r3, #0]
}
 800b9f8:	bf00      	nop
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bc80      	pop	{r7}
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	20001738 	.word	0x20001738
 800ba08:	20002338 	.word	0x20002338
 800ba0c:	20002340 	.word	0x20002340
 800ba10:	20002348 	.word	0x20002348
 800ba14:	20002344 	.word	0x20002344
 800ba18:	2000234c 	.word	0x2000234c

0800ba1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba24:	4b27      	ldr	r3, [pc, #156]	; (800bac4 <prvInsertBlockIntoFreeList+0xa8>)
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	e002      	b.n	800ba30 <prvInsertBlockIntoFreeList+0x14>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d8f7      	bhi.n	800ba2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	4413      	add	r3, r2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d108      	bne.n	800ba5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	441a      	add	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	441a      	add	r2, r3
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d118      	bne.n	800baa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	4b14      	ldr	r3, [pc, #80]	; (800bac8 <prvInsertBlockIntoFreeList+0xac>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d00d      	beq.n	800ba9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	441a      	add	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	e008      	b.n	800baac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba9a:	4b0b      	ldr	r3, [pc, #44]	; (800bac8 <prvInsertBlockIntoFreeList+0xac>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	e003      	b.n	800baac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d002      	beq.n	800baba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baba:	bf00      	nop
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	bc80      	pop	{r7}
 800bac2:	4770      	bx	lr
 800bac4:	20002338 	.word	0x20002338
 800bac8:	20002340 	.word	0x20002340

0800bacc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bad0:	2200      	movs	r2, #0
 800bad2:	4912      	ldr	r1, [pc, #72]	; (800bb1c <MX_USB_DEVICE_Init+0x50>)
 800bad4:	4812      	ldr	r0, [pc, #72]	; (800bb20 <MX_USB_DEVICE_Init+0x54>)
 800bad6:	f7fc fa5b 	bl	8007f90 <USBD_Init>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bae0:	f7f4 fd7a 	bl	80005d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800bae4:	490f      	ldr	r1, [pc, #60]	; (800bb24 <MX_USB_DEVICE_Init+0x58>)
 800bae6:	480e      	ldr	r0, [pc, #56]	; (800bb20 <MX_USB_DEVICE_Init+0x54>)
 800bae8:	f7fc fa7d 	bl	8007fe6 <USBD_RegisterClass>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800baf2:	f7f4 fd71 	bl	80005d8 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800baf6:	490c      	ldr	r1, [pc, #48]	; (800bb28 <MX_USB_DEVICE_Init+0x5c>)
 800baf8:	4809      	ldr	r0, [pc, #36]	; (800bb20 <MX_USB_DEVICE_Init+0x54>)
 800bafa:	f7fc fa37 	bl	8007f6c <USBD_AUDIO_RegisterInterface>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb04:	f7f4 fd68 	bl	80005d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb08:	4805      	ldr	r0, [pc, #20]	; (800bb20 <MX_USB_DEVICE_Init+0x54>)
 800bb0a:	f7fc fa85 	bl	8008018 <USBD_Start>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb14:	f7f4 fd60 	bl	80005d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb18:	bf00      	nop
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	200002e4 	.word	0x200002e4
 800bb20:	20002350 	.word	0x20002350
 800bb24:	20000210 	.word	0x20000210
 800bb28:	200002c8 	.word	0x200002c8

0800bb2c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800bb38:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bc80      	pop	{r7}
 800bb42:	4770      	bx	lr

0800bb44 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800bb4c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bc80      	pop	{r7}
 800bb56:	4770      	bx	lr

0800bb58 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	4613      	mov	r3, r2
 800bb64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d001      	beq.n	800bb70 <AUDIO_AudioCmd_FS+0x18>
 800bb6c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800bb6e:	e000      	b.n	800bb72 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800bb70:	bf00      	nop
  }
  return (USBD_OK);
 800bb72:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bc80      	pop	{r7}
 800bb7c:	4770      	bx	lr

0800bb7e <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b083      	sub	sp, #12
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	4603      	mov	r3, r0
 800bb86:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800bb88:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bc80      	pop	{r7}
 800bb92:	4770      	bx	lr

0800bb94 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb9e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bc80      	pop	{r7}
 800bba8:	4770      	bx	lr

0800bbaa <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800bbb4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bc80      	pop	{r7}
 800bbbe:	4770      	bx	lr

0800bbc0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bbc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bc80      	pop	{r7}
 800bbcc:	4770      	bx	lr
	...

0800bbd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	6039      	str	r1, [r7, #0]
 800bbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2212      	movs	r2, #18
 800bbe0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bbe2:	4b03      	ldr	r3, [pc, #12]	; (800bbf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bc80      	pop	{r7}
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	20000300 	.word	0x20000300

0800bbf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	6039      	str	r1, [r7, #0]
 800bbfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2204      	movs	r2, #4
 800bc04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc06:	4b03      	ldr	r3, [pc, #12]	; (800bc14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bc80      	pop	{r7}
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	20000314 	.word	0x20000314

0800bc18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	6039      	str	r1, [r7, #0]
 800bc22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc24:	79fb      	ldrb	r3, [r7, #7]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d105      	bne.n	800bc36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	4907      	ldr	r1, [pc, #28]	; (800bc4c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc2e:	4808      	ldr	r0, [pc, #32]	; (800bc50 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc30:	f7fd f96a 	bl	8008f08 <USBD_GetString>
 800bc34:	e004      	b.n	800bc40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	4904      	ldr	r1, [pc, #16]	; (800bc4c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc3a:	4805      	ldr	r0, [pc, #20]	; (800bc50 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc3c:	f7fd f964 	bl	8008f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc40:	4b02      	ldr	r3, [pc, #8]	; (800bc4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20002614 	.word	0x20002614
 800bc50:	0800c538 	.word	0x0800c538

0800bc54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	6039      	str	r1, [r7, #0]
 800bc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	4904      	ldr	r1, [pc, #16]	; (800bc74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc64:	4804      	ldr	r0, [pc, #16]	; (800bc78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc66:	f7fd f94f 	bl	8008f08 <USBD_GetString>
  return USBD_StrDesc;
 800bc6a:	4b02      	ldr	r3, [pc, #8]	; (800bc74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	20002614 	.word	0x20002614
 800bc78:	0800c544 	.word	0x0800c544

0800bc7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	4603      	mov	r3, r0
 800bc84:	6039      	str	r1, [r7, #0]
 800bc86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	221a      	movs	r2, #26
 800bc8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc8e:	f000 f843 	bl	800bd18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bc92:	4b02      	ldr	r3, [pc, #8]	; (800bc9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20000318 	.word	0x20000318

0800bca0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	4603      	mov	r3, r0
 800bca8:	6039      	str	r1, [r7, #0]
 800bcaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bcac:	79fb      	ldrb	r3, [r7, #7]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d105      	bne.n	800bcbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	4907      	ldr	r1, [pc, #28]	; (800bcd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcb6:	4808      	ldr	r0, [pc, #32]	; (800bcd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcb8:	f7fd f926 	bl	8008f08 <USBD_GetString>
 800bcbc:	e004      	b.n	800bcc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	4904      	ldr	r1, [pc, #16]	; (800bcd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcc2:	4805      	ldr	r0, [pc, #20]	; (800bcd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcc4:	f7fd f920 	bl	8008f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcc8:	4b02      	ldr	r3, [pc, #8]	; (800bcd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20002614 	.word	0x20002614
 800bcd8:	0800c554 	.word	0x0800c554

0800bcdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	4603      	mov	r3, r0
 800bce4:	6039      	str	r1, [r7, #0]
 800bce6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bce8:	79fb      	ldrb	r3, [r7, #7]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d105      	bne.n	800bcfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	4907      	ldr	r1, [pc, #28]	; (800bd10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcf2:	4808      	ldr	r0, [pc, #32]	; (800bd14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bcf4:	f7fd f908 	bl	8008f08 <USBD_GetString>
 800bcf8:	e004      	b.n	800bd04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4904      	ldr	r1, [pc, #16]	; (800bd10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bcfe:	4805      	ldr	r0, [pc, #20]	; (800bd14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd00:	f7fd f902 	bl	8008f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	20002614 	.word	0x20002614
 800bd14:	0800c564 	.word	0x0800c564

0800bd18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd1e:	4b0f      	ldr	r3, [pc, #60]	; (800bd5c <Get_SerialNum+0x44>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd24:	4b0e      	ldr	r3, [pc, #56]	; (800bd60 <Get_SerialNum+0x48>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd2a:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <Get_SerialNum+0x4c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4413      	add	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d009      	beq.n	800bd52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd3e:	2208      	movs	r2, #8
 800bd40:	4909      	ldr	r1, [pc, #36]	; (800bd68 <Get_SerialNum+0x50>)
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	f000 f814 	bl	800bd70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd48:	2204      	movs	r2, #4
 800bd4a:	4908      	ldr	r1, [pc, #32]	; (800bd6c <Get_SerialNum+0x54>)
 800bd4c:	68b8      	ldr	r0, [r7, #8]
 800bd4e:	f000 f80f 	bl	800bd70 <IntToUnicode>
  }
}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	1ffff7e8 	.word	0x1ffff7e8
 800bd60:	1ffff7ec 	.word	0x1ffff7ec
 800bd64:	1ffff7f0 	.word	0x1ffff7f0
 800bd68:	2000031a 	.word	0x2000031a
 800bd6c:	2000032a 	.word	0x2000032a

0800bd70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd82:	2300      	movs	r3, #0
 800bd84:	75fb      	strb	r3, [r7, #23]
 800bd86:	e027      	b.n	800bdd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	0f1b      	lsrs	r3, r3, #28
 800bd8c:	2b09      	cmp	r3, #9
 800bd8e:	d80b      	bhi.n	800bda8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	0f1b      	lsrs	r3, r3, #28
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	005b      	lsls	r3, r3, #1
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	440b      	add	r3, r1
 800bda0:	3230      	adds	r2, #48	; 0x30
 800bda2:	b2d2      	uxtb	r2, r2
 800bda4:	701a      	strb	r2, [r3, #0]
 800bda6:	e00a      	b.n	800bdbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	0f1b      	lsrs	r3, r3, #28
 800bdac:	b2da      	uxtb	r2, r3
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	440b      	add	r3, r1
 800bdb8:	3237      	adds	r2, #55	; 0x37
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	011b      	lsls	r3, r3, #4
 800bdc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	3301      	adds	r3, #1
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	4413      	add	r3, r2
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdd2:	7dfb      	ldrb	r3, [r7, #23]
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	75fb      	strb	r3, [r7, #23]
 800bdd8:	7dfa      	ldrb	r2, [r7, #23]
 800bdda:	79fb      	ldrb	r3, [r7, #7]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d3d3      	bcc.n	800bd88 <IntToUnicode+0x18>
  }
}
 800bde0:	bf00      	nop
 800bde2:	bf00      	nop
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bc80      	pop	{r7}
 800bdea:	4770      	bx	lr

0800bdec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a0d      	ldr	r2, [pc, #52]	; (800be30 <HAL_PCD_MspInit+0x44>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d113      	bne.n	800be26 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	; (800be34 <HAL_PCD_MspInit+0x48>)
 800be00:	69db      	ldr	r3, [r3, #28]
 800be02:	4a0c      	ldr	r2, [pc, #48]	; (800be34 <HAL_PCD_MspInit+0x48>)
 800be04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800be08:	61d3      	str	r3, [r2, #28]
 800be0a:	4b0a      	ldr	r3, [pc, #40]	; (800be34 <HAL_PCD_MspInit+0x48>)
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800be16:	2200      	movs	r2, #0
 800be18:	2105      	movs	r1, #5
 800be1a:	2014      	movs	r0, #20
 800be1c:	f7f4 ff1d 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800be20:	2014      	movs	r0, #20
 800be22:	f7f4 ff36 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800be26:	bf00      	nop
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	40005c00 	.word	0x40005c00
 800be34:	40021000 	.word	0x40021000

0800be38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f7fc f92a 	bl	80080a8 <USBD_LL_SetupStage>
}
 800be54:	bf00      	nop
 800be56:	3708      	adds	r7, #8
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b082      	sub	sp, #8
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	460b      	mov	r3, r1
 800be66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800be6e:	78fa      	ldrb	r2, [r7, #3]
 800be70:	6879      	ldr	r1, [r7, #4]
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	440b      	add	r3, r1
 800be7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	78fb      	ldrb	r3, [r7, #3]
 800be84:	4619      	mov	r1, r3
 800be86:	f7fc f95c 	bl	8008142 <USBD_LL_DataOutStage>
}
 800be8a:	bf00      	nop
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b082      	sub	sp, #8
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	460b      	mov	r3, r1
 800be9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bea4:	78fa      	ldrb	r2, [r7, #3]
 800bea6:	6879      	ldr	r1, [r7, #4]
 800bea8:	4613      	mov	r3, r2
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	440b      	add	r3, r1
 800beb2:	333c      	adds	r3, #60	; 0x3c
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	78fb      	ldrb	r3, [r7, #3]
 800beb8:	4619      	mov	r1, r3
 800beba:	f7fc f9b3 	bl	8008224 <USBD_LL_DataInStage>
}
 800bebe:	bf00      	nop
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fc fac3 	bl	8008460 <USBD_LL_SOF>
}
 800beda:	bf00      	nop
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b084      	sub	sp, #16
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800beea:	2301      	movs	r3, #1
 800beec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d001      	beq.n	800befa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bef6:	f7f4 fb6f 	bl	80005d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf00:	7bfa      	ldrb	r2, [r7, #15]
 800bf02:	4611      	mov	r1, r2
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fc fa73 	bl	80083f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fc fa2c 	bl	800836e <USBD_LL_Reset>
}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fc fa6d 	bl	800840e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf3c:	4b04      	ldr	r3, [pc, #16]	; (800bf50 <HAL_PCD_SuspendCallback+0x30>)
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	4a03      	ldr	r2, [pc, #12]	; (800bf50 <HAL_PCD_SuspendCallback+0x30>)
 800bf42:	f043 0306 	orr.w	r3, r3, #6
 800bf46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	e000ed00 	.word	0xe000ed00

0800bf54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fc fa67 	bl	8008436 <USBD_LL_Resume>
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bf78:	4a1b      	ldr	r2, [pc, #108]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a19      	ldr	r2, [pc, #100]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bf84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bf88:	4b17      	ldr	r3, [pc, #92]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bf8a:	4a18      	ldr	r2, [pc, #96]	; (800bfec <USBD_LL_Init+0x7c>)
 800bf8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf8e:	4b16      	ldr	r3, [pc, #88]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bf90:	2208      	movs	r2, #8
 800bf92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf94:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bf96:	2202      	movs	r2, #2
 800bf98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf9a:	4b13      	ldr	r3, [pc, #76]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bfa0:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bfa6:	4b10      	ldr	r3, [pc, #64]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bfac:	480e      	ldr	r0, [pc, #56]	; (800bfe8 <USBD_LL_Init+0x78>)
 800bfae:	f7f5 f9f1 	bl	8001394 <HAL_PCD_Init>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bfb8:	f7f4 fb0e 	bl	80005d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bfc2:	2318      	movs	r3, #24
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	f7f6 fe4e 	bl	8002c68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bfd2:	2358      	movs	r3, #88	; 0x58
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	2180      	movs	r1, #128	; 0x80
 800bfd8:	f7f6 fe46 	bl	8002c68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20002814 	.word	0x20002814
 800bfec:	40005c00 	.word	0x40005c00

0800bff0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c006:	4618      	mov	r0, r3
 800c008:	f7f5 facf 	bl	80015aa <HAL_PCD_Start>
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	4618      	mov	r0, r3
 800c014:	f000 f93c 	bl	800c290 <USBD_Get_USB_Status>
 800c018:	4603      	mov	r3, r0
 800c01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	4608      	mov	r0, r1
 800c030:	4611      	mov	r1, r2
 800c032:	461a      	mov	r2, r3
 800c034:	4603      	mov	r3, r0
 800c036:	70fb      	strb	r3, [r7, #3]
 800c038:	460b      	mov	r3, r1
 800c03a:	70bb      	strb	r3, [r7, #2]
 800c03c:	4613      	mov	r3, r2
 800c03e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c04e:	78bb      	ldrb	r3, [r7, #2]
 800c050:	883a      	ldrh	r2, [r7, #0]
 800c052:	78f9      	ldrb	r1, [r7, #3]
 800c054:	f7f5 fc47 	bl	80018e6 <HAL_PCD_EP_Open>
 800c058:	4603      	mov	r3, r0
 800c05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c05c:	7bfb      	ldrb	r3, [r7, #15]
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f916 	bl	800c290 <USBD_Get_USB_Status>
 800c064:	4603      	mov	r3, r0
 800c066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c068:	7bbb      	ldrb	r3, [r7, #14]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
 800c07a:	460b      	mov	r3, r1
 800c07c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c08c:	78fa      	ldrb	r2, [r7, #3]
 800c08e:	4611      	mov	r1, r2
 800c090:	4618      	mov	r0, r3
 800c092:	f7f5 fc8e 	bl	80019b2 <HAL_PCD_EP_Close>
 800c096:	4603      	mov	r3, r0
 800c098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 f8f7 	bl	800c290 <USBD_Get_USB_Status>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0ca:	78fa      	ldrb	r2, [r7, #3]
 800c0cc:	4611      	mov	r1, r2
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7f5 fd37 	bl	8001b42 <HAL_PCD_EP_SetStall>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 f8d8 	bl	800c290 <USBD_Get_USB_Status>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c108:	78fa      	ldrb	r2, [r7, #3]
 800c10a:	4611      	mov	r1, r2
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7f5 fd78 	bl	8001c02 <HAL_PCD_EP_ClrStall>
 800c112:	4603      	mov	r3, r0
 800c114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 f8b9 	bl	800c290 <USBD_Get_USB_Status>
 800c11e:	4603      	mov	r3, r0
 800c120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c122:	7bbb      	ldrb	r3, [r7, #14]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c13e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c144:	2b00      	cmp	r3, #0
 800c146:	da0c      	bge.n	800c162 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c148:	78fb      	ldrb	r3, [r7, #3]
 800c14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c14e:	68f9      	ldr	r1, [r7, #12]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	4613      	mov	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	440b      	add	r3, r1
 800c15c:	3302      	adds	r3, #2
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	e00b      	b.n	800c17a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c168:	68f9      	ldr	r1, [r7, #12]
 800c16a:	4613      	mov	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	4413      	add	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	440b      	add	r3, r1
 800c174:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c178:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3714      	adds	r7, #20
 800c17e:	46bd      	mov	sp, r7
 800c180:	bc80      	pop	{r7}
 800c182:	4770      	bx	lr

0800c184 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c19e:	78fa      	ldrb	r2, [r7, #3]
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7f5 fb7a 	bl	800189c <HAL_PCD_SetAddress>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f86e 	bl	800c290 <USBD_Get_USB_Status>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b086      	sub	sp, #24
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	60f8      	str	r0, [r7, #12]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	72fb      	strb	r3, [r7, #11]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1e4:	893b      	ldrh	r3, [r7, #8]
 800c1e6:	7af9      	ldrb	r1, [r7, #11]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	f7f5 fc67 	bl	8001abc <HAL_PCD_EP_Transmit>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1f2:	7dfb      	ldrb	r3, [r7, #23]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f84b 	bl	800c290 <USBD_Get_USB_Status>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	607a      	str	r2, [r7, #4]
 800c212:	461a      	mov	r2, r3
 800c214:	460b      	mov	r3, r1
 800c216:	72fb      	strb	r3, [r7, #11]
 800c218:	4613      	mov	r3, r2
 800c21a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c22a:	893b      	ldrh	r3, [r7, #8]
 800c22c:	7af9      	ldrb	r1, [r7, #11]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	f7f5 fc07 	bl	8001a42 <HAL_PCD_EP_Receive>
 800c234:	4603      	mov	r3, r0
 800c236:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 f828 	bl	800c290 <USBD_Get_USB_Status>
 800c240:	4603      	mov	r3, r0
 800c242:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c244:	7dbb      	ldrb	r3, [r7, #22]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
	...

0800c250 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  static uint8_t mem[512];
  /* USER CODE END 4 */
  return mem;
 800c258:	4b02      	ldr	r3, [pc, #8]	; (800c264 <USBD_static_malloc+0x14>)
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc80      	pop	{r7}
 800c262:	4770      	bx	lr
 800c264:	20002b00 	.word	0x20002b00

0800c268 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]

}
 800c270:	bf00      	nop
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	bc80      	pop	{r7}
 800c278:	4770      	bx	lr

0800c27a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
 800c282:	460b      	mov	r3, r1
 800c284:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c286:	bf00      	nop
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bc80      	pop	{r7}
 800c28e:	4770      	bx	lr

0800c290 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	4603      	mov	r3, r0
 800c298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	d817      	bhi.n	800c2d4 <USBD_Get_USB_Status+0x44>
 800c2a4:	a201      	add	r2, pc, #4	; (adr r2, 800c2ac <USBD_Get_USB_Status+0x1c>)
 800c2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2aa:	bf00      	nop
 800c2ac:	0800c2bd 	.word	0x0800c2bd
 800c2b0:	0800c2c3 	.word	0x0800c2c3
 800c2b4:	0800c2c9 	.word	0x0800c2c9
 800c2b8:	0800c2cf 	.word	0x0800c2cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c0:	e00b      	b.n	800c2da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c2c6:	e008      	b.n	800c2da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c2cc:	e005      	b.n	800c2da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d2:	e002      	b.n	800c2da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2d8:	bf00      	nop
  }
  return usb_status;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bc80      	pop	{r7}
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop

0800c2e8 <__libc_init_array>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	2600      	movs	r6, #0
 800c2ec:	4d0c      	ldr	r5, [pc, #48]	; (800c320 <__libc_init_array+0x38>)
 800c2ee:	4c0d      	ldr	r4, [pc, #52]	; (800c324 <__libc_init_array+0x3c>)
 800c2f0:	1b64      	subs	r4, r4, r5
 800c2f2:	10a4      	asrs	r4, r4, #2
 800c2f4:	42a6      	cmp	r6, r4
 800c2f6:	d109      	bne.n	800c30c <__libc_init_array+0x24>
 800c2f8:	f000 f8f0 	bl	800c4dc <_init>
 800c2fc:	2600      	movs	r6, #0
 800c2fe:	4d0a      	ldr	r5, [pc, #40]	; (800c328 <__libc_init_array+0x40>)
 800c300:	4c0a      	ldr	r4, [pc, #40]	; (800c32c <__libc_init_array+0x44>)
 800c302:	1b64      	subs	r4, r4, r5
 800c304:	10a4      	asrs	r4, r4, #2
 800c306:	42a6      	cmp	r6, r4
 800c308:	d105      	bne.n	800c316 <__libc_init_array+0x2e>
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c310:	4798      	blx	r3
 800c312:	3601      	adds	r6, #1
 800c314:	e7ee      	b.n	800c2f4 <__libc_init_array+0xc>
 800c316:	f855 3b04 	ldr.w	r3, [r5], #4
 800c31a:	4798      	blx	r3
 800c31c:	3601      	adds	r6, #1
 800c31e:	e7f2      	b.n	800c306 <__libc_init_array+0x1e>
 800c320:	0800c610 	.word	0x0800c610
 800c324:	0800c610 	.word	0x0800c610
 800c328:	0800c610 	.word	0x0800c610
 800c32c:	0800c614 	.word	0x0800c614

0800c330 <__retarget_lock_acquire_recursive>:
 800c330:	4770      	bx	lr

0800c332 <__retarget_lock_release_recursive>:
 800c332:	4770      	bx	lr

0800c334 <memcpy>:
 800c334:	440a      	add	r2, r1
 800c336:	4291      	cmp	r1, r2
 800c338:	f100 33ff 	add.w	r3, r0, #4294967295
 800c33c:	d100      	bne.n	800c340 <memcpy+0xc>
 800c33e:	4770      	bx	lr
 800c340:	b510      	push	{r4, lr}
 800c342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c346:	4291      	cmp	r1, r2
 800c348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c34c:	d1f9      	bne.n	800c342 <memcpy+0xe>
 800c34e:	bd10      	pop	{r4, pc}

0800c350 <memset>:
 800c350:	4603      	mov	r3, r0
 800c352:	4402      	add	r2, r0
 800c354:	4293      	cmp	r3, r2
 800c356:	d100      	bne.n	800c35a <memset+0xa>
 800c358:	4770      	bx	lr
 800c35a:	f803 1b01 	strb.w	r1, [r3], #1
 800c35e:	e7f9      	b.n	800c354 <memset+0x4>

0800c360 <cleanup_glue>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	460c      	mov	r4, r1
 800c364:	6809      	ldr	r1, [r1, #0]
 800c366:	4605      	mov	r5, r0
 800c368:	b109      	cbz	r1, 800c36e <cleanup_glue+0xe>
 800c36a:	f7ff fff9 	bl	800c360 <cleanup_glue>
 800c36e:	4621      	mov	r1, r4
 800c370:	4628      	mov	r0, r5
 800c372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c376:	f000 b869 	b.w	800c44c <_free_r>
	...

0800c37c <_reclaim_reent>:
 800c37c:	4b2c      	ldr	r3, [pc, #176]	; (800c430 <_reclaim_reent+0xb4>)
 800c37e:	b570      	push	{r4, r5, r6, lr}
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4604      	mov	r4, r0
 800c384:	4283      	cmp	r3, r0
 800c386:	d051      	beq.n	800c42c <_reclaim_reent+0xb0>
 800c388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c38a:	b143      	cbz	r3, 800c39e <_reclaim_reent+0x22>
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d14a      	bne.n	800c428 <_reclaim_reent+0xac>
 800c392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c394:	6819      	ldr	r1, [r3, #0]
 800c396:	b111      	cbz	r1, 800c39e <_reclaim_reent+0x22>
 800c398:	4620      	mov	r0, r4
 800c39a:	f000 f857 	bl	800c44c <_free_r>
 800c39e:	6961      	ldr	r1, [r4, #20]
 800c3a0:	b111      	cbz	r1, 800c3a8 <_reclaim_reent+0x2c>
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f000 f852 	bl	800c44c <_free_r>
 800c3a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c3aa:	b111      	cbz	r1, 800c3b2 <_reclaim_reent+0x36>
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f000 f84d 	bl	800c44c <_free_r>
 800c3b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c3b4:	b111      	cbz	r1, 800c3bc <_reclaim_reent+0x40>
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 f848 	bl	800c44c <_free_r>
 800c3bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c3be:	b111      	cbz	r1, 800c3c6 <_reclaim_reent+0x4a>
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 f843 	bl	800c44c <_free_r>
 800c3c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c3c8:	b111      	cbz	r1, 800c3d0 <_reclaim_reent+0x54>
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f000 f83e 	bl	800c44c <_free_r>
 800c3d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c3d2:	b111      	cbz	r1, 800c3da <_reclaim_reent+0x5e>
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f000 f839 	bl	800c44c <_free_r>
 800c3da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c3dc:	b111      	cbz	r1, 800c3e4 <_reclaim_reent+0x68>
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 f834 	bl	800c44c <_free_r>
 800c3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3e6:	b111      	cbz	r1, 800c3ee <_reclaim_reent+0x72>
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 f82f 	bl	800c44c <_free_r>
 800c3ee:	69a3      	ldr	r3, [r4, #24]
 800c3f0:	b1e3      	cbz	r3, 800c42c <_reclaim_reent+0xb0>
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3f6:	4798      	blx	r3
 800c3f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c3fa:	b1b9      	cbz	r1, 800c42c <_reclaim_reent+0xb0>
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c402:	f7ff bfad 	b.w	800c360 <cleanup_glue>
 800c406:	5949      	ldr	r1, [r1, r5]
 800c408:	b941      	cbnz	r1, 800c41c <_reclaim_reent+0xa0>
 800c40a:	3504      	adds	r5, #4
 800c40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c40e:	2d80      	cmp	r5, #128	; 0x80
 800c410:	68d9      	ldr	r1, [r3, #12]
 800c412:	d1f8      	bne.n	800c406 <_reclaim_reent+0x8a>
 800c414:	4620      	mov	r0, r4
 800c416:	f000 f819 	bl	800c44c <_free_r>
 800c41a:	e7ba      	b.n	800c392 <_reclaim_reent+0x16>
 800c41c:	680e      	ldr	r6, [r1, #0]
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 f814 	bl	800c44c <_free_r>
 800c424:	4631      	mov	r1, r6
 800c426:	e7ef      	b.n	800c408 <_reclaim_reent+0x8c>
 800c428:	2500      	movs	r5, #0
 800c42a:	e7ef      	b.n	800c40c <_reclaim_reent+0x90>
 800c42c:	bd70      	pop	{r4, r5, r6, pc}
 800c42e:	bf00      	nop
 800c430:	20000334 	.word	0x20000334

0800c434 <__malloc_lock>:
 800c434:	4801      	ldr	r0, [pc, #4]	; (800c43c <__malloc_lock+0x8>)
 800c436:	f7ff bf7b 	b.w	800c330 <__retarget_lock_acquire_recursive>
 800c43a:	bf00      	nop
 800c43c:	20002d00 	.word	0x20002d00

0800c440 <__malloc_unlock>:
 800c440:	4801      	ldr	r0, [pc, #4]	; (800c448 <__malloc_unlock+0x8>)
 800c442:	f7ff bf76 	b.w	800c332 <__retarget_lock_release_recursive>
 800c446:	bf00      	nop
 800c448:	20002d00 	.word	0x20002d00

0800c44c <_free_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4605      	mov	r5, r0
 800c450:	2900      	cmp	r1, #0
 800c452:	d040      	beq.n	800c4d6 <_free_r+0x8a>
 800c454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c458:	1f0c      	subs	r4, r1, #4
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	bfb8      	it	lt
 800c45e:	18e4      	addlt	r4, r4, r3
 800c460:	f7ff ffe8 	bl	800c434 <__malloc_lock>
 800c464:	4a1c      	ldr	r2, [pc, #112]	; (800c4d8 <_free_r+0x8c>)
 800c466:	6813      	ldr	r3, [r2, #0]
 800c468:	b933      	cbnz	r3, 800c478 <_free_r+0x2c>
 800c46a:	6063      	str	r3, [r4, #4]
 800c46c:	6014      	str	r4, [r2, #0]
 800c46e:	4628      	mov	r0, r5
 800c470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c474:	f7ff bfe4 	b.w	800c440 <__malloc_unlock>
 800c478:	42a3      	cmp	r3, r4
 800c47a:	d908      	bls.n	800c48e <_free_r+0x42>
 800c47c:	6820      	ldr	r0, [r4, #0]
 800c47e:	1821      	adds	r1, r4, r0
 800c480:	428b      	cmp	r3, r1
 800c482:	bf01      	itttt	eq
 800c484:	6819      	ldreq	r1, [r3, #0]
 800c486:	685b      	ldreq	r3, [r3, #4]
 800c488:	1809      	addeq	r1, r1, r0
 800c48a:	6021      	streq	r1, [r4, #0]
 800c48c:	e7ed      	b.n	800c46a <_free_r+0x1e>
 800c48e:	461a      	mov	r2, r3
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	b10b      	cbz	r3, 800c498 <_free_r+0x4c>
 800c494:	42a3      	cmp	r3, r4
 800c496:	d9fa      	bls.n	800c48e <_free_r+0x42>
 800c498:	6811      	ldr	r1, [r2, #0]
 800c49a:	1850      	adds	r0, r2, r1
 800c49c:	42a0      	cmp	r0, r4
 800c49e:	d10b      	bne.n	800c4b8 <_free_r+0x6c>
 800c4a0:	6820      	ldr	r0, [r4, #0]
 800c4a2:	4401      	add	r1, r0
 800c4a4:	1850      	adds	r0, r2, r1
 800c4a6:	4283      	cmp	r3, r0
 800c4a8:	6011      	str	r1, [r2, #0]
 800c4aa:	d1e0      	bne.n	800c46e <_free_r+0x22>
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	4401      	add	r1, r0
 800c4b2:	6011      	str	r1, [r2, #0]
 800c4b4:	6053      	str	r3, [r2, #4]
 800c4b6:	e7da      	b.n	800c46e <_free_r+0x22>
 800c4b8:	d902      	bls.n	800c4c0 <_free_r+0x74>
 800c4ba:	230c      	movs	r3, #12
 800c4bc:	602b      	str	r3, [r5, #0]
 800c4be:	e7d6      	b.n	800c46e <_free_r+0x22>
 800c4c0:	6820      	ldr	r0, [r4, #0]
 800c4c2:	1821      	adds	r1, r4, r0
 800c4c4:	428b      	cmp	r3, r1
 800c4c6:	bf01      	itttt	eq
 800c4c8:	6819      	ldreq	r1, [r3, #0]
 800c4ca:	685b      	ldreq	r3, [r3, #4]
 800c4cc:	1809      	addeq	r1, r1, r0
 800c4ce:	6021      	streq	r1, [r4, #0]
 800c4d0:	6063      	str	r3, [r4, #4]
 800c4d2:	6054      	str	r4, [r2, #4]
 800c4d4:	e7cb      	b.n	800c46e <_free_r+0x22>
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	20002d04 	.word	0x20002d04

0800c4dc <_init>:
 800c4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4de:	bf00      	nop
 800c4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4e2:	bc08      	pop	{r3}
 800c4e4:	469e      	mov	lr, r3
 800c4e6:	4770      	bx	lr

0800c4e8 <_fini>:
 800c4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ea:	bf00      	nop
 800c4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ee:	bc08      	pop	{r3}
 800c4f0:	469e      	mov	lr, r3
 800c4f2:	4770      	bx	lr
