
LaserHarp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eab0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800ebc0  0800ebc0  0001ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eeec  0800eeec  00020398  2**0
                  CONTENTS
  4 .ARM          00000000  0800eeec  0800eeec  00020398  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eeec  0800eeec  00020398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eeec  0800eeec  0001eeec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eef0  0800eef0  0001eef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  0800eef4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029c4  20000398  0800f28c  00020398  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002d5c  0800f28c  00022d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020398  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023dac  00000000  00000000  000203c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005229  00000000  00000000  0004416d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d50  00000000  00000000  00049398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b38  00000000  00000000  0004b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000782d  00000000  00000000  0004cc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021cf1  00000000  00000000  0005444d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d944  00000000  00000000  0007613e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113a82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008218  00000000  00000000  00113ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000398 	.word	0x20000398
 800012c:	00000000 	.word	0x00000000
 8000130:	0800eba8 	.word	0x0800eba8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000039c 	.word	0x2000039c
 800014c:	0800eba8 	.word	0x0800eba8

08000150 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// custom printf handler
PUTCHAR_PROTOTYPE {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2b0a      	cmp	r3, #10
 800015c:	d109      	bne.n	8000172 <__io_putchar+0x22>
        uint8_t cr = '\r';
 800015e:	230d      	movs	r3, #13
 8000160:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &cr, 1, HAL_MAX_DELAY);
 8000162:	f107 010f 	add.w	r1, r7, #15
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	2201      	movs	r2, #1
 800016c:	4807      	ldr	r0, [pc, #28]	; (800018c <__io_putchar+0x3c>)
 800016e:	f004 fea7 	bl	8004ec0 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000172:	1d39      	adds	r1, r7, #4
 8000174:	f04f 33ff 	mov.w	r3, #4294967295
 8000178:	2201      	movs	r2, #1
 800017a:	4804      	ldr	r0, [pc, #16]	; (800018c <__io_putchar+0x3c>)
 800017c:	f004 fea0 	bl	8004ec0 <HAL_UART_Transmit>
    return ch;
 8000180:	687b      	ldr	r3, [r7, #4]
}
 8000182:	4618      	mov	r0, r3
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	200005fc 	.word	0x200005fc

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000194:	f000 fdd8 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000198:	f000 f822 	bl	80001e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019c:	f000 f9e6 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 80001a0:	f000 f9c6 	bl	8000530 <MX_DMA_Init>
  MX_TIM3_Init();
 80001a4:	f000 f8fa 	bl	800039c <MX_TIM3_Init>
  MX_SPI1_Init();
 80001a8:	f000 f874 	bl	8000294 <MX_SPI1_Init>
  MX_TIM2_Init();
 80001ac:	f000 f8aa 	bl	8000304 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001b0:	f000 f994 	bl	80004dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001b4:	f000 f968 	bl	8000488 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001b8:	f009 fe18 	bl	8009dec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001bc:	4a05      	ldr	r2, [pc, #20]	; (80001d4 <main+0x44>)
 80001be:	2100      	movs	r1, #0
 80001c0:	4805      	ldr	r0, [pc, #20]	; (80001d8 <main+0x48>)
 80001c2:	f009 fe79 	bl	8009eb8 <osThreadNew>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a04      	ldr	r2, [pc, #16]	; (80001dc <main+0x4c>)
 80001ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001cc:	f009 fe40 	bl	8009e50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d0:	e7fe      	b.n	80001d0 <main+0x40>
 80001d2:	bf00      	nop
 80001d4:	0800ee18 	.word	0x0800ee18
 80001d8:	080005c9 	.word	0x080005c9
 80001dc:	20000640 	.word	0x20000640

080001e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b094      	sub	sp, #80	; 0x50
 80001e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ea:	2228      	movs	r2, #40	; 0x28
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f00d fdcb 	bl	800dd8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
 8000202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000210:	2301      	movs	r3, #1
 8000212:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000218:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000236:	4618      	mov	r0, r3
 8000238:	f002 ff66 	bl	8003108 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000242:	f000 fa3b 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025c:	f107 0314 	add.w	r3, r7, #20
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f003 f9d2 	bl	800360c <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800026e:	f000 fa25 	bl	80006bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000272:	2310      	movs	r3, #16
 8000274:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f003 fb8d 	bl	800399c <HAL_RCCEx_PeriphCLKConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000288:	f000 fa18 	bl	80006bc <Error_Handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3750      	adds	r7, #80	; 0x50
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000298:	4b18      	ldr	r3, [pc, #96]	; (80002fc <MX_SPI1_Init+0x68>)
 800029a:	4a19      	ldr	r2, [pc, #100]	; (8000300 <MX_SPI1_Init+0x6c>)
 800029c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <MX_SPI1_Init+0x68>)
 80002a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <MX_SPI1_Init+0x68>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <MX_SPI1_Init+0x68>)
 80002ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80002b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <MX_SPI1_Init+0x68>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_SPI1_Init+0x68>)
 80002bc:	2200      	movs	r2, #0
 80002be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <MX_SPI1_Init+0x68>)
 80002c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_SPI1_Init+0x68>)
 80002ca:	2210      	movs	r2, #16
 80002cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <MX_SPI1_Init+0x68>)
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_SPI1_Init+0x68>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <MX_SPI1_Init+0x68>)
 80002dc:	2200      	movs	r2, #0
 80002de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_SPI1_Init+0x68>)
 80002e2:	220a      	movs	r2, #10
 80002e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_SPI1_Init+0x68>)
 80002e8:	f003 fc0e 	bl	8003b08 <HAL_SPI_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80002f2:	f000 f9e3 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	200003b4 	.word	0x200003b4
 8000300:	40013000 	.word	0x40013000

08000304 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	463b      	mov	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <MX_TIM2_Init+0x94>)
 8000322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_TIM2_Init+0x94>)
 800032a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800032e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000330:	4b19      	ldr	r3, [pc, #100]	; (8000398 <MX_TIM2_Init+0x94>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (10000 / LA_FADE_TICK_RATE) - 1;
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_TIM2_Init+0x94>)
 8000338:	22a5      	movs	r2, #165	; 0xa5
 800033a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <MX_TIM2_Init+0x94>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_TIM2_Init+0x94>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000348:	4813      	ldr	r0, [pc, #76]	; (8000398 <MX_TIM2_Init+0x94>)
 800034a:	f003 fc61 	bl	8003c10 <HAL_TIM_Base_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000354:	f000 f9b2 	bl	80006bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4619      	mov	r1, r3
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_TIM2_Init+0x94>)
 8000366:	f003 ff89 	bl	800427c <HAL_TIM_ConfigClockSource>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000370:	f000 f9a4 	bl	80006bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000374:	2300      	movs	r3, #0
 8000376:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800037c:	463b      	mov	r3, r7
 800037e:	4619      	mov	r1, r3
 8000380:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_TIM2_Init+0x94>)
 8000382:	f004 fcd7 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800038c:	f000 f996 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	3718      	adds	r7, #24
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	2000040c 	.word	0x2000040c

0800039c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08e      	sub	sp, #56	; 0x38
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b0:	f107 0320 	add.w	r3, r7, #32
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	615a      	str	r2, [r3, #20]
 80003ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <MX_TIM3_Init+0xe4>)
 80003ce:	4a2d      	ldr	r2, [pc, #180]	; (8000484 <MX_TIM3_Init+0xe8>)
 80003d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = LA_TRANSFER_PRESCALAR - 1;
 80003d2:	4b2b      	ldr	r3, [pc, #172]	; (8000480 <MX_TIM3_Init+0xe4>)
 80003d4:	2207      	movs	r2, #7
 80003d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b29      	ldr	r3, [pc, #164]	; (8000480 <MX_TIM3_Init+0xe4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18 - 1;
 80003de:	4b28      	ldr	r3, [pc, #160]	; (8000480 <MX_TIM3_Init+0xe4>)
 80003e0:	2211      	movs	r2, #17
 80003e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e4:	4b26      	ldr	r3, [pc, #152]	; (8000480 <MX_TIM3_Init+0xe4>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ea:	4b25      	ldr	r3, [pc, #148]	; (8000480 <MX_TIM3_Init+0xe4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003f0:	4823      	ldr	r0, [pc, #140]	; (8000480 <MX_TIM3_Init+0xe4>)
 80003f2:	f003 fc0d 	bl	8003c10 <HAL_TIM_Base_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80003fc:	f000 f95e 	bl	80006bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000404:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040a:	4619      	mov	r1, r3
 800040c:	481c      	ldr	r0, [pc, #112]	; (8000480 <MX_TIM3_Init+0xe4>)
 800040e:	f003 ff35 	bl	800427c <HAL_TIM_ConfigClockSource>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000418:	f000 f950 	bl	80006bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800041c:	4818      	ldr	r0, [pc, #96]	; (8000480 <MX_TIM3_Init+0xe4>)
 800041e:	f003 fca5 	bl	8003d6c <HAL_TIM_OC_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000428:	f000 f948 	bl	80006bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800042c:	2320      	movs	r3, #32
 800042e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000430:	2300      	movs	r3, #0
 8000432:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000434:	f107 0320 	add.w	r3, r7, #32
 8000438:	4619      	mov	r1, r3
 800043a:	4811      	ldr	r0, [pc, #68]	; (8000480 <MX_TIM3_Init+0xe4>)
 800043c:	f004 fc7a 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000446:	f000 f939 	bl	80006bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800044a:	2330      	movs	r3, #48	; 0x30
 800044c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000452:	2302      	movs	r3, #2
 8000454:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	220c      	movs	r2, #12
 800045e:	4619      	mov	r1, r3
 8000460:	4807      	ldr	r0, [pc, #28]	; (8000480 <MX_TIM3_Init+0xe4>)
 8000462:	f003 feb3 	bl	80041cc <HAL_TIM_OC_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800046c:	f000 f926 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000470:	4803      	ldr	r0, [pc, #12]	; (8000480 <MX_TIM3_Init+0xe4>)
 8000472:	f000 fa09 	bl	8000888 <HAL_TIM_MspPostInit>

}
 8000476:	bf00      	nop
 8000478:	3738      	adds	r7, #56	; 0x38
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200004c0 	.word	0x200004c0
 8000484:	40000400 	.word	0x40000400

08000488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 800048e:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <MX_USART1_UART_Init+0x50>)
 8000490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 8000494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004be:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_USART1_UART_Init+0x4c>)
 80004c0:	f004 fcb1 	bl	8004e26 <HAL_UART_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004ca:	f000 f8f7 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200005b8 	.word	0x200005b8
 80004d8:	40013800 	.word	0x40013800

080004dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <MX_USART2_UART_Init+0x50>)
 80004e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 80004e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 8000502:	220c      	movs	r2, #12
 8000504:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_USART2_UART_Init+0x4c>)
 8000514:	f004 fc87 	bl	8004e26 <HAL_UART_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800051e:	f000 f8cd 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200005fc 	.word	0x200005fc
 800052c:	40004400 	.word	0x40004400

08000530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_DMA_Init+0x38>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <MX_DMA_Init+0x38>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_DMA_Init+0x38>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2105      	movs	r1, #5
 8000552:	200d      	movs	r0, #13
 8000554:	f000 fcdf 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000558:	200d      	movs	r0, #13
 800055a:	f000 fcf8 	bl	8000f4e <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_GPIO_Init+0x58>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <MX_GPIO_Init+0x58>)
 8000578:	f043 0320 	orr.w	r3, r3, #32
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_GPIO_Init+0x58>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_GPIO_Init+0x58>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <MX_GPIO_Init+0x58>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_GPIO_Init+0x58>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_GPIO_Init+0x58>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MX_GPIO_Init+0x58>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MX_GPIO_Init+0x58>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000

080005c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08e      	sub	sp, #56	; 0x38
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80005d0:	f00c fe9c 	bl	800d30c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  // init laser array
  const LaserArray_Config_t la_config = {
 80005d4:	4b28      	ldr	r3, [pc, #160]	; (8000678 <StartDefaultTask+0xb0>)
 80005d6:	f107 041c 	add.w	r4, r7, #28
 80005da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          .hspi = &hspi1,
          .htim_transfer = &htim3,
          .htim_fade = &htim2,
          .rclk_channel = TIM_CHANNEL_4
  };
  HALT_ON_ERROR(LaserArray_Init(&la, &la_config),
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4619      	mov	r1, r3
 80005e6:	4825      	ldr	r0, [pc, #148]	; (800067c <StartDefaultTask+0xb4>)
 80005e8:	f007 fec0 	bl	800836c <LaserArray_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf14      	ite	ne
 80005fa:	2301      	movne	r3, #1
 80005fc:	2300      	moveq	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d014      	beq.n	800062e <StartDefaultTask+0x66>
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <StartDefaultTask+0xb8>)
 8000606:	f107 0408 	add.w	r4, r7, #8
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	6023      	str	r3, [r4, #0]
 8000614:	6979      	ldr	r1, [r7, #20]
 8000616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 8000620:	4a18      	ldr	r2, [pc, #96]	; (8000684 <StartDefaultTask+0xbc>)
 8000622:	4819      	ldr	r0, [pc, #100]	; (8000688 <StartDefaultTask+0xc0>)
 8000624:	f00d fc4e 	bl	800dec4 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000628:	b672      	cpsid	i
}
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <StartDefaultTask+0x64>
          "Failed to initialize laser array");

  /* Infinite loop */
  for(;;)
  {
      LaserArray_FadeBrightness(&la, 30, 63, 1000);
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	223f      	movs	r2, #63	; 0x3f
 8000634:	211e      	movs	r1, #30
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <StartDefaultTask+0xb4>)
 8000638:	f007 ffe6 	bl	8008608 <LaserArray_FadeBrightness>
      LaserArray_FadeBrightness(&la, 31, 0, 1000);
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	2200      	movs	r2, #0
 8000642:	211f      	movs	r1, #31
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <StartDefaultTask+0xb4>)
 8000646:	f007 ffdf 	bl	8008608 <LaserArray_FadeBrightness>
      osDelay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f009 fcdd 	bl	800a00c <osDelay>

      LaserArray_FadeBrightness(&la, 30, 0, 1000);
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	2200      	movs	r2, #0
 8000658:	211e      	movs	r1, #30
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <StartDefaultTask+0xb4>)
 800065c:	f007 ffd4 	bl	8008608 <LaserArray_FadeBrightness>
      LaserArray_FadeBrightness(&la, 31, 63, 1000);
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	223f      	movs	r2, #63	; 0x3f
 8000666:	211f      	movs	r1, #31
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <StartDefaultTask+0xb4>)
 800066a:	f007 ffcd 	bl	8008608 <LaserArray_FadeBrightness>
      osDelay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f009 fccb 	bl	800a00c <osDelay>
      LaserArray_FadeBrightness(&la, 30, 63, 1000);
 8000676:	e7da      	b.n	800062e <StartDefaultTask+0x66>
 8000678:	0800ec44 	.word	0x0800ec44
 800067c:	20000644 	.word	0x20000644
 8000680:	0800ec54 	.word	0x0800ec54
 8000684:	0800ebf4 	.word	0x0800ebf4
 8000688:	0800ec08 	.word	0x0800ec08

0800068c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800069e:	f000 fb69 	bl	8000d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  LaserArray_TIM_PeriodElapsedHandler(&la, htim);
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80006a6:	f008 f81d 	bl	80086e4 <LaserArray_TIM_PeriodElapsedHandler>

  /* USER CODE END Callback 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40000800 	.word	0x40000800
 80006b8:	20000644 	.word	0x20000644

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <HAL_MspInit+0x68>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <HAL_MspInit+0x68>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_MspInit+0x68>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_MspInit+0x68>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <HAL_MspInit+0x68>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x68>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	210f      	movs	r1, #15
 8000702:	f06f 0001 	mvn.w	r0, #1
 8000706:	f000 fc06 	bl	8000f16 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_MspInit+0x6c>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_MspInit+0x6c>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000

08000738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <HAL_SPI_MspInit+0x70>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d123      	bne.n	80007a0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_SPI_MspInit+0x74>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <HAL_SPI_MspInit+0x74>)
 800075e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_SPI_MspInit+0x74>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_SPI_MspInit+0x74>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <HAL_SPI_MspInit+0x74>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_SPI_MspInit+0x74>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000788:	23a0      	movs	r3, #160	; 0xa0
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <HAL_SPI_MspInit+0x78>)
 800079c:	f000 fe84 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40013000 	.word	0x40013000
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010800 	.word	0x40010800

080007b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c4:	d114      	bne.n	80007f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <HAL_TIM_Base_MspInit+0xc4>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <HAL_TIM_Base_MspInit+0xc4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <HAL_TIM_Base_MspInit+0xc4>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	201c      	movs	r0, #28
 80007e4:	f000 fb97 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007e8:	201c      	movs	r0, #28
 80007ea:	f000 fbb0 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007ee:	e03f      	b.n	8000870 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM3)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a21      	ldr	r2, [pc, #132]	; (800087c <HAL_TIM_Base_MspInit+0xc8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d13a      	bne.n	8000870 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <HAL_TIM_Base_MspInit+0xc4>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <HAL_TIM_Base_MspInit+0xc4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_TIM_Base_MspInit+0xc4>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <HAL_TIM_Base_MspInit+0xd0>)
 8000816:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 800081a:	2210      	movs	r2, #16
 800081c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 800082c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000830:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 8000834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000838:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 800083c:	2220      	movs	r2, #32
 800083e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 8000842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000846:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 800084a:	f000 fb8f 	bl	8000f6c <HAL_DMA_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8000854:	f7ff ff32 	bl	80006bc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a09      	ldr	r2, [pc, #36]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 800085c:	631a      	str	r2, [r3, #48]	; 0x30
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a06      	ldr	r2, [pc, #24]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 8000868:	621a      	str	r2, [r3, #32]
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <HAL_TIM_Base_MspInit+0xcc>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	40000400 	.word	0x40000400
 8000880:	20000574 	.word	0x20000574
 8000884:	40020030 	.word	0x40020030

08000888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_TIM_MspPostInit+0x58>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d117      	bne.n	80008d8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_TIM_MspPostInit+0x5c>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_TIM_MspPostInit+0x5c>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_TIM_MspPostInit+0x5c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008c0:	2302      	movs	r3, #2
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_TIM_MspPostInit+0x60>)
 80008d4:	f000 fde8 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40000400 	.word	0x40000400
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010c00 	.word	0x40010c00

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0318 	add.w	r3, r7, #24
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a3b      	ldr	r2, [pc, #236]	; (80009f4 <HAL_UART_MspInit+0x108>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d13a      	bne.n	8000982 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090c:	4b3a      	ldr	r3, [pc, #232]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a39      	ldr	r2, [pc, #228]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800093c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	4619      	mov	r1, r3
 8000950:	482a      	ldr	r0, [pc, #168]	; (80009fc <HAL_UART_MspInit+0x110>)
 8000952:	f000 fda9 	bl	80014a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	4619      	mov	r1, r3
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <HAL_UART_MspInit+0x110>)
 800096c:	f000 fd9c 	bl	80014a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2105      	movs	r1, #5
 8000974:	2025      	movs	r0, #37	; 0x25
 8000976:	f000 face 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097a:	2025      	movs	r0, #37	; 0x25
 800097c:	f000 fae7 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000980:	e034      	b.n	80009ec <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <HAL_UART_MspInit+0x114>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d12f      	bne.n	80009ec <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 8000992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000996:	61d3      	str	r3, [r2, #28]
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <HAL_UART_MspInit+0x10c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009bc:	2304      	movs	r3, #4
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0318 	add.w	r3, r7, #24
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <HAL_UART_MspInit+0x110>)
 80009d0:	f000 fd6a 	bl	80014a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d4:	2308      	movs	r3, #8
 80009d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <HAL_UART_MspInit+0x110>)
 80009e8:	f000 fd5e 	bl	80014a8 <HAL_GPIO_Init>
}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	; 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010800 	.word	0x40010800
 8000a00:	40004400 	.word	0x40004400

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08e      	sub	sp, #56	; 0x38
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <HAL_InitTick+0xf0>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a35      	ldr	r2, [pc, #212]	; (8000af4 <HAL_InitTick+0xf0>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <HAL_InitTick+0xf0>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a32:	f107 0210 	add.w	r2, r7, #16
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 ff5f 	bl	8003900 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d103      	bne.n	8000a54 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a4c:	f002 ff30 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8000a50:	6378      	str	r0, [r7, #52]	; 0x34
 8000a52:	e004      	b.n	8000a5e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a54:	f002 ff2c 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a60:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <HAL_InitTick+0xf4>)
 8000a62:	fba2 2303 	umull	r2, r3, r2, r3
 8000a66:	0c9b      	lsrs	r3, r3, #18
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_InitTick+0xf8>)
 8000a6e:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <HAL_InitTick+0xfc>)
 8000a70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <HAL_InitTick+0xf8>)
 8000a74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a78:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a7a:	4a20      	ldr	r2, [pc, #128]	; (8000afc <HAL_InitTick+0xf8>)
 8000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <HAL_InitTick+0xf8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_InitTick+0xf8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <HAL_InitTick+0xf8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <HAL_InitTick+0xf8>)
 8000a94:	f003 f8bc 	bl	8003c10 <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d11b      	bne.n	8000ade <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000aa6:	4815      	ldr	r0, [pc, #84]	; (8000afc <HAL_InitTick+0xf8>)
 8000aa8:	f003 f90e 	bl	8003cc8 <HAL_TIM_Base_Start_IT>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ab2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d111      	bne.n	8000ade <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000aba:	201e      	movs	r0, #30
 8000abc:	f000 fa47 	bl	8000f4e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d808      	bhi.n	8000ad8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	201e      	movs	r0, #30
 8000acc:	f000 fa23 	bl	8000f16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <HAL_InitTick+0x100>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e002      	b.n	8000ade <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }
  HAL_TIM_RegisterCallback(&htim4, HAL_TIM_PERIOD_ELAPSED_CB_ID, TimeBase_TIM_PeriodElapsedCallback);
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_InitTick+0x104>)
 8000ae0:	210e      	movs	r1, #14
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <HAL_InitTick+0xf8>)
 8000ae4:	f003 fce0 	bl	80044a8 <HAL_TIM_RegisterCallback>

 /* Return function status */
  return status;
 8000ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	431bde83 	.word	0x431bde83
 8000afc:	200008d4 	.word	0x200008d4
 8000b00:	40000800 	.word	0x40000800
 8000b04:	20000004 	.word	0x20000004
 8000b08:	08000b0d 	.word	0x08000b0d

08000b0c <TimeBase_TIM_PeriodElapsedCallback>:
  * @param  htim TIM handle
  * @retval None
  */

void TimeBase_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000b14:	f000 f92e 	bl	8000d74 <HAL_IncTick>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
	...

08000b4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <DMA1_Channel3_IRQHandler+0x10>)
 8000b52:	f000 fb75 	bl	8001240 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000574 	.word	0x20000574

08000b60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b66:	f000 ff54 	bl	8001a12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20002860 	.word	0x20002860

08000b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <TIM2_IRQHandler+0x10>)
 8000b7a:	f003 f9ff 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000040c 	.word	0x2000040c

08000b88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM4_IRQHandler+0x10>)
 8000b8e:	f003 f9f5 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200008d4 	.word	0x200008d4

08000b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <USART1_IRQHandler+0x10>)
 8000ba2:	f004 fa1f 	bl	8004fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200005b8 	.word	0x200005b8

08000bb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
  }

  return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e009      	b.n	8000c10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff faa3 	bl	8000150 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf1      	blt.n	8000bfc <_write+0x12>
  }
  return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_close>:

int _close(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c48:	605a      	str	r2, [r3, #4]
  return 0;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <_isatty>:

int _isatty(int file)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f00c ff38 	bl	800db28 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20005000 	.word	0x20005000
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	20000988 	.word	0x20000988
 8000cec:	20002d60 	.word	0x20002d60

08000cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	; (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	; (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d22:	f7ff ffe5 	bl	8000cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f00c fffb 	bl	800dd20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fa31 	bl	8000190 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 8000d38:	0800eef4 	.word	0x0800eef4
  ldr r2, =_sbss
 8000d3c:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 8000d40:	20002d5c 	.word	0x20002d5c

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f8d1 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f7ff fe50 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fcb0 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <HAL_IncTick+0x20>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000008 	.word	0x20000008
 8000d94:	2000098c 	.word	0x2000098c

08000d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	2000098c 	.word	0x2000098c

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4906      	ldr	r1, [pc, #24]	; (8000e44 <__NVIC_EnableIRQ+0x34>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff4f 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff64 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ffb2 	bl	8000e9c <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff81 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff57 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e043      	b.n	800100a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_DMA_Init+0xa8>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a22      	ldr	r2, [pc, #136]	; (8001018 <HAL_DMA_Init+0xac>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	009a      	lsls	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	; (800101c <HAL_DMA_Init+0xb0>)
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	bffdfff8 	.word	0xbffdfff8
 8001018:	cccccccd 	.word	0xcccccccd
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_DMA_Start_IT+0x20>
 800103c:	2302      	movs	r3, #2
 800103e:	e04a      	b.n	80010d6 <HAL_DMA_Start_IT+0xb6>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800104e:	2b01      	cmp	r3, #1
 8001050:	d13a      	bne.n	80010c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2202      	movs	r2, #2
 8001056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f000 f9e8 	bl	800144c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 020e 	orr.w	r2, r2, #14
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e00f      	b.n	80010b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0204 	bic.w	r2, r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 020a 	orr.w	r2, r2, #10
 80010b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 0201 	orr.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e005      	b.n	80010d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010d0:	2302      	movs	r3, #2
 80010d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d008      	beq.n	8001106 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e020      	b.n	8001148 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 020e 	bic.w	r2, r2, #14
 8001114:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001146:	7bfb      	ldrb	r3, [r7, #15]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
	...

08001154 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001166:	2b02      	cmp	r3, #2
 8001168:	d005      	beq.n	8001176 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2204      	movs	r2, #4
 800116e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e051      	b.n	800121a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020e 	bic.w	r2, r2, #14
 8001184:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <HAL_DMA_Abort_IT+0xd0>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d029      	beq.n	80011f4 <HAL_DMA_Abort_IT+0xa0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a20      	ldr	r2, [pc, #128]	; (8001228 <HAL_DMA_Abort_IT+0xd4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d022      	beq.n	80011f0 <HAL_DMA_Abort_IT+0x9c>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_DMA_Abort_IT+0xd8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d01a      	beq.n	80011ea <HAL_DMA_Abort_IT+0x96>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_DMA_Abort_IT+0xdc>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d012      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x90>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_DMA_Abort_IT+0xe0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00a      	beq.n	80011de <HAL_DMA_Abort_IT+0x8a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <HAL_DMA_Abort_IT+0xe4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d102      	bne.n	80011d8 <HAL_DMA_Abort_IT+0x84>
 80011d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011d6:	e00e      	b.n	80011f6 <HAL_DMA_Abort_IT+0xa2>
 80011d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011dc:	e00b      	b.n	80011f6 <HAL_DMA_Abort_IT+0xa2>
 80011de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e2:	e008      	b.n	80011f6 <HAL_DMA_Abort_IT+0xa2>
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	e005      	b.n	80011f6 <HAL_DMA_Abort_IT+0xa2>
 80011ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ee:	e002      	b.n	80011f6 <HAL_DMA_Abort_IT+0xa2>
 80011f0:	2310      	movs	r3, #16
 80011f2:	e000      	b.n	80011f6 <HAL_DMA_Abort_IT+0xa2>
 80011f4:	2301      	movs	r3, #1
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_DMA_Abort_IT+0xe8>)
 80011f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
    } 
  }
  return status;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40020008 	.word	0x40020008
 8001228:	4002001c 	.word	0x4002001c
 800122c:	40020030 	.word	0x40020030
 8001230:	40020044 	.word	0x40020044
 8001234:	40020058 	.word	0x40020058
 8001238:	4002006c 	.word	0x4002006c
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2204      	movs	r2, #4
 800125e:	409a      	lsls	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d04f      	beq.n	8001308 <HAL_DMA_IRQHandler+0xc8>
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	d04a      	beq.n	8001308 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0320 	and.w	r3, r3, #32
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0204 	bic.w	r2, r2, #4
 800128e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a66      	ldr	r2, [pc, #408]	; (8001430 <HAL_DMA_IRQHandler+0x1f0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d029      	beq.n	80012ee <HAL_DMA_IRQHandler+0xae>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_DMA_IRQHandler+0x1f4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d022      	beq.n	80012ea <HAL_DMA_IRQHandler+0xaa>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a63      	ldr	r2, [pc, #396]	; (8001438 <HAL_DMA_IRQHandler+0x1f8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d01a      	beq.n	80012e4 <HAL_DMA_IRQHandler+0xa4>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a62      	ldr	r2, [pc, #392]	; (800143c <HAL_DMA_IRQHandler+0x1fc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d012      	beq.n	80012de <HAL_DMA_IRQHandler+0x9e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a60      	ldr	r2, [pc, #384]	; (8001440 <HAL_DMA_IRQHandler+0x200>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00a      	beq.n	80012d8 <HAL_DMA_IRQHandler+0x98>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_DMA_IRQHandler+0x204>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d102      	bne.n	80012d2 <HAL_DMA_IRQHandler+0x92>
 80012cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d0:	e00e      	b.n	80012f0 <HAL_DMA_IRQHandler+0xb0>
 80012d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012d6:	e00b      	b.n	80012f0 <HAL_DMA_IRQHandler+0xb0>
 80012d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012dc:	e008      	b.n	80012f0 <HAL_DMA_IRQHandler+0xb0>
 80012de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012e2:	e005      	b.n	80012f0 <HAL_DMA_IRQHandler+0xb0>
 80012e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e8:	e002      	b.n	80012f0 <HAL_DMA_IRQHandler+0xb0>
 80012ea:	2340      	movs	r3, #64	; 0x40
 80012ec:	e000      	b.n	80012f0 <HAL_DMA_IRQHandler+0xb0>
 80012ee:	2304      	movs	r3, #4
 80012f0:	4a55      	ldr	r2, [pc, #340]	; (8001448 <HAL_DMA_IRQHandler+0x208>)
 80012f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8094 	beq.w	8001426 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001306:	e08e      	b.n	8001426 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	2202      	movs	r2, #2
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d056      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x186>
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d051      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10b      	bne.n	8001348 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020a 	bic.w	r2, r2, #10
 800133e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a38      	ldr	r2, [pc, #224]	; (8001430 <HAL_DMA_IRQHandler+0x1f0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d029      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x166>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a37      	ldr	r2, [pc, #220]	; (8001434 <HAL_DMA_IRQHandler+0x1f4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d022      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x162>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a35      	ldr	r2, [pc, #212]	; (8001438 <HAL_DMA_IRQHandler+0x1f8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d01a      	beq.n	800139c <HAL_DMA_IRQHandler+0x15c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a34      	ldr	r2, [pc, #208]	; (800143c <HAL_DMA_IRQHandler+0x1fc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d012      	beq.n	8001396 <HAL_DMA_IRQHandler+0x156>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a32      	ldr	r2, [pc, #200]	; (8001440 <HAL_DMA_IRQHandler+0x200>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00a      	beq.n	8001390 <HAL_DMA_IRQHandler+0x150>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a31      	ldr	r2, [pc, #196]	; (8001444 <HAL_DMA_IRQHandler+0x204>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d102      	bne.n	800138a <HAL_DMA_IRQHandler+0x14a>
 8001384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001388:	e00e      	b.n	80013a8 <HAL_DMA_IRQHandler+0x168>
 800138a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800138e:	e00b      	b.n	80013a8 <HAL_DMA_IRQHandler+0x168>
 8001390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001394:	e008      	b.n	80013a8 <HAL_DMA_IRQHandler+0x168>
 8001396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139a:	e005      	b.n	80013a8 <HAL_DMA_IRQHandler+0x168>
 800139c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a0:	e002      	b.n	80013a8 <HAL_DMA_IRQHandler+0x168>
 80013a2:	2320      	movs	r3, #32
 80013a4:	e000      	b.n	80013a8 <HAL_DMA_IRQHandler+0x168>
 80013a6:	2302      	movs	r3, #2
 80013a8:	4a27      	ldr	r2, [pc, #156]	; (8001448 <HAL_DMA_IRQHandler+0x208>)
 80013aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d034      	beq.n	8001426 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013c4:	e02f      	b.n	8001426 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2208      	movs	r2, #8
 80013cc:	409a      	lsls	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d028      	beq.n	8001428 <HAL_DMA_IRQHandler+0x1e8>
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d023      	beq.n	8001428 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 020e 	bic.w	r2, r2, #14
 80013ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
    }
  }
  return;
 8001426:	bf00      	nop
 8001428:	bf00      	nop
}
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020008 	.word	0x40020008
 8001434:	4002001c 	.word	0x4002001c
 8001438:	40020030 	.word	0x40020030
 800143c:	40020044 	.word	0x40020044
 8001440:	40020058 	.word	0x40020058
 8001444:	4002006c 	.word	0x4002006c
 8001448:	40020000 	.word	0x40020000

0800144c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b10      	cmp	r3, #16
 8001478:	d108      	bne.n	800148c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800148a:	e007      	b.n	800149c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	60da      	str	r2, [r3, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b08b      	sub	sp, #44	; 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e169      	b.n	8001790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014bc:	2201      	movs	r2, #1
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8158 	bne.w	800178a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a9a      	ldr	r2, [pc, #616]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d05e      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014e4:	4a98      	ldr	r2, [pc, #608]	; (8001748 <HAL_GPIO_Init+0x2a0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d875      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 80014ea:	4a98      	ldr	r2, [pc, #608]	; (800174c <HAL_GPIO_Init+0x2a4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d058      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014f0:	4a96      	ldr	r2, [pc, #600]	; (800174c <HAL_GPIO_Init+0x2a4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d86f      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 80014f6:	4a96      	ldr	r2, [pc, #600]	; (8001750 <HAL_GPIO_Init+0x2a8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d052      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 80014fc:	4a94      	ldr	r2, [pc, #592]	; (8001750 <HAL_GPIO_Init+0x2a8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d869      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 8001502:	4a94      	ldr	r2, [pc, #592]	; (8001754 <HAL_GPIO_Init+0x2ac>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d04c      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 8001508:	4a92      	ldr	r2, [pc, #584]	; (8001754 <HAL_GPIO_Init+0x2ac>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d863      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 800150e:	4a92      	ldr	r2, [pc, #584]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d046      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
 8001514:	4a90      	ldr	r2, [pc, #576]	; (8001758 <HAL_GPIO_Init+0x2b0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d85d      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 800151a:	2b12      	cmp	r3, #18
 800151c:	d82a      	bhi.n	8001574 <HAL_GPIO_Init+0xcc>
 800151e:	2b12      	cmp	r3, #18
 8001520:	d859      	bhi.n	80015d6 <HAL_GPIO_Init+0x12e>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <HAL_GPIO_Init+0x80>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	080015a3 	.word	0x080015a3
 800152c:	0800157d 	.word	0x0800157d
 8001530:	0800158f 	.word	0x0800158f
 8001534:	080015d1 	.word	0x080015d1
 8001538:	080015d7 	.word	0x080015d7
 800153c:	080015d7 	.word	0x080015d7
 8001540:	080015d7 	.word	0x080015d7
 8001544:	080015d7 	.word	0x080015d7
 8001548:	080015d7 	.word	0x080015d7
 800154c:	080015d7 	.word	0x080015d7
 8001550:	080015d7 	.word	0x080015d7
 8001554:	080015d7 	.word	0x080015d7
 8001558:	080015d7 	.word	0x080015d7
 800155c:	080015d7 	.word	0x080015d7
 8001560:	080015d7 	.word	0x080015d7
 8001564:	080015d7 	.word	0x080015d7
 8001568:	080015d7 	.word	0x080015d7
 800156c:	08001585 	.word	0x08001585
 8001570:	08001599 	.word	0x08001599
 8001574:	4a79      	ldr	r2, [pc, #484]	; (800175c <HAL_GPIO_Init+0x2b4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800157a:	e02c      	b.n	80015d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e029      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	3304      	adds	r3, #4
 800158a:	623b      	str	r3, [r7, #32]
          break;
 800158c:	e024      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	3308      	adds	r3, #8
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e01f      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	330c      	adds	r3, #12
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e01a      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015aa:	2304      	movs	r3, #4
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e013      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b8:	2308      	movs	r3, #8
 80015ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	611a      	str	r2, [r3, #16]
          break;
 80015c2:	e009      	b.n	80015d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c4:	2308      	movs	r3, #8
 80015c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69fa      	ldr	r2, [r7, #28]
 80015cc:	615a      	str	r2, [r3, #20]
          break;
 80015ce:	e003      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x130>
          break;
 80015d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	; 0xff
 80015dc:	d801      	bhi.n	80015e2 <HAL_GPIO_Init+0x13a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	e001      	b.n	80015e6 <HAL_GPIO_Init+0x13e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3304      	adds	r3, #4
 80015e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d802      	bhi.n	80015f4 <HAL_GPIO_Init+0x14c>
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	e002      	b.n	80015fa <HAL_GPIO_Init+0x152>
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	3b08      	subs	r3, #8
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	210f      	movs	r1, #15
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	fa01 f303 	lsl.w	r3, r1, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	401a      	ands	r2, r3
 800160c:	6a39      	ldr	r1, [r7, #32]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80b1 	beq.w	800178a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001628:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_GPIO_Init+0x2b8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_GPIO_Init+0x2b8>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_GPIO_Init+0x2b8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001640:	4a48      	ldr	r2, [pc, #288]	; (8001764 <HAL_GPIO_Init+0x2bc>)
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a40      	ldr	r2, [pc, #256]	; (8001768 <HAL_GPIO_Init+0x2c0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_GPIO_Init+0x1ec>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3f      	ldr	r2, [pc, #252]	; (800176c <HAL_GPIO_Init+0x2c4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_GPIO_Init+0x1e8>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a3e      	ldr	r2, [pc, #248]	; (8001770 <HAL_GPIO_Init+0x2c8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x1e4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3d      	ldr	r2, [pc, #244]	; (8001774 <HAL_GPIO_Init+0x2cc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_Init+0x1e0>
 8001684:	2303      	movs	r3, #3
 8001686:	e006      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 8001688:	2304      	movs	r3, #4
 800168a:	e004      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 800168c:	2302      	movs	r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_GPIO_Init+0x1ee>
 8001694:	2300      	movs	r3, #0
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	f002 0203 	and.w	r2, r2, #3
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	4093      	lsls	r3, r2
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a6:	492f      	ldr	r1, [pc, #188]	; (8001764 <HAL_GPIO_Init+0x2bc>)
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c0:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	492c      	ldr	r1, [pc, #176]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	4928      	ldr	r1, [pc, #160]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4922      	ldr	r1, [pc, #136]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	491e      	ldr	r1, [pc, #120]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 8001700:	4013      	ands	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4918      	ldr	r1, [pc, #96]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	4914      	ldr	r1, [pc, #80]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 8001728:	4013      	ands	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d021      	beq.n	800177c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
 8001744:	e021      	b.n	800178a <HAL_GPIO_Init+0x2e2>
 8001746:	bf00      	nop
 8001748:	10320000 	.word	0x10320000
 800174c:	10310000 	.word	0x10310000
 8001750:	10220000 	.word	0x10220000
 8001754:	10210000 	.word	0x10210000
 8001758:	10120000 	.word	0x10120000
 800175c:	10110000 	.word	0x10110000
 8001760:	40021000 	.word	0x40021000
 8001764:	40010000 	.word	0x40010000
 8001768:	40010800 	.word	0x40010800
 800176c:	40010c00 	.word	0x40010c00
 8001770:	40011000 	.word	0x40011000
 8001774:	40011400 	.word	0x40011400
 8001778:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_GPIO_Init+0x304>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	43db      	mvns	r3, r3
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <HAL_GPIO_Init+0x304>)
 8001786:	4013      	ands	r3, r2
 8001788:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	3301      	adds	r3, #1
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	f47f ae8e 	bne.w	80014bc <HAL_GPIO_Init+0x14>
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	372c      	adds	r7, #44	; 0x2c
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af06      	add	r7, sp, #24
 80017b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0fd      	b.n	80019be <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f00b ff28 	bl	800d62c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2203      	movs	r2, #3
 80017e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 f819 	bl	8005820 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	687e      	ldr	r6, [r7, #4]
 80017f6:	466d      	mov	r5, sp
 80017f8:	f106 0410 	add.w	r4, r6, #16
 80017fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	602b      	str	r3, [r5, #0]
 8001804:	1d33      	adds	r3, r6, #4
 8001806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f003 ffe3 	bl	80057d4 <USB_CoreInit>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0ce      	b.n	80019be <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f004 f814 	bl	8005854 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e04c      	b.n	80018cc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	3301      	adds	r3, #1
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b298      	uxth	r0, r3
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3336      	adds	r3, #54	; 0x36
 8001870:	4602      	mov	r2, r0
 8001872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3303      	adds	r3, #3
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3338      	adds	r3, #56	; 0x38
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	333c      	adds	r3, #60	; 0x3c
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3340      	adds	r3, #64	; 0x40
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	3301      	adds	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3ad      	bcc.n	8001832 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	e044      	b.n	8001966 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001908:	7bfa      	ldrb	r2, [r7, #15]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800191e:	7bfa      	ldrb	r2, [r7, #15]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3301      	adds	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	d3b5      	bcc.n	80018dc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	687e      	ldr	r6, [r7, #4]
 8001978:	466d      	mov	r5, sp
 800197a:	f106 0410 	add.w	r4, r6, #16
 800197e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	602b      	str	r3, [r5, #0]
 8001986:	1d33      	adds	r3, r6, #4
 8001988:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198a:	6838      	ldr	r0, [r7, #0]
 800198c:	f003 ff6e 	bl	800586c <USB_DevInit>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00d      	b.n	80019be <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f006 fc20 	bl	80081fc <USB_DevDisconnect>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_PCD_Start+0x16>
 80019d8:	2302      	movs	r3, #2
 80019da:	e016      	b.n	8001a0a <HAL_PCD_Start+0x44>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 ff03 	bl	80057f4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019ee:	2101      	movs	r1, #1
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f00c f862 	bl	800daba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f006 fbf4 	bl	80081e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f006 fbf6 	bl	8008210 <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2e:	d102      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fb48 	bl	80020c6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 fbe8 	bl	8008210 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	d112      	bne.n	8001a72 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f00b fe5c 	bl	800d722 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f923 	bl	8001cb8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f006 fbca 	bl	8008210 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a86:	d10b      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a9a:	b292      	uxth	r2, r2
 8001a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f006 fbb3 	bl	8008210 <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab4:	d10b      	bne.n	8001ace <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac8:	b292      	uxth	r2, r2
 8001aca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f006 fb9c 	bl	8008210 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae2:	d126      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0204 	bic.w	r2, r2, #4
 8001af6:	b292      	uxth	r2, r2
 8001af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0208 	bic.w	r2, r2, #8
 8001b0e:	b292      	uxth	r2, r2
 8001b10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f00b fe3d 	bl	800d794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b2c:	b292      	uxth	r2, r2
 8001b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 fb6a 	bl	8008210 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b46:	f040 8082 	bne.w	8001c4e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	77fb      	strb	r3, [r7, #31]
 8001b4e:	e010      	b.n	8001b72 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	441a      	add	r2, r3
 8001b5c:	7ffb      	ldrb	r3, [r7, #31]
 8001b5e:	8812      	ldrh	r2, [r2, #0]
 8001b60:	b292      	uxth	r2, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	3320      	adds	r3, #32
 8001b66:	443b      	add	r3, r7
 8001b68:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	77fb      	strb	r3, [r7, #31]
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	2b07      	cmp	r3, #7
 8001b76:	d9eb      	bls.n	8001b50 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ba8:	bf00      	nop
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f6      	beq.n	8001baa <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bce:	b292      	uxth	r2, r2
 8001bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	77fb      	strb	r3, [r7, #31]
 8001bd8:	e00f      	b.n	8001bfa <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4611      	mov	r1, r2
 8001be2:	7ffa      	ldrb	r2, [r7, #31]
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	440a      	add	r2, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	3320      	adds	r3, #32
 8001bec:	443b      	add	r3, r7
 8001bee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bf2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bf4:	7ffb      	ldrb	r3, [r7, #31]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	77fb      	strb	r3, [r7, #31]
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]
 8001bfc:	2b07      	cmp	r3, #7
 8001bfe:	d9ec      	bls.n	8001bda <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0208 	orr.w	r2, r2, #8
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0204 	orr.w	r2, r2, #4
 8001c42:	b292      	uxth	r2, r2
 8001c44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f00b fd89 	bl	800d760 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 fadc 	bl	8008210 <USB_ReadInterrupts>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c62:	d10e      	bne.n	8001c82 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f00b fd42 	bl	800d706 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f006 fac2 	bl	8008210 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c96:	d10b      	bne.n	8001cb0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001caa:	b292      	uxth	r2, r2
 8001cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_SetAddress+0x1a>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e013      	b.n	8001cfa <HAL_PCD_SetAddress+0x42>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f006 fa69 	bl	80081c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	4608      	mov	r0, r1
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4603      	mov	r3, r0
 8001d12:	70fb      	strb	r3, [r7, #3]
 8001d14:	460b      	mov	r3, r1
 8001d16:	803b      	strh	r3, [r7, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da0e      	bge.n	8001d46 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	705a      	strb	r2, [r3, #1]
 8001d44:	e00e      	b.n	8001d64 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 0207 	and.w	r2, r3, #7
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d70:	883a      	ldrh	r2, [r7, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	78ba      	ldrb	r2, [r7, #2]
 8001d7a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	785b      	ldrb	r3, [r3, #1]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d8e:	78bb      	ldrb	r3, [r7, #2]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d102      	bne.n	8001d9a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_PCD_EP_Open+0xa6>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e00e      	b.n	8001dc6 <HAL_PCD_EP_Open+0xc4>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fd78 	bl	80058ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	da0e      	bge.n	8001e00 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	705a      	strb	r2, [r3, #1]
 8001dfe:	e00e      	b.n	8001e1e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 0207 	and.w	r2, r3, #7
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_EP_Close+0x6a>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e00e      	b.n	8001e56 <HAL_PCD_EP_Close+0x88>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 f89a 	bl	8005f80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	f003 0207 	and.w	r2, r3, #7
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6979      	ldr	r1, [r7, #20]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 fa4c 	bl	8006358 <USB_EPStartXfer>
 8001ec0:	e005      	b.n	8001ece <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6979      	ldr	r1, [r7, #20]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 fa45 	bl	8006358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6979      	ldr	r1, [r7, #20]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 fa09 	bl	8006358 <USB_EPStartXfer>
 8001f46:	e005      	b.n	8001f54 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6979      	ldr	r1, [r7, #20]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 fa02 	bl	8006358 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 0207 	and.w	r2, r3, #7
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d901      	bls.n	8001f7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e04c      	b.n	8002016 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	da0e      	bge.n	8001fa2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	705a      	strb	r2, [r3, #1]
 8001fa0:	e00c      	b.n	8001fbc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc2:	78fb      	ldrb	r3, [r7, #3]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_PCD_EP_SetStall+0x7e>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e01c      	b.n	8002016 <HAL_PCD_EP_SetStall+0xb8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f005 ffec 	bl	8007fc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d108      	bne.n	800200c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f006 f911 	bl	800822e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	f003 020f 	and.w	r2, r3, #15
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d901      	bls.n	800203c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e040      	b.n	80020be <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800203c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da0e      	bge.n	8002062 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	705a      	strb	r2, [r3, #1]
 8002060:	e00e      	b.n	8002080 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 0207 	and.w	r2, r3, #7
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_EP_ClrStall+0x82>
 800209c:	2302      	movs	r3, #2
 800209e:	e00e      	b.n	80020be <HAL_PCD_EP_ClrStall+0xa0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f005 ffda 	bl	8008068 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08e      	sub	sp, #56	; 0x38
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020ce:	e2ec      	b.n	80026aa <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 8161 	bne.w	80023b2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d152      	bne.n	80021a0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210a:	81fb      	strh	r3, [r7, #14]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800211a:	b29b      	uxth	r3, r3
 800211c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3328      	adds	r3, #40	; 0x28
 8002122:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212c:	b29b      	uxth	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	3302      	adds	r3, #2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	441a      	add	r2, r3
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800215e:	2100      	movs	r1, #0
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f00b fab6 	bl	800d6d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 829b 	beq.w	80026aa <PCD_EP_ISR_Handler+0x5e4>
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 8296 	bne.w	80026aa <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800218a:	b2da      	uxtb	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b292      	uxth	r2, r2
 8002192:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800219e:	e284      	b.n	80026aa <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80021b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d034      	beq.n	8002224 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	3306      	adds	r3, #6
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f006 f868 	bl	80082ce <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29a      	uxth	r2, r3
 8002206:	f640 738f 	movw	r3, #3983	; 0xf8f
 800220a:	4013      	ands	r3, r2
 800220c:	823b      	strh	r3, [r7, #16]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	8a3a      	ldrh	r2, [r7, #16]
 8002214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002218:	b292      	uxth	r2, r2
 800221a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f00b fa2b 	bl	800d678 <HAL_PCD_SetupStageCallback>
 8002222:	e242      	b.n	80026aa <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002224:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002228:	2b00      	cmp	r3, #0
 800222a:	f280 823e 	bge.w	80026aa <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29a      	uxth	r2, r3
 8002236:	f640 738f 	movw	r3, #3983	; 0xf8f
 800223a:	4013      	ands	r3, r2
 800223c:	83bb      	strh	r3, [r7, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	8bba      	ldrh	r2, [r7, #28]
 8002244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002248:	b292      	uxth	r2, r2
 800224a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	3306      	adds	r3, #6
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d019      	beq.n	80022b4 <PCD_EP_ISR_Handler+0x1ee>
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d015      	beq.n	80022b4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	6959      	ldr	r1, [r3, #20]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002298:	b29b      	uxth	r3, r3
 800229a:	f006 f818 	bl	80082ce <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	441a      	add	r2, r3
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80022ac:	2100      	movs	r1, #0
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f00b f9f4 	bl	800d69c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 81f2 	bne.w	80026aa <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4413      	add	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d112      	bne.n	8002314 <PCD_EP_ISR_Handler+0x24e>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800230c:	b29a      	uxth	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	801a      	strh	r2, [r3, #0]
 8002312:	e02f      	b.n	8002374 <PCD_EP_ISR_Handler+0x2ae>
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b3e      	cmp	r3, #62	; 0x3e
 800231a:	d813      	bhi.n	8002344 <PCD_EP_ISR_Handler+0x27e>
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <PCD_EP_ISR_Handler+0x270>
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	3301      	adds	r3, #1
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	b29b      	uxth	r3, r3
 800233a:	029b      	lsls	r3, r3, #10
 800233c:	b29a      	uxth	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	e017      	b.n	8002374 <PCD_EP_ISR_Handler+0x2ae>
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <PCD_EP_ISR_Handler+0x298>
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	3b01      	subs	r3, #1
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	b29b      	uxth	r3, r3
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	b29b      	uxth	r3, r3
 8002366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800236a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236e:	b29a      	uxth	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002384:	827b      	strh	r3, [r7, #18]
 8002386:	8a7b      	ldrh	r3, [r7, #18]
 8002388:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800238c:	827b      	strh	r3, [r7, #18]
 800238e:	8a7b      	ldrh	r3, [r7, #18]
 8002390:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002394:	827b      	strh	r3, [r7, #18]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	8a7b      	ldrh	r3, [r7, #18]
 800239c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	8013      	strh	r3, [r2, #0]
 80023b0:	e17b      	b.n	80026aa <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023c4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f280 80ea 	bge.w	80025a2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023e4:	4013      	ands	r3, r2
 80023e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023fc:	b292      	uxth	r2, r2
 80023fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002400:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	7b1b      	ldrb	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d122      	bne.n	8002464 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	3306      	adds	r3, #6
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002446:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002448:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8087 	beq.w	800255e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	6959      	ldr	r1, [r3, #20]
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	88da      	ldrh	r2, [r3, #6]
 800245c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800245e:	f005 ff36 	bl	80082ce <USB_ReadPMA>
 8002462:	e07c      	b.n	800255e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	78db      	ldrb	r3, [r3, #3]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d108      	bne.n	800247e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800246c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800246e:	461a      	mov	r2, r3
 8002470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f927 	bl	80026c6 <HAL_PCD_EP_DB_Receive>
 8002478:	4603      	mov	r3, r0
 800247a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800247c:	e06f      	b.n	800255e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002498:	847b      	strh	r3, [r7, #34]	; 0x22
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	441a      	add	r2, r3
 80024a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80024aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d021      	beq.n	800251c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	3302      	adds	r3, #2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002500:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002502:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002504:	2b00      	cmp	r3, #0
 8002506:	d02a      	beq.n	800255e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	6959      	ldr	r1, [r3, #20]
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	891a      	ldrh	r2, [r3, #8]
 8002514:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002516:	f005 feda 	bl	80082ce <USB_ReadPMA>
 800251a:	e020      	b.n	800255e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	3306      	adds	r3, #6
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002544:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002546:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	6959      	ldr	r1, [r3, #20]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	895a      	ldrh	r2, [r3, #10]
 8002558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800255a:	f005 feb8 	bl	80082ce <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002564:	441a      	add	r2, r3
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002570:	441a      	add	r2, r3
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <PCD_EP_ISR_Handler+0x4c2>
 800257e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d206      	bcs.n	8002596 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f00b f884 	bl	800d69c <HAL_PCD_DataOutStageCallback>
 8002594:	e005      	b.n	80025a2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fedb 	bl	8006358 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d07e      	beq.n	80026aa <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80025ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	843b      	strh	r3, [r7, #32]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	8c3b      	ldrh	r3, [r7, #32]
 80025ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	78db      	ldrb	r3, [r3, #3]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d00c      	beq.n	800261a <PCD_EP_ISR_Handler+0x554>
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	78db      	ldrb	r3, [r3, #3]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800260c:	2b02      	cmp	r3, #2
 800260e:	d146      	bne.n	800269e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d141      	bne.n	800269e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	3302      	adds	r3, #2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002642:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	8bfb      	ldrh	r3, [r7, #30]
 800264a:	429a      	cmp	r2, r3
 800264c:	d906      	bls.n	800265c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	8bfb      	ldrh	r3, [r7, #30]
 8002654:	1ad2      	subs	r2, r2, r3
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	619a      	str	r2, [r3, #24]
 800265a:	e002      	b.n	8002662 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f00b f82e 	bl	800d6d2 <HAL_PCD_DataInStageCallback>
 8002676:	e018      	b.n	80026aa <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	8bfb      	ldrh	r3, [r7, #30]
 800267e:	441a      	add	r2, r3
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	69da      	ldr	r2, [r3, #28]
 8002688:	8bfb      	ldrh	r3, [r7, #30]
 800268a:	441a      	add	r2, r3
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fe5e 	bl	8006358 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800269c:	e005      	b.n	80026aa <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800269e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026a0:	461a      	mov	r2, r3
 80026a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f91b 	bl	80028e0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f6ff ad0a 	blt.w	80020d0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3738      	adds	r7, #56	; 0x38
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b088      	sub	sp, #32
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d07e      	beq.n	80027dc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	3302      	adds	r3, #2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002706:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	699a      	ldr	r2, [r3, #24]
 800270c:	8b7b      	ldrh	r3, [r7, #26]
 800270e:	429a      	cmp	r2, r3
 8002710:	d306      	bcc.n	8002720 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	8b7b      	ldrh	r3, [r7, #26]
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	619a      	str	r2, [r3, #24]
 800271e:	e002      	b.n	8002726 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d123      	bne.n	8002776 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002748:	833b      	strh	r3, [r7, #24]
 800274a:	8b3b      	ldrh	r3, [r7, #24]
 800274c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002750:	833b      	strh	r3, [r7, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	441a      	add	r2, r3
 8002760:	8b3b      	ldrh	r3, [r7, #24]
 8002762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800276a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002772:	b29b      	uxth	r3, r3
 8002774:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01f      	beq.n	80027c0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	82fb      	strh	r3, [r7, #22]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	441a      	add	r2, r3
 80027aa:	8afb      	ldrh	r3, [r7, #22]
 80027ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027bc:	b29b      	uxth	r3, r3
 80027be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027c0:	8b7b      	ldrh	r3, [r7, #26]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8087 	beq.w	80028d6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	6959      	ldr	r1, [r3, #20]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	891a      	ldrh	r2, [r3, #8]
 80027d4:	8b7b      	ldrh	r3, [r7, #26]
 80027d6:	f005 fd7a 	bl	80082ce <USB_ReadPMA>
 80027da:	e07c      	b.n	80028d6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	3306      	adds	r3, #6
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002804:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	8b7b      	ldrh	r3, [r7, #26]
 800280c:	429a      	cmp	r2, r3
 800280e:	d306      	bcc.n	800281e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	8b7b      	ldrh	r3, [r7, #26]
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	619a      	str	r2, [r3, #24]
 800281c:	e002      	b.n	8002824 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d123      	bne.n	8002874 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	83fb      	strh	r3, [r7, #30]
 8002848:	8bfb      	ldrh	r3, [r7, #30]
 800284a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800284e:	83fb      	strh	r3, [r7, #30]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	441a      	add	r2, r3
 800285e:	8bfb      	ldrh	r3, [r7, #30]
 8002860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002870:	b29b      	uxth	r3, r3
 8002872:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11f      	bne.n	80028be <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002898:	83bb      	strh	r3, [r7, #28]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	8bbb      	ldrh	r3, [r7, #28]
 80028aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028be:	8b7b      	ldrh	r3, [r7, #26]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	6959      	ldr	r1, [r3, #20]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	895a      	ldrh	r2, [r3, #10]
 80028d0:	8b7b      	ldrh	r3, [r7, #26]
 80028d2:	f005 fcfc 	bl	80082ce <USB_ReadPMA>
    }
  }

  return count;
 80028d6:	8b7b      	ldrh	r3, [r7, #26]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0a2      	sub	sp, #136	; 0x88
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 81c7 	beq.w	8002c88 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	3302      	adds	r3, #2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002922:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800292e:	429a      	cmp	r2, r3
 8002930:	d907      	bls.n	8002942 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800293a:	1ad2      	subs	r2, r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	619a      	str	r2, [r3, #24]
 8002940:	e002      	b.n	8002948 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 80b9 	bne.w	8002ac4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d126      	bne.n	80029a8 <HAL_PCD_EP_DB_Transmit+0xc8>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002968:	b29b      	uxth	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	4413      	add	r3, r2
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	011a      	lsls	r2, r3, #4
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	4413      	add	r3, r2
 800297c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800298c:	b29a      	uxth	r2, r3
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	801a      	strh	r2, [r3, #0]
 80029a6:	e01a      	b.n	80029de <HAL_PCD_EP_DB_Transmit+0xfe>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d116      	bne.n	80029de <HAL_PCD_EP_DB_Transmit+0xfe>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029be:	b29b      	uxth	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	4413      	add	r3, r2
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	011a      	lsls	r2, r3, #4
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	4413      	add	r3, r2
 80029d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	623b      	str	r3, [r7, #32]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d126      	bne.n	8002a3a <HAL_PCD_EP_DB_Transmit+0x15a>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	4413      	add	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	011a      	lsls	r2, r3, #4
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e017      	b.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d113      	bne.n	8002a6a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	4413      	add	r3, r2
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	011a      	lsls	r2, r3, #4
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f00a fe2e 	bl	800d6d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 82d4 	beq.w	800302a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	827b      	strh	r3, [r7, #18]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	441a      	add	r2, r3
 8002aac:	8a7b      	ldrh	r3, [r7, #18]
 8002aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	8013      	strh	r3, [r2, #0]
 8002ac2:	e2b2      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d021      	beq.n	8002b12 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	441a      	add	r2, r3
 8002afa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 8286 	bne.w	800302a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b26:	441a      	add	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	69da      	ldr	r2, [r3, #28]
 8002b30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b34:	441a      	add	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d309      	bcc.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b52:	1ad2      	subs	r2, r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	621a      	str	r2, [r3, #32]
 8002b58:	e015      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b70:	e009      	b.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d155      	bne.n	8002c3a <HAL_PCD_EP_DB_Transmit+0x35a>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	4413      	add	r3, r2
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	011a      	lsls	r2, r3, #4
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	4413      	add	r3, r2
 8002bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d112      	bne.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x302>
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	e047      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x392>
 8002be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be4:	2b3e      	cmp	r3, #62	; 0x3e
 8002be6:	d811      	bhi.n	8002c0c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x31e>
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	e032      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x342>
 8002c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	029b      	lsls	r3, r3, #10
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	801a      	strh	r2, [r3, #0]
 8002c38:	e01b      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d117      	bne.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x392>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c56:	4413      	add	r3, r2
 8002c58:	643b      	str	r3, [r7, #64]	; 0x40
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	011a      	lsls	r2, r3, #4
 8002c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c62:	4413      	add	r3, r2
 8002c64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	6959      	ldr	r1, [r3, #20]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	891a      	ldrh	r2, [r3, #8]
 8002c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f005 fadf 	bl	8008244 <USB_WritePMA>
 8002c86:	e1d0      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3306      	adds	r3, #6
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	699a      	ldr	r2, [r3, #24]
 8002cb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d307      	bcc.n	8002cd0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc8:	1ad2      	subs	r2, r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	619a      	str	r2, [r3, #24]
 8002cce:	e002      	b.n	8002cd6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 80c4 	bne.w	8002e68 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d126      	bne.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x456>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfc:	4413      	add	r3, r2
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	011a      	lsls	r2, r3, #4
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d08:	4413      	add	r3, r2
 8002d0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1e:	801a      	strh	r2, [r3, #0]
 8002d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d32:	801a      	strh	r2, [r3, #0]
 8002d34:	e01a      	b.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	785b      	ldrb	r3, [r3, #1]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d116      	bne.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	677b      	str	r3, [r7, #116]	; 0x74
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d52:	4413      	add	r3, r2
 8002d54:	677b      	str	r3, [r7, #116]	; 0x74
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	011a      	lsls	r2, r3, #4
 8002d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5e:	4413      	add	r3, r2
 8002d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d64:	673b      	str	r3, [r7, #112]	; 0x70
 8002d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d68:	2200      	movs	r2, #0
 8002d6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d12f      	bne.n	8002dda <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d92:	4413      	add	r3, r2
 8002d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	011a      	lsls	r2, r3, #4
 8002d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da2:	4413      	add	r3, r2
 8002da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd6:	801a      	strh	r2, [r3, #0]
 8002dd8:	e017      	b.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d113      	bne.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df0:	4413      	add	r3, r2
 8002df2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	011a      	lsls	r2, r3, #4
 8002dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e06:	2200      	movs	r2, #0
 8002e08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f00a fc5e 	bl	800d6d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 8104 	bne.w	800302a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	441a      	add	r2, r3
 8002e4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	8013      	strh	r3, [r2, #0]
 8002e66:	e0e0      	b.n	800302a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d121      	bne.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	f040 80b4 	bne.w	800302a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eca:	441a      	add	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed8:	441a      	add	r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d309      	bcc.n	8002efe <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef6:	1ad2      	subs	r2, r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	621a      	str	r2, [r3, #32]
 8002efc:	e015      	b.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002f06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f0a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f14:	e009      	b.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d155      	bne.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x704>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	4413      	add	r3, r2
 8002f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	011a      	lsls	r2, r3, #4
 8002f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f58:	4413      	add	r3, r2
 8002f5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d112      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f74:	801a      	strh	r2, [r3, #0]
 8002f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f88:	801a      	strh	r2, [r3, #0]
 8002f8a:	e044      	b.n	8003016 <HAL_PCD_EP_DB_Transmit+0x736>
 8002f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f90:	d811      	bhi.n	8002fb6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8002fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	029b      	lsls	r3, r3, #10
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	e02f      	b.n	8003016 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	657b      	str	r3, [r7, #84]	; 0x54
 8002fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	657b      	str	r3, [r7, #84]	; 0x54
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	029b      	lsls	r3, r3, #10
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fe0:	801a      	strh	r2, [r3, #0]
 8002fe2:	e018      	b.n	8003016 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d114      	bne.n	8003016 <HAL_PCD_EP_DB_Transmit+0x736>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ffa:	4413      	add	r3, r2
 8002ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	011a      	lsls	r2, r3, #4
 8003004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003006:	4413      	add	r3, r2
 8003008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800300c:	663b      	str	r3, [r7, #96]	; 0x60
 800300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003010:	b29a      	uxth	r2, r3
 8003012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003014:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6959      	ldr	r1, [r3, #20]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	895a      	ldrh	r2, [r3, #10]
 8003022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003024:	b29b      	uxth	r3, r3
 8003026:	f005 f90d 	bl	8008244 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003044:	823b      	strh	r3, [r7, #16]
 8003046:	8a3b      	ldrh	r3, [r7, #16]
 8003048:	f083 0310 	eor.w	r3, r3, #16
 800304c:	823b      	strh	r3, [r7, #16]
 800304e:	8a3b      	ldrh	r3, [r7, #16]
 8003050:	f083 0320 	eor.w	r3, r3, #32
 8003054:	823b      	strh	r3, [r7, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	8a3b      	ldrh	r3, [r7, #16]
 8003066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800306e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3788      	adds	r7, #136	; 0x88
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	817b      	strh	r3, [r7, #10]
 8003092:	4613      	mov	r3, r2
 8003094:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	e009      	b.n	80030ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030ba:	897a      	ldrh	r2, [r7, #10]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030ce:	893b      	ldrh	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	80da      	strh	r2, [r3, #6]
 80030e2:	e00b      	b.n	80030fc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2201      	movs	r2, #1
 80030e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e272      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8087 	beq.w	8003236 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003128:	4b92      	ldr	r3, [pc, #584]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	2b04      	cmp	r3, #4
 8003132:	d00c      	beq.n	800314e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003134:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b08      	cmp	r3, #8
 800313e:	d112      	bne.n	8003166 <HAL_RCC_OscConfig+0x5e>
 8003140:	4b8c      	ldr	r3, [pc, #560]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d10b      	bne.n	8003166 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314e:	4b89      	ldr	r3, [pc, #548]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06c      	beq.n	8003234 <HAL_RCC_OscConfig+0x12c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d168      	bne.n	8003234 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e24c      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x76>
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a7f      	ldr	r2, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e02e      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x98>
 8003186:	4b7b      	ldr	r3, [pc, #492]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a7a      	ldr	r2, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b78      	ldr	r3, [pc, #480]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a77      	ldr	r2, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0xbc>
 80031aa:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a71      	ldr	r2, [pc, #452]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b6f      	ldr	r3, [pc, #444]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6e      	ldr	r2, [pc, #440]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xd4>
 80031c4:	4b6b      	ldr	r3, [pc, #428]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a6a      	ldr	r2, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b68      	ldr	r3, [pc, #416]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a67      	ldr	r2, [pc, #412]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fd fdd8 	bl	8000d98 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fd fdd4 	bl	8000d98 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e200      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xe4>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd fdc4 	bl	8000d98 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd fdc0 	bl	8000d98 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1ec      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x10c>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003242:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800324e:	4b49      	ldr	r3, [pc, #292]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x18c>
 800325a:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x176>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1c0      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4939      	ldr	r1, [pc, #228]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_RCC_OscConfig+0x270>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fd fd79 	bl	8000d98 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fd fd75 	bl	8000d98 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1a1      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4927      	ldr	r1, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <HAL_RCC_OscConfig+0x270>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fd fd58 	bl	8000d98 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fd fd54 	bl	8000d98 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e180      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d03a      	beq.n	800338c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d019      	beq.n	8003352 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_RCC_OscConfig+0x274>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7fd fd38 	bl	8000d98 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332c:	f7fd fd34 	bl	8000d98 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e160      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <HAL_RCC_OscConfig+0x26c>)
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334a:	2001      	movs	r0, #1
 800334c:	f000 fb08 	bl	8003960 <RCC_Delay>
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <HAL_RCC_OscConfig+0x274>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fd fd1e 	bl	8000d98 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335e:	e00f      	b.n	8003380 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7fd fd1a 	bl	8000d98 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d908      	bls.n	8003380 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e146      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	42420000 	.word	0x42420000
 800337c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b92      	ldr	r3, [pc, #584]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e9      	bne.n	8003360 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80a6 	beq.w	80034e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b8b      	ldr	r3, [pc, #556]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4a87      	ldr	r2, [pc, #540]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b4:	61d3      	str	r3, [r2, #28]
 80033b6:	4b85      	ldr	r3, [pc, #532]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	4b82      	ldr	r3, [pc, #520]	; (80035d0 <HAL_RCC_OscConfig+0x4c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d118      	bne.n	8003404 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d2:	4b7f      	ldr	r3, [pc, #508]	; (80035d0 <HAL_RCC_OscConfig+0x4c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7e      	ldr	r2, [pc, #504]	; (80035d0 <HAL_RCC_OscConfig+0x4c8>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033de:	f7fd fcdb 	bl	8000d98 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e6:	f7fd fcd7 	bl	8000d98 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b64      	cmp	r3, #100	; 0x64
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e103      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	4b75      	ldr	r3, [pc, #468]	; (80035d0 <HAL_RCC_OscConfig+0x4c8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x312>
 800340c:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a6e      	ldr	r2, [pc, #440]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6213      	str	r3, [r2, #32]
 8003418:	e02d      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x334>
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a69      	ldr	r2, [pc, #420]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003428:	f023 0301 	bic.w	r3, r3, #1
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	4b67      	ldr	r3, [pc, #412]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a66      	ldr	r2, [pc, #408]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f023 0304 	bic.w	r3, r3, #4
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	e01c      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b05      	cmp	r3, #5
 8003442:	d10c      	bne.n	800345e <HAL_RCC_OscConfig+0x356>
 8003444:	4b61      	ldr	r3, [pc, #388]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a60      	ldr	r2, [pc, #384]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a5d      	ldr	r2, [pc, #372]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6213      	str	r3, [r2, #32]
 800345c:	e00b      	b.n	8003476 <HAL_RCC_OscConfig+0x36e>
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a5a      	ldr	r2, [pc, #360]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6213      	str	r3, [r2, #32]
 800346a:	4b58      	ldr	r3, [pc, #352]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a57      	ldr	r2, [pc, #348]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d015      	beq.n	80034aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fd fc8b 	bl	8000d98 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fd fc87 	bl	8000d98 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0b1      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349c:	4b4b      	ldr	r3, [pc, #300]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0ee      	beq.n	8003486 <HAL_RCC_OscConfig+0x37e>
 80034a8:	e014      	b.n	80034d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fd fc75 	bl	8000d98 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b0:	e00a      	b.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b2:	f7fd fc71 	bl	8000d98 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e09b      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	4b40      	ldr	r3, [pc, #256]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ee      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8087 	beq.w	80035fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d061      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d146      	bne.n	8003592 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003504:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <HAL_RCC_OscConfig+0x4cc>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350a:	f7fd fc45 	bl	8000d98 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003512:	f7fd fc41 	bl	8000d98 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e06d      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003524:	4b29      	ldr	r3, [pc, #164]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d108      	bne.n	800354c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4921      	ldr	r1, [pc, #132]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354c:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a19      	ldr	r1, [r3, #32]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	430b      	orrs	r3, r1
 800355e:	491b      	ldr	r1, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCC_OscConfig+0x4cc>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fd fc15 	bl	8000d98 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fd fc11 	bl	8000d98 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e03d      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003584:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x46a>
 8003590:	e035      	b.n	80035fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_OscConfig+0x4cc>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fd fbfe 	bl	8000d98 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fd fbfa 	bl	8000d98 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e026      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x498>
 80035be:	e01e      	b.n	80035fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e019      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
 80035d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_OscConfig+0x500>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000

0800360c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0d0      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b6a      	ldr	r3, [pc, #424]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d910      	bls.n	8003650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 0207 	bic.w	r2, r3, #7
 8003636:	4965      	ldr	r1, [pc, #404]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	4b63      	ldr	r3, [pc, #396]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0b8      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003668:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4a58      	ldr	r2, [pc, #352]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003672:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a52      	ldr	r2, [pc, #328]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800368a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	494d      	ldr	r1, [pc, #308]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d040      	beq.n	800372c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b47      	ldr	r3, [pc, #284]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d115      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e07f      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e073      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	4b3d      	ldr	r3, [pc, #244]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06b      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b39      	ldr	r3, [pc, #228]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4936      	ldr	r1, [pc, #216]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fd fb4c 	bl	8000d98 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fd fb48 	bl	8000d98 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e053      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b2d      	ldr	r3, [pc, #180]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800372c:	4b27      	ldr	r3, [pc, #156]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d210      	bcs.n	800375c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 0207 	bic.w	r2, r3, #7
 8003742:	4922      	ldr	r1, [pc, #136]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e032      	b.n	80037c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4916      	ldr	r1, [pc, #88]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	4313      	orrs	r3, r2
 8003778:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003786:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	490e      	ldr	r1, [pc, #56]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379a:	f000 f821 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	490a      	ldr	r1, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	5ccb      	ldrb	r3, [r1, r3]
 80037ae:	fa22 f303 	lsr.w	r3, r2, r3
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_RCC_ClockConfig+0x1cc>)
 80037b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_ClockConfig+0x1d0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd f922 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40022000 	.word	0x40022000
 80037d0:	40021000 	.word	0x40021000
 80037d4:	0800ee3c 	.word	0x0800ee3c
 80037d8:	20000000 	.word	0x20000000
 80037dc:	20000004 	.word	0x20000004

080037e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b490      	push	{r4, r7}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037e6:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCC_GetSysClockFreq+0xac>)
 80037e8:	1d3c      	adds	r4, r7, #4
 80037ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037f0:	f240 2301 	movw	r3, #513	; 0x201
 80037f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb0>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d002      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0x40>
 800381a:	2b08      	cmp	r3, #8
 800381c:	d003      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0x46>
 800381e:	e02b      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003822:	623b      	str	r3, [r7, #32]
      break;
 8003824:	e02b      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	0c9b      	lsrs	r3, r3, #18
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3328      	adds	r3, #40	; 0x28
 8003830:	443b      	add	r3, r7
 8003832:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003836:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d012      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003842:	4b13      	ldr	r3, [pc, #76]	; (8003890 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	0c5b      	lsrs	r3, r3, #17
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	3328      	adds	r3, #40	; 0x28
 800384e:	443b      	add	r3, r7
 8003850:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003854:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb4>)
 800385a:	fb03 f202 	mul.w	r2, r3, r2
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e004      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	623b      	str	r3, [r7, #32]
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_RCC_GetSysClockFreq+0xb4>)
 800387a:	623b      	str	r3, [r7, #32]
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	6a3b      	ldr	r3, [r7, #32]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3728      	adds	r7, #40	; 0x28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc90      	pop	{r4, r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	0800ec68 	.word	0x0800ec68
 8003890:	40021000 	.word	0x40021000
 8003894:	007a1200 	.word	0x007a1200
 8003898:	003d0900 	.word	0x003d0900

0800389c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <HAL_RCC_GetHCLKFreq+0x10>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	20000000 	.word	0x20000000

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff2 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	0800ee4c 	.word	0x0800ee4c

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffde 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0adb      	lsrs	r3, r3, #11
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	0800ee4c 	.word	0x0800ee4c

08003900 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	220f      	movs	r2, #15
 800390e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_RCC_GetClockConfig+0x58>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0203 	and.w	r2, r3, #3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_RCC_GetClockConfig+0x58>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_GetClockConfig+0x58>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <HAL_RCC_GetClockConfig+0x58>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	08db      	lsrs	r3, r3, #3
 800393a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_RCC_GetClockConfig+0x5c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0207 	and.w	r2, r3, #7
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40021000 	.word	0x40021000
 800395c:	40022000 	.word	0x40022000

08003960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCC_Delay+0x34>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <RCC_Delay+0x38>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0a5b      	lsrs	r3, r3, #9
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800397c:	bf00      	nop
  }
  while (Delay --);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	60fa      	str	r2, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f9      	bne.n	800397c <RCC_Delay+0x1c>
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000000 	.word	0x20000000
 8003998:	10624dd3 	.word	0x10624dd3

0800399c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039bc:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d2:	61d3      	str	r3, [r2, #28]
 80039d4:	4b49      	ldr	r3, [pc, #292]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	4b46      	ldr	r3, [pc, #280]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f0:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a42      	ldr	r2, [pc, #264]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fc:	f7fd f9cc 	bl	8000d98 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	e008      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fd f9c8 	bl	8000d98 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e06d      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a16:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02e      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d027      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a40:	4b2e      	ldr	r3, [pc, #184]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a56:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d014      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fd f997 	bl	8000d98 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fd f993 	bl	8000d98 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e036      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a90:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4917      	ldr	r1, [pc, #92]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa2:	7dfb      	ldrb	r3, [r7, #23]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	490b      	ldr	r1, [pc, #44]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4904      	ldr	r1, [pc, #16]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
 8003b04:	42420440 	.word	0x42420440

08003b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e076      	b.n	8003c08 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2a:	d009      	beq.n	8003b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	61da      	str	r2, [r3, #28]
 8003b32:	e005      	b.n	8003b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fc fdec 	bl	8000738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	ea42 0103 	orr.w	r1, r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	0c1a      	lsrs	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f002 0204 	and.w	r2, r2, #4
 8003be6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e04c      	b.n	8003cbc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d111      	bne.n	8003c52 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 f824 	bl	8004c84 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a1f      	ldr	r2, [pc, #124]	; (8003cc4 <HAL_TIM_Base_Init+0xb4>)
 8003c48:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4610      	mov	r0, r2
 8003c66:	f000 fd69 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	080007b5 	.word	0x080007b5

08003cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d001      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e03a      	b.n	8003d56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <HAL_TIM_Base_Start_IT+0x98>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x58>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d009      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x58>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x58>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d010      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d42:	e007      	b.n	8003d54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800

08003d6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e04c      	b.n	8003e18 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d111      	bne.n	8003dae <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 ff76 	bl	8004c84 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a1f      	ldr	r2, [pc, #124]	; (8003e20 <HAL_TIM_OC_Init+0xb4>)
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 fcbb 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	08003e25 	.word	0x08003e25

08003e24 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
	...

08003e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <HAL_TIM_PWM_Start+0x24>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e022      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x6a>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d109      	bne.n	8003e76 <HAL_TIM_PWM_Start+0x3e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	bf14      	ite	ne
 8003e6e:	2301      	movne	r3, #1
 8003e70:	2300      	moveq	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e015      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x6a>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x58>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e008      	b.n	8003ea2 <HAL_TIM_PWM_Start+0x6a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e05e      	b.n	8003f68 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start+0x82>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb8:	e013      	b.n	8003ee2 <HAL_TIM_PWM_Start+0xaa>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0x92>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec8:	e00b      	b.n	8003ee2 <HAL_TIM_PWM_Start+0xaa>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_PWM_Start+0xa2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed8:	e003      	b.n	8003ee2 <HAL_TIM_PWM_Start+0xaa>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fea6 	bl	8004c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_TIM_PWM_Start+0x138>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_TIM_PWM_Start+0x138>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_TIM_PWM_Start+0xfa>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d009      	beq.n	8003f32 <HAL_TIM_PWM_Start+0xfa>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <HAL_TIM_PWM_Start+0x13c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_TIM_PWM_Start+0xfa>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <HAL_TIM_PWM_Start+0x140>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d111      	bne.n	8003f56 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d010      	beq.n	8003f66 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f54:	e007      	b.n	8003f66 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800

08003f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d128      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d121      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0202 	mvn.w	r2, #2
 8003fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
 8003fc8:	e009      	b.n	8003fde <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d128      	bne.n	8004044 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d121      	bne.n	8004044 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0204 	mvn.w	r2, #4
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
 8004028:	e009      	b.n	800403e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b08      	cmp	r3, #8
 8004050:	d128      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b08      	cmp	r3, #8
 800405e:	d121      	bne.n	80040a4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0208 	mvn.w	r2, #8
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2204      	movs	r2, #4
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e009      	b.n	800409e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d128      	bne.n	8004104 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b10      	cmp	r3, #16
 80040be:	d121      	bne.n	8004104 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0210 	mvn.w	r2, #16
 80040c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2208      	movs	r2, #8
 80040ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
 80040e8:	e009      	b.n	80040fe <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d110      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	d109      	bne.n	8004134 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0201 	mvn.w	r2, #1
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d110      	bne.n	8004164 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d109      	bne.n	8004164 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d110      	bne.n	8004194 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d109      	bne.n	8004194 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d110      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d109      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0220 	mvn.w	r2, #32
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e046      	b.n	8004274 <HAL_TIM_OC_ConfigChannel+0xa8>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d839      	bhi.n	8004268 <HAL_TIM_OC_ConfigChannel+0x9c>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_TIM_OC_ConfigChannel+0x30>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004269 	.word	0x08004269
 8004204:	08004269 	.word	0x08004269
 8004208:	08004269 	.word	0x08004269
 800420c:	0800423f 	.word	0x0800423f
 8004210:	08004269 	.word	0x08004269
 8004214:	08004269 	.word	0x08004269
 8004218:	08004269 	.word	0x08004269
 800421c:	0800424d 	.word	0x0800424d
 8004220:	08004269 	.word	0x08004269
 8004224:	08004269 	.word	0x08004269
 8004228:	08004269 	.word	0x08004269
 800422c:	0800425b 	.word	0x0800425b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fae2 	bl	8004800 <TIM_OC1_SetConfig>
      break;
 800423c:	e015      	b.n	800426a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fb41 	bl	80048cc <TIM_OC2_SetConfig>
      break;
 800424a:	e00e      	b.n	800426a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fba4 	bl	80049a0 <TIM_OC3_SetConfig>
      break;
 8004258:	e007      	b.n	800426a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fc07 	bl	8004a74 <TIM_OC4_SetConfig>
      break;
 8004266:	e000      	b.n	800426a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004268:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIM_ConfigClockSource+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e0b3      	b.n	80043fc <HAL_TIM_ConfigClockSource+0x180>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042cc:	d03e      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xd0>
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	f200 8087 	bhi.w	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	f000 8085 	beq.w	80043e8 <HAL_TIM_ConfigClockSource+0x16c>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e2:	d87f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042e4:	2b70      	cmp	r3, #112	; 0x70
 80042e6:	d01a      	beq.n	800431e <HAL_TIM_ConfigClockSource+0xa2>
 80042e8:	2b70      	cmp	r3, #112	; 0x70
 80042ea:	d87b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042ec:	2b60      	cmp	r3, #96	; 0x60
 80042ee:	d050      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x116>
 80042f0:	2b60      	cmp	r3, #96	; 0x60
 80042f2:	d877      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042f4:	2b50      	cmp	r3, #80	; 0x50
 80042f6:	d03c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0xf6>
 80042f8:	2b50      	cmp	r3, #80	; 0x50
 80042fa:	d873      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	d058      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x136>
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d86f      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 8004304:	2b30      	cmp	r3, #48	; 0x30
 8004306:	d064      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
 8004308:	2b30      	cmp	r3, #48	; 0x30
 800430a:	d86b      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 800430c:	2b20      	cmp	r3, #32
 800430e:	d060      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
 8004310:	2b20      	cmp	r3, #32
 8004312:	d867      	bhi.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d05c      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
 8004318:	2b10      	cmp	r3, #16
 800431a:	d05a      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800431c:	e062      	b.n	80043e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f000 fc66 	bl	8004bfe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004340:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	609a      	str	r2, [r3, #8]
      break;
 800434a:	e04e      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f000 fc4f 	bl	8004bfe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436e:	609a      	str	r2, [r3, #8]
      break;
 8004370:	e03b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fbc6 	bl	8004b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2150      	movs	r1, #80	; 0x50
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fc1d 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 8004390:	e02b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	461a      	mov	r2, r3
 80043a0:	f000 fbe4 	bl	8004b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2160      	movs	r1, #96	; 0x60
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fc0d 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 80043b0:	e01b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	461a      	mov	r2, r3
 80043c0:	f000 fba6 	bl	8004b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2140      	movs	r1, #64	; 0x40
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fbfd 	bl	8004bca <TIM_ITRx_SetConfig>
      break;
 80043d0:	e00b      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f000 fbf4 	bl	8004bca <TIM_ITRx_SetConfig>
        break;
 80043e2:	e002      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e4:	bf00      	nop
 80043e6:	e000      	b.n	80043ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	460b      	mov	r3, r1
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e135      	b.n	8004730 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_TIM_RegisterCallback+0x2a>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e12e      	b.n	8004730 <HAL_TIM_RegisterCallback+0x288>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	f040 80ba 	bne.w	800465c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	2b1a      	cmp	r3, #26
 80044ec:	f200 80b3 	bhi.w	8004656 <HAL_TIM_RegisterCallback+0x1ae>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <HAL_TIM_RegisterCallback+0x50>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	08004565 	.word	0x08004565
 80044fc:	0800456d 	.word	0x0800456d
 8004500:	08004575 	.word	0x08004575
 8004504:	0800457d 	.word	0x0800457d
 8004508:	08004585 	.word	0x08004585
 800450c:	0800458d 	.word	0x0800458d
 8004510:	08004595 	.word	0x08004595
 8004514:	0800459d 	.word	0x0800459d
 8004518:	080045a5 	.word	0x080045a5
 800451c:	080045ad 	.word	0x080045ad
 8004520:	080045b5 	.word	0x080045b5
 8004524:	080045bd 	.word	0x080045bd
 8004528:	080045c5 	.word	0x080045c5
 800452c:	080045cd 	.word	0x080045cd
 8004530:	080045d5 	.word	0x080045d5
 8004534:	080045df 	.word	0x080045df
 8004538:	080045e9 	.word	0x080045e9
 800453c:	080045f3 	.word	0x080045f3
 8004540:	080045fd 	.word	0x080045fd
 8004544:	08004607 	.word	0x08004607
 8004548:	08004611 	.word	0x08004611
 800454c:	0800461b 	.word	0x0800461b
 8004550:	08004625 	.word	0x08004625
 8004554:	0800462f 	.word	0x0800462f
 8004558:	08004639 	.word	0x08004639
 800455c:	08004643 	.word	0x08004643
 8004560:	0800464d 	.word	0x0800464d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800456a:	e0dc      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004572:	e0d8      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800457a:	e0d4      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004582:	e0d0      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800458a:	e0cc      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004592:	e0c8      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800459a:	e0c4      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80045a2:	e0c0      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80045aa:	e0bc      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80045b2:	e0b8      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80045ba:	e0b4      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80045c2:	e0b0      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80045ca:	e0ac      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80045d2:	e0a8      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 80045dc:	e0a3      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80045e6:	e09e      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80045f0:	e099      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80045fa:	e094      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004604:	e08f      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800460e:	e08a      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004618:	e085      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004622:	e080      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800462c:	e07b      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004636:	e076      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004640:	e071      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800464a:	e06c      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004654:	e067      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
        break;
 800465a:	e064      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d15c      	bne.n	8004722 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8004668:	7afb      	ldrb	r3, [r7, #11]
 800466a:	2b0d      	cmp	r3, #13
 800466c:	d856      	bhi.n	800471c <HAL_TIM_RegisterCallback+0x274>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <HAL_TIM_RegisterCallback+0x1cc>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	080046ad 	.word	0x080046ad
 8004678:	080046b5 	.word	0x080046b5
 800467c:	080046bd 	.word	0x080046bd
 8004680:	080046c5 	.word	0x080046c5
 8004684:	080046cd 	.word	0x080046cd
 8004688:	080046d5 	.word	0x080046d5
 800468c:	080046dd 	.word	0x080046dd
 8004690:	080046e5 	.word	0x080046e5
 8004694:	080046ed 	.word	0x080046ed
 8004698:	080046f5 	.word	0x080046f5
 800469c:	080046fd 	.word	0x080046fd
 80046a0:	08004705 	.word	0x08004705
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	08004715 	.word	0x08004715
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80046b2:	e038      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80046ba:	e034      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80046c2:	e030      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80046ca:	e02c      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80046d2:	e028      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80046da:	e024      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80046e2:	e020      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80046ea:	e01c      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80046f2:	e018      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80046fa:	e014      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004702:	e010      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800470a:	e00c      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004712:	e008      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800471a:	e004      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
        break;
 8004720:	e001      	b.n	8004726 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <TIM_Base_SetConfig+0xb8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00b      	beq.n	800476c <TIM_Base_SetConfig+0x30>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d007      	beq.n	800476c <TIM_Base_SetConfig+0x30>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <TIM_Base_SetConfig+0xbc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x30>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a25      	ldr	r2, [pc, #148]	; (80047fc <TIM_Base_SetConfig+0xc0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <TIM_Base_SetConfig+0xb8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00b      	beq.n	800479e <TIM_Base_SetConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d007      	beq.n	800479e <TIM_Base_SetConfig+0x62>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <TIM_Base_SetConfig+0xbc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0x62>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <TIM_Base_SetConfig+0xc0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d108      	bne.n	80047b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a07      	ldr	r2, [pc, #28]	; (80047f4 <TIM_Base_SetConfig+0xb8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40000400 	.word	0x40000400
 80047fc:	40000800 	.word	0x40000800

08004800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f023 0201 	bic.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f023 0302 	bic.w	r3, r3, #2
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10c      	bne.n	8004876 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0308 	bic.w	r3, r3, #8
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <TIM_OC1_SetConfig+0xc8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d111      	bne.n	80048a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40012c00 	.word	0x40012c00

080048cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f023 0210 	bic.w	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0320 	bic.w	r3, r3, #32
 8004916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a1d      	ldr	r2, [pc, #116]	; (800499c <TIM_OC2_SetConfig+0xd0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10d      	bne.n	8004948 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a14      	ldr	r2, [pc, #80]	; (800499c <TIM_OC2_SetConfig+0xd0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d113      	bne.n	8004978 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	40012c00 	.word	0x40012c00

080049a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	021b      	lsls	r3, r3, #8
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <TIM_OC3_SetConfig+0xd0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10d      	bne.n	8004a1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <TIM_OC3_SetConfig+0xd0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d113      	bne.n	8004a4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00

08004a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <TIM_OC4_SetConfig+0x98>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d109      	bne.n	8004ae8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr
 8004b0c:	40012c00 	.word	0x40012c00

08004b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 030a 	bic.w	r3, r3, #10
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f023 0210 	bic.w	r2, r3, #16
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	031b      	lsls	r3, r3, #12
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	621a      	str	r2, [r3, #32]
}
 8004bc0:	bf00      	nop
 8004bc2:	371c      	adds	r7, #28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f043 0307 	orr.w	r3, r3, #7
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	609a      	str	r2, [r3, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b087      	sub	sp, #28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	021a      	lsls	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	609a      	str	r2, [r3, #8]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2201      	movs	r2, #1
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1a      	ldr	r2, [r3, #32]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	401a      	ands	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a1c      	ldr	r2, [pc, #112]	; (8004d00 <TIM_ResetCallback+0x7c>)
 8004c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1b      	ldr	r2, [pc, #108]	; (8004d04 <TIM_ResetCallback+0x80>)
 8004c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1a      	ldr	r2, [pc, #104]	; (8004d08 <TIM_ResetCallback+0x84>)
 8004ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <TIM_ResetCallback+0x88>)
 8004ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <TIM_ResetCallback+0x8c>)
 8004cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <TIM_ResetCallback+0x90>)
 8004cb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <TIM_ResetCallback+0x94>)
 8004cc0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <TIM_ResetCallback+0x98>)
 8004cc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a14      	ldr	r2, [pc, #80]	; (8004d20 <TIM_ResetCallback+0x9c>)
 8004cd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <TIM_ResetCallback+0xa0>)
 8004cd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <TIM_ResetCallback+0xa4>)
 8004ce0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <TIM_ResetCallback+0xa8>)
 8004ce8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <TIM_ResetCallback+0xac>)
 8004cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	0800068d 	.word	0x0800068d
 8004d04:	08004405 	.word	0x08004405
 8004d08:	08004471 	.word	0x08004471
 8004d0c:	08004483 	.word	0x08004483
 8004d10:	08004429 	.word	0x08004429
 8004d14:	0800443b 	.word	0x0800443b
 8004d18:	08004417 	.word	0x08004417
 8004d1c:	0800444d 	.word	0x0800444d
 8004d20:	0800445f 	.word	0x0800445f
 8004d24:	08004495 	.word	0x08004495
 8004d28:	08004df1 	.word	0x08004df1
 8004d2c:	08004e03 	.word	0x08004e03
 8004d30:	08004e15 	.word	0x08004e15

08004d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e046      	b.n	8004dda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a16      	ldr	r2, [pc, #88]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d009      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a10      	ldr	r2, [pc, #64]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10c      	bne.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800

08004df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e03f      	b.n	8004eb8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fb fd4d 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2224      	movs	r2, #36	; 0x24
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fc24 	bl	80056b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d17c      	bne.n	8004fda <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_UART_Transmit+0x2c>
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e075      	b.n	8004fdc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_UART_Transmit+0x3e>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e06e      	b.n	8004fdc <HAL_UART_Transmit+0x11c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2221      	movs	r2, #33	; 0x21
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f14:	f7fb ff40 	bl	8000d98 <HAL_GetTick>
 8004f18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	88fa      	ldrh	r2, [r7, #6]
 8004f1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	88fa      	ldrh	r2, [r7, #6]
 8004f24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d108      	bne.n	8004f42 <HAL_UART_Transmit+0x82>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e003      	b.n	8004f4a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f52:	e02a      	b.n	8004faa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa10 	bl	8005384 <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e036      	b.n	8004fdc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	3302      	adds	r3, #2
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	e007      	b.n	8004f9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1cf      	bne.n	8004f54 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2140      	movs	r1, #64	; 0x40
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f9e0 	bl	8005384 <UART_WaitOnFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e006      	b.n	8004fdc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fda:	2302      	movs	r3, #2
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005004:	2300      	movs	r3, #0
 8005006:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10d      	bne.n	8005036 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_UART_IRQHandler+0x52>
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa99 	bl	8005566 <UART_Receive_IT>
      return;
 8005034:	e17b      	b.n	800532e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80b1 	beq.w	80051a0 <HAL_UART_IRQHandler+0x1bc>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <HAL_UART_IRQHandler+0x70>
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80a6 	beq.w	80051a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_UART_IRQHandler+0x90>
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	f043 0201 	orr.w	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_UART_IRQHandler+0xb0>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	f043 0202 	orr.w	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_UART_IRQHandler+0xd0>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f043 0204 	orr.w	r2, r3, #4
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00f      	beq.n	80050de <HAL_UART_IRQHandler+0xfa>
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d104      	bne.n	80050d2 <HAL_UART_IRQHandler+0xee>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f043 0208 	orr.w	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 811e 	beq.w	8005324 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_UART_IRQHandler+0x11e>
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa32 	bl	8005566 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <HAL_UART_IRQHandler+0x146>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d031      	beq.n	800518e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f974 	bl	8005418 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d023      	beq.n	8005186 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d013      	beq.n	800517e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	4a76      	ldr	r2, [pc, #472]	; (8005334 <HAL_UART_IRQHandler+0x350>)
 800515c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb fff6 	bl	8001154 <HAL_DMA_Abort_IT>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00e      	b.n	800519c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8ec 	bl	800535c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e00a      	b.n	800519c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8e8 	bl	800535c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	e006      	b.n	800519c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8e4 	bl	800535c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800519a:	e0c3      	b.n	8005324 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	bf00      	nop
    return;
 800519e:	e0c1      	b.n	8005324 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	f040 80a1 	bne.w	80052ec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 809b 	beq.w	80052ec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8095 	beq.w	80052ec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d04e      	beq.n	8005284 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80051f0:	8a3b      	ldrh	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 8098 	beq.w	8005328 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051fc:	8a3a      	ldrh	r2, [r7, #16]
 80051fe:	429a      	cmp	r2, r3
 8005200:	f080 8092 	bcs.w	8005328 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8a3a      	ldrh	r2, [r7, #16]
 8005208:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b20      	cmp	r3, #32
 8005212:	d02b      	beq.n	800526c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005222:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695a      	ldr	r2, [r3, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005242:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0210 	bic.w	r2, r2, #16
 8005260:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb ff39 	bl	80010de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005274:	b29b      	uxth	r3, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	b29b      	uxth	r3, r3
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f876 	bl	800536e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005282:	e051      	b.n	8005328 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800528c:	b29b      	uxth	r3, r3
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d047      	beq.n	800532c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800529c:	8a7b      	ldrh	r3, [r7, #18]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d044      	beq.n	800532c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052b0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0201 	bic.w	r2, r2, #1
 80052c0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0210 	bic.w	r2, r2, #16
 80052de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052e0:	8a7b      	ldrh	r3, [r7, #18]
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f842 	bl	800536e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80052ea:	e01f      	b.n	800532c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_UART_IRQHandler+0x324>
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8c9 	bl	8005498 <UART_Transmit_IT>
    return;
 8005306:	e012      	b.n	800532e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00d      	beq.n	800532e <HAL_UART_IRQHandler+0x34a>
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f90a 	bl	8005536 <UART_EndTransmit_IT>
    return;
 8005322:	e004      	b.n	800532e <HAL_UART_IRQHandler+0x34a>
    return;
 8005324:	bf00      	nop
 8005326:	e002      	b.n	800532e <HAL_UART_IRQHandler+0x34a>
      return;
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_UART_IRQHandler+0x34a>
      return;
 800532c:	bf00      	nop
  }
}
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08005471 	.word	0x08005471

08005338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005394:	e02c      	b.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d028      	beq.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80053a4:	f7fb fcf8 	bl	8000d98 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d21d      	bcs.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e00f      	b.n	8005410 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4013      	ands	r3, r2
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	429a      	cmp	r2, r3
 800540c:	d0c3      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800542e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0210 	bic.w	r2, r2, #16
 8005456:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7ff ff66 	bl	800535c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b21      	cmp	r3, #33	; 0x21
 80054aa:	d13e      	bne.n	800552a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b4:	d114      	bne.n	80054e0 <UART_Transmit_IT+0x48>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d110      	bne.n	80054e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	621a      	str	r2, [r3, #32]
 80054de:	e008      	b.n	80054f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	1c59      	adds	r1, r3, #1
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6211      	str	r1, [r2, #32]
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4619      	mov	r1, r3
 8005500:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10f      	bne.n	8005526 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005514:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005524:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff feee 	bl	8005338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b22      	cmp	r3, #34	; 0x22
 8005578:	f040 8099 	bne.w	80056ae <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005584:	d117      	bne.n	80055b6 <UART_Receive_IT+0x50>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d113      	bne.n	80055b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
 80055b4:	e026      	b.n	8005604 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c8:	d007      	beq.n	80055da <UART_Receive_IT+0x74>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <UART_Receive_IT+0x82>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	e008      	b.n	80055fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	4619      	mov	r1, r3
 8005612:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005614:	2b00      	cmp	r3, #0
 8005616:	d148      	bne.n	80056aa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0220 	bic.w	r2, r2, #32
 8005626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695a      	ldr	r2, [r3, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	2b01      	cmp	r3, #1
 8005656:	d123      	bne.n	80056a0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0210 	bic.w	r2, r2, #16
 800566c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b10      	cmp	r3, #16
 800567a:	d10a      	bne.n	8005692 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fe68 	bl	800536e <HAL_UARTEx_RxEventCallback>
 800569e:	e002      	b.n	80056a6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff fe52 	bl	800534a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e002      	b.n	80056b0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056f2:	f023 030c 	bic.w	r3, r3, #12
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	430b      	orrs	r3, r1
 80056fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2c      	ldr	r2, [pc, #176]	; (80057cc <UART_SetConfig+0x114>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d103      	bne.n	8005728 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005720:	f7fe f8da 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	e002      	b.n	800572e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005728:	f7fe f8c2 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 800572c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009a      	lsls	r2, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	fbb2 f3f3 	udiv	r3, r2, r3
 8005744:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <UART_SetConfig+0x118>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	0119      	lsls	r1, r3, #4
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009a      	lsls	r2, r3, #2
 8005758:	441a      	add	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	fbb2 f2f3 	udiv	r2, r2, r3
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <UART_SetConfig+0x118>)
 8005766:	fba3 0302 	umull	r0, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	2064      	movs	r0, #100	; 0x64
 800576e:	fb00 f303 	mul.w	r3, r0, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	3332      	adds	r3, #50	; 0x32
 8005778:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <UART_SetConfig+0x118>)
 800577a:	fba2 2303 	umull	r2, r3, r2, r3
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005784:	4419      	add	r1, r3
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009a      	lsls	r2, r3, #2
 8005790:	441a      	add	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	fbb2 f2f3 	udiv	r2, r2, r3
 800579c:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <UART_SetConfig+0x118>)
 800579e:	fba3 0302 	umull	r0, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2064      	movs	r0, #100	; 0x64
 80057a6:	fb00 f303 	mul.w	r3, r0, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	3332      	adds	r3, #50	; 0x32
 80057b0:	4a07      	ldr	r2, [pc, #28]	; (80057d0 <UART_SetConfig+0x118>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	f003 020f 	and.w	r2, r3, #15
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	440a      	add	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40013800 	.word	0x40013800
 80057d0:	51eb851f 	.word	0x51eb851f

080057d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057d4:	b084      	sub	sp, #16
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	f107 0014 	add.w	r0, r7, #20
 80057e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	b004      	add	sp, #16
 80057f2:	4770      	bx	lr

080057f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005804:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005808:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	b29a      	uxth	r2, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005828:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800582c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	b29b      	uxth	r3, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	b29b      	uxth	r3, r3
 800583e:	4013      	ands	r3, r2
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800586c:	b084      	sub	sp, #16
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	f107 0014 	add.w	r0, r7, #20
 800587a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	b004      	add	sp, #16
 80058aa:	4770      	bx	lr

080058ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b09b      	sub	sp, #108	; 0x6c
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d81f      	bhi.n	800591e <USB_ActivateEndpoint+0x72>
 80058de:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <USB_ActivateEndpoint+0x38>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	080058f5 	.word	0x080058f5
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005927 	.word	0x08005927
 80058f0:	08005903 	.word	0x08005903
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005900:	e012      	b.n	8005928 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005902:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005906:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800590a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800590e:	e00b      	b.n	8005928 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005910:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005918:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800591c:	e004      	b.n	8005928 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005924:	e000      	b.n	8005928 <USB_ActivateEndpoint+0x7c>
      break;
 8005926:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800593a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800593e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005946:	b29b      	uxth	r3, r3
 8005948:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	b29a      	uxth	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	4313      	orrs	r3, r2
 800596a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800597c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598c:	b29b      	uxth	r3, r3
 800598e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	7b1b      	ldrb	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 8149 	bne.w	8005c2c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 8084 	beq.w	8005aac <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	011a      	lsls	r2, r3, #4
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	88db      	ldrh	r3, [r3, #6]
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	81fb      	strh	r3, [r7, #14]
 80059e6:	89fb      	ldrh	r3, [r7, #14]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01b      	beq.n	8005a28 <USB_ActivateEndpoint+0x17c>
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	81bb      	strh	r3, [r7, #12]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	441a      	add	r2, r3
 8005a12:	89bb      	ldrh	r3, [r7, #12]
 8005a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	78db      	ldrb	r3, [r3, #3]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d020      	beq.n	8005a72 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a46:	813b      	strh	r3, [r7, #8]
 8005a48:	893b      	ldrh	r3, [r7, #8]
 8005a4a:	f083 0320 	eor.w	r3, r3, #32
 8005a4e:	813b      	strh	r3, [r7, #8]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	893b      	ldrh	r3, [r7, #8]
 8005a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	8013      	strh	r3, [r2, #0]
 8005a70:	e27f      	b.n	8005f72 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a88:	817b      	strh	r3, [r7, #10]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	441a      	add	r2, r3
 8005a94:	897b      	ldrh	r3, [r7, #10]
 8005a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	8013      	strh	r3, [r2, #0]
 8005aaa:	e262      	b.n	8005f72 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	4413      	add	r3, r2
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	011a      	lsls	r2, r3, #4
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	88db      	ldrh	r3, [r3, #6]
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ade:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	4413      	add	r3, r2
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	011a      	lsls	r2, r3, #4
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	4413      	add	r3, r2
 8005afe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d112      	bne.n	8005b32 <USB_ActivateEndpoint+0x286>
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	801a      	strh	r2, [r3, #0]
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	e02f      	b.n	8005b92 <USB_ActivateEndpoint+0x2e6>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b3e      	cmp	r3, #62	; 0x3e
 8005b38:	d813      	bhi.n	8005b62 <USB_ActivateEndpoint+0x2b6>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	663b      	str	r3, [r7, #96]	; 0x60
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <USB_ActivateEndpoint+0x2a8>
 8005b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b50:	3301      	adds	r3, #1
 8005b52:	663b      	str	r3, [r7, #96]	; 0x60
 8005b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	029b      	lsls	r3, r3, #10
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	e017      	b.n	8005b92 <USB_ActivateEndpoint+0x2e6>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <USB_ActivateEndpoint+0x2d0>
 8005b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	83fb      	strh	r3, [r7, #30]
 8005ba0:	8bfb      	ldrh	r3, [r7, #30]
 8005ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01b      	beq.n	8005be2 <USB_ActivateEndpoint+0x336>
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc0:	83bb      	strh	r3, [r7, #28]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	8bbb      	ldrh	r3, [r7, #28]
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf8:	837b      	strh	r3, [r7, #26]
 8005bfa:	8b7b      	ldrh	r3, [r7, #26]
 8005bfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c00:	837b      	strh	r3, [r7, #26]
 8005c02:	8b7b      	ldrh	r3, [r7, #26]
 8005c04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c08:	837b      	strh	r3, [r7, #26]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	8b7b      	ldrh	r3, [r7, #26]
 8005c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]
 8005c2a:	e1a2      	b.n	8005f72 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c78:	4413      	add	r3, r2
 8005c7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	011a      	lsls	r2, r3, #4
 8005c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	891b      	ldrh	r3, [r3, #8]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cac:	4413      	add	r3, r2
 8005cae:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	895b      	ldrh	r3, [r3, #10]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8091 	bne.w	8005dfc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ce8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01b      	beq.n	8005d2a <USB_ActivateEndpoint+0x47e>
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	441a      	add	r2, r3
 8005d14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01b      	beq.n	8005d7a <USB_ActivateEndpoint+0x4ce>
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d90:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005da0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	441a      	add	r2, r3
 8005dac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd8:	867b      	strh	r3, [r7, #50]	; 0x32
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	441a      	add	r2, r3
 8005de4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	8013      	strh	r3, [r2, #0]
 8005dfa:	e0ba      	b.n	8005f72 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005e0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01d      	beq.n	8005e54 <USB_ActivateEndpoint+0x5a8>
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01d      	beq.n	8005eac <USB_ActivateEndpoint+0x600>
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d024      	beq.n	8005efe <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ed2:	f083 0320 	eor.w	r3, r3, #32
 8005ed6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	441a      	add	r2, r3
 8005ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	8013      	strh	r3, [r2, #0]
 8005efc:	e01d      	b.n	8005f3a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f50:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	441a      	add	r2, r3
 8005f5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	376c      	adds	r7, #108	; 0x6c
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b08d      	sub	sp, #52	; 0x34
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	7b1b      	ldrb	r3, [r3, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 808e 	bne.w	80060b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d044      	beq.n	8006026 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	81bb      	strh	r3, [r7, #12]
 8005faa:	89bb      	ldrh	r3, [r7, #12]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01b      	beq.n	8005fec <USB_DeactivateEndpoint+0x6c>
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fca:	817b      	strh	r3, [r7, #10]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	441a      	add	r2, r3
 8005fd6:	897b      	ldrh	r3, [r7, #10]
 8005fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006002:	813b      	strh	r3, [r7, #8]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	893b      	ldrh	r3, [r7, #8]
 8006010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]
 8006024:	e192      	b.n	800634c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	827b      	strh	r3, [r7, #18]
 8006034:	8a7b      	ldrh	r3, [r7, #18]
 8006036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01b      	beq.n	8006076 <USB_DeactivateEndpoint+0xf6>
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	823b      	strh	r3, [r7, #16]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	8a3b      	ldrh	r3, [r7, #16]
 8006062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800606e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006072:	b29b      	uxth	r3, r3
 8006074:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608c:	81fb      	strh	r3, [r7, #14]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	441a      	add	r2, r3
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	8013      	strh	r3, [r2, #0]
 80060ae:	e14d      	b.n	800634c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	785b      	ldrb	r3, [r3, #1]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 80a5 	bne.w	8006204 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	843b      	strh	r3, [r7, #32]
 80060c8:	8c3b      	ldrh	r3, [r7, #32]
 80060ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01b      	beq.n	800610a <USB_DeactivateEndpoint+0x18a>
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e8:	83fb      	strh	r3, [r7, #30]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	8bfb      	ldrh	r3, [r7, #30]
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	83bb      	strh	r3, [r7, #28]
 8006118:	8bbb      	ldrh	r3, [r7, #28]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01b      	beq.n	800615a <USB_DeactivateEndpoint+0x1da>
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006138:	837b      	strh	r3, [r7, #26]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	441a      	add	r2, r3
 8006144:	8b7b      	ldrh	r3, [r7, #26]
 8006146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006170:	833b      	strh	r3, [r7, #24]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	8b3b      	ldrh	r3, [r7, #24]
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a8:	82fb      	strh	r3, [r7, #22]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	441a      	add	r2, r3
 80061b4:	8afb      	ldrh	r3, [r7, #22]
 80061b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e0:	82bb      	strh	r3, [r7, #20]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	8abb      	ldrh	r3, [r7, #20]
 80061ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fe:	b29b      	uxth	r3, r3
 8006200:	8013      	strh	r3, [r2, #0]
 8006202:	e0a3      	b.n	800634c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006212:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01b      	beq.n	8006254 <USB_DeactivateEndpoint+0x2d4>
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006262:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01b      	beq.n	80062a4 <USB_DeactivateEndpoint+0x324>
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b29b      	uxth	r3, r3
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	853b      	strh	r3, [r7, #40]	; 0x28
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	441a      	add	r2, r3
 80062c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d8:	b29b      	uxth	r3, r3
 80062da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006310:	b29b      	uxth	r3, r3
 8006312:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	847b      	strh	r3, [r7, #34]	; 0x22
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	441a      	add	r2, r3
 8006336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006340:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006348:	b29b      	uxth	r3, r3
 800634a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3734      	adds	r7, #52	; 0x34
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr

08006358 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b0cc      	sub	sp, #304	; 0x130
 800635c:	af00      	add	r7, sp, #0
 800635e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006366:	6018      	str	r0, [r3, #0]
 8006368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006370:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b01      	cmp	r3, #1
 8006380:	f041 817d 	bne.w	800767e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	429a      	cmp	r2, r3
 800639e:	d908      	bls.n	80063b2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80063b0:	e007      	b.n	80063c2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	7b1b      	ldrb	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d152      	bne.n	8006478 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6959      	ldr	r1, [r3, #20]
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	88da      	ldrh	r2, [r3, #6]
 80063ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063f8:	6800      	ldr	r0, [r0, #0]
 80063fa:	f001 ff23 	bl	8008244 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006406:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800640a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006420:	b29b      	uxth	r3, r3
 8006422:	4619      	mov	r1, r3
 8006424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006428:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800642c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006430:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	440a      	add	r2, r1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	011a      	lsls	r2, r3, #4
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4413      	add	r3, r2
 8006454:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006466:	b29a      	uxth	r2, r3
 8006468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	801a      	strh	r2, [r3, #0]
 8006474:	f001 b8b5 	b.w	80075e2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	78db      	ldrb	r3, [r3, #3]
 8006484:	2b02      	cmp	r3, #2
 8006486:	f040 84c6 	bne.w	8006e16 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800648a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a1a      	ldr	r2, [r3, #32]
 8006496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	f240 8443 	bls.w	8006d2e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80064d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	441a      	add	r2, r3
 80064ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006514:	1ad2      	subs	r2, r2, r3
 8006516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 823e 	beq.w	80069c6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800654a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006552:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006556:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 809a 	bne.w	80066a4 <USB_EPStartXfer+0x34c>
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006578:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800657c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006588:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006592:	b29b      	uxth	r3, r3
 8006594:	4619      	mov	r1, r3
 8006596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065a2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	440a      	add	r2, r1
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	011a      	lsls	r2, r3, #4
 80065ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80065ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d122      	bne.n	8006622 <USB_EPStartXfer+0x2ca>
 80065dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006600:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006612:	b29a      	uxth	r2, r3
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e079      	b.n	8006716 <USB_EPStartXfer+0x3be>
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	2b3e      	cmp	r3, #62	; 0x3e
 8006628:	d81b      	bhi.n	8006662 <USB_EPStartXfer+0x30a>
 800662a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <USB_EPStartXfer+0x2f2>
 8006640:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006644:	3301      	adds	r3, #1
 8006646:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800664a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800664e:	b29b      	uxth	r3, r3
 8006650:	029b      	lsls	r3, r3, #10
 8006652:	b29a      	uxth	r2, r3
 8006654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006658:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e059      	b.n	8006716 <USB_EPStartXfer+0x3be>
 8006662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <USB_EPStartXfer+0x32a>
 8006678:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800667c:	3b01      	subs	r3, #1
 800667e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006682:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006694:	b29a      	uxth	r2, r3
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	801a      	strh	r2, [r3, #0]
 80066a2:	e038      	b.n	8006716 <USB_EPStartXfer+0x3be>
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d130      	bne.n	8006716 <USB_EPStartXfer+0x3be>
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	4619      	mov	r1, r3
 80066c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066d2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	440a      	add	r2, r1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	011a      	lsls	r2, r3, #4
 80066ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4413      	add	r3, r2
 80066f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80066fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006708:	b29a      	uxth	r2, r3
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	895b      	ldrh	r3, [r3, #10]
 8006722:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6959      	ldr	r1, [r3, #20]
 8006732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006736:	b29b      	uxth	r3, r3
 8006738:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800673c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006740:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006744:	6800      	ldr	r0, [r0, #0]
 8006746:	f001 fd7d 	bl	8008244 <USB_WritePMA>
            ep->xfer_buff += len;
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675a:	441a      	add	r2, r3
 800675c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a1a      	ldr	r2, [r3, #32]
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	429a      	cmp	r2, r3
 8006782:	d90f      	bls.n	80067a4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6a1a      	ldr	r2, [r3, #32]
 8006790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006794:	1ad2      	subs	r2, r2, r3
 8006796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	621a      	str	r2, [r3, #32]
 80067a2:	e00e      	b.n	80067c2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80067a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80067b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 809a 	bne.w	8006908 <USB_EPStartXfer+0x5b0>
 80067d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80067dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	4619      	mov	r1, r3
 80067fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006802:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006806:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	440a      	add	r2, r1
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	011a      	lsls	r2, r3, #4
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4413      	add	r3, r2
 800682a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800682e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006832:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d122      	bne.n	8006886 <USB_EPStartXfer+0x52e>
 8006840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006844:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006852:	b29a      	uxth	r2, r3
 8006854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006858:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006876:	b29a      	uxth	r2, r3
 8006878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e083      	b.n	800698e <USB_EPStartXfer+0x636>
 8006886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688a:	2b3e      	cmp	r3, #62	; 0x3e
 800688c:	d81b      	bhi.n	80068c6 <USB_EPStartXfer+0x56e>
 800688e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <USB_EPStartXfer+0x556>
 80068a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068a8:	3301      	adds	r3, #1
 80068aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	029b      	lsls	r3, r3, #10
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	801a      	strh	r2, [r3, #0]
 80068c4:	e063      	b.n	800698e <USB_EPStartXfer+0x636>
 80068c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ca:	095b      	lsrs	r3, r3, #5
 80068cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <USB_EPStartXfer+0x58e>
 80068dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068e0:	3b01      	subs	r3, #1
 80068e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	029b      	lsls	r3, r3, #10
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	e042      	b.n	800698e <USB_EPStartXfer+0x636>
 8006908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d13a      	bne.n	800698e <USB_EPStartXfer+0x636>
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006920:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006924:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006930:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693a:	b29b      	uxth	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006946:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800694a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	440a      	add	r2, r1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	011a      	lsls	r2, r3, #4
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4413      	add	r3, r2
 800696e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006980:	b29a      	uxth	r2, r3
 8006982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006986:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800698e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	891b      	ldrh	r3, [r3, #8]
 800699a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800699e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6959      	ldr	r1, [r3, #20]
 80069aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80069b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80069bc:	6800      	ldr	r0, [r0, #0]
 80069be:	f001 fc41 	bl	8008244 <USB_WritePMA>
 80069c2:	f000 be0e 	b.w	80075e2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d16d      	bne.n	8006ab2 <USB_EPStartXfer+0x75a>
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f6:	4413      	add	r3, r2
 80069f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	011a      	lsls	r2, r3, #4
 8006a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a10:	647b      	str	r3, [r7, #68]	; 0x44
 8006a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d112      	bne.n	8006a40 <USB_EPStartXfer+0x6e8>
 8006a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e063      	b.n	8006b08 <USB_EPStartXfer+0x7b0>
 8006a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a44:	2b3e      	cmp	r3, #62	; 0x3e
 8006a46:	d817      	bhi.n	8006a78 <USB_EPStartXfer+0x720>
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <USB_EPStartXfer+0x710>
 8006a5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a62:	3301      	adds	r3, #1
 8006a64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	029b      	lsls	r3, r3, #10
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	e047      	b.n	8006b08 <USB_EPStartXfer+0x7b0>
 8006a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <USB_EPStartXfer+0x740>
 8006a8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a92:	3b01      	subs	r3, #1
 8006a94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	029b      	lsls	r3, r3, #10
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aae:	801a      	strh	r2, [r3, #0]
 8006ab0:	e02a      	b.n	8006b08 <USB_EPStartXfer+0x7b0>
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d122      	bne.n	8006b08 <USB_EPStartXfer+0x7b0>
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	653b      	str	r3, [r7, #80]	; 0x50
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae2:	4413      	add	r3, r2
 8006ae4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	011a      	lsls	r2, r3, #4
 8006af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af6:	4413      	add	r3, r2
 8006af8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006afc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	891b      	ldrh	r3, [r3, #8]
 8006b14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6959      	ldr	r1, [r3, #20]
 8006b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006b2e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006b32:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006b36:	6800      	ldr	r0, [r0, #0]
 8006b38:	f001 fb84 	bl	8008244 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695a      	ldr	r2, [r3, #20]
 8006b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4c:	441a      	add	r2, r3
 8006b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6a1a      	ldr	r2, [r3, #32]
 8006b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d90f      	bls.n	8006b96 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	621a      	str	r2, [r3, #32]
 8006b94:	e00e      	b.n	8006bb4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d16d      	bne.n	8006cac <USB_EPStartXfer+0x954>
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	4413      	add	r3, r2
 8006bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	011a      	lsls	r2, r3, #4
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	4413      	add	r3, r2
 8006c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d112      	bne.n	8006c3a <USB_EPStartXfer+0x8e2>
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	e05d      	b.n	8006cf6 <USB_EPStartXfer+0x99e>
 8006c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c40:	d817      	bhi.n	8006c72 <USB_EPStartXfer+0x91a>
 8006c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <USB_EPStartXfer+0x90a>
 8006c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e041      	b.n	8006cf6 <USB_EPStartXfer+0x99e>
 8006c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <USB_EPStartXfer+0x93a>
 8006c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	e024      	b.n	8006cf6 <USB_EPStartXfer+0x99e>
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	785b      	ldrb	r3, [r3, #1]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d11c      	bne.n	8006cf6 <USB_EPStartXfer+0x99e>
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd0:	4413      	add	r3, r2
 8006cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	011a      	lsls	r2, r3, #4
 8006ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	895b      	ldrh	r3, [r3, #10]
 8006d02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6959      	ldr	r1, [r3, #20]
 8006d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d24:	6800      	ldr	r0, [r0, #0]
 8006d26:	f001 fa8d 	bl	8008244 <USB_WritePMA>
 8006d2a:	f000 bc5a 	b.w	80075e2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	461a      	mov	r2, r3
 8006db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dba:	4413      	add	r3, r2
 8006dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	011a      	lsls	r2, r3, #4
 8006dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dce:	4413      	add	r3, r2
 8006dd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	891b      	ldrh	r3, [r3, #8]
 8006dec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6959      	ldr	r1, [r3, #20]
 8006dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e06:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e0a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e0e:	6800      	ldr	r0, [r0, #0]
 8006e10:	f001 fa18 	bl	8008244 <USB_WritePMA>
 8006e14:	e3e5      	b.n	80075e2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6a1a      	ldr	r2, [r3, #32]
 8006e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 81bc 	beq.w	8007230 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d16d      	bne.n	8006fb2 <USB_EPStartXfer+0xc5a>
 8006ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef6:	4413      	add	r3, r2
 8006ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	011a      	lsls	r2, r3, #4
 8006f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f10:	677b      	str	r3, [r7, #116]	; 0x74
 8006f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d112      	bne.n	8006f40 <USB_EPStartXfer+0xbe8>
 8006f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	e060      	b.n	8007002 <USB_EPStartXfer+0xcaa>
 8006f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f44:	2b3e      	cmp	r3, #62	; 0x3e
 8006f46:	d817      	bhi.n	8006f78 <USB_EPStartXfer+0xc20>
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	085b      	lsrs	r3, r3, #1
 8006f4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <USB_EPStartXfer+0xc10>
 8006f5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f62:	3301      	adds	r3, #1
 8006f64:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f68:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e044      	b.n	8007002 <USB_EPStartXfer+0xcaa>
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <USB_EPStartXfer+0xc40>
 8006f8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f92:	3b01      	subs	r3, #1
 8006f94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	029b      	lsls	r3, r3, #10
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e027      	b.n	8007002 <USB_EPStartXfer+0xcaa>
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	785b      	ldrb	r3, [r3, #1]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d11f      	bne.n	8007002 <USB_EPStartXfer+0xcaa>
 8006fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fd8:	4413      	add	r3, r2
 8006fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	011a      	lsls	r2, r3, #4
 8006fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007000:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	895b      	ldrh	r3, [r3, #10]
 800700e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6959      	ldr	r1, [r3, #20]
 800701e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007022:	b29b      	uxth	r3, r3
 8007024:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007028:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800702c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007030:	6800      	ldr	r0, [r0, #0]
 8007032:	f001 f907 	bl	8008244 <USB_WritePMA>
          ep->xfer_buff += len;
 8007036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	695a      	ldr	r2, [r3, #20]
 8007042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007046:	441a      	add	r2, r3
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6a1a      	ldr	r2, [r3, #32]
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	429a      	cmp	r2, r3
 800706e:	d90f      	bls.n	8007090 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007080:	1ad2      	subs	r2, r2, r3
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	621a      	str	r2, [r3, #32]
 800708e:	e00e      	b.n	80070ae <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80070a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2200      	movs	r2, #0
 80070ac:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80070ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 8295 	beq.w	80075e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d16d      	bne.n	80071a4 <USB_EPStartXfer+0xe4c>
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070e8:	4413      	add	r3, r2
 80070ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070fc:	4413      	add	r3, r2
 80070fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007102:	667b      	str	r3, [r7, #100]	; 0x64
 8007104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d112      	bne.n	8007132 <USB_EPStartXfer+0xdda>
 800710c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	b29b      	uxth	r3, r3
 8007112:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007116:	b29a      	uxth	r2, r3
 8007118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e063      	b.n	80071fa <USB_EPStartXfer+0xea2>
 8007132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007136:	2b3e      	cmp	r3, #62	; 0x3e
 8007138:	d817      	bhi.n	800716a <USB_EPStartXfer+0xe12>
 800713a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <USB_EPStartXfer+0xe02>
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007154:	3301      	adds	r3, #1
 8007156:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715e:	b29b      	uxth	r3, r3
 8007160:	029b      	lsls	r3, r3, #10
 8007162:	b29a      	uxth	r2, r3
 8007164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e047      	b.n	80071fa <USB_EPStartXfer+0xea2>
 800716a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <USB_EPStartXfer+0xe32>
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007184:	3b01      	subs	r3, #1
 8007186:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071a0:	801a      	strh	r2, [r3, #0]
 80071a2:	e02a      	b.n	80071fa <USB_EPStartXfer+0xea2>
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d122      	bne.n	80071fa <USB_EPStartXfer+0xea2>
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	673b      	str	r3, [r7, #112]	; 0x70
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	461a      	mov	r2, r3
 80071d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071d4:	4413      	add	r3, r2
 80071d6:	673b      	str	r3, [r7, #112]	; 0x70
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	011a      	lsls	r2, r3, #4
 80071e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071e8:	4413      	add	r3, r2
 80071ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80071fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	891b      	ldrh	r3, [r3, #8]
 8007206:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6959      	ldr	r1, [r3, #20]
 8007216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721a:	b29b      	uxth	r3, r3
 800721c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007220:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007224:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007228:	6800      	ldr	r0, [r0, #0]
 800722a:	f001 f80b 	bl	8008244 <USB_WritePMA>
 800722e:	e1d8      	b.n	80075e2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d178      	bne.n	8007332 <USB_EPStartXfer+0xfda>
 8007240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800725c:	b29b      	uxth	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007264:	4413      	add	r3, r2
 8007266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	011a      	lsls	r2, r3, #4
 8007278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800727c:	4413      	add	r3, r2
 800727e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007282:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d116      	bne.n	80072bc <USB_EPStartXfer+0xf64>
 800728e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729a:	b29a      	uxth	r2, r3
 800729c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a0:	801a      	strh	r2, [r3, #0]
 80072a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e06b      	b.n	8007394 <USB_EPStartXfer+0x103c>
 80072bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c0:	2b3e      	cmp	r3, #62	; 0x3e
 80072c2:	d818      	bhi.n	80072f6 <USB_EPStartXfer+0xf9e>
 80072c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80072ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <USB_EPStartXfer+0xf8c>
 80072da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80072de:	3301      	adds	r3, #1
 80072e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80072e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	029b      	lsls	r3, r3, #10
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e04e      	b.n	8007394 <USB_EPStartXfer+0x103c>
 80072f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007304:	f003 031f 	and.w	r3, r3, #31
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <USB_EPStartXfer+0xfbe>
 800730c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007310:	3b01      	subs	r3, #1
 8007312:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007316:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800731a:	b29b      	uxth	r3, r3
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	b29b      	uxth	r3, r3
 8007320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007328:	b29a      	uxth	r2, r3
 800732a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800732e:	801a      	strh	r2, [r3, #0]
 8007330:	e030      	b.n	8007394 <USB_EPStartXfer+0x103c>
 8007332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d128      	bne.n	8007394 <USB_EPStartXfer+0x103c>
 8007342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007346:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735e:	b29b      	uxth	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007366:	4413      	add	r3, r2
 8007368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	011a      	lsls	r2, r3, #4
 800737a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800737e:	4413      	add	r3, r2
 8007380:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738c:	b29a      	uxth	r2, r3
 800738e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007392:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	891b      	ldrh	r3, [r3, #8]
 80073a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6959      	ldr	r1, [r3, #20]
 80073b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073ba:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073be:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073c2:	6800      	ldr	r0, [r0, #0]
 80073c4:	f000 ff3e 	bl	8008244 <USB_WritePMA>
          ep->xfer_buff += len;
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d8:	441a      	add	r2, r3
 80073da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80073e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a1a      	ldr	r2, [r3, #32]
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d90f      	bls.n	8007422 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6a1a      	ldr	r2, [r3, #32]
 800740e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007412:	1ad2      	subs	r2, r2, r3
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	621a      	str	r2, [r3, #32]
 8007420:	e00e      	b.n	8007440 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2200      	movs	r2, #0
 800743e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80cc 	beq.w	80075e2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800744a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d178      	bne.n	800755a <USB_EPStartXfer+0x1202>
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007484:	b29b      	uxth	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800748c:	4413      	add	r3, r2
 800748e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	011a      	lsls	r2, r3, #4
 80074a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074a4:	4413      	add	r3, r2
 80074a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d116      	bne.n	80074e4 <USB_EPStartXfer+0x118c>
 80074b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074da:	b29a      	uxth	r2, r3
 80074dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e064      	b.n	80075ae <USB_EPStartXfer+0x1256>
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	2b3e      	cmp	r3, #62	; 0x3e
 80074ea:	d818      	bhi.n	800751e <USB_EPStartXfer+0x11c6>
 80074ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80074f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <USB_EPStartXfer+0x11b4>
 8007502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007506:	3301      	adds	r3, #1
 8007508:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800750c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007510:	b29b      	uxth	r3, r3
 8007512:	029b      	lsls	r3, r3, #10
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e047      	b.n	80075ae <USB_EPStartXfer+0x1256>
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <USB_EPStartXfer+0x11e6>
 8007534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007538:	3b01      	subs	r3, #1
 800753a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800753e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007542:	b29b      	uxth	r3, r3
 8007544:	029b      	lsls	r3, r3, #10
 8007546:	b29b      	uxth	r3, r3
 8007548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007550:	b29a      	uxth	r2, r3
 8007552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e029      	b.n	80075ae <USB_EPStartXfer+0x1256>
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d121      	bne.n	80075ae <USB_EPStartXfer+0x1256>
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007578:	b29b      	uxth	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007580:	4413      	add	r3, r2
 8007582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	011a      	lsls	r2, r3, #4
 8007594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007598:	4413      	add	r3, r2
 800759a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800759e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	895b      	ldrh	r3, [r3, #10]
 80075ba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6959      	ldr	r1, [r3, #20]
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075d4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075d8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075dc:	6800      	ldr	r0, [r0, #0]
 80075de:	f000 fe31 	bl	8008244 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007604:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007610:	8013      	strh	r3, [r2, #0]
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800761a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800761e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007622:	8812      	ldrh	r2, [r2, #0]
 8007624:	f082 0210 	eor.w	r2, r2, #16
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007632:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007636:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800763a:	8812      	ldrh	r2, [r2, #0]
 800763c:	f082 0220 	eor.w	r2, r2, #32
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	441a      	add	r2, r3
 800765c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007660:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800766a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800766e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007676:	b29b      	uxth	r3, r3
 8007678:	8013      	strh	r3, [r2, #0]
 800767a:	f000 bc9f 	b.w	8007fbc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	7b1b      	ldrb	r3, [r3, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f040 80ae 	bne.w	80077ec <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d917      	bls.n	80076dc <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80076ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80076bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	1ad2      	subs	r2, r2, r3
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	619a      	str	r2, [r3, #24]
 80076da:	e00e      	b.n	80076fa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80076ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2200      	movs	r2, #0
 80076f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007716:	b29b      	uxth	r3, r3
 8007718:	461a      	mov	r2, r3
 800771a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800771e:	4413      	add	r3, r2
 8007720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	011a      	lsls	r2, r3, #4
 8007732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007736:	4413      	add	r3, r2
 8007738:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800773c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007744:	2b00      	cmp	r3, #0
 8007746:	d116      	bne.n	8007776 <USB_EPStartXfer+0x141e>
 8007748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	b29b      	uxth	r3, r3
 8007750:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007754:	b29a      	uxth	r2, r3
 8007756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	b29b      	uxth	r3, r3
 8007764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	e3e8      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
 8007776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777a:	2b3e      	cmp	r3, #62	; 0x3e
 800777c:	d818      	bhi.n	80077b0 <USB_EPStartXfer+0x1458>
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <USB_EPStartXfer+0x1446>
 8007794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007798:	3301      	adds	r3, #1
 800779a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800779e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	029b      	lsls	r3, r3, #10
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	e3cb      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
 80077b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b4:	095b      	lsrs	r3, r3, #5
 80077b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <USB_EPStartXfer+0x1478>
 80077c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077ca:	3b01      	subs	r3, #1
 80077cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80077d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	029b      	lsls	r3, r3, #10
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077e8:	801a      	strh	r2, [r3, #0]
 80077ea:	e3ad      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80077ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	78db      	ldrb	r3, [r3, #3]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	f040 8200 	bne.w	8007bfe <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80077fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	785b      	ldrb	r3, [r3, #1]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 8091 	bne.w	8007932 <USB_EPStartXfer+0x15da>
 8007810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800782c:	b29b      	uxth	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007834:	4413      	add	r3, r2
 8007836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800783a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	011a      	lsls	r2, r3, #4
 8007848:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800784c:	4413      	add	r3, r2
 800784e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d116      	bne.n	8007894 <USB_EPStartXfer+0x153c>
 8007866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007872:	b29a      	uxth	r2, r3
 8007874:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b29b      	uxth	r3, r3
 8007882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800788a:	b29a      	uxth	r2, r3
 800788c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007890:	801a      	strh	r2, [r3, #0]
 8007892:	e083      	b.n	800799c <USB_EPStartXfer+0x1644>
 8007894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	2b3e      	cmp	r3, #62	; 0x3e
 80078a2:	d820      	bhi.n	80078e6 <USB_EPStartXfer+0x158e>
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	085b      	lsrs	r3, r3, #1
 80078b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d004      	beq.n	80078d4 <USB_EPStartXfer+0x157c>
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ce:	3301      	adds	r3, #1
 80078d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d8:	b29b      	uxth	r3, r3
 80078da:	029b      	lsls	r3, r3, #10
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e05a      	b.n	800799c <USB_EPStartXfer+0x1644>
 80078e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <USB_EPStartXfer+0x15be>
 800790c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007910:	3b01      	subs	r3, #1
 8007912:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29b      	uxth	r3, r3
 8007920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007928:	b29a      	uxth	r2, r3
 800792a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	e034      	b.n	800799c <USB_EPStartXfer+0x1644>
 8007932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d12c      	bne.n	800799c <USB_EPStartXfer+0x1644>
 8007942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800795e:	b29b      	uxth	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007966:	4413      	add	r3, r2
 8007968:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800796c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	011a      	lsls	r2, r3, #4
 800797a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800797e:	4413      	add	r3, r2
 8007980:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800799a:	801a      	strh	r2, [r3, #0]
 800799c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f040 8091 	bne.w	8007ade <USB_EPStartXfer+0x1786>
 80079bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d8:	b29b      	uxth	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079e0:	4413      	add	r3, r2
 80079e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80079e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	011a      	lsls	r2, r3, #4
 80079f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80079f8:	4413      	add	r3, r2
 80079fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d116      	bne.n	8007a40 <USB_EPStartXfer+0x16e8>
 8007a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a3c:	801a      	strh	r2, [r3, #0]
 8007a3e:	e07c      	b.n	8007b3a <USB_EPStartXfer+0x17e2>
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b3e      	cmp	r3, #62	; 0x3e
 8007a4e:	d820      	bhi.n	8007a92 <USB_EPStartXfer+0x173a>
 8007a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d004      	beq.n	8007a80 <USB_EPStartXfer+0x1728>
 8007a76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	029b      	lsls	r3, r3, #10
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e053      	b.n	8007b3a <USB_EPStartXfer+0x17e2>
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f003 031f 	and.w	r3, r3, #31
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <USB_EPStartXfer+0x176a>
 8007ab8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007abc:	3b01      	subs	r3, #1
 8007abe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ac2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	029b      	lsls	r3, r3, #10
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	e02d      	b.n	8007b3a <USB_EPStartXfer+0x17e2>
 8007ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d125      	bne.n	8007b3a <USB_EPStartXfer+0x17e2>
 8007aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b04:	4413      	add	r3, r2
 8007b06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	011a      	lsls	r2, r3, #4
 8007b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b38:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 81fe 	beq.w	8007f48 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	881b      	ldrh	r3, [r3, #0]
 8007b68:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b6c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <USB_EPStartXfer+0x182c>
 8007b78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10d      	bne.n	8007ba0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b84:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 81db 	bne.w	8007f48 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b92:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 81d4 	bne.w	8007f48 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	441a      	add	r2, r3
 8007be4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]
 8007bfc:	e1a4      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	78db      	ldrb	r3, [r3, #3]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	f040 819a 	bne.w	8007f44 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699a      	ldr	r2, [r3, #24]
 8007c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d917      	bls.n	8007c5c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	699a      	ldr	r2, [r3, #24]
 8007c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4c:	1ad2      	subs	r2, r2, r3
 8007c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	619a      	str	r2, [r3, #24]
 8007c5a:	e00e      	b.n	8007c7a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d178      	bne.n	8007d7c <USB_EPStartXfer+0x1a24>
 8007c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cae:	4413      	add	r3, r2
 8007cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	011a      	lsls	r2, r3, #4
 8007cc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ccc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d116      	bne.n	8007d06 <USB_EPStartXfer+0x19ae>
 8007cd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cea:	801a      	strh	r2, [r3, #0]
 8007cec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	e06b      	b.n	8007dde <USB_EPStartXfer+0x1a86>
 8007d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8007d0c:	d818      	bhi.n	8007d40 <USB_EPStartXfer+0x19e8>
 8007d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d12:	085b      	lsrs	r3, r3, #1
 8007d14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d004      	beq.n	8007d2e <USB_EPStartXfer+0x19d6>
 8007d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d28:	3301      	adds	r3, #1
 8007d2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	029b      	lsls	r3, r3, #10
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e04e      	b.n	8007dde <USB_EPStartXfer+0x1a86>
 8007d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d44:	095b      	lsrs	r3, r3, #5
 8007d46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4e:	f003 031f 	and.w	r3, r3, #31
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d104      	bne.n	8007d60 <USB_EPStartXfer+0x1a08>
 8007d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	029b      	lsls	r3, r3, #10
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e030      	b.n	8007dde <USB_EPStartXfer+0x1a86>
 8007d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	785b      	ldrb	r3, [r3, #1]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d128      	bne.n	8007dde <USB_EPStartXfer+0x1a86>
 8007d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db0:	4413      	add	r3, r2
 8007db2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	011a      	lsls	r2, r3, #4
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc8:	4413      	add	r3, r2
 8007dca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d178      	bne.n	8007eee <USB_EPStartXfer+0x1b96>
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e20:	4413      	add	r3, r2
 8007e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	011a      	lsls	r2, r3, #4
 8007e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e38:	4413      	add	r3, r2
 8007e3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d116      	bne.n	8007e78 <USB_EPStartXfer+0x1b20>
 8007e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e74:	801a      	strh	r2, [r3, #0]
 8007e76:	e067      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
 8007e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e7e:	d818      	bhi.n	8007eb2 <USB_EPStartXfer+0x1b5a>
 8007e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d004      	beq.n	8007ea0 <USB_EPStartXfer+0x1b48>
 8007e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ea0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	029b      	lsls	r3, r3, #10
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	e04a      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
 8007eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <USB_EPStartXfer+0x1b7a>
 8007ec8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	029b      	lsls	r3, r3, #10
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	e02c      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
 8007eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d124      	bne.n	8007f48 <USB_EPStartXfer+0x1bf0>
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f14:	4413      	add	r3, r2
 8007f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	011a      	lsls	r2, r3, #4
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f40:	801a      	strh	r2, [r3, #0]
 8007f42:	e001      	b.n	8007f48 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e03a      	b.n	8007fbe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f72:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f7e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007f82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f86:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	441a      	add	r2, r3
 8007fa4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d020      	beq.n	800801c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ff0:	81bb      	strh	r3, [r7, #12]
 8007ff2:	89bb      	ldrh	r3, [r7, #12]
 8007ff4:	f083 0310 	eor.w	r3, r3, #16
 8007ff8:	81bb      	strh	r3, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	441a      	add	r2, r3
 8008004:	89bb      	ldrh	r3, [r7, #12]
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
 800801a:	e01f      	b.n	800805c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800802e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008032:	81fb      	strh	r3, [r7, #14]
 8008034:	89fb      	ldrh	r3, [r7, #14]
 8008036:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800803a:	81fb      	strh	r3, [r7, #14]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	89fb      	ldrh	r3, [r7, #14]
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	7b1b      	ldrb	r3, [r3, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f040 809d 	bne.w	80081b6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d04c      	beq.n	800811e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	823b      	strh	r3, [r7, #16]
 8008092:	8a3b      	ldrh	r3, [r7, #16]
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01b      	beq.n	80080d4 <USB_EPClearStall+0x6c>
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	81fb      	strh	r3, [r7, #14]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	441a      	add	r2, r3
 80080be:	89fb      	ldrh	r3, [r7, #14]
 80080c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	78db      	ldrb	r3, [r3, #3]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d06c      	beq.n	80081b6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f2:	81bb      	strh	r3, [r7, #12]
 80080f4:	89bb      	ldrh	r3, [r7, #12]
 80080f6:	f083 0320 	eor.w	r3, r3, #32
 80080fa:	81bb      	strh	r3, [r7, #12]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	441a      	add	r2, r3
 8008106:	89bb      	ldrh	r3, [r7, #12]
 8008108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800810c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	b29b      	uxth	r3, r3
 800811a:	8013      	strh	r3, [r2, #0]
 800811c:	e04b      	b.n	80081b6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	82fb      	strh	r3, [r7, #22]
 800812c:	8afb      	ldrh	r3, [r7, #22]
 800812e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01b      	beq.n	800816e <USB_EPClearStall+0x106>
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814c:	82bb      	strh	r3, [r7, #20]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	8abb      	ldrh	r3, [r7, #20]
 800815a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800815e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008162:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816a:	b29b      	uxth	r3, r3
 800816c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008184:	827b      	strh	r3, [r7, #18]
 8008186:	8a7b      	ldrh	r3, [r7, #18]
 8008188:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800818c:	827b      	strh	r3, [r7, #18]
 800818e:	8a7b      	ldrh	r3, [r7, #18]
 8008190:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008194:	827b      	strh	r3, [r7, #18]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	441a      	add	r2, r3
 80081a0:	8a7b      	ldrh	r3, [r7, #18]
 80081a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	371c      	adds	r7, #28
 80081bc:	46bd      	mov	sp, r7
 80081be:	bc80      	pop	{r7}
 80081c0:	4770      	bx	lr

080081c2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2280      	movs	r2, #128	; 0x80
 80081d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr

080081fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800821e:	b29b      	uxth	r3, r3
 8008220:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008222:	68fb      	ldr	r3, [r7, #12]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	bc80      	pop	{r7}
 800822c:	4770      	bx	lr

0800822e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008244:	b480      	push	{r7}
 8008246:	b08d      	sub	sp, #52	; 0x34
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4611      	mov	r1, r2
 8008250:	461a      	mov	r2, r3
 8008252:	460b      	mov	r3, r1
 8008254:	80fb      	strh	r3, [r7, #6]
 8008256:	4613      	mov	r3, r2
 8008258:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800825a:	88bb      	ldrh	r3, [r7, #4]
 800825c:	3301      	adds	r3, #1
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	005a      	lsls	r2, r3, #1
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800827c:	e01e      	b.n	80082bc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	3301      	adds	r3, #1
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	b29b      	uxth	r3, r3
 8008294:	461a      	mov	r2, r3
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	3302      	adds	r3, #2
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	3302      	adds	r3, #2
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	3301      	adds	r3, #1
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	3b01      	subs	r3, #1
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1dd      	bne.n	800827e <USB_WritePMA+0x3a>
  }
}
 80082c2:	bf00      	nop
 80082c4:	bf00      	nop
 80082c6:	3734      	adds	r7, #52	; 0x34
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b08b      	sub	sp, #44	; 0x2c
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4611      	mov	r1, r2
 80082da:	461a      	mov	r2, r3
 80082dc:	460b      	mov	r3, r1
 80082de:	80fb      	strh	r3, [r7, #6]
 80082e0:	4613      	mov	r3, r2
 80082e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082e4:	88bb      	ldrh	r3, [r7, #4]
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	005a      	lsls	r2, r3, #1
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008300:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
 8008306:	e01b      	b.n	8008340 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	3302      	adds	r3, #2
 8008314:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3301      	adds	r3, #1
 8008322:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	b2da      	uxtb	r2, r3
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	3301      	adds	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	3302      	adds	r3, #2
 8008338:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	3b01      	subs	r3, #1
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e0      	bne.n	8008308 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008346:	88bb      	ldrh	r3, [r7, #4]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	b2da      	uxtb	r2, r3
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	701a      	strb	r2, [r3, #0]
  }
}
 8008362:	bf00      	nop
 8008364:	372c      	adds	r7, #44	; 0x2c
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <LaserArray_Init>:
        UINT64_C(0b0111111111111111111110111111111111111111110111111111111111111111),
        UINT64_C(0b0111111111111111111111111111111111111111111111111111111111111111)
};


HAL_StatusTypeDef LaserArray_Init(LaserArray_t *la, const LaserArray_Config_t *config) {
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b098      	sub	sp, #96	; 0x60
 8008370:	af02      	add	r7, sp, #8
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
    // store the config
    la->config = *config;
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	4614      	mov	r4, r2
 800837c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800837e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // create the semaphore lock
    const osSemaphoreAttr_t lock_attr = {
 8008382:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	605a      	str	r2, [r3, #4]
 800838c:	609a      	str	r2, [r3, #8]
 800838e:	60da      	str	r2, [r3, #12]
 8008390:	4b5a      	ldr	r3, [pc, #360]	; (80084fc <LaserArray_Init+0x190>)
 8008392:	647b      	str	r3, [r7, #68]	; 0x44
            .name = "la_lock"
    };
    la->lock = osSemaphoreNew(1, 1, &lock_attr);
 8008394:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008398:	461a      	mov	r2, r3
 800839a:	2101      	movs	r1, #1
 800839c:	2001      	movs	r0, #1
 800839e:	f001 fe63 	bl	800a068 <osSemaphoreNew>
 80083a2:	4602      	mov	r2, r0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	611a      	str	r2, [r3, #16]

    // clear the diode state and transfer data arrays
    memset(la->diodes, 0, sizeof(la->diodes));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3314      	adds	r3, #20
 80083ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80083b0:	2100      	movs	r1, #0
 80083b2:	4618      	mov	r0, r3
 80083b4:	f005 fce9 	bl	800dd8a <memset>
    memset(la->tx_data, 0, sizeof(la->tx_data));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80083be:	22fc      	movs	r2, #252	; 0xfc
 80083c0:	2100      	movs	r1, #0
 80083c2:	4618      	mov	r0, r3
 80083c4:	f005 fce1 	bl	800dd8a <memset>

    // enable spi
    __HAL_SPI_ENABLE(la->config.hspi);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083da:	601a      	str	r2, [r3, #0]

    // setup timer dma to trigger the transmission of spi data
    HAL_StatusTypeDef ret = HAL_DMA_Start_IT(la->config.htim_transfer->hdma[TIM_DMA_ID_UPDATE],
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	6a18      	ldr	r0, [r3, #32]
            (uint32_t) la->tx_data,
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
    HAL_StatusTypeDef ret = HAL_DMA_Start_IT(la->config.htim_transfer->hdma[TIM_DMA_ID_UPDATE],
 80083e8:	4619      	mov	r1, r3
            (uint32_t) &la->config.hspi->Instance->DR,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
    HAL_StatusTypeDef ret = HAL_DMA_Start_IT(la->config.htim_transfer->hdma[TIM_DMA_ID_UPDATE],
 80083f2:	461a      	mov	r2, r3
 80083f4:	237e      	movs	r3, #126	; 0x7e
 80083f6:	f7f8 fe13 	bl	8001020 <HAL_DMA_Start_IT>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            sizeof(la->tx_data) / sizeof(uint16_t));
    RETURN_ON_ERROR(ret,
 8008400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008404:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8008408:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800840c:	2b00      	cmp	r3, #0
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d013      	beq.n	8008442 <LaserArray_Init+0xd6>
 800841a:	4b39      	ldr	r3, [pc, #228]	; (8008500 <LaserArray_Init+0x194>)
 800841c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8008420:	461d      	mov	r5, r3
 8008422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008426:	682b      	ldr	r3, [r5, #0]
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800842c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	2374      	movs	r3, #116	; 0x74
 8008434:	4a33      	ldr	r2, [pc, #204]	; (8008504 <LaserArray_Init+0x198>)
 8008436:	4834      	ldr	r0, [pc, #208]	; (8008508 <LaserArray_Init+0x19c>)
 8008438:	f005 fd44 	bl	800dec4 <iprintf>
 800843c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8008440:	e057      	b.n	80084f2 <LaserArray_Init+0x186>
            "Failed to start dma stream");

    // enable dma on the timer
    __HAL_TIM_ENABLE_DMA(la->config.htim_transfer, TIM_DMA_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68da      	ldr	r2, [r3, #12]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008454:	60da      	str	r2, [r3, #12]

    // start the transfer timer with pwm enabled
    RETURN_ON_ERROR(HAL_TIM_PWM_Start(la->config.htim_transfer, la->config.rclk_channel),
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f7fb fce9 	bl	8003e38 <HAL_TIM_PWM_Start>
 8008466:	4603      	mov	r3, r0
 8008468:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800846c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008470:	2b00      	cmp	r3, #0
 8008472:	bf14      	ite	ne
 8008474:	2301      	movne	r3, #1
 8008476:	2300      	moveq	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d013      	beq.n	80084a6 <LaserArray_Init+0x13a>
 800847e:	4b20      	ldr	r3, [pc, #128]	; (8008500 <LaserArray_Init+0x194>)
 8008480:	f107 041c 	add.w	r4, r7, #28
 8008484:	461d      	mov	r5, r3
 8008486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008490:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	237b      	movs	r3, #123	; 0x7b
 8008498:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <LaserArray_Init+0x198>)
 800849a:	481c      	ldr	r0, [pc, #112]	; (800850c <LaserArray_Init+0x1a0>)
 800849c:	f005 fd12 	bl	800dec4 <iprintf>
 80084a0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80084a4:	e025      	b.n	80084f2 <LaserArray_Init+0x186>
            "Failed to start transfer timer in pwm mode");

    // start the fade update timer
    RETURN_ON_ERROR(HAL_TIM_Base_Start_IT(la->config.htim_fade),
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fb fc0c 	bl	8003cc8 <HAL_TIM_Base_Start_IT>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80084b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bf14      	ite	ne
 80084be:	2301      	movne	r3, #1
 80084c0:	2300      	moveq	r3, #0
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d013      	beq.n	80084f0 <LaserArray_Init+0x184>
 80084c8:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <LaserArray_Init+0x194>)
 80084ca:	f107 0408 	add.w	r4, r7, #8
 80084ce:	461d      	mov	r5, r3
 80084d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	6979      	ldr	r1, [r7, #20]
 80084da:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	237f      	movs	r3, #127	; 0x7f
 80084e2:	4a08      	ldr	r2, [pc, #32]	; (8008504 <LaserArray_Init+0x198>)
 80084e4:	480a      	ldr	r0, [pc, #40]	; (8008510 <LaserArray_Init+0x1a4>)
 80084e6:	f005 fced 	bl	800dec4 <iprintf>
 80084ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80084ee:	e000      	b.n	80084f2 <LaserArray_Init+0x186>
            "Failed to start fade update timer");

    return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3758      	adds	r7, #88	; 0x58
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bdb0      	pop	{r4, r5, r7, pc}
 80084fa:	bf00      	nop
 80084fc:	0800eca0 	.word	0x0800eca0
 8008500:	0800ed7c 	.word	0x0800ed7c
 8008504:	0800eca8 	.word	0x0800eca8
 8008508:	0800ecc8 	.word	0x0800ecc8
 800850c:	0800ecfc 	.word	0x0800ecfc
 8008510:	0800ed40 	.word	0x0800ed40

08008514 <_LaserArray_SetBrightness>:

static void _LaserArray_SetBrightness(LaserArray_t *la, uint8_t diode_index, uint8_t brightness) {
 8008514:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8008518:	b086      	sub	sp, #24
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	70fb      	strb	r3, [r7, #3]
 8008522:	4613      	mov	r3, r2
 8008524:	70bb      	strb	r3, [r7, #2]
    // clamp the brightness
    if (brightness >= LA_NUM_BRIGHTNESS_LEVELS) {
 8008526:	78bb      	ldrb	r3, [r7, #2]
 8008528:	2b3f      	cmp	r3, #63	; 0x3f
 800852a:	d901      	bls.n	8008530 <_LaserArray_SetBrightness+0x1c>
        brightness = LA_NUM_BRIGHTNESS_LEVELS - 1;
 800852c:	233f      	movs	r3, #63	; 0x3f
 800852e:	70bb      	strb	r3, [r7, #2]
    }

    // return if the brightness did not change
    if (la->diodes[diode_index].current_brightness == brightness) {
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	3314      	adds	r3, #20
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	78ba      	ldrb	r2, [r7, #2]
 8008544:	429a      	cmp	r2, r3
 8008546:	d057      	beq.n	80085f8 <_LaserArray_SetBrightness+0xe4>
        return;
    }

    // store the new brightness value
    la->diodes[diode_index].current_brightness = brightness;
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	4613      	mov	r3, r2
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	3314      	adds	r3, #20
 8008558:	78ba      	ldrb	r2, [r7, #2]
 800855a:	701a      	strb	r2, [r3, #0]

    // lookup the brightness pattern
    la_brightness_pattern_t pattern = la_brightness_patterns[brightness];
 800855c:	78bb      	ldrb	r3, [r7, #2]
 800855e:	4a29      	ldr	r2, [pc, #164]	; (8008604 <_LaserArray_SetBrightness+0xf0>)
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	4413      	add	r3, r2
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	e9c7 2302 	strd	r2, r3, [r7, #8]

    // iterate through each diode bitmask
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	e03e      	b.n	80085f0 <_LaserArray_SetBrightness+0xdc>
        // either set or unset the corresponding bit depending on the pattern
        if ((pattern >> i) & UINT32_C(1)) {
 8008572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008576:	6979      	ldr	r1, [r7, #20]
 8008578:	f1c1 0620 	rsb	r6, r1, #32
 800857c:	f1a1 0020 	sub.w	r0, r1, #32
 8008580:	fa22 f401 	lsr.w	r4, r2, r1
 8008584:	fa03 f606 	lsl.w	r6, r3, r6
 8008588:	4334      	orrs	r4, r6
 800858a:	fa23 f000 	lsr.w	r0, r3, r0
 800858e:	4304      	orrs	r4, r0
 8008590:	fa23 f501 	lsr.w	r5, r3, r1
 8008594:	f004 0801 	and.w	r8, r4, #1
 8008598:	f04f 0900 	mov.w	r9, #0
 800859c:	ea58 0309 	orrs.w	r3, r8, r9
 80085a0:	d011      	beq.n	80085c6 <_LaserArray_SetBrightness+0xb2>
            la->tx_data[i] |= UINT32_C(1) << diode_index;
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	3364      	adds	r3, #100	; 0x64
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f303 	lsl.w	r3, r1, r3
 80085b6:	431a      	orrs	r2, r3
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	3364      	adds	r3, #100	; 0x64
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	605a      	str	r2, [r3, #4]
 80085c4:	e011      	b.n	80085ea <_LaserArray_SetBrightness+0xd6>
        } else {
            la->tx_data[i] &= ~(UINT32_C(1) << diode_index);
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	3364      	adds	r3, #100	; 0x64
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	2101      	movs	r1, #1
 80085d6:	fa01 f303 	lsl.w	r3, r1, r3
 80085da:	43db      	mvns	r3, r3
 80085dc:	401a      	ands	r2, r3
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	3364      	adds	r3, #100	; 0x64
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < LA_TX_DATA_LENGTH; i++) {
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	3301      	adds	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2b3e      	cmp	r3, #62	; 0x3e
 80085f4:	ddbd      	ble.n	8008572 <_LaserArray_SetBrightness+0x5e>
 80085f6:	e000      	b.n	80085fa <_LaserArray_SetBrightness+0xe6>
        return;
 80085f8:	bf00      	nop
        }
    }
}
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8008602:	4770      	bx	lr
 8008604:	20000010 	.word	0x20000010

08008608 <LaserArray_FadeBrightness>:
exit:
    osSemaphoreRelease(la->lock);
    return ret;
}

HAL_StatusTypeDef LaserArray_FadeBrightness(LaserArray_t *la, uint8_t diode_index, uint8_t brightness, uint32_t duration) {
 8008608:	b5b0      	push	{r4, r5, r7, lr}
 800860a:	b08e      	sub	sp, #56	; 0x38
 800860c:	af02      	add	r7, sp, #8
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	607b      	str	r3, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	72fb      	strb	r3, [r7, #11]
 8008616:	4613      	mov	r3, r2
 8008618:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef ret;
    osSemaphoreAcquire(la->lock, osWaitForever);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f04f 31ff 	mov.w	r1, #4294967295
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fdbc 	bl	800a1a0 <osSemaphoreAcquire>

    // validate the diode index
    GOTO_EXIT_ON_FALSE(diode_index < LA_NUM_DIODES, HAL_ERROR,
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	2b1f      	cmp	r3, #31
 800862c:	bf8c      	ite	hi
 800862e:	2301      	movhi	r3, #1
 8008630:	2300      	movls	r3, #0
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d015      	beq.n	8008664 <LaserArray_FadeBrightness+0x5c>
 8008638:	4b26      	ldr	r3, [pc, #152]	; (80086d4 <LaserArray_FadeBrightness+0xcc>)
 800863a:	f107 0414 	add.w	r4, r7, #20
 800863e:	461d      	mov	r5, r3
 8008640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	6a39      	ldr	r1, [r7, #32]
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	2201      	movs	r2, #1
 800864e:	9201      	str	r2, [sp, #4]
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	23b7      	movs	r3, #183	; 0xb7
 8008654:	4a20      	ldr	r2, [pc, #128]	; (80086d8 <LaserArray_FadeBrightness+0xd0>)
 8008656:	4821      	ldr	r0, [pc, #132]	; (80086dc <LaserArray_FadeBrightness+0xd4>)
 8008658:	f005 fc34 	bl	800dec4 <iprintf>
 800865c:	2301      	movs	r3, #1
 800865e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008662:	e02c      	b.n	80086be <LaserArray_FadeBrightness+0xb6>
            "Invalid diode index: %u", diode_index);

    // setup the diode_index reference
    LaserArray_Diode_t *diode = &la->diodes[diode_index];
 8008664:	7afa      	ldrb	r2, [r7, #11]
 8008666:	4613      	mov	r3, r2
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	3310      	adds	r3, #16
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	3304      	adds	r3, #4
 8008676:	62bb      	str	r3, [r7, #40]	; 0x28
    diode->source_brightness = diode->current_brightness;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	705a      	strb	r2, [r3, #1]
    diode->target_brightness = brightness;
 8008680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008682:	7aba      	ldrb	r2, [r7, #10]
 8008684:	709a      	strb	r2, [r3, #2]
    diode->transition_duration = duration * LA_FADE_TICK_RATE / 1000;
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4613      	mov	r3, r2
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	1a9b      	subs	r3, r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	461a      	mov	r2, r3
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <LaserArray_FadeBrightness+0xd8>)
 8008694:	fba3 2302 	umull	r2, r3, r3, r2
 8008698:	099a      	lsrs	r2, r3, #6
 800869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869c:	605a      	str	r2, [r3, #4]
    diode->transition_tick = 0;
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	2200      	movs	r2, #0
 80086a2:	609a      	str	r2, [r3, #8]

    // if duration is zero, set the brightness immediately
    if (diode->transition_duration == 0) {
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <LaserArray_FadeBrightness+0xb0>
        _LaserArray_SetBrightness(la, diode_index, brightness);
 80086ac:	7aba      	ldrb	r2, [r7, #10]
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	4619      	mov	r1, r3
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7ff ff2e 	bl	8008514 <_LaserArray_SetBrightness>
    }

    ret = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
exit:
    osSemaphoreRelease(la->lock);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 fdd2 	bl	800a26c <osSemaphoreRelease>
    return ret;
 80086c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3730      	adds	r7, #48	; 0x30
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bdb0      	pop	{r4, r5, r7, pc}
 80086d4:	0800ed7c 	.word	0x0800ed7c
 80086d8:	0800eca8 	.word	0x0800eca8
 80086dc:	0800ed90 	.word	0x0800ed90
 80086e0:	10624dd3 	.word	0x10624dd3

080086e4 <LaserArray_TIM_PeriodElapsedHandler>:

HAL_StatusTypeDef LaserArray_TIM_PeriodElapsedHandler(LaserArray_t *la, TIM_HandleTypeDef *htim) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
    // ignore callbacks addressed to other timers
    if (htim->Instance != la->config.htim_fade->Instance) {
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d001      	beq.n	8008700 <LaserArray_TIM_PeriodElapsedHandler+0x1c>
        return HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	e040      	b.n	8008782 <LaserArray_TIM_PeriodElapsedHandler+0x9e>
    }

    // update the fade for each diode
    for (uint8_t diode_index = 0; diode_index < LA_NUM_DIODES; diode_index++) {
 8008700:	2300      	movs	r3, #0
 8008702:	77fb      	strb	r3, [r7, #31]
 8008704:	e039      	b.n	800877a <LaserArray_TIM_PeriodElapsedHandler+0x96>
        LaserArray_Diode_t *diode = &la->diodes[diode_index];
 8008706:	7ffa      	ldrb	r2, [r7, #31]
 8008708:	4613      	mov	r3, r2
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	3310      	adds	r3, #16
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	3304      	adds	r3, #4
 8008718:	61bb      	str	r3, [r7, #24]

        // skip finished transitions
        if (diode->transition_tick == diode->transition_duration) {
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	429a      	cmp	r2, r3
 8008724:	d025      	beq.n	8008772 <LaserArray_TIM_PeriodElapsedHandler+0x8e>
            continue;
        }

        // calculate the new brightness
        int32_t source = diode->source_brightness;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	785b      	ldrb	r3, [r3, #1]
 800872a:	617b      	str	r3, [r7, #20]
        int32_t range = diode->target_brightness - diode->source_brightness;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	789b      	ldrb	r3, [r3, #2]
 8008730:	461a      	mov	r2, r3
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	613b      	str	r3, [r7, #16]
        uint8_t brightness = source + range * (int32_t) (diode->transition_tick + 1) / (int32_t) diode->transition_duration;
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	3301      	adds	r3, #1
 8008740:	461a      	mov	r2, r3
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	fb02 f303 	mul.w	r3, r2, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	6852      	ldr	r2, [r2, #4]
 800874c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008750:	b2da      	uxtb	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	4413      	add	r3, r2
 8008758:	73fb      	strb	r3, [r7, #15]

        // set the new brightness value
        _LaserArray_SetBrightness(la, diode_index, brightness);
 800875a:	7bfa      	ldrb	r2, [r7, #15]
 800875c:	7ffb      	ldrb	r3, [r7, #31]
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fed7 	bl	8008514 <_LaserArray_SetBrightness>

        // update the tick counter
        diode->transition_tick++;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	609a      	str	r2, [r3, #8]
 8008770:	e000      	b.n	8008774 <LaserArray_TIM_PeriodElapsedHandler+0x90>
            continue;
 8008772:	bf00      	nop
    for (uint8_t diode_index = 0; diode_index < LA_NUM_DIODES; diode_index++) {
 8008774:	7ffb      	ldrb	r3, [r7, #31]
 8008776:	3301      	adds	r3, #1
 8008778:	77fb      	strb	r3, [r7, #31]
 800877a:	7ffb      	ldrb	r3, [r7, #31]
 800877c:	2b1f      	cmp	r3, #31
 800877e:	d9c2      	bls.n	8008706 <LaserArray_TIM_PeriodElapsedHandler+0x22>
    }

    return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3720      	adds	r7, #32
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
 8008792:	460b      	mov	r3, r1
 8008794:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8008796:	2358      	movs	r3, #88	; 0x58
 8008798:	2201      	movs	r2, #1
 800879a:	2101      	movs	r1, #1
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f005 f862 	bl	800d866 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80087aa:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 80087ae:	f005 f96f 	bl	800da90 <USBD_static_malloc>
 80087b2:	4602      	mov	r2, r0
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBD_AUDIO_Init+0x3e>
  {
    return USBD_FAIL;
 80087c4:	2302      	movs	r3, #2
 80087c6:	e034      	b.n	8008832 <USBD_AUDIO_Init+0xa8>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ce:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087dc:	2203      	movs	r2, #3
 80087de:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
    haudio->wr_ptr = 0U;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88
    haudio->rd_ptr = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8a3 2b86 	strh.w	r2, [r3, #2950]	; 0xb86
    haudio->rd_enable = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	2146      	movs	r1, #70	; 0x46
 8008812:	f245 6054 	movw	r0, #22100	; 0x5654
 8008816:	4798      	blx	r3
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <USBD_AUDIO_Init+0x98>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 800881e:	2302      	movs	r3, #2
 8008820:	e007      	b.n	8008832 <USBD_AUDIO_Init+0xa8>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1d1a      	adds	r2, r3, #4
 8008826:	2358      	movs	r3, #88	; 0x58
 8008828:	2101      	movs	r1, #1
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f005 f90c 	bl	800da48 <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8008846:	2101      	movs	r1, #1
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f005 f832 	bl	800d8b2 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00f      	beq.n	8008880 <USBD_AUDIO_DeInit+0x46>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	2000      	movs	r0, #0
 800886a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008872:	4618      	mov	r0, r3
 8008874:	f005 f918 	bl	800daa8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a4:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01a      	beq.n	80088e8 <USBD_AUDIO_Setup+0x5c>
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	f040 809c 	bne.w	80089f0 <USBD_AUDIO_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d006      	beq.n	80088ce <USBD_AUDIO_Setup+0x42>
 80088c0:	2b81      	cmp	r3, #129	; 0x81
 80088c2:	d109      	bne.n	80088d8 <USBD_AUDIO_Setup+0x4c>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f980 	bl	8008bcc <AUDIO_REQ_GetCurrent>
          break;
 80088cc:	e00b      	b.n	80088e6 <USBD_AUDIO_Setup+0x5a>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f99b 	bl	8008c0c <AUDIO_REQ_SetCurrent>
          break;
 80088d6:	e006      	b.n	80088e6 <USBD_AUDIO_Setup+0x5a>

        default:
          USBD_CtlError(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 f997 	bl	8009c0e <USBD_CtlError>
          ret = USBD_FAIL;
 80088e0:	2302      	movs	r3, #2
 80088e2:	75fb      	strb	r3, [r7, #23]
          break;
 80088e4:	bf00      	nop
      }
      break;
 80088e6:	e08a      	b.n	80089fe <USBD_AUDIO_Setup+0x172>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	785b      	ldrb	r3, [r3, #1]
 80088ec:	2b0b      	cmp	r3, #11
 80088ee:	d876      	bhi.n	80089de <USBD_AUDIO_Setup+0x152>
 80088f0:	a201      	add	r2, pc, #4	; (adr r2, 80088f8 <USBD_AUDIO_Setup+0x6c>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	08008929 	.word	0x08008929
 80088fc:	080089df 	.word	0x080089df
 8008900:	080089df 	.word	0x080089df
 8008904:	080089df 	.word	0x080089df
 8008908:	080089df 	.word	0x080089df
 800890c:	080089df 	.word	0x080089df
 8008910:	08008951 	.word	0x08008951
 8008914:	080089df 	.word	0x080089df
 8008918:	080089df 	.word	0x080089df
 800891c:	080089df 	.word	0x080089df
 8008920:	0800897b 	.word	0x0800897b
 8008924:	080089a1 	.word	0x080089a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892e:	2b03      	cmp	r3, #3
 8008930:	d107      	bne.n	8008942 <USBD_AUDIO_Setup+0xb6>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008932:	f107 0308 	add.w	r3, r7, #8
 8008936:	2202      	movs	r2, #2
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 f9d1 	bl	8009ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008940:	e055      	b.n	80089ee <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f001 f962 	bl	8009c0e <USBD_CtlError>
            ret = USBD_FAIL;
 800894a:	2302      	movs	r3, #2
 800894c:	75fb      	strb	r3, [r7, #23]
          break;
 800894e:	e04e      	b.n	80089ee <USBD_AUDIO_Setup+0x162>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	885b      	ldrh	r3, [r3, #2]
 8008954:	0a1b      	lsrs	r3, r3, #8
 8008956:	b29b      	uxth	r3, r3
 8008958:	2b21      	cmp	r3, #33	; 0x21
 800895a:	d147      	bne.n	80089ec <USBD_AUDIO_Setup+0x160>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 800895c:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <USBD_AUDIO_Setup+0x17c>)
 800895e:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	88db      	ldrh	r3, [r3, #6]
 8008964:	2b09      	cmp	r3, #9
 8008966:	bf28      	it	cs
 8008968:	2309      	movcs	r3, #9
 800896a:	817b      	strh	r3, [r7, #10]

            USBD_CtlSendData(pdev, pbuf, len);
 800896c:	897b      	ldrh	r3, [r7, #10]
 800896e:	461a      	mov	r2, r3
 8008970:	68f9      	ldr	r1, [r7, #12]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 f9b5 	bl	8009ce2 <USBD_CtlSendData>
          }
          break;
 8008978:	e038      	b.n	80089ec <USBD_AUDIO_Setup+0x160>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008980:	2b03      	cmp	r3, #3
 8008982:	d106      	bne.n	8008992 <USBD_AUDIO_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	2201      	movs	r2, #1
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 f9a9 	bl	8009ce2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008990:	e02d      	b.n	80089ee <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 f93a 	bl	8009c0e <USBD_CtlError>
            ret = USBD_FAIL;
 800899a:	2302      	movs	r3, #2
 800899c:	75fb      	strb	r3, [r7, #23]
          break;
 800899e:	e026      	b.n	80089ee <USBD_AUDIO_Setup+0x162>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d112      	bne.n	80089d0 <USBD_AUDIO_Setup+0x144>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d806      	bhi.n	80089c2 <USBD_AUDIO_Setup+0x136>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	885b      	ldrh	r3, [r3, #2]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	461a      	mov	r2, r3
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089c0:	e015      	b.n	80089ee <USBD_AUDIO_Setup+0x162>
              USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f001 f922 	bl	8009c0e <USBD_CtlError>
              ret = USBD_FAIL;
 80089ca:	2302      	movs	r3, #2
 80089cc:	75fb      	strb	r3, [r7, #23]
          break;
 80089ce:	e00e      	b.n	80089ee <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 f91b 	bl	8009c0e <USBD_CtlError>
            ret = USBD_FAIL;
 80089d8:	2302      	movs	r3, #2
 80089da:	75fb      	strb	r3, [r7, #23]
          break;
 80089dc:	e007      	b.n	80089ee <USBD_AUDIO_Setup+0x162>

        default:
          USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 f914 	bl	8009c0e <USBD_CtlError>
          ret = USBD_FAIL;
 80089e6:	2302      	movs	r3, #2
 80089e8:	75fb      	strb	r3, [r7, #23]
          break;
 80089ea:	e000      	b.n	80089ee <USBD_AUDIO_Setup+0x162>
          break;
 80089ec:	bf00      	nop
      }
      break;
 80089ee:	e006      	b.n	80089fe <USBD_AUDIO_Setup+0x172>
    default:
      USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 f90b 	bl	8009c0e <USBD_CtlError>
      ret = USBD_FAIL;
 80089f8:	2302      	movs	r3, #2
 80089fa:	75fb      	strb	r3, [r7, #23]
      break;
 80089fc:	bf00      	nop
  }

  return ret;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000025a 	.word	0x2000025a

08008a0c <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_CfgDesc);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	226d      	movs	r2, #109	; 0x6d
 8008a18:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8008a1a:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	20000248 	.word	0x20000248

08008a2c <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  /* Only OUT data are processed */
  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr

08008a44 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a52:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5a:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	; 0xb8a
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d11d      	bne.n	8008a9e <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a68:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	; 0xbcc
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d116      	bne.n	8008a9e <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a7e:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	; 0xb8b
 8008a82:	4610      	mov	r0, r2
 8008a84:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
      haudio->control.len = 0U;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    }
  }

  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr

08008ad0 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr

08008ae8 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b12:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d153      	bne.n	8008bc2 <USBD_AUDIO_DataOut+0xc2>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b20:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8008b24:	3358      	adds	r3, #88	; 0x58
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2e:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b38:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8008b3c:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8008b40:	d11c      	bne.n	8008b7c <USBD_AUDIO_DataOut+0x7c>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b54:	f893 3b84 	ldrb.w	r3, [r3, #2948]	; 0xb84
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d10f      	bne.n	8008b7c <USBD_AUDIO_DataOut+0x7c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	1d10      	adds	r0, r2, #4
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8008b6e:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b82:	f893 3b85 	ldrb.w	r3, [r3, #2949]	; 0xb85
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10d      	bne.n	8008ba6 <USBD_AUDIO_DataOut+0xa6>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b90:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8008b94:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8008b98:	d105      	bne.n	8008ba6 <USBD_AUDIO_DataOut+0xa6>
      {
        haudio->rd_enable = 1U;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bac:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	1d1a      	adds	r2, r3, #4
 8008bb8:	2358      	movs	r3, #88	; 0x58
 8008bba:	2101      	movs	r1, #1
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f004 ff43 	bl	800da48 <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bdc:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8008be4:	330b      	adds	r3, #11
 8008be6:	2240      	movs	r2, #64	; 0x40
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f005 f8cd 	bl	800dd8a <memset>

  /* Send the current mute state */
  USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8008bf6:	330b      	adds	r3, #11
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	88d2      	ldrh	r2, [r2, #6]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f001 f86f 	bl	8009ce2 <USBD_CtlSendData>
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1c:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d021      	beq.n	8008c6a <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8008c2c:	330b      	adds	r3, #11
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	88d2      	ldrh	r2, [r2, #6]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 f882 	bl	8009d3e <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	88db      	ldrh	r3, [r3, #6]
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c52:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	889b      	ldrh	r3, [r3, #4]
 8008c5a:	0a1b      	lsrs	r3, r3, #8
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c66:	f883 2bcc 	strb.w	r2, [r3, #3020]	; 0xbcc
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	220a      	movs	r2, #10
 8008c80:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8008c82:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	200002b8 	.word	0x200002b8

08008c94 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                      USBD_AUDIO_ItfTypeDef *fops)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData = fops;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	370c      	adds	r7, #12
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc80      	pop	{r7}
 8008cb6:	4770      	bx	lr

08008cb8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e01a      	b.n	8008d06 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	79fa      	ldrb	r2, [r7, #7]
 8008cfc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f004 fd56 	bl	800d7b0 <USBD_LL_Init>

  return USBD_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d006      	beq.n	8008d30 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
 8008d2e:	e001      	b.n	8008d34 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008d30:	2302      	movs	r3, #2
 8008d32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr

08008d40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f004 fd71 	bl	800d830 <USBD_LL_Start>

  return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc80      	pop	{r7}
 8008d6a:	4770      	bx	lr

08008d6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00c      	beq.n	8008da0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	4611      	mov	r1, r2
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	4798      	blx	r3
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	78fa      	ldrb	r2, [r7, #3]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	4798      	blx	r3

  return USBD_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fed7 	bl	8009b96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e04:	f003 031f 	and.w	r3, r3, #31
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d016      	beq.n	8008e3a <USBD_LL_SetupStage+0x6a>
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d81c      	bhi.n	8008e4a <USBD_LL_SetupStage+0x7a>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <USBD_LL_SetupStage+0x4a>
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d008      	beq.n	8008e2a <USBD_LL_SetupStage+0x5a>
 8008e18:	e017      	b.n	8008e4a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f9ca 	bl	80091bc <USBD_StdDevReq>
      break;
 8008e28:	e01a      	b.n	8008e60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa2c 	bl	8009290 <USBD_StdItfReq>
      break;
 8008e38:	e012      	b.n	8008e60 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa6c 	bl	8009320 <USBD_StdEPReq>
      break;
 8008e48:	e00a      	b.n	8008e60 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f004 fd49 	bl	800d8f0 <USBD_LL_StallEP>
      break;
 8008e5e:	bf00      	nop
  }

  return USBD_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b086      	sub	sp, #24
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	460b      	mov	r3, r1
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e78:	7afb      	ldrb	r3, [r7, #11]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d14b      	bne.n	8008f16 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d134      	bne.n	8008efa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	68da      	ldr	r2, [r3, #12]
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d919      	bls.n	8008ed0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	1ad2      	subs	r2, r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	68da      	ldr	r2, [r3, #12]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d203      	bcs.n	8008ebe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	e002      	b.n	8008ec4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 ff56 	bl	8009d7a <USBD_CtlContinueRx>
 8008ece:	e038      	b.n	8008f42 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00a      	beq.n	8008ef2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d105      	bne.n	8008ef2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f000 ff53 	bl	8009d9e <USBD_CtlSendStatus>
 8008ef8:	e023      	b.n	8008f42 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f00:	2b05      	cmp	r3, #5
 8008f02:	d11e      	bne.n	8008f42 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f004 fcee 	bl	800d8f0 <USBD_LL_StallEP>
 8008f14:	e015      	b.n	8008f42 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d108      	bne.n	8008f3e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	7afa      	ldrb	r2, [r7, #11]
 8008f36:	4611      	mov	r1, r2
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	4798      	blx	r3
 8008f3c:	e001      	b.n	8008f42 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e000      	b.n	8008f44 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	460b      	mov	r3, r1
 8008f56:	607a      	str	r2, [r7, #4]
 8008f58:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008f5a:	7afb      	ldrb	r3, [r7, #11]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d17f      	bne.n	8009060 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3314      	adds	r3, #20
 8008f64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d15c      	bne.n	800902a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d915      	bls.n	8008fa8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	1ad2      	subs	r2, r2, r3
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 fec0 	bl	8009d1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f004 fd51 	bl	800da48 <USBD_LL_PrepareReceive>
 8008fa6:	e04e      	b.n	8009046 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	6912      	ldr	r2, [r2, #16]
 8008fb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fb4:	fb01 f202 	mul.w	r2, r1, r2
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d11c      	bne.n	8008ff8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d316      	bcc.n	8008ff8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	689a      	ldr	r2, [r3, #8]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d20f      	bcs.n	8008ff8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2100      	movs	r1, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fe9c 	bl	8009d1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fea:	2300      	movs	r3, #0
 8008fec:	2200      	movs	r2, #0
 8008fee:	2100      	movs	r1, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f004 fd29 	bl	800da48 <USBD_LL_PrepareReceive>
 8008ff6:	e026      	b.n	8009046 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800900a:	2b03      	cmp	r3, #3
 800900c:	d105      	bne.n	800901a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800901a:	2180      	movs	r1, #128	; 0x80
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f004 fc67 	bl	800d8f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 fece 	bl	8009dc4 <USBD_CtlReceiveStatus>
 8009028:	e00d      	b.n	8009046 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009030:	2b04      	cmp	r3, #4
 8009032:	d004      	beq.n	800903e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800903a:	2b00      	cmp	r3, #0
 800903c:	d103      	bne.n	8009046 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800903e:	2180      	movs	r1, #128	; 0x80
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f004 fc55 	bl	800d8f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800904c:	2b01      	cmp	r3, #1
 800904e:	d11d      	bne.n	800908c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f7ff fe81 	bl	8008d58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800905e:	e015      	b.n	800908c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00d      	beq.n	8009088 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009072:	2b03      	cmp	r3, #3
 8009074:	d108      	bne.n	8009088 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	7afa      	ldrb	r2, [r7, #11]
 8009080:	4611      	mov	r1, r2
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	4798      	blx	r3
 8009086:	e001      	b.n	800908c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009088:	2302      	movs	r3, #2
 800908a:	e000      	b.n	800908e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800909e:	2340      	movs	r3, #64	; 0x40
 80090a0:	2200      	movs	r2, #0
 80090a2:	2100      	movs	r1, #0
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f004 fbde 	bl	800d866 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2240      	movs	r2, #64	; 0x40
 80090b6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090ba:	2340      	movs	r3, #64	; 0x40
 80090bc:	2200      	movs	r2, #0
 80090be:	2180      	movs	r1, #128	; 0x80
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f004 fbd0 	bl	800d866 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2240      	movs	r2, #64	; 0x40
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d009      	beq.n	800910e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	6852      	ldr	r2, [r2, #4]
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	4611      	mov	r1, r2
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
  }

  return USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	bc80      	pop	{r7}
 8009134:	4770      	bx	lr

08009136 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009136:	b480      	push	{r7}
 8009138:	b083      	sub	sp, #12
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2204      	movs	r2, #4
 800914e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr

0800915e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	2b04      	cmp	r3, #4
 800916e:	d105      	bne.n	800917c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr

08009188 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009196:	2b03      	cmp	r3, #3
 8009198:	d10b      	bne.n	80091b2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d2:	2b40      	cmp	r3, #64	; 0x40
 80091d4:	d005      	beq.n	80091e2 <USBD_StdDevReq+0x26>
 80091d6:	2b40      	cmp	r3, #64	; 0x40
 80091d8:	d84f      	bhi.n	800927a <USBD_StdDevReq+0xbe>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <USBD_StdDevReq+0x36>
 80091de:	2b20      	cmp	r3, #32
 80091e0:	d14b      	bne.n	800927a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
      break;
 80091f0:	e048      	b.n	8009284 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	785b      	ldrb	r3, [r3, #1]
 80091f6:	2b09      	cmp	r3, #9
 80091f8:	d839      	bhi.n	800926e <USBD_StdDevReq+0xb2>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_StdDevReq+0x44>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009251 	.word	0x08009251
 8009204:	08009265 	.word	0x08009265
 8009208:	0800926f 	.word	0x0800926f
 800920c:	0800925b 	.word	0x0800925b
 8009210:	0800926f 	.word	0x0800926f
 8009214:	08009233 	.word	0x08009233
 8009218:	08009229 	.word	0x08009229
 800921c:	0800926f 	.word	0x0800926f
 8009220:	08009247 	.word	0x08009247
 8009224:	0800923d 	.word	0x0800923d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f9dc 	bl	80095e8 <USBD_GetDescriptor>
          break;
 8009230:	e022      	b.n	8009278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fb3f 	bl	80098b8 <USBD_SetAddress>
          break;
 800923a:	e01d      	b.n	8009278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fb7e 	bl	8009940 <USBD_SetConfig>
          break;
 8009244:	e018      	b.n	8009278 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fc07 	bl	8009a5c <USBD_GetConfig>
          break;
 800924e:	e013      	b.n	8009278 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fc37 	bl	8009ac6 <USBD_GetStatus>
          break;
 8009258:	e00e      	b.n	8009278 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc65 	bl	8009b2c <USBD_SetFeature>
          break;
 8009262:	e009      	b.n	8009278 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fc74 	bl	8009b54 <USBD_ClrFeature>
          break;
 800926c:	e004      	b.n	8009278 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fccc 	bl	8009c0e <USBD_CtlError>
          break;
 8009276:	bf00      	nop
      }
      break;
 8009278:	e004      	b.n	8009284 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800927a:	6839      	ldr	r1, [r7, #0]
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fcc6 	bl	8009c0e <USBD_CtlError>
      break;
 8009282:	bf00      	nop
  }

  return ret;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop

08009290 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a6:	2b40      	cmp	r3, #64	; 0x40
 80092a8:	d005      	beq.n	80092b6 <USBD_StdItfReq+0x26>
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d82e      	bhi.n	800930c <USBD_StdItfReq+0x7c>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <USBD_StdItfReq+0x26>
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	d12a      	bne.n	800930c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092bc:	3b01      	subs	r3, #1
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d81d      	bhi.n	80092fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	889b      	ldrh	r3, [r3, #4]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d813      	bhi.n	80092f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	4798      	blx	r3
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	88db      	ldrh	r3, [r3, #6]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d110      	bne.n	8009308 <USBD_StdItfReq+0x78>
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d10d      	bne.n	8009308 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fd56 	bl	8009d9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092f2:	e009      	b.n	8009308 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fc89 	bl	8009c0e <USBD_CtlError>
          break;
 80092fc:	e004      	b.n	8009308 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fc84 	bl	8009c0e <USBD_CtlError>
          break;
 8009306:	e000      	b.n	800930a <USBD_StdItfReq+0x7a>
          break;
 8009308:	bf00      	nop
      }
      break;
 800930a:	e004      	b.n	8009316 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fc7d 	bl	8009c0e <USBD_CtlError>
      break;
 8009314:	bf00      	nop
  }

  return USBD_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	889b      	ldrh	r3, [r3, #4]
 8009332:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800933c:	2b40      	cmp	r3, #64	; 0x40
 800933e:	d007      	beq.n	8009350 <USBD_StdEPReq+0x30>
 8009340:	2b40      	cmp	r3, #64	; 0x40
 8009342:	f200 8146 	bhi.w	80095d2 <USBD_StdEPReq+0x2b2>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <USBD_StdEPReq+0x40>
 800934a:	2b20      	cmp	r3, #32
 800934c:	f040 8141 	bne.w	80095d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	4798      	blx	r3
      break;
 800935e:	e13d      	b.n	80095dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009368:	2b20      	cmp	r3, #32
 800936a:	d10a      	bne.n	8009382 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	4798      	blx	r3
 800937a:	4603      	mov	r3, r0
 800937c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	e12d      	b.n	80095de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b03      	cmp	r3, #3
 8009388:	d007      	beq.n	800939a <USBD_StdEPReq+0x7a>
 800938a:	2b03      	cmp	r3, #3
 800938c:	f300 811b 	bgt.w	80095c6 <USBD_StdEPReq+0x2a6>
 8009390:	2b00      	cmp	r3, #0
 8009392:	d072      	beq.n	800947a <USBD_StdEPReq+0x15a>
 8009394:	2b01      	cmp	r3, #1
 8009396:	d03a      	beq.n	800940e <USBD_StdEPReq+0xee>
 8009398:	e115      	b.n	80095c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d002      	beq.n	80093aa <USBD_StdEPReq+0x8a>
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d015      	beq.n	80093d4 <USBD_StdEPReq+0xb4>
 80093a8:	e02b      	b.n	8009402 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00c      	beq.n	80093ca <USBD_StdEPReq+0xaa>
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b80      	cmp	r3, #128	; 0x80
 80093b4:	d009      	beq.n	80093ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f004 fa98 	bl	800d8f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80093c0:	2180      	movs	r1, #128	; 0x80
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f004 fa94 	bl	800d8f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093c8:	e020      	b.n	800940c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fc1e 	bl	8009c0e <USBD_CtlError>
              break;
 80093d2:	e01b      	b.n	800940c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	885b      	ldrh	r3, [r3, #2]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10e      	bne.n	80093fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00b      	beq.n	80093fa <USBD_StdEPReq+0xda>
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	2b80      	cmp	r3, #128	; 0x80
 80093e6:	d008      	beq.n	80093fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	88db      	ldrh	r3, [r3, #6]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d104      	bne.n	80093fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f004 fa7b 	bl	800d8f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fccf 	bl	8009d9e <USBD_CtlSendStatus>

              break;
 8009400:	e004      	b.n	800940c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fc02 	bl	8009c0e <USBD_CtlError>
              break;
 800940a:	bf00      	nop
          }
          break;
 800940c:	e0e0      	b.n	80095d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009414:	2b02      	cmp	r3, #2
 8009416:	d002      	beq.n	800941e <USBD_StdEPReq+0xfe>
 8009418:	2b03      	cmp	r3, #3
 800941a:	d015      	beq.n	8009448 <USBD_StdEPReq+0x128>
 800941c:	e026      	b.n	800946c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800941e:	7bbb      	ldrb	r3, [r7, #14]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00c      	beq.n	800943e <USBD_StdEPReq+0x11e>
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	2b80      	cmp	r3, #128	; 0x80
 8009428:	d009      	beq.n	800943e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f004 fa5e 	bl	800d8f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009434:	2180      	movs	r1, #128	; 0x80
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f004 fa5a 	bl	800d8f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800943c:	e01c      	b.n	8009478 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fbe4 	bl	8009c0e <USBD_CtlError>
              break;
 8009446:	e017      	b.n	8009478 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	885b      	ldrh	r3, [r3, #2]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d112      	bne.n	8009476 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800945a:	7bbb      	ldrb	r3, [r7, #14]
 800945c:	4619      	mov	r1, r3
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f004 fa65 	bl	800d92e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fc9a 	bl	8009d9e <USBD_CtlSendStatus>
              }
              break;
 800946a:	e004      	b.n	8009476 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fbcd 	bl	8009c0e <USBD_CtlError>
              break;
 8009474:	e000      	b.n	8009478 <USBD_StdEPReq+0x158>
              break;
 8009476:	bf00      	nop
          }
          break;
 8009478:	e0aa      	b.n	80095d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009480:	2b02      	cmp	r3, #2
 8009482:	d002      	beq.n	800948a <USBD_StdEPReq+0x16a>
 8009484:	2b03      	cmp	r3, #3
 8009486:	d032      	beq.n	80094ee <USBD_StdEPReq+0x1ce>
 8009488:	e097      	b.n	80095ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <USBD_StdEPReq+0x180>
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	2b80      	cmp	r3, #128	; 0x80
 8009494:	d004      	beq.n	80094a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fbb8 	bl	8009c0e <USBD_CtlError>
                break;
 800949e:	e091      	b.n	80095c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	da0b      	bge.n	80094c0 <USBD_StdEPReq+0x1a0>
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ae:	4613      	mov	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	3310      	adds	r3, #16
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	4413      	add	r3, r2
 80094bc:	3304      	adds	r3, #4
 80094be:	e00b      	b.n	80094d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	4413      	add	r3, r2
 80094d6:	3304      	adds	r3, #4
 80094d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2202      	movs	r2, #2
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fbfb 	bl	8009ce2 <USBD_CtlSendData>
              break;
 80094ec:	e06a      	b.n	80095c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	da11      	bge.n	800951a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	f003 020f 	and.w	r2, r3, #15
 80094fc:	6879      	ldr	r1, [r7, #4]
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	440b      	add	r3, r1
 8009508:	3318      	adds	r3, #24
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d117      	bne.n	8009540 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fb7b 	bl	8009c0e <USBD_CtlError>
                  break;
 8009518:	e054      	b.n	80095c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	f003 020f 	and.w	r2, r3, #15
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	4613      	mov	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	440b      	add	r3, r1
 800952c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d104      	bne.n	8009540 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fb68 	bl	8009c0e <USBD_CtlError>
                  break;
 800953e:	e041      	b.n	80095c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009544:	2b00      	cmp	r3, #0
 8009546:	da0b      	bge.n	8009560 <USBD_StdEPReq+0x240>
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	3310      	adds	r3, #16
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4413      	add	r3, r2
 800955c:	3304      	adds	r3, #4
 800955e:	e00b      	b.n	8009578 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	3304      	adds	r3, #4
 8009578:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <USBD_StdEPReq+0x266>
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d103      	bne.n	800958e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	e00e      	b.n	80095ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f004 f9ea 	bl	800d96c <USBD_LL_IsStallEP>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2201      	movs	r2, #1
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	e002      	b.n	80095ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2202      	movs	r2, #2
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fb95 	bl	8009ce2 <USBD_CtlSendData>
              break;
 80095b8:	e004      	b.n	80095c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fb26 	bl	8009c0e <USBD_CtlError>
              break;
 80095c2:	bf00      	nop
          }
          break;
 80095c4:	e004      	b.n	80095d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fb20 	bl	8009c0e <USBD_CtlError>
          break;
 80095ce:	bf00      	nop
      }
      break;
 80095d0:	e004      	b.n	80095dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fb1a 	bl	8009c0e <USBD_CtlError>
      break;
 80095da:	bf00      	nop
  }

  return ret;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095f2:	2300      	movs	r3, #0
 80095f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	885b      	ldrh	r3, [r3, #2]
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	b29b      	uxth	r3, r3
 8009606:	3b01      	subs	r3, #1
 8009608:	2b06      	cmp	r3, #6
 800960a:	f200 8128 	bhi.w	800985e <USBD_GetDescriptor+0x276>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <USBD_GetDescriptor+0x2c>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009631 	.word	0x08009631
 8009618:	08009649 	.word	0x08009649
 800961c:	08009689 	.word	0x08009689
 8009620:	0800985f 	.word	0x0800985f
 8009624:	0800985f 	.word	0x0800985f
 8009628:	080097ff 	.word	0x080097ff
 800962c:	0800982b 	.word	0x0800982b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
      break;
 8009646:	e112      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7c1b      	ldrb	r3, [r3, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10d      	bne.n	800966c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	f107 0208 	add.w	r2, r7, #8
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
 8009660:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3301      	adds	r3, #1
 8009666:	2202      	movs	r2, #2
 8009668:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800966a:	e100      	b.n	800986e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	f107 0208 	add.w	r2, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3301      	adds	r3, #1
 8009682:	2202      	movs	r2, #2
 8009684:	701a      	strb	r2, [r3, #0]
      break;
 8009686:	e0f2      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	885b      	ldrh	r3, [r3, #2]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b05      	cmp	r3, #5
 8009690:	f200 80ac 	bhi.w	80097ec <USBD_GetDescriptor+0x204>
 8009694:	a201      	add	r2, pc, #4	; (adr r2, 800969c <USBD_GetDescriptor+0xb4>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096b5 	.word	0x080096b5
 80096a0:	080096e9 	.word	0x080096e9
 80096a4:	0800971d 	.word	0x0800971d
 80096a8:	08009751 	.word	0x08009751
 80096ac:	08009785 	.word	0x08009785
 80096b0:	080097b9 	.word	0x080097b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	7c12      	ldrb	r2, [r2, #16]
 80096cc:	f107 0108 	add.w	r1, r7, #8
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d6:	e091      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa97 	bl	8009c0e <USBD_CtlError>
            err++;
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	3301      	adds	r3, #1
 80096e4:	72fb      	strb	r3, [r7, #11]
          break;
 80096e6:	e089      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	7c12      	ldrb	r2, [r2, #16]
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800970a:	e077      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa7d 	bl	8009c0e <USBD_CtlError>
            err++;
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	3301      	adds	r3, #1
 8009718:	72fb      	strb	r3, [r7, #11]
          break;
 800971a:	e06f      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	7c12      	ldrb	r2, [r2, #16]
 8009734:	f107 0108 	add.w	r1, r7, #8
 8009738:	4610      	mov	r0, r2
 800973a:	4798      	blx	r3
 800973c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973e:	e05d      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa63 	bl	8009c0e <USBD_CtlError>
            err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
          break;
 800974e:	e055      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7c12      	ldrb	r2, [r2, #16]
 8009768:	f107 0108 	add.w	r1, r7, #8
 800976c:	4610      	mov	r0, r2
 800976e:	4798      	blx	r3
 8009770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009772:	e043      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009774:	6839      	ldr	r1, [r7, #0]
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fa49 	bl	8009c0e <USBD_CtlError>
            err++;
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	3301      	adds	r3, #1
 8009780:	72fb      	strb	r3, [r7, #11]
          break;
 8009782:	e03b      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	f107 0108 	add.w	r1, r7, #8
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a6:	e029      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa2f 	bl	8009c0e <USBD_CtlError>
            err++;
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	3301      	adds	r3, #1
 80097b4:	72fb      	strb	r3, [r7, #11]
          break;
 80097b6:	e021      	b.n	80097fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	7c12      	ldrb	r2, [r2, #16]
 80097d0:	f107 0108 	add.w	r1, r7, #8
 80097d4:	4610      	mov	r0, r2
 80097d6:	4798      	blx	r3
 80097d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097da:	e00f      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa15 	bl	8009c0e <USBD_CtlError>
            err++;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	3301      	adds	r3, #1
 80097e8:	72fb      	strb	r3, [r7, #11]
          break;
 80097ea:	e007      	b.n	80097fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa0d 	bl	8009c0e <USBD_CtlError>
          err++;
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	3301      	adds	r3, #1
 80097f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80097fa:	e038      	b.n	800986e <USBD_GetDescriptor+0x286>
 80097fc:	e037      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7c1b      	ldrb	r3, [r3, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980e:	f107 0208 	add.w	r2, r7, #8
 8009812:	4610      	mov	r0, r2
 8009814:	4798      	blx	r3
 8009816:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009818:	e029      	b.n	800986e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f9f6 	bl	8009c0e <USBD_CtlError>
        err++;
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	3301      	adds	r3, #1
 8009826:	72fb      	strb	r3, [r7, #11]
      break;
 8009828:	e021      	b.n	800986e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7c1b      	ldrb	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10d      	bne.n	800984e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983a:	f107 0208 	add.w	r2, r7, #8
 800983e:	4610      	mov	r0, r2
 8009840:	4798      	blx	r3
 8009842:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	2207      	movs	r2, #7
 800984a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800984c:	e00f      	b.n	800986e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800984e:	6839      	ldr	r1, [r7, #0]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f9dc 	bl	8009c0e <USBD_CtlError>
        err++;
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	3301      	adds	r3, #1
 800985a:	72fb      	strb	r3, [r7, #11]
      break;
 800985c:	e007      	b.n	800986e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f9d4 	bl	8009c0e <USBD_CtlError>
      err++;
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	3301      	adds	r3, #1
 800986a:	72fb      	strb	r3, [r7, #11]
      break;
 800986c:	bf00      	nop
  }

  if (err != 0U)
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d11c      	bne.n	80098ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009874:	893b      	ldrh	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <USBD_GetDescriptor+0x2b6>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	88db      	ldrh	r3, [r3, #6]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00d      	beq.n	800989e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	88da      	ldrh	r2, [r3, #6]
 8009886:	893b      	ldrh	r3, [r7, #8]
 8009888:	4293      	cmp	r3, r2
 800988a:	bf28      	it	cs
 800988c:	4613      	movcs	r3, r2
 800988e:	b29b      	uxth	r3, r3
 8009890:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009892:	893b      	ldrh	r3, [r7, #8]
 8009894:	461a      	mov	r2, r3
 8009896:	68f9      	ldr	r1, [r7, #12]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa22 	bl	8009ce2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	88db      	ldrh	r3, [r3, #6]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d104      	bne.n	80098b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa79 	bl	8009d9e <USBD_CtlSendStatus>
 80098ac:	e000      	b.n	80098b0 <USBD_GetDescriptor+0x2c8>
    return;
 80098ae:	bf00      	nop
    }
  }
}
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop

080098b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	889b      	ldrh	r3, [r3, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d130      	bne.n	800992c <USBD_SetAddress+0x74>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	88db      	ldrh	r3, [r3, #6]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d12c      	bne.n	800992c <USBD_SetAddress+0x74>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	885b      	ldrh	r3, [r3, #2]
 80098d6:	2b7f      	cmp	r3, #127	; 0x7f
 80098d8:	d828      	bhi.n	800992c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	885b      	ldrh	r3, [r3, #2]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d104      	bne.n	80098fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f98b 	bl	8009c0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f8:	e01d      	b.n	8009936 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7bfa      	ldrb	r2, [r7, #15]
 80098fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f004 f85c 	bl	800d9c4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fa46 	bl	8009d9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009912:	7bfb      	ldrb	r3, [r7, #15]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009920:	e009      	b.n	8009936 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992a:	e004      	b.n	8009936 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f96d 	bl	8009c0e <USBD_CtlError>
  }
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	885b      	ldrh	r3, [r3, #2]
 800994e:	b2da      	uxtb	r2, r3
 8009950:	4b41      	ldr	r3, [pc, #260]	; (8009a58 <USBD_SetConfig+0x118>)
 8009952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009954:	4b40      	ldr	r3, [pc, #256]	; (8009a58 <USBD_SetConfig+0x118>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d904      	bls.n	8009966 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f955 	bl	8009c0e <USBD_CtlError>
 8009964:	e075      	b.n	8009a52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800996c:	2b02      	cmp	r3, #2
 800996e:	d002      	beq.n	8009976 <USBD_SetConfig+0x36>
 8009970:	2b03      	cmp	r3, #3
 8009972:	d023      	beq.n	80099bc <USBD_SetConfig+0x7c>
 8009974:	e062      	b.n	8009a3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009976:	4b38      	ldr	r3, [pc, #224]	; (8009a58 <USBD_SetConfig+0x118>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d01a      	beq.n	80099b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800997e:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <USBD_SetConfig+0x118>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2203      	movs	r2, #3
 800998c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009990:	4b31      	ldr	r3, [pc, #196]	; (8009a58 <USBD_SetConfig+0x118>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff f9e8 	bl	8008d6c <USBD_SetClassConfig>
 800999c:	4603      	mov	r3, r0
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d104      	bne.n	80099ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f932 	bl	8009c0e <USBD_CtlError>
            return;
 80099aa:	e052      	b.n	8009a52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f9f6 	bl	8009d9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099b2:	e04e      	b.n	8009a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f9f2 	bl	8009d9e <USBD_CtlSendStatus>
        break;
 80099ba:	e04a      	b.n	8009a52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80099bc:	4b26      	ldr	r3, [pc, #152]	; (8009a58 <USBD_SetConfig+0x118>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d112      	bne.n	80099ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80099cc:	4b22      	ldr	r3, [pc, #136]	; (8009a58 <USBD_SetConfig+0x118>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80099d6:	4b20      	ldr	r3, [pc, #128]	; (8009a58 <USBD_SetConfig+0x118>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7ff f9e4 	bl	8008daa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f9db 	bl	8009d9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80099e8:	e033      	b.n	8009a52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80099ea:	4b1b      	ldr	r3, [pc, #108]	; (8009a58 <USBD_SetConfig+0x118>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d01d      	beq.n	8009a34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff f9d2 	bl	8008daa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009a06:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <USBD_SetConfig+0x118>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009a10:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <USBD_SetConfig+0x118>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff f9a8 	bl	8008d6c <USBD_SetClassConfig>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d104      	bne.n	8009a2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f8f2 	bl	8009c0e <USBD_CtlError>
            return;
 8009a2a:	e012      	b.n	8009a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f9b6 	bl	8009d9e <USBD_CtlSendStatus>
        break;
 8009a32:	e00e      	b.n	8009a52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f9b2 	bl	8009d9e <USBD_CtlSendStatus>
        break;
 8009a3a:	e00a      	b.n	8009a52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f8e5 	bl	8009c0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <USBD_SetConfig+0x118>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7ff f9ad 	bl	8008daa <USBD_ClrClassConfig>
        break;
 8009a50:	bf00      	nop
    }
  }
}
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20000990 	.word	0x20000990

08009a5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	88db      	ldrh	r3, [r3, #6]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d004      	beq.n	8009a78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f8cc 	bl	8009c0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a76:	e022      	b.n	8009abe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	dc02      	bgt.n	8009a88 <USBD_GetConfig+0x2c>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dc03      	bgt.n	8009a8e <USBD_GetConfig+0x32>
 8009a86:	e015      	b.n	8009ab4 <USBD_GetConfig+0x58>
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d00b      	beq.n	8009aa4 <USBD_GetConfig+0x48>
 8009a8c:	e012      	b.n	8009ab4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3308      	adds	r3, #8
 8009a98:	2201      	movs	r2, #1
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f920 	bl	8009ce2 <USBD_CtlSendData>
        break;
 8009aa2:	e00c      	b.n	8009abe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f918 	bl	8009ce2 <USBD_CtlSendData>
        break;
 8009ab2:	e004      	b.n	8009abe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f8a9 	bl	8009c0e <USBD_CtlError>
        break;
 8009abc:	bf00      	nop
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d81e      	bhi.n	8009b1a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	88db      	ldrh	r3, [r3, #6]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d004      	beq.n	8009aee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f891 	bl	8009c0e <USBD_CtlError>
        break;
 8009aec:	e01a      	b.n	8009b24 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d005      	beq.n	8009b0a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f043 0202 	orr.w	r2, r3, #2
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	330c      	adds	r3, #12
 8009b0e:	2202      	movs	r2, #2
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f8e5 	bl	8009ce2 <USBD_CtlSendData>
      break;
 8009b18:	e004      	b.n	8009b24 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f876 	bl	8009c0e <USBD_CtlError>
      break;
 8009b22:	bf00      	nop
  }
}
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	885b      	ldrh	r3, [r3, #2]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d106      	bne.n	8009b4c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f929 	bl	8009d9e <USBD_CtlSendStatus>
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b64:	3b01      	subs	r3, #1
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d80b      	bhi.n	8009b82 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d10c      	bne.n	8009b8c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f90f 	bl	8009d9e <USBD_CtlSendStatus>
      }
      break;
 8009b80:	e004      	b.n	8009b8c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f842 	bl	8009c0e <USBD_CtlError>
      break;
 8009b8a:	e000      	b.n	8009b8e <USBD_ClrFeature+0x3a>
      break;
 8009b8c:	bf00      	nop
  }
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781a      	ldrb	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	785a      	ldrb	r2, [r3, #1]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	3302      	adds	r3, #2
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	3303      	adds	r3, #3
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	4413      	add	r3, r2
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	3304      	adds	r3, #4
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	3305      	adds	r3, #5
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	021b      	lsls	r3, r3, #8
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	4413      	add	r3, r2
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	3306      	adds	r3, #6
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	3307      	adds	r3, #7
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	80da      	strh	r2, [r3, #6]

}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bc80      	pop	{r7}
 8009c0c:	4770      	bx	lr

08009c0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009c18:	2180      	movs	r1, #128	; 0x80
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f003 fe68 	bl	800d8f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009c20:	2100      	movs	r1, #0
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f003 fe64 	bl	800d8f0 <USBD_LL_StallEP>
}
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d032      	beq.n	8009cac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 f834 	bl	8009cb4 <USBD_GetLen>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	3301      	adds	r3, #1
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	005b      	lsls	r3, r3, #1
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	75fa      	strb	r2, [r7, #23]
 8009c60:	461a      	mov	r2, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	4413      	add	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	7812      	ldrb	r2, [r2, #0]
 8009c6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	75fa      	strb	r2, [r7, #23]
 8009c72:	461a      	mov	r2, r3
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	4413      	add	r3, r2
 8009c78:	2203      	movs	r2, #3
 8009c7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009c7c:	e012      	b.n	8009ca4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	60fa      	str	r2, [r7, #12]
 8009c84:	7dfa      	ldrb	r2, [r7, #23]
 8009c86:	1c51      	adds	r1, r2, #1
 8009c88:	75f9      	strb	r1, [r7, #23]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	440a      	add	r2, r1
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	75fa      	strb	r2, [r7, #23]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d1e8      	bne.n	8009c7e <USBD_GetString+0x4e>
    }
  }
}
 8009cac:	bf00      	nop
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009cc0:	e005      	b.n	8009cce <USBD_GetLen+0x1a>
  {
    len++;
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1f5      	bne.n	8009cc2 <USBD_GetLen+0xe>
  }

  return len;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3714      	adds	r7, #20
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bc80      	pop	{r7}
 8009ce0:	4770      	bx	lr

08009ce2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	60b9      	str	r1, [r7, #8]
 8009cec:	4613      	mov	r3, r2
 8009cee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009cf8:	88fa      	ldrh	r2, [r7, #6]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009cfe:	88fa      	ldrh	r2, [r7, #6]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d04:	88fb      	ldrh	r3, [r7, #6]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	2100      	movs	r1, #0
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f003 fe79 	bl	800da02 <USBD_LL_Transmit>

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	60f8      	str	r0, [r7, #12]
 8009d22:	60b9      	str	r1, [r7, #8]
 8009d24:	4613      	mov	r3, r2
 8009d26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f003 fe67 	bl	800da02 <USBD_LL_Transmit>

  return USBD_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2203      	movs	r2, #3
 8009d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d54:	88fa      	ldrh	r2, [r7, #6]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009d5c:	88fa      	ldrh	r2, [r7, #6]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d64:	88fb      	ldrh	r3, [r7, #6]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f003 fe6c 	bl	800da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3710      	adds	r7, #16
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	4613      	mov	r3, r2
 8009d86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d88:	88fb      	ldrh	r3, [r7, #6]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f003 fe5a 	bl	800da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2204      	movs	r2, #4
 8009daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009dae:	2300      	movs	r3, #0
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f003 fe24 	bl	800da02 <USBD_LL_Transmit>

  return USBD_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2205      	movs	r2, #5
 8009dd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2100      	movs	r1, #0
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f003 fe34 	bl	800da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009df2:	f3ef 8305 	mrs	r3, IPSR
 8009df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009df8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10f      	bne.n	8009e1e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8009e02:	607b      	str	r3, [r7, #4]
  return(result);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d109      	bne.n	8009e1e <osKernelInitialize+0x32>
 8009e0a:	4b10      	ldr	r3, [pc, #64]	; (8009e4c <osKernelInitialize+0x60>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d109      	bne.n	8009e26 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e12:	f3ef 8311 	mrs	r3, BASEPRI
 8009e16:	603b      	str	r3, [r7, #0]
  return(result);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009e1e:	f06f 0305 	mvn.w	r3, #5
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e00c      	b.n	8009e40 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e26:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <osKernelInitialize+0x60>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009e2e:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <osKernelInitialize+0x60>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e002      	b.n	8009e40 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009e40:	68fb      	ldr	r3, [r7, #12]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bc80      	pop	{r7}
 8009e4a:	4770      	bx	lr
 8009e4c:	20000994 	.word	0x20000994

08009e50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e56:	f3ef 8305 	mrs	r3, IPSR
 8009e5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10f      	bne.n	8009e82 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e62:	f3ef 8310 	mrs	r3, PRIMASK
 8009e66:	607b      	str	r3, [r7, #4]
  return(result);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d109      	bne.n	8009e82 <osKernelStart+0x32>
 8009e6e:	4b11      	ldr	r3, [pc, #68]	; (8009eb4 <osKernelStart+0x64>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d109      	bne.n	8009e8a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e76:	f3ef 8311 	mrs	r3, BASEPRI
 8009e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <osKernelStart+0x3a>
    stat = osErrorISR;
 8009e82:	f06f 0305 	mvn.w	r3, #5
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	e00e      	b.n	8009ea8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <osKernelStart+0x64>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d107      	bne.n	8009ea2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8009e92:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <osKernelStart+0x64>)
 8009e94:	2202      	movs	r2, #2
 8009e96:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8009e98:	f001 fd10 	bl	800b8bc <vTaskStartScheduler>
      stat = osOK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	e002      	b.n	8009ea8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8009ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20000994 	.word	0x20000994

08009eb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b092      	sub	sp, #72	; 0x48
 8009ebc:	af04      	add	r7, sp, #16
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ec8:	f3ef 8305 	mrs	r3, IPSR
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f040 8094 	bne.w	8009ffe <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8009eda:	623b      	str	r3, [r7, #32]
  return(result);
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f040 808d 	bne.w	8009ffe <osThreadNew+0x146>
 8009ee4:	4b48      	ldr	r3, [pc, #288]	; (800a008 <osThreadNew+0x150>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d106      	bne.n	8009efa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009eec:	f3ef 8311 	mrs	r3, BASEPRI
 8009ef0:	61fb      	str	r3, [r7, #28]
  return(result);
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f040 8082 	bne.w	8009ffe <osThreadNew+0x146>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d07e      	beq.n	8009ffe <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009f00:	2380      	movs	r3, #128	; 0x80
 8009f02:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8009f04:	2318      	movs	r3, #24
 8009f06:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8009f08:	2300      	movs	r3, #0
 8009f0a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009f0c:	f107 031b 	add.w	r3, r7, #27
 8009f10:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8009f12:	f04f 33ff 	mov.w	r3, #4294967295
 8009f16:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d045      	beq.n	8009faa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d002      	beq.n	8009f2c <osThreadNew+0x74>
        name = attr->name;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <osThreadNew+0x9a>
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	2b38      	cmp	r3, #56	; 0x38
 8009f44:	d805      	bhi.n	8009f52 <osThreadNew+0x9a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <osThreadNew+0x9e>
        return (NULL);
 8009f52:	2300      	movs	r3, #0
 8009f54:	e054      	b.n	800a000 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	695b      	ldr	r3, [r3, #20]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	089b      	lsrs	r3, r3, #2
 8009f64:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00e      	beq.n	8009f8c <osThreadNew+0xd4>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	2bbb      	cmp	r3, #187	; 0xbb
 8009f74:	d90a      	bls.n	8009f8c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d006      	beq.n	8009f8c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d002      	beq.n	8009f8c <osThreadNew+0xd4>
        mem = 1;
 8009f86:	2301      	movs	r3, #1
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f8a:	e010      	b.n	8009fae <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10c      	bne.n	8009fae <osThreadNew+0xf6>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d108      	bne.n	8009fae <osThreadNew+0xf6>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d104      	bne.n	8009fae <osThreadNew+0xf6>
          mem = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fa8:	e001      	b.n	8009fae <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d110      	bne.n	8009fd6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fbc:	9202      	str	r2, [sp, #8]
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f001 fa92 	bl	800b4f4 <xTaskCreateStatic>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	e013      	b.n	8009ffe <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8009fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d110      	bne.n	8009ffe <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	f107 0314 	add.w	r3, r7, #20
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f001 fadc 	bl	800b5ac <xTaskCreate>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d001      	beq.n	8009ffe <osThreadNew+0x146>
          hTask = NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ffe:	697b      	ldr	r3, [r7, #20]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3738      	adds	r7, #56	; 0x38
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000994 	.word	0x20000994

0800a00c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a014:	f3ef 8305 	mrs	r3, IPSR
 800a018:	613b      	str	r3, [r7, #16]
  return(result);
 800a01a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10f      	bne.n	800a040 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a020:	f3ef 8310 	mrs	r3, PRIMASK
 800a024:	60fb      	str	r3, [r7, #12]
  return(result);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d109      	bne.n	800a040 <osDelay+0x34>
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <osDelay+0x58>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b02      	cmp	r3, #2
 800a032:	d109      	bne.n	800a048 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a034:	f3ef 8311 	mrs	r3, BASEPRI
 800a038:	60bb      	str	r3, [r7, #8]
  return(result);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d003      	beq.n	800a048 <osDelay+0x3c>
    stat = osErrorISR;
 800a040:	f06f 0305 	mvn.w	r3, #5
 800a044:	617b      	str	r3, [r7, #20]
 800a046:	e007      	b.n	800a058 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f001 fbfe 	bl	800b854 <vTaskDelay>
    }
  }

  return (stat);
 800a058:	697b      	ldr	r3, [r7, #20]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	20000994 	.word	0x20000994

0800a068 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08c      	sub	sp, #48	; 0x30
 800a06c:	af02      	add	r7, sp, #8
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a078:	f3ef 8305 	mrs	r3, IPSR
 800a07c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a07e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 8086 	bne.w	800a192 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a086:	f3ef 8310 	mrs	r3, PRIMASK
 800a08a:	617b      	str	r3, [r7, #20]
  return(result);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d17f      	bne.n	800a192 <osSemaphoreNew+0x12a>
 800a092:	4b42      	ldr	r3, [pc, #264]	; (800a19c <osSemaphoreNew+0x134>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d105      	bne.n	800a0a6 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a09a:	f3ef 8311 	mrs	r3, BASEPRI
 800a09e:	613b      	str	r3, [r7, #16]
  return(result);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d175      	bne.n	800a192 <osSemaphoreNew+0x12a>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d072      	beq.n	800a192 <osSemaphoreNew+0x12a>
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d86e      	bhi.n	800a192 <osSemaphoreNew+0x12a>
    mem = -1;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d015      	beq.n	800a0ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d006      	beq.n	800a0d6 <osSemaphoreNew+0x6e>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	2b4f      	cmp	r3, #79	; 0x4f
 800a0ce:	d902      	bls.n	800a0d6 <osSemaphoreNew+0x6e>
        mem = 1;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	623b      	str	r3, [r7, #32]
 800a0d4:	e00c      	b.n	800a0f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d108      	bne.n	800a0f0 <osSemaphoreNew+0x88>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d104      	bne.n	800a0f0 <osSemaphoreNew+0x88>
          mem = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	623b      	str	r3, [r7, #32]
 800a0ea:	e001      	b.n	800a0f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f6:	d04c      	beq.n	800a192 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d128      	bne.n	800a150 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10a      	bne.n	800a11a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	2203      	movs	r2, #3
 800a10a:	9200      	str	r2, [sp, #0]
 800a10c:	2200      	movs	r2, #0
 800a10e:	2100      	movs	r1, #0
 800a110:	2001      	movs	r0, #1
 800a112:	f000 fa4d 	bl	800a5b0 <xQueueGenericCreateStatic>
 800a116:	6278      	str	r0, [r7, #36]	; 0x24
 800a118:	e005      	b.n	800a126 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a11a:	2203      	movs	r2, #3
 800a11c:	2100      	movs	r1, #0
 800a11e:	2001      	movs	r0, #1
 800a120:	f000 fabd 	bl	800a69e <xQueueGenericCreate>
 800a124:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d022      	beq.n	800a172 <osSemaphoreNew+0x10a>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01f      	beq.n	800a172 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a132:	2300      	movs	r3, #0
 800a134:	2200      	movs	r2, #0
 800a136:	2100      	movs	r1, #0
 800a138:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a13a:	f000 fb7b 	bl	800a834 <xQueueGenericSend>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b01      	cmp	r3, #1
 800a142:	d016      	beq.n	800a172 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a146:	f001 f805 	bl	800b154 <vQueueDelete>
            hSemaphore = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
 800a14e:	e010      	b.n	800a172 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d108      	bne.n	800a168 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	461a      	mov	r2, r3
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 fafe 	bl	800a760 <xQueueCreateCountingSemaphoreStatic>
 800a164:	6278      	str	r0, [r7, #36]	; 0x24
 800a166:	e004      	b.n	800a172 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fb2f 	bl	800a7ce <xQueueCreateCountingSemaphore>
 800a170:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00c      	beq.n	800a192 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <osSemaphoreNew+0x11e>
          name = attr->name;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	61fb      	str	r3, [r7, #28]
 800a184:	e001      	b.n	800a18a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a186:	2300      	movs	r3, #0
 800a188:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a18a:	69f9      	ldr	r1, [r7, #28]
 800a18c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a18e:	f001 f92b 	bl	800b3e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a194:	4618      	mov	r0, r3
 800a196:	3728      	adds	r7, #40	; 0x28
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	20000994 	.word	0x20000994

0800a1a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d103      	bne.n	800a1c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a1b8:	f06f 0303 	mvn.w	r3, #3
 800a1bc:	61fb      	str	r3, [r7, #28]
 800a1be:	e04b      	b.n	800a258 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c0:	f3ef 8305 	mrs	r3, IPSR
 800a1c4:	617b      	str	r3, [r7, #20]
  return(result);
 800a1c6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10f      	bne.n	800a1ec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d109      	bne.n	800a1ec <osSemaphoreAcquire+0x4c>
 800a1d8:	4b22      	ldr	r3, [pc, #136]	; (800a264 <osSemaphoreAcquire+0xc4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d128      	bne.n	800a232 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1e0:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d022      	beq.n	800a232 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a1f2:	f06f 0303 	mvn.w	r3, #3
 800a1f6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a1f8:	e02d      	b.n	800a256 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a1fe:	f107 0308 	add.w	r3, r7, #8
 800a202:	461a      	mov	r2, r3
 800a204:	2100      	movs	r1, #0
 800a206:	69b8      	ldr	r0, [r7, #24]
 800a208:	f000 ff24 	bl	800b054 <xQueueReceiveFromISR>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d003      	beq.n	800a21a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a212:	f06f 0302 	mvn.w	r3, #2
 800a216:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a218:	e01d      	b.n	800a256 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d01a      	beq.n	800a256 <osSemaphoreAcquire+0xb6>
 800a220:	4b11      	ldr	r3, [pc, #68]	; (800a268 <osSemaphoreAcquire+0xc8>)
 800a222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a230:	e011      	b.n	800a256 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	69b8      	ldr	r0, [r7, #24]
 800a236:	f000 fe01 	bl	800ae3c <xQueueSemaphoreTake>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d00b      	beq.n	800a258 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a246:	f06f 0301 	mvn.w	r3, #1
 800a24a:	61fb      	str	r3, [r7, #28]
 800a24c:	e004      	b.n	800a258 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a24e:	f06f 0302 	mvn.w	r3, #2
 800a252:	61fb      	str	r3, [r7, #28]
 800a254:	e000      	b.n	800a258 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a256:	bf00      	nop
      }
    }
  }

  return (stat);
 800a258:	69fb      	ldr	r3, [r7, #28]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3720      	adds	r7, #32
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000994 	.word	0x20000994
 800a268:	e000ed04 	.word	0xe000ed04

0800a26c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a278:	2300      	movs	r3, #0
 800a27a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a282:	f06f 0303 	mvn.w	r3, #3
 800a286:	61fb      	str	r3, [r7, #28]
 800a288:	e03e      	b.n	800a308 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a28a:	f3ef 8305 	mrs	r3, IPSR
 800a28e:	617b      	str	r3, [r7, #20]
  return(result);
 800a290:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10f      	bne.n	800a2b6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a296:	f3ef 8310 	mrs	r3, PRIMASK
 800a29a:	613b      	str	r3, [r7, #16]
  return(result);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d109      	bne.n	800a2b6 <osSemaphoreRelease+0x4a>
 800a2a2:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <osSemaphoreRelease+0xa8>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d120      	bne.n	800a2ec <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2aa:	f3ef 8311 	mrs	r3, BASEPRI
 800a2ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d01a      	beq.n	800a2ec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a2ba:	f107 0308 	add.w	r3, r7, #8
 800a2be:	4619      	mov	r1, r3
 800a2c0:	69b8      	ldr	r0, [r7, #24]
 800a2c2:	f000 fc4d 	bl	800ab60 <xQueueGiveFromISR>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d003      	beq.n	800a2d4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a2cc:	f06f 0302 	mvn.w	r3, #2
 800a2d0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a2d2:	e018      	b.n	800a306 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d015      	beq.n	800a306 <osSemaphoreRelease+0x9a>
 800a2da:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <osSemaphoreRelease+0xac>)
 800a2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e0:	601a      	str	r2, [r3, #0]
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a2ea:	e00c      	b.n	800a306 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	69b8      	ldr	r0, [r7, #24]
 800a2f4:	f000 fa9e 	bl	800a834 <xQueueGenericSend>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d004      	beq.n	800a308 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a2fe:	f06f 0302 	mvn.w	r3, #2
 800a302:	61fb      	str	r3, [r7, #28]
 800a304:	e000      	b.n	800a308 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a306:	bf00      	nop
    }
  }

  return (stat);
 800a308:	69fb      	ldr	r3, [r7, #28]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3720      	adds	r7, #32
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20000994 	.word	0x20000994
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4a06      	ldr	r2, [pc, #24]	; (800a344 <vApplicationGetIdleTaskMemory+0x28>)
 800a32c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	4a05      	ldr	r2, [pc, #20]	; (800a348 <vApplicationGetIdleTaskMemory+0x2c>)
 800a332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2280      	movs	r2, #128	; 0x80
 800a338:	601a      	str	r2, [r3, #0]
}
 800a33a:	bf00      	nop
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr
 800a344:	20000998 	.word	0x20000998
 800a348:	20000a54 	.word	0x20000a54

0800a34c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	4a07      	ldr	r2, [pc, #28]	; (800a378 <vApplicationGetTimerTaskMemory+0x2c>)
 800a35c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	4a06      	ldr	r2, [pc, #24]	; (800a37c <vApplicationGetTimerTaskMemory+0x30>)
 800a362:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a36a:	601a      	str	r2, [r3, #0]
}
 800a36c:	bf00      	nop
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	bc80      	pop	{r7}
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	20000c54 	.word	0x20000c54
 800a37c:	20000d10 	.word	0x20000d10

0800a380 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f103 0208 	add.w	r2, r3, #8
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f04f 32ff 	mov.w	r2, #4294967295
 800a398:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f103 0208 	add.w	r2, r3, #8
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f103 0208 	add.w	r2, r3, #8
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr

0800a3be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b083      	sub	sp, #12
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bc80      	pop	{r7}
 800a3d4:	4770      	bx	lr

0800a3d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b085      	sub	sp, #20
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	601a      	str	r2, [r3, #0]
}
 800a412:	bf00      	nop
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr

0800a41c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a432:	d103      	bne.n	800a43c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	e00c      	b.n	800a456 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3308      	adds	r3, #8
 800a440:	60fb      	str	r3, [r7, #12]
 800a442:	e002      	b.n	800a44a <vListInsert+0x2e>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	429a      	cmp	r2, r3
 800a454:	d2f6      	bcs.n	800a444 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	601a      	str	r2, [r3, #0]
}
 800a482:	bf00      	nop
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr

0800a48c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	6892      	ldr	r2, [r2, #8]
 800a4a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6852      	ldr	r2, [r2, #4]
 800a4ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d103      	bne.n	800a4c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	1e5a      	subs	r2, r3, #1
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10a      	bne.n	800a50a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a506:	bf00      	nop
 800a508:	e7fe      	b.n	800a508 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a50a:	f002 fc27 	bl	800cd5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a516:	68f9      	ldr	r1, [r7, #12]
 800a518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a51a:	fb01 f303 	mul.w	r3, r1, r3
 800a51e:	441a      	add	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53a:	3b01      	subs	r3, #1
 800a53c:	68f9      	ldr	r1, [r7, #12]
 800a53e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a540:	fb01 f303 	mul.w	r3, r1, r3
 800a544:	441a      	add	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	22ff      	movs	r2, #255	; 0xff
 800a54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	22ff      	movs	r2, #255	; 0xff
 800a556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d114      	bne.n	800a58a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01a      	beq.n	800a59e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3310      	adds	r3, #16
 800a56c:	4618      	mov	r0, r3
 800a56e:	f001 fc41 	bl	800bdf4 <xTaskRemoveFromEventList>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d012      	beq.n	800a59e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <xQueueGenericReset+0xcc>)
 800a57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	e009      	b.n	800a59e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	3310      	adds	r3, #16
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fef6 	bl	800a380 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3324      	adds	r3, #36	; 0x24
 800a598:	4618      	mov	r0, r3
 800a59a:	f7ff fef1 	bl	800a380 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a59e:	f002 fc0d 	bl	800cdbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5a2:	2301      	movs	r3, #1
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	e000ed04 	.word	0xe000ed04

0800a5b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08e      	sub	sp, #56	; 0x38
 800a5b4:	af02      	add	r7, sp, #8
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10a      	bne.n	800a5da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5d6:	bf00      	nop
 800a5d8:	e7fe      	b.n	800a5d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10a      	bne.n	800a5f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <xQueueGenericCreateStatic+0x52>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d001      	beq.n	800a606 <xQueueGenericCreateStatic+0x56>
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <xQueueGenericCreateStatic+0x58>
 800a606:	2300      	movs	r3, #0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	623b      	str	r3, [r7, #32]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <xQueueGenericCreateStatic+0x7e>
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <xQueueGenericCreateStatic+0x82>
 800a62e:	2301      	movs	r3, #1
 800a630:	e000      	b.n	800a634 <xQueueGenericCreateStatic+0x84>
 800a632:	2300      	movs	r3, #0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	61fb      	str	r3, [r7, #28]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a64e:	2350      	movs	r3, #80	; 0x50
 800a650:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b50      	cmp	r3, #80	; 0x50
 800a656:	d00a      	beq.n	800a66e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	61bb      	str	r3, [r7, #24]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00d      	beq.n	800a694 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a680:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	4613      	mov	r3, r2
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f000 f843 	bl	800a71a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a696:	4618      	mov	r0, r3
 800a698:	3730      	adds	r7, #48	; 0x30
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b08a      	sub	sp, #40	; 0x28
 800a6a2:	af02      	add	r7, sp, #8
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	613b      	str	r3, [r7, #16]
}
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	61fb      	str	r3, [r7, #28]
 800a6d2:	e004      	b.n	800a6de <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	fb02 f303 	mul.w	r3, r2, r3
 800a6dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	3350      	adds	r3, #80	; 0x50
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f002 fc3a 	bl	800cf5c <pvPortMalloc>
 800a6e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00f      	beq.n	800a710 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	3350      	adds	r3, #80	; 0x50
 800a6f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6fe:	79fa      	ldrb	r2, [r7, #7]
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	4613      	mov	r3, r2
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	68b9      	ldr	r1, [r7, #8]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f805 	bl	800a71a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a710:	69bb      	ldr	r3, [r7, #24]
	}
 800a712:	4618      	mov	r0, r3
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	607a      	str	r2, [r7, #4]
 800a726:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d103      	bne.n	800a736 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	69ba      	ldr	r2, [r7, #24]
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e002      	b.n	800a73c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a748:	2101      	movs	r1, #1
 800a74a:	69b8      	ldr	r0, [r7, #24]
 800a74c:	f7ff fec8 	bl	800a4e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	78fa      	ldrb	r2, [r7, #3]
 800a754:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a758:	bf00      	nop
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a760:	b580      	push	{r7, lr}
 800a762:	b08a      	sub	sp, #40	; 0x28
 800a764:	af02      	add	r7, sp, #8
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10a      	bne.n	800a788 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	61bb      	str	r3, [r7, #24]
}
 800a784:	bf00      	nop
 800a786:	e7fe      	b.n	800a786 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d90a      	bls.n	800a7a6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	617b      	str	r3, [r7, #20]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff fefd 	bl	800a5b0 <xQueueGenericCreateStatic>
 800a7b6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a7c4:	69fb      	ldr	r3, [r7, #28]
	}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b086      	sub	sp, #24
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	613b      	str	r3, [r7, #16]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d90a      	bls.n	800a812 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	60fb      	str	r3, [r7, #12]
}
 800a80e:	bf00      	nop
 800a810:	e7fe      	b.n	800a810 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a812:	2202      	movs	r2, #2
 800a814:	2100      	movs	r1, #0
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff ff41 	bl	800a69e <xQueueGenericCreate>
 800a81c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a82a:	697b      	ldr	r3, [r7, #20]
	}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08e      	sub	sp, #56	; 0x38
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
 800a840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a842:	2300      	movs	r3, #0
 800a844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xQueueGenericSend+0x32>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <xQueueGenericSend+0x40>
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <xQueueGenericSend+0x44>
 800a874:	2301      	movs	r3, #1
 800a876:	e000      	b.n	800a87a <xQueueGenericSend+0x46>
 800a878:	2300      	movs	r3, #0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <xQueueGenericSend+0x60>
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a890:	bf00      	nop
 800a892:	e7fe      	b.n	800a892 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d103      	bne.n	800a8a2 <xQueueGenericSend+0x6e>
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d101      	bne.n	800a8a6 <xQueueGenericSend+0x72>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <xQueueGenericSend+0x74>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	623b      	str	r3, [r7, #32]
}
 800a8be:	bf00      	nop
 800a8c0:	e7fe      	b.n	800a8c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8c2:	f001 fc5d 	bl	800c180 <xTaskGetSchedulerState>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d102      	bne.n	800a8d2 <xQueueGenericSend+0x9e>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <xQueueGenericSend+0xa2>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <xQueueGenericSend+0xa4>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	61fb      	str	r3, [r7, #28]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8f2:	f002 fa33 	bl	800cd5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d302      	bcc.n	800a908 <xQueueGenericSend+0xd4>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b02      	cmp	r3, #2
 800a906:	d129      	bne.n	800a95c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a90e:	f000 fc5b 	bl	800b1c8 <prvCopyDataToQueue>
 800a912:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d010      	beq.n	800a93e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	3324      	adds	r3, #36	; 0x24
 800a920:	4618      	mov	r0, r3
 800a922:	f001 fa67 	bl	800bdf4 <xTaskRemoveFromEventList>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d013      	beq.n	800a954 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a92c:	4b3f      	ldr	r3, [pc, #252]	; (800aa2c <xQueueGenericSend+0x1f8>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	e00a      	b.n	800a954 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a940:	2b00      	cmp	r3, #0
 800a942:	d007      	beq.n	800a954 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a944:	4b39      	ldr	r3, [pc, #228]	; (800aa2c <xQueueGenericSend+0x1f8>)
 800a946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a954:	f002 fa32 	bl	800cdbc <vPortExitCritical>
				return pdPASS;
 800a958:	2301      	movs	r3, #1
 800a95a:	e063      	b.n	800aa24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a962:	f002 fa2b 	bl	800cdbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a966:	2300      	movs	r3, #0
 800a968:	e05c      	b.n	800aa24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a970:	f107 0314 	add.w	r3, r7, #20
 800a974:	4618      	mov	r0, r3
 800a976:	f001 faa1 	bl	800bebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a97a:	2301      	movs	r3, #1
 800a97c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a97e:	f002 fa1d 	bl	800cdbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a982:	f001 f80b 	bl	800b99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a986:	f002 f9e9 	bl	800cd5c <vPortEnterCritical>
 800a98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a990:	b25b      	sxtb	r3, r3
 800a992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a996:	d103      	bne.n	800a9a0 <xQueueGenericSend+0x16c>
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9a6:	b25b      	sxtb	r3, r3
 800a9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ac:	d103      	bne.n	800a9b6 <xQueueGenericSend+0x182>
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9b6:	f002 fa01 	bl	800cdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9ba:	1d3a      	adds	r2, r7, #4
 800a9bc:	f107 0314 	add.w	r3, r7, #20
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f001 fa90 	bl	800bee8 <xTaskCheckForTimeOut>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d124      	bne.n	800aa18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d0:	f000 fcf2 	bl	800b3b8 <prvIsQueueFull>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d018      	beq.n	800aa0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	3310      	adds	r3, #16
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 f9b6 	bl	800bd54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9ea:	f000 fc7d 	bl	800b2e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9ee:	f000 ffe3 	bl	800b9b8 <xTaskResumeAll>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f47f af7c 	bne.w	800a8f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a9fa:	4b0c      	ldr	r3, [pc, #48]	; (800aa2c <xQueueGenericSend+0x1f8>)
 800a9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa00:	601a      	str	r2, [r3, #0]
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	e772      	b.n	800a8f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa0e:	f000 fc6b 	bl	800b2e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa12:	f000 ffd1 	bl	800b9b8 <xTaskResumeAll>
 800aa16:	e76c      	b.n	800a8f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa1a:	f000 fc65 	bl	800b2e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa1e:	f000 ffcb 	bl	800b9b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa22:	2300      	movs	r3, #0
		}
	}
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3738      	adds	r7, #56	; 0x38
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	e000ed04 	.word	0xe000ed04

0800aa30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08e      	sub	sp, #56	; 0x38
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d103      	bne.n	800aa6c <xQueueGenericSendFromISR+0x3c>
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <xQueueGenericSendFromISR+0x40>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e000      	b.n	800aa72 <xQueueGenericSendFromISR+0x42>
 800aa70:	2300      	movs	r3, #0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10a      	bne.n	800aa8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	623b      	str	r3, [r7, #32]
}
 800aa88:	bf00      	nop
 800aa8a:	e7fe      	b.n	800aa8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d103      	bne.n	800aa9a <xQueueGenericSendFromISR+0x6a>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d101      	bne.n	800aa9e <xQueueGenericSendFromISR+0x6e>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <xQueueGenericSendFromISR+0x70>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	61fb      	str	r3, [r7, #28]
}
 800aab6:	bf00      	nop
 800aab8:	e7fe      	b.n	800aab8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaba:	f002 fa11 	bl	800cee0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aabe:	f3ef 8211 	mrs	r2, BASEPRI
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	61ba      	str	r2, [r7, #24]
 800aad4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aad6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d302      	bcc.n	800aaec <xQueueGenericSendFromISR+0xbc>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d12c      	bne.n	800ab46 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aafc:	f000 fb64 	bl	800b1c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab00:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ab04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab08:	d112      	bne.n	800ab30 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d016      	beq.n	800ab40 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	3324      	adds	r3, #36	; 0x24
 800ab16:	4618      	mov	r0, r3
 800ab18:	f001 f96c 	bl	800bdf4 <xTaskRemoveFromEventList>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	e007      	b.n	800ab40 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab34:	3301      	adds	r3, #1
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	b25a      	sxtb	r2, r3
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab40:	2301      	movs	r3, #1
 800ab42:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ab44:	e001      	b.n	800ab4a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	637b      	str	r3, [r7, #52]	; 0x34
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3738      	adds	r7, #56	; 0x38
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08e      	sub	sp, #56	; 0x38
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	623b      	str	r3, [r7, #32]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ab92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	61fb      	str	r3, [r7, #28]
}
 800aba4:	bf00      	nop
 800aba6:	e7fe      	b.n	800aba6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <xQueueGiveFromISR+0x58>
 800abb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <xQueueGiveFromISR+0x5c>
 800abb8:	2301      	movs	r3, #1
 800abba:	e000      	b.n	800abbe <xQueueGiveFromISR+0x5e>
 800abbc:	2300      	movs	r3, #0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10a      	bne.n	800abd8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	61bb      	str	r3, [r7, #24]
}
 800abd4:	bf00      	nop
 800abd6:	e7fe      	b.n	800abd6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abd8:	f002 f982 	bl	800cee0 <vPortValidateInterruptPriority>
	__asm volatile
 800abdc:	f3ef 8211 	mrs	r2, BASEPRI
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	617a      	str	r2, [r7, #20]
 800abf2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800abf4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d22b      	bcs.n	800ac60 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac22:	d112      	bne.n	800ac4a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d016      	beq.n	800ac5a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	3324      	adds	r3, #36	; 0x24
 800ac30:	4618      	mov	r0, r3
 800ac32:	f001 f8df 	bl	800bdf4 <xTaskRemoveFromEventList>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00e      	beq.n	800ac5a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2201      	movs	r2, #1
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	e007      	b.n	800ac5a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac4e:	3301      	adds	r3, #1
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	b25a      	sxtb	r2, r3
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac5e:	e001      	b.n	800ac64 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	637b      	str	r3, [r7, #52]	; 0x34
 800ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac66:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f383 8811 	msr	BASEPRI, r3
}
 800ac6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3738      	adds	r7, #56	; 0x38
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	; 0x30
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10a      	bne.n	800acac <xQueueReceive+0x30>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	623b      	str	r3, [r7, #32]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d103      	bne.n	800acba <xQueueReceive+0x3e>
 800acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <xQueueReceive+0x42>
 800acba:	2301      	movs	r3, #1
 800acbc:	e000      	b.n	800acc0 <xQueueReceive+0x44>
 800acbe:	2300      	movs	r3, #0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <xQueueReceive+0x5e>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	61fb      	str	r3, [r7, #28]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acda:	f001 fa51 	bl	800c180 <xTaskGetSchedulerState>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <xQueueReceive+0x6e>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <xQueueReceive+0x72>
 800acea:	2301      	movs	r3, #1
 800acec:	e000      	b.n	800acf0 <xQueueReceive+0x74>
 800acee:	2300      	movs	r3, #0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10a      	bne.n	800ad0a <xQueueReceive+0x8e>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	61bb      	str	r3, [r7, #24]
}
 800ad06:	bf00      	nop
 800ad08:	e7fe      	b.n	800ad08 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad0a:	f002 f827 	bl	800cd5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d01f      	beq.n	800ad5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad1e:	f000 fabd 	bl	800b29c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	1e5a      	subs	r2, r3, #1
 800ad26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00f      	beq.n	800ad52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	3310      	adds	r3, #16
 800ad36:	4618      	mov	r0, r3
 800ad38:	f001 f85c 	bl	800bdf4 <xTaskRemoveFromEventList>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d007      	beq.n	800ad52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad42:	4b3d      	ldr	r3, [pc, #244]	; (800ae38 <xQueueReceive+0x1bc>)
 800ad44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad52:	f002 f833 	bl	800cdbc <vPortExitCritical>
				return pdPASS;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e069      	b.n	800ae2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d103      	bne.n	800ad68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad60:	f002 f82c 	bl	800cdbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad64:	2300      	movs	r3, #0
 800ad66:	e062      	b.n	800ae2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad6e:	f107 0310 	add.w	r3, r7, #16
 800ad72:	4618      	mov	r0, r3
 800ad74:	f001 f8a2 	bl	800bebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad7c:	f002 f81e 	bl	800cdbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad80:	f000 fe0c 	bl	800b99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad84:	f001 ffea 	bl	800cd5c <vPortEnterCritical>
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad8e:	b25b      	sxtb	r3, r3
 800ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad94:	d103      	bne.n	800ad9e <xQueueReceive+0x122>
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ada4:	b25b      	sxtb	r3, r3
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d103      	bne.n	800adb4 <xQueueReceive+0x138>
 800adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adb4:	f002 f802 	bl	800cdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adb8:	1d3a      	adds	r2, r7, #4
 800adba:	f107 0310 	add.w	r3, r7, #16
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 f891 	bl	800bee8 <xTaskCheckForTimeOut>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d123      	bne.n	800ae14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adce:	f000 fadd 	bl	800b38c <prvIsQueueEmpty>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d017      	beq.n	800ae08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800add8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adda:	3324      	adds	r3, #36	; 0x24
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 ffb7 	bl	800bd54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ade6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade8:	f000 fa7e 	bl	800b2e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adec:	f000 fde4 	bl	800b9b8 <xTaskResumeAll>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d189      	bne.n	800ad0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800adf6:	4b10      	ldr	r3, [pc, #64]	; (800ae38 <xQueueReceive+0x1bc>)
 800adf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	e780      	b.n	800ad0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae0a:	f000 fa6d 	bl	800b2e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae0e:	f000 fdd3 	bl	800b9b8 <xTaskResumeAll>
 800ae12:	e77a      	b.n	800ad0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae16:	f000 fa67 	bl	800b2e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae1a:	f000 fdcd 	bl	800b9b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae20:	f000 fab4 	bl	800b38c <prvIsQueueEmpty>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f43f af6f 	beq.w	800ad0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3730      	adds	r7, #48	; 0x30
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08e      	sub	sp, #56	; 0x38
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae46:	2300      	movs	r3, #0
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10a      	bne.n	800ae6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5c:	f383 8811 	msr	BASEPRI, r3
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	623b      	str	r3, [r7, #32]
}
 800ae6a:	bf00      	nop
 800ae6c:	e7fe      	b.n	800ae6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00a      	beq.n	800ae8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	61fb      	str	r3, [r7, #28]
}
 800ae88:	bf00      	nop
 800ae8a:	e7fe      	b.n	800ae8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae8c:	f001 f978 	bl	800c180 <xTaskGetSchedulerState>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d102      	bne.n	800ae9c <xQueueSemaphoreTake+0x60>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <xQueueSemaphoreTake+0x64>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e000      	b.n	800aea2 <xQueueSemaphoreTake+0x66>
 800aea0:	2300      	movs	r3, #0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10a      	bne.n	800aebc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	61bb      	str	r3, [r7, #24]
}
 800aeb8:	bf00      	nop
 800aeba:	e7fe      	b.n	800aeba <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aebc:	f001 ff4e 	bl	800cd5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d024      	beq.n	800af16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aece:	1e5a      	subs	r2, r3, #1
 800aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800aedc:	f001 fad0 	bl	800c480 <pvTaskIncrementMutexHeldCount>
 800aee0:	4602      	mov	r2, r0
 800aee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00f      	beq.n	800af0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	3310      	adds	r3, #16
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 ff7e 	bl	800bdf4 <xTaskRemoveFromEventList>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d007      	beq.n	800af0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aefe:	4b54      	ldr	r3, [pc, #336]	; (800b050 <xQueueSemaphoreTake+0x214>)
 800af00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af0e:	f001 ff55 	bl	800cdbc <vPortExitCritical>
				return pdPASS;
 800af12:	2301      	movs	r3, #1
 800af14:	e097      	b.n	800b046 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d111      	bne.n	800af40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	617b      	str	r3, [r7, #20]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800af38:	f001 ff40 	bl	800cdbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af3c:	2300      	movs	r3, #0
 800af3e:	e082      	b.n	800b046 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af46:	f107 030c 	add.w	r3, r7, #12
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 ffb6 	bl	800bebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af50:	2301      	movs	r3, #1
 800af52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af54:	f001 ff32 	bl	800cdbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af58:	f000 fd20 	bl	800b99c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af5c:	f001 fefe 	bl	800cd5c <vPortEnterCritical>
 800af60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af66:	b25b      	sxtb	r3, r3
 800af68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6c:	d103      	bne.n	800af76 <xQueueSemaphoreTake+0x13a>
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af7c:	b25b      	sxtb	r3, r3
 800af7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af82:	d103      	bne.n	800af8c <xQueueSemaphoreTake+0x150>
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af8c:	f001 ff16 	bl	800cdbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af90:	463a      	mov	r2, r7
 800af92:	f107 030c 	add.w	r3, r7, #12
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 ffa5 	bl	800bee8 <xTaskCheckForTimeOut>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d132      	bne.n	800b00a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afa6:	f000 f9f1 	bl	800b38c <prvIsQueueEmpty>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d026      	beq.n	800affe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d109      	bne.n	800afcc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800afb8:	f001 fed0 	bl	800cd5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800afbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f001 f8fb 	bl	800c1bc <xTaskPriorityInherit>
 800afc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800afc8:	f001 fef8 	bl	800cdbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afce:	3324      	adds	r3, #36	; 0x24
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	4611      	mov	r1, r2
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 febd 	bl	800bd54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afdc:	f000 f984 	bl	800b2e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afe0:	f000 fcea 	bl	800b9b8 <xTaskResumeAll>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f47f af68 	bne.w	800aebc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800afec:	4b18      	ldr	r3, [pc, #96]	; (800b050 <xQueueSemaphoreTake+0x214>)
 800afee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	e75e      	b.n	800aebc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800affe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b000:	f000 f972 	bl	800b2e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b004:	f000 fcd8 	bl	800b9b8 <xTaskResumeAll>
 800b008:	e758      	b.n	800aebc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b00a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b00c:	f000 f96c 	bl	800b2e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b010:	f000 fcd2 	bl	800b9b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b016:	f000 f9b9 	bl	800b38c <prvIsQueueEmpty>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f43f af4d 	beq.w	800aebc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00d      	beq.n	800b044 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b028:	f001 fe98 	bl	800cd5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b02e:	f000 f8b4 	bl	800b19a <prvGetDisinheritPriorityAfterTimeout>
 800b032:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 f99a 	bl	800c374 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b040:	f001 febc 	bl	800cdbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b046:	4618      	mov	r0, r3
 800b048:	3738      	adds	r7, #56	; 0x38
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10a      	bne.n	800b080 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	623b      	str	r3, [r7, #32]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d103      	bne.n	800b08e <xQueueReceiveFromISR+0x3a>
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <xQueueReceiveFromISR+0x3e>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <xQueueReceiveFromISR+0x40>
 800b092:	2300      	movs	r3, #0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d10a      	bne.n	800b0ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09c:	f383 8811 	msr	BASEPRI, r3
 800b0a0:	f3bf 8f6f 	isb	sy
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	61fb      	str	r3, [r7, #28]
}
 800b0aa:	bf00      	nop
 800b0ac:	e7fe      	b.n	800b0ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0ae:	f001 ff17 	bl	800cee0 <vPortValidateInterruptPriority>
	__asm volatile
 800b0b2:	f3ef 8211 	mrs	r2, BASEPRI
 800b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	61ba      	str	r2, [r7, #24]
 800b0c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b0ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d02f      	beq.n	800b13a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0e8:	f000 f8d8 	bl	800b29c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	1e5a      	subs	r2, r3, #1
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d112      	bne.n	800b124 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d016      	beq.n	800b134 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	3310      	adds	r3, #16
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fe72 	bl	800bdf4 <xTaskRemoveFromEventList>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00e      	beq.n	800b134 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00b      	beq.n	800b134 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	e007      	b.n	800b134 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b128:	3301      	adds	r3, #1
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	b25a      	sxtb	r2, r3
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b134:	2301      	movs	r3, #1
 800b136:	637b      	str	r3, [r7, #52]	; 0x34
 800b138:	e001      	b.n	800b13e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	637b      	str	r3, [r7, #52]	; 0x34
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f383 8811 	msr	BASEPRI, r3
}
 800b148:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3738      	adds	r7, #56	; 0x38
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10a      	bne.n	800b17c <vQueueDelete+0x28>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	60bb      	str	r3, [r7, #8]
}
 800b178:	bf00      	nop
 800b17a:	e7fe      	b.n	800b17a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 f95b 	bl	800b438 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d102      	bne.n	800b192 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f001 ffa9 	bl	800d0e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b192:	bf00      	nop
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b19a:	b480      	push	{r7}
 800b19c:	b085      	sub	sp, #20
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d006      	beq.n	800b1b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	e001      	b.n	800b1bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
	}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bc80      	pop	{r7}
 800b1c6:	4770      	bx	lr

0800b1c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10d      	bne.n	800b202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d14d      	bne.n	800b28a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f001 f850 	bl	800c298 <xTaskPriorityDisinherit>
 800b1f8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	605a      	str	r2, [r3, #4]
 800b200:	e043      	b.n	800b28a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d119      	bne.n	800b23c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6898      	ldr	r0, [r3, #8]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b210:	461a      	mov	r2, r3
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	f002 fdab 	bl	800dd6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	441a      	add	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d32b      	bcc.n	800b28a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	609a      	str	r2, [r3, #8]
 800b23a:	e026      	b.n	800b28a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68d8      	ldr	r0, [r3, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b244:	461a      	mov	r2, r3
 800b246:	68b9      	ldr	r1, [r7, #8]
 800b248:	f002 fd91 	bl	800dd6e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	68da      	ldr	r2, [r3, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b254:	425b      	negs	r3, r3
 800b256:	441a      	add	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	429a      	cmp	r2, r3
 800b266:	d207      	bcs.n	800b278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b270:	425b      	negs	r3, r3
 800b272:	441a      	add	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d105      	bne.n	800b28a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	3b01      	subs	r3, #1
 800b288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b292:	697b      	ldr	r3, [r7, #20]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d018      	beq.n	800b2e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b6:	441a      	add	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	68da      	ldr	r2, [r3, #12]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d303      	bcc.n	800b2d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68d9      	ldr	r1, [r3, #12]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d8:	461a      	mov	r2, r3
 800b2da:	6838      	ldr	r0, [r7, #0]
 800b2dc:	f002 fd47 	bl	800dd6e <memcpy>
	}
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2f0:	f001 fd34 	bl	800cd5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2fc:	e011      	b.n	800b322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	2b00      	cmp	r3, #0
 800b304:	d012      	beq.n	800b32c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	3324      	adds	r3, #36	; 0x24
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 fd72 	bl	800bdf4 <xTaskRemoveFromEventList>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b316:	f000 fe49 	bl	800bfac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b31a:	7bfb      	ldrb	r3, [r7, #15]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b326:	2b00      	cmp	r3, #0
 800b328:	dce9      	bgt.n	800b2fe <prvUnlockQueue+0x16>
 800b32a:	e000      	b.n	800b32e <prvUnlockQueue+0x46>
					break;
 800b32c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	22ff      	movs	r2, #255	; 0xff
 800b332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b336:	f001 fd41 	bl	800cdbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b33a:	f001 fd0f 	bl	800cd5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b346:	e011      	b.n	800b36c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d012      	beq.n	800b376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3310      	adds	r3, #16
 800b354:	4618      	mov	r0, r3
 800b356:	f000 fd4d 	bl	800bdf4 <xTaskRemoveFromEventList>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b360:	f000 fe24 	bl	800bfac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	3b01      	subs	r3, #1
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b36c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b370:	2b00      	cmp	r3, #0
 800b372:	dce9      	bgt.n	800b348 <prvUnlockQueue+0x60>
 800b374:	e000      	b.n	800b378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	22ff      	movs	r2, #255	; 0xff
 800b37c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b380:	f001 fd1c 	bl	800cdbc <vPortExitCritical>
}
 800b384:	bf00      	nop
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b394:	f001 fce2 	bl	800cd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d102      	bne.n	800b3a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	e001      	b.n	800b3aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3aa:	f001 fd07 	bl	800cdbc <vPortExitCritical>

	return xReturn;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3c0:	f001 fccc 	bl	800cd5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d102      	bne.n	800b3d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	60fb      	str	r3, [r7, #12]
 800b3d4:	e001      	b.n	800b3da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3da:	f001 fcef 	bl	800cdbc <vPortExitCritical>

	return xReturn;
 800b3de:	68fb      	ldr	r3, [r7, #12]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	e014      	b.n	800b422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3f8:	4a0e      	ldr	r2, [pc, #56]	; (800b434 <vQueueAddToRegistry+0x4c>)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b404:	490b      	ldr	r1, [pc, #44]	; (800b434 <vQueueAddToRegistry+0x4c>)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b40e:	4a09      	ldr	r2, [pc, #36]	; (800b434 <vQueueAddToRegistry+0x4c>)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	4413      	add	r3, r2
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b41a:	e006      	b.n	800b42a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3301      	adds	r3, #1
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2b07      	cmp	r3, #7
 800b426:	d9e7      	bls.n	800b3f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b428:	bf00      	nop
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	bc80      	pop	{r7}
 800b432:	4770      	bx	lr
 800b434:	20001110 	.word	0x20001110

0800b438 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b440:	2300      	movs	r3, #0
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e016      	b.n	800b474 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b446:	4a10      	ldr	r2, [pc, #64]	; (800b488 <vQueueUnregisterQueue+0x50>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	00db      	lsls	r3, r3, #3
 800b44c:	4413      	add	r3, r2
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d10b      	bne.n	800b46e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b456:	4a0c      	ldr	r2, [pc, #48]	; (800b488 <vQueueUnregisterQueue+0x50>)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2100      	movs	r1, #0
 800b45c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <vQueueUnregisterQueue+0x50>)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	00db      	lsls	r3, r3, #3
 800b466:	4413      	add	r3, r2
 800b468:	2200      	movs	r2, #0
 800b46a:	605a      	str	r2, [r3, #4]
				break;
 800b46c:	e006      	b.n	800b47c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	3301      	adds	r3, #1
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b07      	cmp	r3, #7
 800b478:	d9e5      	bls.n	800b446 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	bc80      	pop	{r7}
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20001110 	.word	0x20001110

0800b48c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b49c:	f001 fc5e 	bl	800cd5c <vPortEnterCritical>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4a6:	b25b      	sxtb	r3, r3
 800b4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ac:	d103      	bne.n	800b4b6 <vQueueWaitForMessageRestricted+0x2a>
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4bc:	b25b      	sxtb	r3, r3
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d103      	bne.n	800b4cc <vQueueWaitForMessageRestricted+0x40>
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4cc:	f001 fc76 	bl	800cdbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d106      	bne.n	800b4e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	3324      	adds	r3, #36	; 0x24
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 fc5b 	bl	800bd9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4e6:	6978      	ldr	r0, [r7, #20]
 800b4e8:	f7ff fefe 	bl	800b2e8 <prvUnlockQueue>
	}
 800b4ec:	bf00      	nop
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	; 0x38
 800b4f8:	af04      	add	r7, sp, #16
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	623b      	str	r3, [r7, #32]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10a      	bne.n	800b53a <xTaskCreateStatic+0x46>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	61fb      	str	r3, [r7, #28]
}
 800b536:	bf00      	nop
 800b538:	e7fe      	b.n	800b538 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b53a:	23bc      	movs	r3, #188	; 0xbc
 800b53c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2bbc      	cmp	r3, #188	; 0xbc
 800b542:	d00a      	beq.n	800b55a <xTaskCreateStatic+0x66>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	61bb      	str	r3, [r7, #24]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d01e      	beq.n	800b59e <xTaskCreateStatic+0xaa>
 800b560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b562:	2b00      	cmp	r3, #0
 800b564:	d01b      	beq.n	800b59e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b568:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b56e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	2202      	movs	r2, #2
 800b574:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b578:	2300      	movs	r3, #0
 800b57a:	9303      	str	r3, [sp, #12]
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	9302      	str	r3, [sp, #8]
 800b580:	f107 0314 	add.w	r3, r7, #20
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b588:	9300      	str	r3, [sp, #0]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f000 f851 	bl	800b638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b596:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b598:	f000 f8ec 	bl	800b774 <prvAddNewTaskToReadyList>
 800b59c:	e001      	b.n	800b5a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5a2:	697b      	ldr	r3, [r7, #20]
	}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3728      	adds	r7, #40	; 0x28
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08c      	sub	sp, #48	; 0x30
 800b5b0:	af04      	add	r7, sp, #16
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	603b      	str	r3, [r7, #0]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5bc:	88fb      	ldrh	r3, [r7, #6]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f001 fccb 	bl	800cf5c <pvPortMalloc>
 800b5c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00e      	beq.n	800b5ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b5ce:	20bc      	movs	r0, #188	; 0xbc
 800b5d0:	f001 fcc4 	bl	800cf5c <pvPortMalloc>
 800b5d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	631a      	str	r2, [r3, #48]	; 0x30
 800b5e2:	e005      	b.n	800b5f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5e4:	6978      	ldr	r0, [r7, #20]
 800b5e6:	f001 fd7d 	bl	800d0e4 <vPortFree>
 800b5ea:	e001      	b.n	800b5f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d017      	beq.n	800b626 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5fe:	88fa      	ldrh	r2, [r7, #6]
 800b600:	2300      	movs	r3, #0
 800b602:	9303      	str	r3, [sp, #12]
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	9302      	str	r3, [sp, #8]
 800b608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60a:	9301      	str	r3, [sp, #4]
 800b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 f80f 	bl	800b638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b61a:	69f8      	ldr	r0, [r7, #28]
 800b61c:	f000 f8aa 	bl	800b774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b620:	2301      	movs	r3, #1
 800b622:	61bb      	str	r3, [r7, #24]
 800b624:	e002      	b.n	800b62c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b626:	f04f 33ff 	mov.w	r3, #4294967295
 800b62a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b62c:	69bb      	ldr	r3, [r7, #24]
	}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
	...

0800b638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	461a      	mov	r2, r3
 800b650:	21a5      	movs	r1, #165	; 0xa5
 800b652:	f002 fb9a 	bl	800dd8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b660:	3b01      	subs	r3, #1
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	f023 0307 	bic.w	r3, r3, #7
 800b66e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	617b      	str	r3, [r7, #20]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
 800b694:	e012      	b.n	800b6bc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	4413      	add	r3, r2
 800b69c:	7819      	ldrb	r1, [r3, #0]
 800b69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	3334      	adds	r3, #52	; 0x34
 800b6a6:	460a      	mov	r2, r1
 800b6a8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d006      	beq.n	800b6c4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	61fb      	str	r3, [r7, #28]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	2b0f      	cmp	r3, #15
 800b6c0:	d9e9      	bls.n	800b696 <prvInitialiseNewTask+0x5e>
 800b6c2:	e000      	b.n	800b6c6 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b6c4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	2b37      	cmp	r3, #55	; 0x37
 800b6d2:	d901      	bls.n	800b6d8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6d4:	2337      	movs	r3, #55	; 0x37
 800b6d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fe65 	bl	800a3be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	3318      	adds	r3, #24
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fe fe60 	bl	800a3be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	2200      	movs	r2, #0
 800b718:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	2200      	movs	r2, #0
 800b720:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	3354      	adds	r3, #84	; 0x54
 800b728:	2260      	movs	r2, #96	; 0x60
 800b72a:	2100      	movs	r1, #0
 800b72c:	4618      	mov	r0, r3
 800b72e:	f002 fb2c 	bl	800dd8a <memset>
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	4a0c      	ldr	r2, [pc, #48]	; (800b768 <prvInitialiseNewTask+0x130>)
 800b736:	659a      	str	r2, [r3, #88]	; 0x58
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	4a0c      	ldr	r2, [pc, #48]	; (800b76c <prvInitialiseNewTask+0x134>)
 800b73c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	4a0b      	ldr	r2, [pc, #44]	; (800b770 <prvInitialiseNewTask+0x138>)
 800b742:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	68f9      	ldr	r1, [r7, #12]
 800b748:	69b8      	ldr	r0, [r7, #24]
 800b74a:	f001 fa13 	bl	800cb74 <pxPortInitialiseStack>
 800b74e:	4602      	mov	r2, r0
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d002      	beq.n	800b760 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b75e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b760:	bf00      	nop
 800b762:	3720      	adds	r7, #32
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	0800ee74 	.word	0x0800ee74
 800b76c:	0800ee94 	.word	0x0800ee94
 800b770:	0800ee54 	.word	0x0800ee54

0800b774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b77c:	f001 faee 	bl	800cd5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b780:	4b2d      	ldr	r3, [pc, #180]	; (800b838 <prvAddNewTaskToReadyList+0xc4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3301      	adds	r3, #1
 800b786:	4a2c      	ldr	r2, [pc, #176]	; (800b838 <prvAddNewTaskToReadyList+0xc4>)
 800b788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b78a:	4b2c      	ldr	r3, [pc, #176]	; (800b83c <prvAddNewTaskToReadyList+0xc8>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d109      	bne.n	800b7a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b792:	4a2a      	ldr	r2, [pc, #168]	; (800b83c <prvAddNewTaskToReadyList+0xc8>)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b798:	4b27      	ldr	r3, [pc, #156]	; (800b838 <prvAddNewTaskToReadyList+0xc4>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d110      	bne.n	800b7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7a0:	f000 fc28 	bl	800bff4 <prvInitialiseTaskLists>
 800b7a4:	e00d      	b.n	800b7c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7a6:	4b26      	ldr	r3, [pc, #152]	; (800b840 <prvAddNewTaskToReadyList+0xcc>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d109      	bne.n	800b7c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7ae:	4b23      	ldr	r3, [pc, #140]	; (800b83c <prvAddNewTaskToReadyList+0xc8>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d802      	bhi.n	800b7c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7bc:	4a1f      	ldr	r2, [pc, #124]	; (800b83c <prvAddNewTaskToReadyList+0xc8>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7c2:	4b20      	ldr	r3, [pc, #128]	; (800b844 <prvAddNewTaskToReadyList+0xd0>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	4a1e      	ldr	r2, [pc, #120]	; (800b844 <prvAddNewTaskToReadyList+0xd0>)
 800b7ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7cc:	4b1d      	ldr	r3, [pc, #116]	; (800b844 <prvAddNewTaskToReadyList+0xd0>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d8:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <prvAddNewTaskToReadyList+0xd4>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d903      	bls.n	800b7e8 <prvAddNewTaskToReadyList+0x74>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	4a18      	ldr	r2, [pc, #96]	; (800b848 <prvAddNewTaskToReadyList+0xd4>)
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4a15      	ldr	r2, [pc, #84]	; (800b84c <prvAddNewTaskToReadyList+0xd8>)
 800b7f6:	441a      	add	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4610      	mov	r0, r2
 800b800:	f7fe fde9 	bl	800a3d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b804:	f001 fada 	bl	800cdbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b808:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <prvAddNewTaskToReadyList+0xcc>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00e      	beq.n	800b82e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b810:	4b0a      	ldr	r3, [pc, #40]	; (800b83c <prvAddNewTaskToReadyList+0xc8>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d207      	bcs.n	800b82e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b81e:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <prvAddNewTaskToReadyList+0xdc>)
 800b820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20001624 	.word	0x20001624
 800b83c:	20001150 	.word	0x20001150
 800b840:	20001630 	.word	0x20001630
 800b844:	20001640 	.word	0x20001640
 800b848:	2000162c 	.word	0x2000162c
 800b84c:	20001154 	.word	0x20001154
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b85c:	2300      	movs	r3, #0
 800b85e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d017      	beq.n	800b896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b866:	4b13      	ldr	r3, [pc, #76]	; (800b8b4 <vTaskDelay+0x60>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00a      	beq.n	800b884 <vTaskDelay+0x30>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	60bb      	str	r3, [r7, #8]
}
 800b880:	bf00      	nop
 800b882:	e7fe      	b.n	800b882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b884:	f000 f88a 	bl	800b99c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b888:	2100      	movs	r1, #0
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fe0c 	bl	800c4a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b890:	f000 f892 	bl	800b9b8 <xTaskResumeAll>
 800b894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d107      	bne.n	800b8ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b89c:	4b06      	ldr	r3, [pc, #24]	; (800b8b8 <vTaskDelay+0x64>)
 800b89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8ac:	bf00      	nop
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	2000164c 	.word	0x2000164c
 800b8b8:	e000ed04 	.word	0xe000ed04

0800b8bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b08a      	sub	sp, #40	; 0x28
 800b8c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8ca:	463a      	mov	r2, r7
 800b8cc:	1d39      	adds	r1, r7, #4
 800b8ce:	f107 0308 	add.w	r3, r7, #8
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fe fd22 	bl	800a31c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	9202      	str	r2, [sp, #8]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	460a      	mov	r2, r1
 800b8ea:	4924      	ldr	r1, [pc, #144]	; (800b97c <vTaskStartScheduler+0xc0>)
 800b8ec:	4824      	ldr	r0, [pc, #144]	; (800b980 <vTaskStartScheduler+0xc4>)
 800b8ee:	f7ff fe01 	bl	800b4f4 <xTaskCreateStatic>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4a23      	ldr	r2, [pc, #140]	; (800b984 <vTaskStartScheduler+0xc8>)
 800b8f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8f8:	4b22      	ldr	r3, [pc, #136]	; (800b984 <vTaskStartScheduler+0xc8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b900:	2301      	movs	r3, #1
 800b902:	617b      	str	r3, [r7, #20]
 800b904:	e001      	b.n	800b90a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b906:	2300      	movs	r3, #0
 800b908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d102      	bne.n	800b916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b910:	f000 fe1e 	bl	800c550 <xTimerCreateTimerTask>
 800b914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d11b      	bne.n	800b954 <vTaskStartScheduler+0x98>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	613b      	str	r3, [r7, #16]
}
 800b92e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b930:	4b15      	ldr	r3, [pc, #84]	; (800b988 <vTaskStartScheduler+0xcc>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3354      	adds	r3, #84	; 0x54
 800b936:	4a15      	ldr	r2, [pc, #84]	; (800b98c <vTaskStartScheduler+0xd0>)
 800b938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b93a:	4b15      	ldr	r3, [pc, #84]	; (800b990 <vTaskStartScheduler+0xd4>)
 800b93c:	f04f 32ff 	mov.w	r2, #4294967295
 800b940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b942:	4b14      	ldr	r3, [pc, #80]	; (800b994 <vTaskStartScheduler+0xd8>)
 800b944:	2201      	movs	r2, #1
 800b946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b948:	4b13      	ldr	r3, [pc, #76]	; (800b998 <vTaskStartScheduler+0xdc>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b94e:	f001 f993 	bl	800cc78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b952:	e00e      	b.n	800b972 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95a:	d10a      	bne.n	800b972 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	60fb      	str	r3, [r7, #12]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <vTaskStartScheduler+0xb4>
}
 800b972:	bf00      	nop
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	0800edc4 	.word	0x0800edc4
 800b980:	0800bfc5 	.word	0x0800bfc5
 800b984:	20001648 	.word	0x20001648
 800b988:	20001150 	.word	0x20001150
 800b98c:	20000334 	.word	0x20000334
 800b990:	20001644 	.word	0x20001644
 800b994:	20001630 	.word	0x20001630
 800b998:	20001628 	.word	0x20001628

0800b99c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b9a0:	4b04      	ldr	r3, [pc, #16]	; (800b9b4 <vTaskSuspendAll+0x18>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	4a03      	ldr	r2, [pc, #12]	; (800b9b4 <vTaskSuspendAll+0x18>)
 800b9a8:	6013      	str	r3, [r2, #0]
}
 800b9aa:	bf00      	nop
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bc80      	pop	{r7}
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	2000164c 	.word	0x2000164c

0800b9b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9c6:	4b42      	ldr	r3, [pc, #264]	; (800bad0 <xTaskResumeAll+0x118>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	603b      	str	r3, [r7, #0]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9e4:	f001 f9ba 	bl	800cd5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9e8:	4b39      	ldr	r3, [pc, #228]	; (800bad0 <xTaskResumeAll+0x118>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	4a38      	ldr	r2, [pc, #224]	; (800bad0 <xTaskResumeAll+0x118>)
 800b9f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9f2:	4b37      	ldr	r3, [pc, #220]	; (800bad0 <xTaskResumeAll+0x118>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d162      	bne.n	800bac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9fa:	4b36      	ldr	r3, [pc, #216]	; (800bad4 <xTaskResumeAll+0x11c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d05e      	beq.n	800bac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba02:	e02f      	b.n	800ba64 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ba04:	4b34      	ldr	r3, [pc, #208]	; (800bad8 <xTaskResumeAll+0x120>)
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3318      	adds	r3, #24
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fd3b 	bl	800a48c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe fd36 	bl	800a48c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba24:	4b2d      	ldr	r3, [pc, #180]	; (800badc <xTaskResumeAll+0x124>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d903      	bls.n	800ba34 <xTaskResumeAll+0x7c>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba30:	4a2a      	ldr	r2, [pc, #168]	; (800badc <xTaskResumeAll+0x124>)
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4a27      	ldr	r2, [pc, #156]	; (800bae0 <xTaskResumeAll+0x128>)
 800ba42:	441a      	add	r2, r3
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3304      	adds	r3, #4
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f7fe fcc3 	bl	800a3d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba54:	4b23      	ldr	r3, [pc, #140]	; (800bae4 <xTaskResumeAll+0x12c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d302      	bcc.n	800ba64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba5e:	4b22      	ldr	r3, [pc, #136]	; (800bae8 <xTaskResumeAll+0x130>)
 800ba60:	2201      	movs	r2, #1
 800ba62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba64:	4b1c      	ldr	r3, [pc, #112]	; (800bad8 <xTaskResumeAll+0x120>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1cb      	bne.n	800ba04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba72:	f000 fb61 	bl	800c138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba76:	4b1d      	ldr	r3, [pc, #116]	; (800baec <xTaskResumeAll+0x134>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d010      	beq.n	800baa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba82:	f000 f845 	bl	800bb10 <xTaskIncrementTick>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba8c:	4b16      	ldr	r3, [pc, #88]	; (800bae8 <xTaskResumeAll+0x130>)
 800ba8e:	2201      	movs	r2, #1
 800ba90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	3b01      	subs	r3, #1
 800ba96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1f1      	bne.n	800ba82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ba9e:	4b13      	ldr	r3, [pc, #76]	; (800baec <xTaskResumeAll+0x134>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800baa4:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <xTaskResumeAll+0x130>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d009      	beq.n	800bac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800baac:	2301      	movs	r3, #1
 800baae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bab0:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <xTaskResumeAll+0x138>)
 800bab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bac0:	f001 f97c 	bl	800cdbc <vPortExitCritical>

	return xAlreadyYielded;
 800bac4:	68bb      	ldr	r3, [r7, #8]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	2000164c 	.word	0x2000164c
 800bad4:	20001624 	.word	0x20001624
 800bad8:	200015e4 	.word	0x200015e4
 800badc:	2000162c 	.word	0x2000162c
 800bae0:	20001154 	.word	0x20001154
 800bae4:	20001150 	.word	0x20001150
 800bae8:	20001638 	.word	0x20001638
 800baec:	20001634 	.word	0x20001634
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bafa:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <xTaskGetTickCount+0x18>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb00:	687b      	ldr	r3, [r7, #4]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bc80      	pop	{r7}
 800bb0a:	4770      	bx	lr
 800bb0c:	20001628 	.word	0x20001628

0800bb10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb16:	2300      	movs	r3, #0
 800bb18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb1a:	4b51      	ldr	r3, [pc, #324]	; (800bc60 <xTaskIncrementTick+0x150>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f040 808e 	bne.w	800bc40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb24:	4b4f      	ldr	r3, [pc, #316]	; (800bc64 <xTaskIncrementTick+0x154>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb2c:	4a4d      	ldr	r2, [pc, #308]	; (800bc64 <xTaskIncrementTick+0x154>)
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d120      	bne.n	800bb7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb38:	4b4b      	ldr	r3, [pc, #300]	; (800bc68 <xTaskIncrementTick+0x158>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb46:	f383 8811 	msr	BASEPRI, r3
 800bb4a:	f3bf 8f6f 	isb	sy
 800bb4e:	f3bf 8f4f 	dsb	sy
 800bb52:	603b      	str	r3, [r7, #0]
}
 800bb54:	bf00      	nop
 800bb56:	e7fe      	b.n	800bb56 <xTaskIncrementTick+0x46>
 800bb58:	4b43      	ldr	r3, [pc, #268]	; (800bc68 <xTaskIncrementTick+0x158>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	4b43      	ldr	r3, [pc, #268]	; (800bc6c <xTaskIncrementTick+0x15c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a41      	ldr	r2, [pc, #260]	; (800bc68 <xTaskIncrementTick+0x158>)
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	4a41      	ldr	r2, [pc, #260]	; (800bc6c <xTaskIncrementTick+0x15c>)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	4b40      	ldr	r3, [pc, #256]	; (800bc70 <xTaskIncrementTick+0x160>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	4a3f      	ldr	r2, [pc, #252]	; (800bc70 <xTaskIncrementTick+0x160>)
 800bb74:	6013      	str	r3, [r2, #0]
 800bb76:	f000 fadf 	bl	800c138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb7a:	4b3e      	ldr	r3, [pc, #248]	; (800bc74 <xTaskIncrementTick+0x164>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d34e      	bcc.n	800bc22 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb84:	4b38      	ldr	r3, [pc, #224]	; (800bc68 <xTaskIncrementTick+0x158>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <xTaskIncrementTick+0x82>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <xTaskIncrementTick+0x84>
 800bb92:	2300      	movs	r3, #0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d004      	beq.n	800bba2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb98:	4b36      	ldr	r3, [pc, #216]	; (800bc74 <xTaskIncrementTick+0x164>)
 800bb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9e:	601a      	str	r2, [r3, #0]
					break;
 800bba0:	e03f      	b.n	800bc22 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bba2:	4b31      	ldr	r3, [pc, #196]	; (800bc68 <xTaskIncrementTick+0x158>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d203      	bcs.n	800bbc2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbba:	4a2e      	ldr	r2, [pc, #184]	; (800bc74 <xTaskIncrementTick+0x164>)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6013      	str	r3, [r2, #0]
						break;
 800bbc0:	e02f      	b.n	800bc22 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fe fc60 	bl	800a48c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d004      	beq.n	800bbde <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	3318      	adds	r3, #24
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fe fc57 	bl	800a48c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe2:	4b25      	ldr	r3, [pc, #148]	; (800bc78 <xTaskIncrementTick+0x168>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d903      	bls.n	800bbf2 <xTaskIncrementTick+0xe2>
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	4a22      	ldr	r2, [pc, #136]	; (800bc78 <xTaskIncrementTick+0x168>)
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4a1f      	ldr	r2, [pc, #124]	; (800bc7c <xTaskIncrementTick+0x16c>)
 800bc00:	441a      	add	r2, r3
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	3304      	adds	r3, #4
 800bc06:	4619      	mov	r1, r3
 800bc08:	4610      	mov	r0, r2
 800bc0a:	f7fe fbe4 	bl	800a3d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <xTaskIncrementTick+0x170>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d3b3      	bcc.n	800bb84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc20:	e7b0      	b.n	800bb84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc22:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <xTaskIncrementTick+0x170>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc28:	4914      	ldr	r1, [pc, #80]	; (800bc7c <xTaskIncrementTick+0x16c>)
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4413      	add	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	440b      	add	r3, r1
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d907      	bls.n	800bc4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	e004      	b.n	800bc4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bc40:	4b10      	ldr	r3, [pc, #64]	; (800bc84 <xTaskIncrementTick+0x174>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3301      	adds	r3, #1
 800bc46:	4a0f      	ldr	r2, [pc, #60]	; (800bc84 <xTaskIncrementTick+0x174>)
 800bc48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bc4a:	4b0f      	ldr	r3, [pc, #60]	; (800bc88 <xTaskIncrementTick+0x178>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800bc52:	2301      	movs	r3, #1
 800bc54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bc56:	697b      	ldr	r3, [r7, #20]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	2000164c 	.word	0x2000164c
 800bc64:	20001628 	.word	0x20001628
 800bc68:	200015dc 	.word	0x200015dc
 800bc6c:	200015e0 	.word	0x200015e0
 800bc70:	2000163c 	.word	0x2000163c
 800bc74:	20001644 	.word	0x20001644
 800bc78:	2000162c 	.word	0x2000162c
 800bc7c:	20001154 	.word	0x20001154
 800bc80:	20001150 	.word	0x20001150
 800bc84:	20001634 	.word	0x20001634
 800bc88:	20001638 	.word	0x20001638

0800bc8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc92:	4b2a      	ldr	r3, [pc, #168]	; (800bd3c <vTaskSwitchContext+0xb0>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d003      	beq.n	800bca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc9a:	4b29      	ldr	r3, [pc, #164]	; (800bd40 <vTaskSwitchContext+0xb4>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bca0:	e046      	b.n	800bd30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bca2:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <vTaskSwitchContext+0xb4>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bca8:	4b26      	ldr	r3, [pc, #152]	; (800bd44 <vTaskSwitchContext+0xb8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	e010      	b.n	800bcd2 <vTaskSwitchContext+0x46>
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10a      	bne.n	800bccc <vTaskSwitchContext+0x40>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	607b      	str	r3, [r7, #4]
}
 800bcc8:	bf00      	nop
 800bcca:	e7fe      	b.n	800bcca <vTaskSwitchContext+0x3e>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	491d      	ldr	r1, [pc, #116]	; (800bd48 <vTaskSwitchContext+0xbc>)
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	440b      	add	r3, r1
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0e4      	beq.n	800bcb0 <vTaskSwitchContext+0x24>
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	4613      	mov	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4a15      	ldr	r2, [pc, #84]	; (800bd48 <vTaskSwitchContext+0xbc>)
 800bcf2:	4413      	add	r3, r2
 800bcf4:	60bb      	str	r3, [r7, #8]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	605a      	str	r2, [r3, #4]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3308      	adds	r3, #8
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d104      	bne.n	800bd16 <vTaskSwitchContext+0x8a>
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	605a      	str	r2, [r3, #4]
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	4a0b      	ldr	r2, [pc, #44]	; (800bd4c <vTaskSwitchContext+0xc0>)
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	4a08      	ldr	r2, [pc, #32]	; (800bd44 <vTaskSwitchContext+0xb8>)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd26:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <vTaskSwitchContext+0xc0>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	3354      	adds	r3, #84	; 0x54
 800bd2c:	4a08      	ldr	r2, [pc, #32]	; (800bd50 <vTaskSwitchContext+0xc4>)
 800bd2e:	6013      	str	r3, [r2, #0]
}
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	2000164c 	.word	0x2000164c
 800bd40:	20001638 	.word	0x20001638
 800bd44:	2000162c 	.word	0x2000162c
 800bd48:	20001154 	.word	0x20001154
 800bd4c:	20001150 	.word	0x20001150
 800bd50:	20000334 	.word	0x20000334

0800bd54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10a      	bne.n	800bd7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	60fb      	str	r3, [r7, #12]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd7a:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <vTaskPlaceOnEventList+0x44>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3318      	adds	r3, #24
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7fe fb4a 	bl	800a41c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd88:	2101      	movs	r1, #1
 800bd8a:	6838      	ldr	r0, [r7, #0]
 800bd8c:	f000 fb8c 	bl	800c4a8 <prvAddCurrentTaskToDelayedList>
}
 800bd90:	bf00      	nop
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	20001150 	.word	0x20001150

0800bd9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	617b      	str	r3, [r7, #20]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdc4:	4b0a      	ldr	r3, [pc, #40]	; (800bdf0 <vTaskPlaceOnEventListRestricted+0x54>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3318      	adds	r3, #24
 800bdca:	4619      	mov	r1, r3
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f7fe fb02 	bl	800a3d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d002      	beq.n	800bdde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bddc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	68b8      	ldr	r0, [r7, #8]
 800bde2:	f000 fb61 	bl	800c4a8 <prvAddCurrentTaskToDelayedList>
	}
 800bde6:	bf00      	nop
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	20001150 	.word	0x20001150

0800bdf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10a      	bne.n	800be20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	60fb      	str	r3, [r7, #12]
}
 800be1c:	bf00      	nop
 800be1e:	e7fe      	b.n	800be1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	3318      	adds	r3, #24
 800be24:	4618      	mov	r0, r3
 800be26:	f7fe fb31 	bl	800a48c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be2a:	4b1e      	ldr	r3, [pc, #120]	; (800bea4 <xTaskRemoveFromEventList+0xb0>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d11d      	bne.n	800be6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	3304      	adds	r3, #4
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fb28 	bl	800a48c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be40:	4b19      	ldr	r3, [pc, #100]	; (800bea8 <xTaskRemoveFromEventList+0xb4>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d903      	bls.n	800be50 <xTaskRemoveFromEventList+0x5c>
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	4a16      	ldr	r2, [pc, #88]	; (800bea8 <xTaskRemoveFromEventList+0xb4>)
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be54:	4613      	mov	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	4a13      	ldr	r2, [pc, #76]	; (800beac <xTaskRemoveFromEventList+0xb8>)
 800be5e:	441a      	add	r2, r3
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	3304      	adds	r3, #4
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f7fe fab5 	bl	800a3d6 <vListInsertEnd>
 800be6c:	e005      	b.n	800be7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	3318      	adds	r3, #24
 800be72:	4619      	mov	r1, r3
 800be74:	480e      	ldr	r0, [pc, #56]	; (800beb0 <xTaskRemoveFromEventList+0xbc>)
 800be76:	f7fe faae 	bl	800a3d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7e:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <xTaskRemoveFromEventList+0xc0>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be84:	429a      	cmp	r2, r3
 800be86:	d905      	bls.n	800be94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be8c:	4b0a      	ldr	r3, [pc, #40]	; (800beb8 <xTaskRemoveFromEventList+0xc4>)
 800be8e:	2201      	movs	r2, #1
 800be90:	601a      	str	r2, [r3, #0]
 800be92:	e001      	b.n	800be98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be94:	2300      	movs	r3, #0
 800be96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800be98:	697b      	ldr	r3, [r7, #20]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	2000164c 	.word	0x2000164c
 800bea8:	2000162c 	.word	0x2000162c
 800beac:	20001154 	.word	0x20001154
 800beb0:	200015e4 	.word	0x200015e4
 800beb4:	20001150 	.word	0x20001150
 800beb8:	20001638 	.word	0x20001638

0800bebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bec4:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <vTaskInternalSetTimeOutState+0x24>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <vTaskInternalSetTimeOutState+0x28>)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	605a      	str	r2, [r3, #4]
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	bc80      	pop	{r7}
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	2000163c 	.word	0x2000163c
 800bee4:	20001628 	.word	0x20001628

0800bee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	613b      	str	r3, [r7, #16]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10a      	bne.n	800bf2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	60fb      	str	r3, [r7, #12]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bf2a:	f000 ff17 	bl	800cd5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf2e:	4b1d      	ldr	r3, [pc, #116]	; (800bfa4 <xTaskCheckForTimeOut+0xbc>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	1ad3      	subs	r3, r2, r3
 800bf3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf46:	d102      	bne.n	800bf4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	e023      	b.n	800bf96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <xTaskCheckForTimeOut+0xc0>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d007      	beq.n	800bf6a <xTaskCheckForTimeOut+0x82>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	69ba      	ldr	r2, [r7, #24]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d302      	bcc.n	800bf6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf64:	2301      	movs	r3, #1
 800bf66:	61fb      	str	r3, [r7, #28]
 800bf68:	e015      	b.n	800bf96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d20b      	bcs.n	800bf8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	1ad2      	subs	r2, r2, r3
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff ff9b 	bl	800bebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf86:	2300      	movs	r3, #0
 800bf88:	61fb      	str	r3, [r7, #28]
 800bf8a:	e004      	b.n	800bf96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf92:	2301      	movs	r3, #1
 800bf94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf96:	f000 ff11 	bl	800cdbc <vPortExitCritical>

	return xReturn;
 800bf9a:	69fb      	ldr	r3, [r7, #28]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3720      	adds	r7, #32
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20001628 	.word	0x20001628
 800bfa8:	2000163c 	.word	0x2000163c

0800bfac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfac:	b480      	push	{r7}
 800bfae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfb0:	4b03      	ldr	r3, [pc, #12]	; (800bfc0 <vTaskMissedYield+0x14>)
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	601a      	str	r2, [r3, #0]
}
 800bfb6:	bf00      	nop
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bc80      	pop	{r7}
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	20001638 	.word	0x20001638

0800bfc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bfcc:	f000 f852 	bl	800c074 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfd0:	4b06      	ldr	r3, [pc, #24]	; (800bfec <prvIdleTask+0x28>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d9f9      	bls.n	800bfcc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfd8:	4b05      	ldr	r3, [pc, #20]	; (800bff0 <prvIdleTask+0x2c>)
 800bfda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfde:	601a      	str	r2, [r3, #0]
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfe8:	e7f0      	b.n	800bfcc <prvIdleTask+0x8>
 800bfea:	bf00      	nop
 800bfec:	20001154 	.word	0x20001154
 800bff0:	e000ed04 	.word	0xe000ed04

0800bff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bffa:	2300      	movs	r3, #0
 800bffc:	607b      	str	r3, [r7, #4]
 800bffe:	e00c      	b.n	800c01a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	4613      	mov	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4413      	add	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4a12      	ldr	r2, [pc, #72]	; (800c054 <prvInitialiseTaskLists+0x60>)
 800c00c:	4413      	add	r3, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe f9b6 	bl	800a380 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3301      	adds	r3, #1
 800c018:	607b      	str	r3, [r7, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b37      	cmp	r3, #55	; 0x37
 800c01e:	d9ef      	bls.n	800c000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c020:	480d      	ldr	r0, [pc, #52]	; (800c058 <prvInitialiseTaskLists+0x64>)
 800c022:	f7fe f9ad 	bl	800a380 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c026:	480d      	ldr	r0, [pc, #52]	; (800c05c <prvInitialiseTaskLists+0x68>)
 800c028:	f7fe f9aa 	bl	800a380 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c02c:	480c      	ldr	r0, [pc, #48]	; (800c060 <prvInitialiseTaskLists+0x6c>)
 800c02e:	f7fe f9a7 	bl	800a380 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c032:	480c      	ldr	r0, [pc, #48]	; (800c064 <prvInitialiseTaskLists+0x70>)
 800c034:	f7fe f9a4 	bl	800a380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c038:	480b      	ldr	r0, [pc, #44]	; (800c068 <prvInitialiseTaskLists+0x74>)
 800c03a:	f7fe f9a1 	bl	800a380 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c03e:	4b0b      	ldr	r3, [pc, #44]	; (800c06c <prvInitialiseTaskLists+0x78>)
 800c040:	4a05      	ldr	r2, [pc, #20]	; (800c058 <prvInitialiseTaskLists+0x64>)
 800c042:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c044:	4b0a      	ldr	r3, [pc, #40]	; (800c070 <prvInitialiseTaskLists+0x7c>)
 800c046:	4a05      	ldr	r2, [pc, #20]	; (800c05c <prvInitialiseTaskLists+0x68>)
 800c048:	601a      	str	r2, [r3, #0]
}
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	20001154 	.word	0x20001154
 800c058:	200015b4 	.word	0x200015b4
 800c05c:	200015c8 	.word	0x200015c8
 800c060:	200015e4 	.word	0x200015e4
 800c064:	200015f8 	.word	0x200015f8
 800c068:	20001610 	.word	0x20001610
 800c06c:	200015dc 	.word	0x200015dc
 800c070:	200015e0 	.word	0x200015e0

0800c074 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c07a:	e019      	b.n	800c0b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c07c:	f000 fe6e 	bl	800cd5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c080:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <prvCheckTasksWaitingTermination+0x50>)
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3304      	adds	r3, #4
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fe f9fd 	bl	800a48c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c092:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <prvCheckTasksWaitingTermination+0x54>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3b01      	subs	r3, #1
 800c098:	4a0b      	ldr	r2, [pc, #44]	; (800c0c8 <prvCheckTasksWaitingTermination+0x54>)
 800c09a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c09c:	4b0b      	ldr	r3, [pc, #44]	; (800c0cc <prvCheckTasksWaitingTermination+0x58>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	4a0a      	ldr	r2, [pc, #40]	; (800c0cc <prvCheckTasksWaitingTermination+0x58>)
 800c0a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0a6:	f000 fe89 	bl	800cdbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f810 	bl	800c0d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0b0:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <prvCheckTasksWaitingTermination+0x58>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d1e1      	bne.n	800c07c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	200015f8 	.word	0x200015f8
 800c0c8:	20001624 	.word	0x20001624
 800c0cc:	2000160c 	.word	0x2000160c

0800c0d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3354      	adds	r3, #84	; 0x54
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f001 ff17 	bl	800df10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d108      	bne.n	800c0fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 fff7 	bl	800d0e4 <vPortFree>
				vPortFree( pxTCB );
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fff4 	bl	800d0e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0fc:	e018      	b.n	800c130 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c104:	2b01      	cmp	r3, #1
 800c106:	d103      	bne.n	800c110 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 ffeb 	bl	800d0e4 <vPortFree>
	}
 800c10e:	e00f      	b.n	800c130 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c116:	2b02      	cmp	r3, #2
 800c118:	d00a      	beq.n	800c130 <prvDeleteTCB+0x60>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	60fb      	str	r3, [r7, #12]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <prvDeleteTCB+0x5e>
	}
 800c130:	bf00      	nop
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c13e:	4b0e      	ldr	r3, [pc, #56]	; (800c178 <prvResetNextTaskUnblockTime+0x40>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <prvResetNextTaskUnblockTime+0x14>
 800c148:	2301      	movs	r3, #1
 800c14a:	e000      	b.n	800c14e <prvResetNextTaskUnblockTime+0x16>
 800c14c:	2300      	movs	r3, #0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d004      	beq.n	800c15c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c152:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <prvResetNextTaskUnblockTime+0x44>)
 800c154:	f04f 32ff 	mov.w	r2, #4294967295
 800c158:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c15a:	e008      	b.n	800c16e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c15c:	4b06      	ldr	r3, [pc, #24]	; (800c178 <prvResetNextTaskUnblockTime+0x40>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	4a04      	ldr	r2, [pc, #16]	; (800c17c <prvResetNextTaskUnblockTime+0x44>)
 800c16c:	6013      	str	r3, [r2, #0]
}
 800c16e:	bf00      	nop
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	bc80      	pop	{r7}
 800c176:	4770      	bx	lr
 800c178:	200015dc 	.word	0x200015dc
 800c17c:	20001644 	.word	0x20001644

0800c180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c186:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <xTaskGetSchedulerState+0x34>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d102      	bne.n	800c194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c18e:	2301      	movs	r3, #1
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	e008      	b.n	800c1a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c194:	4b08      	ldr	r3, [pc, #32]	; (800c1b8 <xTaskGetSchedulerState+0x38>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d102      	bne.n	800c1a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c19c:	2302      	movs	r3, #2
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	e001      	b.n	800c1a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1a6:	687b      	ldr	r3, [r7, #4]
	}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bc80      	pop	{r7}
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	20001630 	.word	0x20001630
 800c1b8:	2000164c 	.word	0x2000164c

0800c1bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d056      	beq.n	800c280 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d6:	4b2d      	ldr	r3, [pc, #180]	; (800c28c <xTaskPriorityInherit+0xd0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d246      	bcs.n	800c26e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	db06      	blt.n	800c1f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e8:	4b28      	ldr	r3, [pc, #160]	; (800c28c <xTaskPriorityInherit+0xd0>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	6959      	ldr	r1, [r3, #20]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fe:	4613      	mov	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4a22      	ldr	r2, [pc, #136]	; (800c290 <xTaskPriorityInherit+0xd4>)
 800c208:	4413      	add	r3, r2
 800c20a:	4299      	cmp	r1, r3
 800c20c:	d101      	bne.n	800c212 <xTaskPriorityInherit+0x56>
 800c20e:	2301      	movs	r3, #1
 800c210:	e000      	b.n	800c214 <xTaskPriorityInherit+0x58>
 800c212:	2300      	movs	r3, #0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d022      	beq.n	800c25e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3304      	adds	r3, #4
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7fe f935 	bl	800a48c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c222:	4b1a      	ldr	r3, [pc, #104]	; (800c28c <xTaskPriorityInherit+0xd0>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c230:	4b18      	ldr	r3, [pc, #96]	; (800c294 <xTaskPriorityInherit+0xd8>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	429a      	cmp	r2, r3
 800c236:	d903      	bls.n	800c240 <xTaskPriorityInherit+0x84>
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23c:	4a15      	ldr	r2, [pc, #84]	; (800c294 <xTaskPriorityInherit+0xd8>)
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4a10      	ldr	r2, [pc, #64]	; (800c290 <xTaskPriorityInherit+0xd4>)
 800c24e:	441a      	add	r2, r3
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	3304      	adds	r3, #4
 800c254:	4619      	mov	r1, r3
 800c256:	4610      	mov	r0, r2
 800c258:	f7fe f8bd 	bl	800a3d6 <vListInsertEnd>
 800c25c:	e004      	b.n	800c268 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c25e:	4b0b      	ldr	r3, [pc, #44]	; (800c28c <xTaskPriorityInherit+0xd0>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c268:	2301      	movs	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	e008      	b.n	800c280 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c272:	4b06      	ldr	r3, [pc, #24]	; (800c28c <xTaskPriorityInherit+0xd0>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	429a      	cmp	r2, r3
 800c27a:	d201      	bcs.n	800c280 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c27c:	2301      	movs	r3, #1
 800c27e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c280:	68fb      	ldr	r3, [r7, #12]
	}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20001150 	.word	0x20001150
 800c290:	20001154 	.word	0x20001154
 800c294:	2000162c 	.word	0x2000162c

0800c298 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d056      	beq.n	800c35c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2ae:	4b2e      	ldr	r3, [pc, #184]	; (800c368 <xTaskPriorityDisinherit+0xd0>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d00a      	beq.n	800c2ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	60fb      	str	r3, [r7, #12]
}
 800c2ca:	bf00      	nop
 800c2cc:	e7fe      	b.n	800c2cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	f383 8811 	msr	BASEPRI, r3
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	60bb      	str	r3, [r7, #8]
}
 800c2e8:	bf00      	nop
 800c2ea:	e7fe      	b.n	800c2ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f0:	1e5a      	subs	r2, r3, #1
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d02c      	beq.n	800c35c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c306:	2b00      	cmp	r3, #0
 800c308:	d128      	bne.n	800c35c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	3304      	adds	r3, #4
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fe f8bc 	bl	800a48c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c320:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c32c:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <xTaskPriorityDisinherit+0xd4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	429a      	cmp	r2, r3
 800c332:	d903      	bls.n	800c33c <xTaskPriorityDisinherit+0xa4>
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c338:	4a0c      	ldr	r2, [pc, #48]	; (800c36c <xTaskPriorityDisinherit+0xd4>)
 800c33a:	6013      	str	r3, [r2, #0]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c340:	4613      	mov	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4a09      	ldr	r2, [pc, #36]	; (800c370 <xTaskPriorityDisinherit+0xd8>)
 800c34a:	441a      	add	r2, r3
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	3304      	adds	r3, #4
 800c350:	4619      	mov	r1, r3
 800c352:	4610      	mov	r0, r2
 800c354:	f7fe f83f 	bl	800a3d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c358:	2301      	movs	r3, #1
 800c35a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c35c:	697b      	ldr	r3, [r7, #20]
	}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20001150 	.word	0x20001150
 800c36c:	2000162c 	.word	0x2000162c
 800c370:	20001154 	.word	0x20001154

0800c374 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c374:	b580      	push	{r7, lr}
 800c376:	b088      	sub	sp, #32
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c382:	2301      	movs	r3, #1
 800c384:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d06f      	beq.n	800c46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10a      	bne.n	800c3aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	60fb      	str	r3, [r7, #12]
}
 800c3a6:	bf00      	nop
 800c3a8:	e7fe      	b.n	800c3a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ae:	683a      	ldr	r2, [r7, #0]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d902      	bls.n	800c3ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	61fb      	str	r3, [r7, #28]
 800c3b8:	e002      	b.n	800c3c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c4:	69fa      	ldr	r2, [r7, #28]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d050      	beq.n	800c46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d14b      	bne.n	800c46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c3d4:	4b27      	ldr	r3, [pc, #156]	; (800c474 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d10a      	bne.n	800c3f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	60bb      	str	r3, [r7, #8]
}
 800c3f0:	bf00      	nop
 800c3f2:	e7fe      	b.n	800c3f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	69fa      	ldr	r2, [r7, #28]
 800c3fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	699b      	ldr	r3, [r3, #24]
 800c404:	2b00      	cmp	r3, #0
 800c406:	db04      	blt.n	800c412 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	6959      	ldr	r1, [r3, #20]
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4613      	mov	r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4a15      	ldr	r2, [pc, #84]	; (800c478 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c422:	4413      	add	r3, r2
 800c424:	4299      	cmp	r1, r3
 800c426:	d101      	bne.n	800c42c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c428:	2301      	movs	r3, #1
 800c42a:	e000      	b.n	800c42e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800c42c:	2300      	movs	r3, #0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01c      	beq.n	800c46c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	3304      	adds	r3, #4
 800c436:	4618      	mov	r0, r3
 800c438:	f7fe f828 	bl	800a48c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c440:	4b0e      	ldr	r3, [pc, #56]	; (800c47c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	429a      	cmp	r2, r3
 800c446:	d903      	bls.n	800c450 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44c:	4a0b      	ldr	r2, [pc, #44]	; (800c47c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c454:	4613      	mov	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4413      	add	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4a06      	ldr	r2, [pc, #24]	; (800c478 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c45e:	441a      	add	r2, r3
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	3304      	adds	r3, #4
 800c464:	4619      	mov	r1, r3
 800c466:	4610      	mov	r0, r2
 800c468:	f7fd ffb5 	bl	800a3d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c46c:	bf00      	nop
 800c46e:	3720      	adds	r7, #32
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	20001150 	.word	0x20001150
 800c478:	20001154 	.word	0x20001154
 800c47c:	2000162c 	.word	0x2000162c

0800c480 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c480:	b480      	push	{r7}
 800c482:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d004      	beq.n	800c496 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c48c:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c492:	3201      	adds	r2, #1
 800c494:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c496:	4b03      	ldr	r3, [pc, #12]	; (800c4a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c498:	681b      	ldr	r3, [r3, #0]
	}
 800c49a:	4618      	mov	r0, r3
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bc80      	pop	{r7}
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	20001150 	.word	0x20001150

0800c4a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4b2:	4b21      	ldr	r3, [pc, #132]	; (800c538 <prvAddCurrentTaskToDelayedList+0x90>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4b8:	4b20      	ldr	r3, [pc, #128]	; (800c53c <prvAddCurrentTaskToDelayedList+0x94>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fd ffe4 	bl	800a48c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ca:	d10a      	bne.n	800c4e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d007      	beq.n	800c4e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4d2:	4b1a      	ldr	r3, [pc, #104]	; (800c53c <prvAddCurrentTaskToDelayedList+0x94>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4819      	ldr	r0, [pc, #100]	; (800c540 <prvAddCurrentTaskToDelayedList+0x98>)
 800c4dc:	f7fd ff7b 	bl	800a3d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4e0:	e026      	b.n	800c530 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4ea:	4b14      	ldr	r3, [pc, #80]	; (800c53c <prvAddCurrentTaskToDelayedList+0x94>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d209      	bcs.n	800c50e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4fa:	4b12      	ldr	r3, [pc, #72]	; (800c544 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <prvAddCurrentTaskToDelayedList+0x94>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	3304      	adds	r3, #4
 800c504:	4619      	mov	r1, r3
 800c506:	4610      	mov	r0, r2
 800c508:	f7fd ff88 	bl	800a41c <vListInsert>
}
 800c50c:	e010      	b.n	800c530 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c50e:	4b0e      	ldr	r3, [pc, #56]	; (800c548 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <prvAddCurrentTaskToDelayedList+0x94>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	3304      	adds	r3, #4
 800c518:	4619      	mov	r1, r3
 800c51a:	4610      	mov	r0, r2
 800c51c:	f7fd ff7e 	bl	800a41c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c520:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	429a      	cmp	r2, r3
 800c528:	d202      	bcs.n	800c530 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c52a:	4a08      	ldr	r2, [pc, #32]	; (800c54c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	6013      	str	r3, [r2, #0]
}
 800c530:	bf00      	nop
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20001628 	.word	0x20001628
 800c53c:	20001150 	.word	0x20001150
 800c540:	20001610 	.word	0x20001610
 800c544:	200015e0 	.word	0x200015e0
 800c548:	200015dc 	.word	0x200015dc
 800c54c:	20001644 	.word	0x20001644

0800c550 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b08a      	sub	sp, #40	; 0x28
 800c554:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c556:	2300      	movs	r3, #0
 800c558:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c55a:	f000 facb 	bl	800caf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c55e:	4b1c      	ldr	r3, [pc, #112]	; (800c5d0 <xTimerCreateTimerTask+0x80>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d021      	beq.n	800c5aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c566:	2300      	movs	r3, #0
 800c568:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c56e:	1d3a      	adds	r2, r7, #4
 800c570:	f107 0108 	add.w	r1, r7, #8
 800c574:	f107 030c 	add.w	r3, r7, #12
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fd fee7 	bl	800a34c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	9202      	str	r2, [sp, #8]
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	2302      	movs	r3, #2
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	2300      	movs	r3, #0
 800c58e:	460a      	mov	r2, r1
 800c590:	4910      	ldr	r1, [pc, #64]	; (800c5d4 <xTimerCreateTimerTask+0x84>)
 800c592:	4811      	ldr	r0, [pc, #68]	; (800c5d8 <xTimerCreateTimerTask+0x88>)
 800c594:	f7fe ffae 	bl	800b4f4 <xTaskCreateStatic>
 800c598:	4603      	mov	r3, r0
 800c59a:	4a10      	ldr	r2, [pc, #64]	; (800c5dc <xTimerCreateTimerTask+0x8c>)
 800c59c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c59e:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <xTimerCreateTimerTask+0x8c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10a      	bne.n	800c5c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	613b      	str	r3, [r7, #16]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5c6:	697b      	ldr	r3, [r7, #20]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	20001680 	.word	0x20001680
 800c5d4:	0800edcc 	.word	0x0800edcc
 800c5d8:	0800c6fd 	.word	0x0800c6fd
 800c5dc:	20001684 	.word	0x20001684

0800c5e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08a      	sub	sp, #40	; 0x28
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10a      	bne.n	800c60e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	623b      	str	r3, [r7, #32]
}
 800c60a:	bf00      	nop
 800c60c:	e7fe      	b.n	800c60c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c60e:	4b1a      	ldr	r3, [pc, #104]	; (800c678 <xTimerGenericCommand+0x98>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d02a      	beq.n	800c66c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	2b05      	cmp	r3, #5
 800c626:	dc18      	bgt.n	800c65a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c628:	f7ff fdaa 	bl	800c180 <xTaskGetSchedulerState>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d109      	bne.n	800c646 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c632:	4b11      	ldr	r3, [pc, #68]	; (800c678 <xTimerGenericCommand+0x98>)
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	f107 0110 	add.w	r1, r7, #16
 800c63a:	2300      	movs	r3, #0
 800c63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c63e:	f7fe f8f9 	bl	800a834 <xQueueGenericSend>
 800c642:	6278      	str	r0, [r7, #36]	; 0x24
 800c644:	e012      	b.n	800c66c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c646:	4b0c      	ldr	r3, [pc, #48]	; (800c678 <xTimerGenericCommand+0x98>)
 800c648:	6818      	ldr	r0, [r3, #0]
 800c64a:	f107 0110 	add.w	r1, r7, #16
 800c64e:	2300      	movs	r3, #0
 800c650:	2200      	movs	r2, #0
 800c652:	f7fe f8ef 	bl	800a834 <xQueueGenericSend>
 800c656:	6278      	str	r0, [r7, #36]	; 0x24
 800c658:	e008      	b.n	800c66c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c65a:	4b07      	ldr	r3, [pc, #28]	; (800c678 <xTimerGenericCommand+0x98>)
 800c65c:	6818      	ldr	r0, [r3, #0]
 800c65e:	f107 0110 	add.w	r1, r7, #16
 800c662:	2300      	movs	r3, #0
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	f7fe f9e3 	bl	800aa30 <xQueueGenericSendFromISR>
 800c66a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3728      	adds	r7, #40	; 0x28
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20001680 	.word	0x20001680

0800c67c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af02      	add	r7, sp, #8
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c686:	4b1c      	ldr	r3, [pc, #112]	; (800c6f8 <prvProcessExpiredTimer+0x7c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	3304      	adds	r3, #4
 800c694:	4618      	mov	r0, r3
 800c696:	f7fd fef9 	bl	800a48c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	69db      	ldr	r3, [r3, #28]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d122      	bne.n	800c6e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	699a      	ldr	r2, [r3, #24]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	18d1      	adds	r1, r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	683a      	ldr	r2, [r7, #0]
 800c6ae:	6978      	ldr	r0, [r7, #20]
 800c6b0:	f000 f8c8 	bl	800c844 <prvInsertTimerInActiveList>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d016      	beq.n	800c6e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	2300      	movs	r3, #0
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	6978      	ldr	r0, [r7, #20]
 800c6c6:	f7ff ff8b 	bl	800c5e0 <xTimerGenericCommand>
 800c6ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10a      	bne.n	800c6e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	60fb      	str	r3, [r7, #12]
}
 800c6e4:	bf00      	nop
 800c6e6:	e7fe      	b.n	800c6e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	6978      	ldr	r0, [r7, #20]
 800c6ee:	4798      	blx	r3
}
 800c6f0:	bf00      	nop
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20001678 	.word	0x20001678

0800c6fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c704:	f107 0308 	add.w	r3, r7, #8
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 f857 	bl	800c7bc <prvGetNextExpireTime>
 800c70e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	4619      	mov	r1, r3
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f000 f803 	bl	800c720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c71a:	f000 f8d5 	bl	800c8c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c71e:	e7f1      	b.n	800c704 <prvTimerTask+0x8>

0800c720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c72a:	f7ff f937 	bl	800b99c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c72e:	f107 0308 	add.w	r3, r7, #8
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f866 	bl	800c804 <prvSampleTimeNow>
 800c738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d130      	bne.n	800c7a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10a      	bne.n	800c75c <prvProcessTimerOrBlockTask+0x3c>
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d806      	bhi.n	800c75c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c74e:	f7ff f933 	bl	800b9b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c752:	68f9      	ldr	r1, [r7, #12]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff ff91 	bl	800c67c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c75a:	e024      	b.n	800c7a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d008      	beq.n	800c774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c762:	4b13      	ldr	r3, [pc, #76]	; (800c7b0 <prvProcessTimerOrBlockTask+0x90>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	bf0c      	ite	eq
 800c76c:	2301      	moveq	r3, #1
 800c76e:	2300      	movne	r3, #0
 800c770:	b2db      	uxtb	r3, r3
 800c772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c774:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <prvProcessTimerOrBlockTask+0x94>)
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	4619      	mov	r1, r3
 800c782:	f7fe fe83 	bl	800b48c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c786:	f7ff f917 	bl	800b9b8 <xTaskResumeAll>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c790:	4b09      	ldr	r3, [pc, #36]	; (800c7b8 <prvProcessTimerOrBlockTask+0x98>)
 800c792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
}
 800c7a0:	e001      	b.n	800c7a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c7a2:	f7ff f909 	bl	800b9b8 <xTaskResumeAll>
}
 800c7a6:	bf00      	nop
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	2000167c 	.word	0x2000167c
 800c7b4:	20001680 	.word	0x20001680
 800c7b8:	e000ed04 	.word	0xe000ed04

0800c7bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7c4:	4b0e      	ldr	r3, [pc, #56]	; (800c800 <prvGetNextExpireTime+0x44>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	bf0c      	ite	eq
 800c7ce:	2301      	moveq	r3, #1
 800c7d0:	2300      	movne	r3, #0
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d105      	bne.n	800c7ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7e2:	4b07      	ldr	r3, [pc, #28]	; (800c800 <prvGetNextExpireTime+0x44>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	e001      	b.n	800c7f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bc80      	pop	{r7}
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	20001678 	.word	0x20001678

0800c804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c80c:	f7ff f972 	bl	800baf4 <xTaskGetTickCount>
 800c810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c812:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <prvSampleTimeNow+0x3c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d205      	bcs.n	800c828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c81c:	f000 f908 	bl	800ca30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	e002      	b.n	800c82e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c82e:	4a04      	ldr	r2, [pc, #16]	; (800c840 <prvSampleTimeNow+0x3c>)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c834:	68fb      	ldr	r3, [r7, #12]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20001688 	.word	0x20001688

0800c844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d812      	bhi.n	800c890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	1ad2      	subs	r2, r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	429a      	cmp	r2, r3
 800c876:	d302      	bcc.n	800c87e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c878:	2301      	movs	r3, #1
 800c87a:	617b      	str	r3, [r7, #20]
 800c87c:	e01b      	b.n	800c8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c87e:	4b10      	ldr	r3, [pc, #64]	; (800c8c0 <prvInsertTimerInActiveList+0x7c>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3304      	adds	r3, #4
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fd fdc7 	bl	800a41c <vListInsert>
 800c88e:	e012      	b.n	800c8b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d206      	bcs.n	800c8a6 <prvInsertTimerInActiveList+0x62>
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d302      	bcc.n	800c8a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	e007      	b.n	800c8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8a6:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <prvInsertTimerInActiveList+0x80>)
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	f7fd fdb3 	bl	800a41c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c8b6:	697b      	ldr	r3, [r7, #20]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	2000167c 	.word	0x2000167c
 800c8c4:	20001678 	.word	0x20001678

0800c8c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b08e      	sub	sp, #56	; 0x38
 800c8cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8ce:	e09d      	b.n	800ca0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	da18      	bge.n	800c908 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8d6:	1d3b      	adds	r3, r7, #4
 800c8d8:	3304      	adds	r3, #4
 800c8da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	61fb      	str	r3, [r7, #28]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8fe:	6850      	ldr	r0, [r2, #4]
 800c900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c902:	6892      	ldr	r2, [r2, #8]
 800c904:	4611      	mov	r1, r2
 800c906:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	db7d      	blt.n	800ca0a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d004      	beq.n	800c924 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91c:	3304      	adds	r3, #4
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fd fdb4 	bl	800a48c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c924:	463b      	mov	r3, r7
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff ff6c 	bl	800c804 <prvSampleTimeNow>
 800c92c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b09      	cmp	r3, #9
 800c932:	d86b      	bhi.n	800ca0c <prvProcessReceivedCommands+0x144>
 800c934:	a201      	add	r2, pc, #4	; (adr r2, 800c93c <prvProcessReceivedCommands+0x74>)
 800c936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93a:	bf00      	nop
 800c93c:	0800c965 	.word	0x0800c965
 800c940:	0800c965 	.word	0x0800c965
 800c944:	0800c965 	.word	0x0800c965
 800c948:	0800ca0d 	.word	0x0800ca0d
 800c94c:	0800c9c1 	.word	0x0800c9c1
 800c950:	0800c9f9 	.word	0x0800c9f9
 800c954:	0800c965 	.word	0x0800c965
 800c958:	0800c965 	.word	0x0800c965
 800c95c:	0800ca0d 	.word	0x0800ca0d
 800c960:	0800c9c1 	.word	0x0800c9c1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c964:	68ba      	ldr	r2, [r7, #8]
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	18d1      	adds	r1, r2, r3
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c972:	f7ff ff67 	bl	800c844 <prvInsertTimerInActiveList>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d047      	beq.n	800ca0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c982:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	69db      	ldr	r3, [r3, #28]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d13f      	bne.n	800ca0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	441a      	add	r2, r3
 800c994:	2300      	movs	r3, #0
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	2300      	movs	r3, #0
 800c99a:	2100      	movs	r1, #0
 800c99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c99e:	f7ff fe1f 	bl	800c5e0 <xTimerGenericCommand>
 800c9a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c9a4:	6a3b      	ldr	r3, [r7, #32]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d130      	bne.n	800ca0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ae:	f383 8811 	msr	BASEPRI, r3
 800c9b2:	f3bf 8f6f 	isb	sy
 800c9b6:	f3bf 8f4f 	dsb	sy
 800c9ba:	61bb      	str	r3, [r7, #24]
}
 800c9bc:	bf00      	nop
 800c9be:	e7fe      	b.n	800c9be <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d10a      	bne.n	800c9e4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	617b      	str	r3, [r7, #20]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	699a      	ldr	r2, [r3, #24]
 800c9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ea:	18d1      	adds	r1, r2, r3
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9f2:	f7ff ff27 	bl	800c844 <prvInsertTimerInActiveList>
					break;
 800c9f6:	e009      	b.n	800ca0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d104      	bne.n	800ca0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ca02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca04:	f000 fb6e 	bl	800d0e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca08:	e000      	b.n	800ca0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca0c:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <prvProcessReceivedCommands+0x164>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	1d39      	adds	r1, r7, #4
 800ca12:	2200      	movs	r2, #0
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fe f931 	bl	800ac7c <xQueueReceive>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f47f af57 	bne.w	800c8d0 <prvProcessReceivedCommands+0x8>
	}
}
 800ca22:	bf00      	nop
 800ca24:	bf00      	nop
 800ca26:	3730      	adds	r7, #48	; 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	20001680 	.word	0x20001680

0800ca30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca36:	e045      	b.n	800cac4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca38:	4b2c      	ldr	r3, [pc, #176]	; (800caec <prvSwitchTimerLists+0xbc>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca42:	4b2a      	ldr	r3, [pc, #168]	; (800caec <prvSwitchTimerLists+0xbc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	3304      	adds	r3, #4
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fd fd1b 	bl	800a48c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d12e      	bne.n	800cac4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d90e      	bls.n	800ca96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca84:	4b19      	ldr	r3, [pc, #100]	; (800caec <prvSwitchTimerLists+0xbc>)
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4610      	mov	r0, r2
 800ca90:	f7fd fcc4 	bl	800a41c <vListInsert>
 800ca94:	e016      	b.n	800cac4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca96:	2300      	movs	r3, #0
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	2100      	movs	r1, #0
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f7ff fd9d 	bl	800c5e0 <xTimerGenericCommand>
 800caa6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10a      	bne.n	800cac4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	603b      	str	r3, [r7, #0]
}
 800cac0:	bf00      	nop
 800cac2:	e7fe      	b.n	800cac2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cac4:	4b09      	ldr	r3, [pc, #36]	; (800caec <prvSwitchTimerLists+0xbc>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1b4      	bne.n	800ca38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cace:	4b07      	ldr	r3, [pc, #28]	; (800caec <prvSwitchTimerLists+0xbc>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cad4:	4b06      	ldr	r3, [pc, #24]	; (800caf0 <prvSwitchTimerLists+0xc0>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a04      	ldr	r2, [pc, #16]	; (800caec <prvSwitchTimerLists+0xbc>)
 800cada:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cadc:	4a04      	ldr	r2, [pc, #16]	; (800caf0 <prvSwitchTimerLists+0xc0>)
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	6013      	str	r3, [r2, #0]
}
 800cae2:	bf00      	nop
 800cae4:	3718      	adds	r7, #24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20001678 	.word	0x20001678
 800caf0:	2000167c 	.word	0x2000167c

0800caf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cafa:	f000 f92f 	bl	800cd5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cafe:	4b15      	ldr	r3, [pc, #84]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d120      	bne.n	800cb48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb06:	4814      	ldr	r0, [pc, #80]	; (800cb58 <prvCheckForValidListAndQueue+0x64>)
 800cb08:	f7fd fc3a 	bl	800a380 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb0c:	4813      	ldr	r0, [pc, #76]	; (800cb5c <prvCheckForValidListAndQueue+0x68>)
 800cb0e:	f7fd fc37 	bl	800a380 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <prvCheckForValidListAndQueue+0x6c>)
 800cb14:	4a10      	ldr	r2, [pc, #64]	; (800cb58 <prvCheckForValidListAndQueue+0x64>)
 800cb16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb18:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <prvCheckForValidListAndQueue+0x70>)
 800cb1a:	4a10      	ldr	r2, [pc, #64]	; (800cb5c <prvCheckForValidListAndQueue+0x68>)
 800cb1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <prvCheckForValidListAndQueue+0x74>)
 800cb24:	4a11      	ldr	r2, [pc, #68]	; (800cb6c <prvCheckForValidListAndQueue+0x78>)
 800cb26:	2110      	movs	r1, #16
 800cb28:	200a      	movs	r0, #10
 800cb2a:	f7fd fd41 	bl	800a5b0 <xQueueGenericCreateStatic>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	4a08      	ldr	r2, [pc, #32]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb34:	4b07      	ldr	r3, [pc, #28]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb3c:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <prvCheckForValidListAndQueue+0x60>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	490b      	ldr	r1, [pc, #44]	; (800cb70 <prvCheckForValidListAndQueue+0x7c>)
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fc50 	bl	800b3e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb48:	f000 f938 	bl	800cdbc <vPortExitCritical>
}
 800cb4c:	bf00      	nop
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	20001680 	.word	0x20001680
 800cb58:	20001650 	.word	0x20001650
 800cb5c:	20001664 	.word	0x20001664
 800cb60:	20001678 	.word	0x20001678
 800cb64:	2000167c 	.word	0x2000167c
 800cb68:	2000172c 	.word	0x2000172c
 800cb6c:	2000168c 	.word	0x2000168c
 800cb70:	0800edd4 	.word	0x0800edd4

0800cb74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	3b04      	subs	r3, #4
 800cb84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3b04      	subs	r3, #4
 800cb92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	f023 0201 	bic.w	r2, r3, #1
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	3b04      	subs	r3, #4
 800cba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cba4:	4a08      	ldr	r2, [pc, #32]	; (800cbc8 <pxPortInitialiseStack+0x54>)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3b14      	subs	r3, #20
 800cbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3b20      	subs	r3, #32
 800cbba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bc80      	pop	{r7}
 800cbc6:	4770      	bx	lr
 800cbc8:	0800cbcd 	.word	0x0800cbcd

0800cbcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbd6:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <prvTaskExitError+0x54>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbde:	d00a      	beq.n	800cbf6 <prvTaskExitError+0x2a>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60fb      	str	r3, [r7, #12]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <prvTaskExitError+0x28>
	__asm volatile
 800cbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	60bb      	str	r3, [r7, #8]
}
 800cc08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc0a:	bf00      	nop
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d0fc      	beq.n	800cc0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc12:	bf00      	nop
 800cc14:	bf00      	nop
 800cc16:	3714      	adds	r7, #20
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bc80      	pop	{r7}
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	200002c4 	.word	0x200002c4
	...

0800cc30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc30:	4b07      	ldr	r3, [pc, #28]	; (800cc50 <pxCurrentTCBConst2>)
 800cc32:	6819      	ldr	r1, [r3, #0]
 800cc34:	6808      	ldr	r0, [r1, #0]
 800cc36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cc3a:	f380 8809 	msr	PSP, r0
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f04f 0000 	mov.w	r0, #0
 800cc46:	f380 8811 	msr	BASEPRI, r0
 800cc4a:	f04e 0e0d 	orr.w	lr, lr, #13
 800cc4e:	4770      	bx	lr

0800cc50 <pxCurrentTCBConst2>:
 800cc50:	20001150 	.word	0x20001150
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc54:	bf00      	nop
 800cc56:	bf00      	nop

0800cc58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800cc58:	4806      	ldr	r0, [pc, #24]	; (800cc74 <prvPortStartFirstTask+0x1c>)
 800cc5a:	6800      	ldr	r0, [r0, #0]
 800cc5c:	6800      	ldr	r0, [r0, #0]
 800cc5e:	f380 8808 	msr	MSP, r0
 800cc62:	b662      	cpsie	i
 800cc64:	b661      	cpsie	f
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	df00      	svc	0
 800cc70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc72:	bf00      	nop
 800cc74:	e000ed08 	.word	0xe000ed08

0800cc78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc7e:	4b32      	ldr	r3, [pc, #200]	; (800cd48 <xPortStartScheduler+0xd0>)
 800cc80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	22ff      	movs	r2, #255	; 0xff
 800cc8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc98:	78fb      	ldrb	r3, [r7, #3]
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	4b2a      	ldr	r3, [pc, #168]	; (800cd4c <xPortStartScheduler+0xd4>)
 800cca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cca6:	4b2a      	ldr	r3, [pc, #168]	; (800cd50 <xPortStartScheduler+0xd8>)
 800cca8:	2207      	movs	r2, #7
 800ccaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccac:	e009      	b.n	800ccc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ccae:	4b28      	ldr	r3, [pc, #160]	; (800cd50 <xPortStartScheduler+0xd8>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	4a26      	ldr	r2, [pc, #152]	; (800cd50 <xPortStartScheduler+0xd8>)
 800ccb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccc2:	78fb      	ldrb	r3, [r7, #3]
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccca:	2b80      	cmp	r3, #128	; 0x80
 800cccc:	d0ef      	beq.n	800ccae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccce:	4b20      	ldr	r3, [pc, #128]	; (800cd50 <xPortStartScheduler+0xd8>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f1c3 0307 	rsb	r3, r3, #7
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	d00a      	beq.n	800ccf0 <xPortStartScheduler+0x78>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	60bb      	str	r3, [r7, #8]
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccf0:	4b17      	ldr	r3, [pc, #92]	; (800cd50 <xPortStartScheduler+0xd8>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	021b      	lsls	r3, r3, #8
 800ccf6:	4a16      	ldr	r2, [pc, #88]	; (800cd50 <xPortStartScheduler+0xd8>)
 800ccf8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccfa:	4b15      	ldr	r3, [pc, #84]	; (800cd50 <xPortStartScheduler+0xd8>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd02:	4a13      	ldr	r2, [pc, #76]	; (800cd50 <xPortStartScheduler+0xd8>)
 800cd04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd0e:	4b11      	ldr	r3, [pc, #68]	; (800cd54 <xPortStartScheduler+0xdc>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a10      	ldr	r2, [pc, #64]	; (800cd54 <xPortStartScheduler+0xdc>)
 800cd14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <xPortStartScheduler+0xdc>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a0d      	ldr	r2, [pc, #52]	; (800cd54 <xPortStartScheduler+0xdc>)
 800cd20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd26:	f000 f8b9 	bl	800ce9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd2a:	4b0b      	ldr	r3, [pc, #44]	; (800cd58 <xPortStartScheduler+0xe0>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd30:	f7ff ff92 	bl	800cc58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd34:	f7fe ffaa 	bl	800bc8c <vTaskSwitchContext>
	prvTaskExitError();
 800cd38:	f7ff ff48 	bl	800cbcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	e000e400 	.word	0xe000e400
 800cd4c:	2000177c 	.word	0x2000177c
 800cd50:	20001780 	.word	0x20001780
 800cd54:	e000ed20 	.word	0xe000ed20
 800cd58:	200002c4 	.word	0x200002c4

0800cd5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
	__asm volatile
 800cd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	607b      	str	r3, [r7, #4]
}
 800cd74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd76:	4b0f      	ldr	r3, [pc, #60]	; (800cdb4 <vPortEnterCritical+0x58>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	4a0d      	ldr	r2, [pc, #52]	; (800cdb4 <vPortEnterCritical+0x58>)
 800cd7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd80:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <vPortEnterCritical+0x58>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d10f      	bne.n	800cda8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd88:	4b0b      	ldr	r3, [pc, #44]	; (800cdb8 <vPortEnterCritical+0x5c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00a      	beq.n	800cda8 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	603b      	str	r3, [r7, #0]
}
 800cda4:	bf00      	nop
 800cda6:	e7fe      	b.n	800cda6 <vPortEnterCritical+0x4a>
	}
}
 800cda8:	bf00      	nop
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bc80      	pop	{r7}
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	200002c4 	.word	0x200002c4
 800cdb8:	e000ed04 	.word	0xe000ed04

0800cdbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdc2:	4b11      	ldr	r3, [pc, #68]	; (800ce08 <vPortExitCritical+0x4c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10a      	bne.n	800cde0 <vPortExitCritical+0x24>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	607b      	str	r3, [r7, #4]
}
 800cddc:	bf00      	nop
 800cdde:	e7fe      	b.n	800cdde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cde0:	4b09      	ldr	r3, [pc, #36]	; (800ce08 <vPortExitCritical+0x4c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	4a08      	ldr	r2, [pc, #32]	; (800ce08 <vPortExitCritical+0x4c>)
 800cde8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdea:	4b07      	ldr	r3, [pc, #28]	; (800ce08 <vPortExitCritical+0x4c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d105      	bne.n	800cdfe <vPortExitCritical+0x42>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	f383 8811 	msr	BASEPRI, r3
}
 800cdfc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdfe:	bf00      	nop
 800ce00:	370c      	adds	r7, #12
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bc80      	pop	{r7}
 800ce06:	4770      	bx	lr
 800ce08:	200002c4 	.word	0x200002c4
 800ce0c:	00000000 	.word	0x00000000

0800ce10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce10:	f3ef 8009 	mrs	r0, PSP
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <pxCurrentTCBConst>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ce20:	6010      	str	r0, [r2, #0]
 800ce22:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ce26:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce2a:	f380 8811 	msr	BASEPRI, r0
 800ce2e:	f7fe ff2d 	bl	800bc8c <vTaskSwitchContext>
 800ce32:	f04f 0000 	mov.w	r0, #0
 800ce36:	f380 8811 	msr	BASEPRI, r0
 800ce3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ce3e:	6819      	ldr	r1, [r3, #0]
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ce46:	f380 8809 	msr	PSP, r0
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	4770      	bx	lr

0800ce50 <pxCurrentTCBConst>:
 800ce50:	20001150 	.word	0x20001150
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop

0800ce58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	607b      	str	r3, [r7, #4]
}
 800ce70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce72:	f7fe fe4d 	bl	800bb10 <xTaskIncrementTick>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d003      	beq.n	800ce84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce7c:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <SysTick_Handler+0x40>)
 800ce7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	2300      	movs	r3, #0
 800ce86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	f383 8811 	msr	BASEPRI, r3
}
 800ce8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	e000ed04 	.word	0xe000ed04

0800ce9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cea0:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <vPortSetupTimerInterrupt+0x30>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cea6:	4b0a      	ldr	r3, [pc, #40]	; (800ced0 <vPortSetupTimerInterrupt+0x34>)
 800cea8:	2200      	movs	r2, #0
 800ceaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ceac:	4b09      	ldr	r3, [pc, #36]	; (800ced4 <vPortSetupTimerInterrupt+0x38>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a09      	ldr	r2, [pc, #36]	; (800ced8 <vPortSetupTimerInterrupt+0x3c>)
 800ceb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb6:	099b      	lsrs	r3, r3, #6
 800ceb8:	4a08      	ldr	r2, [pc, #32]	; (800cedc <vPortSetupTimerInterrupt+0x40>)
 800ceba:	3b01      	subs	r3, #1
 800cebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cebe:	4b03      	ldr	r3, [pc, #12]	; (800cecc <vPortSetupTimerInterrupt+0x30>)
 800cec0:	2207      	movs	r2, #7
 800cec2:	601a      	str	r2, [r3, #0]
}
 800cec4:	bf00      	nop
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bc80      	pop	{r7}
 800ceca:	4770      	bx	lr
 800cecc:	e000e010 	.word	0xe000e010
 800ced0:	e000e018 	.word	0xe000e018
 800ced4:	20000000 	.word	0x20000000
 800ced8:	10624dd3 	.word	0x10624dd3
 800cedc:	e000e014 	.word	0xe000e014

0800cee0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cee6:	f3ef 8305 	mrs	r3, IPSR
 800ceea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b0f      	cmp	r3, #15
 800cef0:	d914      	bls.n	800cf1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cef2:	4a16      	ldr	r2, [pc, #88]	; (800cf4c <vPortValidateInterruptPriority+0x6c>)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4413      	add	r3, r2
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cefc:	4b14      	ldr	r3, [pc, #80]	; (800cf50 <vPortValidateInterruptPriority+0x70>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	7afa      	ldrb	r2, [r7, #11]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d20a      	bcs.n	800cf1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	607b      	str	r3, [r7, #4]
}
 800cf18:	bf00      	nop
 800cf1a:	e7fe      	b.n	800cf1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf1c:	4b0d      	ldr	r3, [pc, #52]	; (800cf54 <vPortValidateInterruptPriority+0x74>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf24:	4b0c      	ldr	r3, [pc, #48]	; (800cf58 <vPortValidateInterruptPriority+0x78>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d90a      	bls.n	800cf42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf30:	f383 8811 	msr	BASEPRI, r3
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	603b      	str	r3, [r7, #0]
}
 800cf3e:	bf00      	nop
 800cf40:	e7fe      	b.n	800cf40 <vPortValidateInterruptPriority+0x60>
	}
 800cf42:	bf00      	nop
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bc80      	pop	{r7}
 800cf4a:	4770      	bx	lr
 800cf4c:	e000e3f0 	.word	0xe000e3f0
 800cf50:	2000177c 	.word	0x2000177c
 800cf54:	e000ed0c 	.word	0xe000ed0c
 800cf58:	20001780 	.word	0x20001780

0800cf5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	; 0x28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf64:	2300      	movs	r3, #0
 800cf66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf68:	f7fe fd18 	bl	800b99c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf6c:	4b58      	ldr	r3, [pc, #352]	; (800d0d0 <pvPortMalloc+0x174>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf74:	f000 f910 	bl	800d198 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf78:	4b56      	ldr	r3, [pc, #344]	; (800d0d4 <pvPortMalloc+0x178>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4013      	ands	r3, r2
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f040 808e 	bne.w	800d0a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01d      	beq.n	800cfc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf8c:	2208      	movs	r2, #8
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4413      	add	r3, r2
 800cf92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d014      	beq.n	800cfc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f023 0307 	bic.w	r3, r3, #7
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f003 0307 	and.w	r3, r3, #7
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <pvPortMalloc+0x6c>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	617b      	str	r3, [r7, #20]
}
 800cfc4:	bf00      	nop
 800cfc6:	e7fe      	b.n	800cfc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d069      	beq.n	800d0a2 <pvPortMalloc+0x146>
 800cfce:	4b42      	ldr	r3, [pc, #264]	; (800d0d8 <pvPortMalloc+0x17c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d864      	bhi.n	800d0a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfd8:	4b40      	ldr	r3, [pc, #256]	; (800d0dc <pvPortMalloc+0x180>)
 800cfda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfdc:	4b3f      	ldr	r3, [pc, #252]	; (800d0dc <pvPortMalloc+0x180>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfe2:	e004      	b.n	800cfee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d903      	bls.n	800d000 <pvPortMalloc+0xa4>
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1f1      	bne.n	800cfe4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d000:	4b33      	ldr	r3, [pc, #204]	; (800d0d0 <pvPortMalloc+0x174>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d006:	429a      	cmp	r2, r3
 800d008:	d04b      	beq.n	800d0a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d00a:	6a3b      	ldr	r3, [r7, #32]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2208      	movs	r2, #8
 800d010:	4413      	add	r3, r2
 800d012:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	1ad2      	subs	r2, r2, r3
 800d024:	2308      	movs	r3, #8
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	429a      	cmp	r2, r3
 800d02a:	d91f      	bls.n	800d06c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4413      	add	r3, r2
 800d032:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00a      	beq.n	800d054 <pvPortMalloc+0xf8>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	613b      	str	r3, [r7, #16]
}
 800d050:	bf00      	nop
 800d052:	e7fe      	b.n	800d052 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	1ad2      	subs	r2, r2, r3
 800d05c:	69bb      	ldr	r3, [r7, #24]
 800d05e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d066:	69b8      	ldr	r0, [r7, #24]
 800d068:	f000 f8f8 	bl	800d25c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d06c:	4b1a      	ldr	r3, [pc, #104]	; (800d0d8 <pvPortMalloc+0x17c>)
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	4a18      	ldr	r2, [pc, #96]	; (800d0d8 <pvPortMalloc+0x17c>)
 800d078:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d07a:	4b17      	ldr	r3, [pc, #92]	; (800d0d8 <pvPortMalloc+0x17c>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	4b18      	ldr	r3, [pc, #96]	; (800d0e0 <pvPortMalloc+0x184>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d203      	bcs.n	800d08e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <pvPortMalloc+0x17c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a15      	ldr	r2, [pc, #84]	; (800d0e0 <pvPortMalloc+0x184>)
 800d08c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <pvPortMalloc+0x178>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	431a      	orrs	r2, r3
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	2200      	movs	r2, #0
 800d0a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0a2:	f7fe fc89 	bl	800b9b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0a6:	69fb      	ldr	r3, [r7, #28]
 800d0a8:	f003 0307 	and.w	r3, r3, #7
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00a      	beq.n	800d0c6 <pvPortMalloc+0x16a>
	__asm volatile
 800d0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b4:	f383 8811 	msr	BASEPRI, r3
 800d0b8:	f3bf 8f6f 	isb	sy
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	60fb      	str	r3, [r7, #12]
}
 800d0c2:	bf00      	nop
 800d0c4:	e7fe      	b.n	800d0c4 <pvPortMalloc+0x168>
	return pvReturn;
 800d0c6:	69fb      	ldr	r3, [r7, #28]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3728      	adds	r7, #40	; 0x28
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	2000238c 	.word	0x2000238c
 800d0d4:	20002398 	.word	0x20002398
 800d0d8:	20002390 	.word	0x20002390
 800d0dc:	20002384 	.word	0x20002384
 800d0e0:	20002394 	.word	0x20002394

0800d0e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d048      	beq.n	800d188 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0f6:	2308      	movs	r3, #8
 800d0f8:	425b      	negs	r3, r3
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	4413      	add	r3, r2
 800d0fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	685a      	ldr	r2, [r3, #4]
 800d108:	4b21      	ldr	r3, [pc, #132]	; (800d190 <vPortFree+0xac>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4013      	ands	r3, r2
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10a      	bne.n	800d128 <vPortFree+0x44>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	60fb      	str	r3, [r7, #12]
}
 800d124:	bf00      	nop
 800d126:	e7fe      	b.n	800d126 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00a      	beq.n	800d146 <vPortFree+0x62>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	60bb      	str	r3, [r7, #8]
}
 800d142:	bf00      	nop
 800d144:	e7fe      	b.n	800d144 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	4b11      	ldr	r3, [pc, #68]	; (800d190 <vPortFree+0xac>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4013      	ands	r3, r2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d019      	beq.n	800d188 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d115      	bne.n	800d188 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	4b0b      	ldr	r3, [pc, #44]	; (800d190 <vPortFree+0xac>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	43db      	mvns	r3, r3
 800d166:	401a      	ands	r2, r3
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d16c:	f7fe fc16 	bl	800b99c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	685a      	ldr	r2, [r3, #4]
 800d174:	4b07      	ldr	r3, [pc, #28]	; (800d194 <vPortFree+0xb0>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4413      	add	r3, r2
 800d17a:	4a06      	ldr	r2, [pc, #24]	; (800d194 <vPortFree+0xb0>)
 800d17c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d17e:	6938      	ldr	r0, [r7, #16]
 800d180:	f000 f86c 	bl	800d25c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d184:	f7fe fc18 	bl	800b9b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d188:	bf00      	nop
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20002398 	.word	0x20002398
 800d194:	20002390 	.word	0x20002390

0800d198 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d19e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800d1a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1a4:	4b27      	ldr	r3, [pc, #156]	; (800d244 <prvHeapInit+0xac>)
 800d1a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f003 0307 	and.w	r3, r3, #7
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00c      	beq.n	800d1cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3307      	adds	r3, #7
 800d1b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f023 0307 	bic.w	r3, r3, #7
 800d1be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	4a1f      	ldr	r2, [pc, #124]	; (800d244 <prvHeapInit+0xac>)
 800d1c8:	4413      	add	r3, r2
 800d1ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1d0:	4a1d      	ldr	r2, [pc, #116]	; (800d248 <prvHeapInit+0xb0>)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1d6:	4b1c      	ldr	r3, [pc, #112]	; (800d248 <prvHeapInit+0xb0>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1e4:	2208      	movs	r2, #8
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	1a9b      	subs	r3, r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f023 0307 	bic.w	r3, r3, #7
 800d1f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	4a15      	ldr	r2, [pc, #84]	; (800d24c <prvHeapInit+0xb4>)
 800d1f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1fa:	4b14      	ldr	r3, [pc, #80]	; (800d24c <prvHeapInit+0xb4>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2200      	movs	r2, #0
 800d200:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d202:	4b12      	ldr	r3, [pc, #72]	; (800d24c <prvHeapInit+0xb4>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	1ad2      	subs	r2, r2, r3
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d218:	4b0c      	ldr	r3, [pc, #48]	; (800d24c <prvHeapInit+0xb4>)
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	4a0a      	ldr	r2, [pc, #40]	; (800d250 <prvHeapInit+0xb8>)
 800d226:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	4a09      	ldr	r2, [pc, #36]	; (800d254 <prvHeapInit+0xbc>)
 800d22e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d230:	4b09      	ldr	r3, [pc, #36]	; (800d258 <prvHeapInit+0xc0>)
 800d232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d236:	601a      	str	r2, [r3, #0]
}
 800d238:	bf00      	nop
 800d23a:	3714      	adds	r7, #20
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bc80      	pop	{r7}
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	20001784 	.word	0x20001784
 800d248:	20002384 	.word	0x20002384
 800d24c:	2000238c 	.word	0x2000238c
 800d250:	20002394 	.word	0x20002394
 800d254:	20002390 	.word	0x20002390
 800d258:	20002398 	.word	0x20002398

0800d25c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d264:	4b27      	ldr	r3, [pc, #156]	; (800d304 <prvInsertBlockIntoFreeList+0xa8>)
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	e002      	b.n	800d270 <prvInsertBlockIntoFreeList+0x14>
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	429a      	cmp	r2, r3
 800d278:	d8f7      	bhi.n	800d26a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	68ba      	ldr	r2, [r7, #8]
 800d284:	4413      	add	r3, r2
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d108      	bne.n	800d29e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	685a      	ldr	r2, [r3, #4]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	441a      	add	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	441a      	add	r2, r3
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d118      	bne.n	800d2e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	4b14      	ldr	r3, [pc, #80]	; (800d308 <prvInsertBlockIntoFreeList+0xac>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d00d      	beq.n	800d2da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	685a      	ldr	r2, [r3, #4]
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	441a      	add	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	e008      	b.n	800d2ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2da:	4b0b      	ldr	r3, [pc, #44]	; (800d308 <prvInsertBlockIntoFreeList+0xac>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	601a      	str	r2, [r3, #0]
 800d2e2:	e003      	b.n	800d2ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d002      	beq.n	800d2fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2fa:	bf00      	nop
 800d2fc:	3714      	adds	r7, #20
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bc80      	pop	{r7}
 800d302:	4770      	bx	lr
 800d304:	20002384 	.word	0x20002384
 800d308:	2000238c 	.word	0x2000238c

0800d30c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d310:	2200      	movs	r2, #0
 800d312:	4912      	ldr	r1, [pc, #72]	; (800d35c <MX_USB_DEVICE_Init+0x50>)
 800d314:	4812      	ldr	r0, [pc, #72]	; (800d360 <MX_USB_DEVICE_Init+0x54>)
 800d316:	f7fb fccf 	bl	8008cb8 <USBD_Init>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d320:	f7f3 f9cc 	bl	80006bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800d324:	490f      	ldr	r1, [pc, #60]	; (800d364 <MX_USB_DEVICE_Init+0x58>)
 800d326:	480e      	ldr	r0, [pc, #56]	; (800d360 <MX_USB_DEVICE_Init+0x54>)
 800d328:	f7fb fcf1 	bl	8008d0e <USBD_RegisterClass>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d332:	f7f3 f9c3 	bl	80006bc <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800d336:	490c      	ldr	r1, [pc, #48]	; (800d368 <MX_USB_DEVICE_Init+0x5c>)
 800d338:	4809      	ldr	r0, [pc, #36]	; (800d360 <MX_USB_DEVICE_Init+0x54>)
 800d33a:	f7fb fcab 	bl	8008c94 <USBD_AUDIO_RegisterInterface>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d001      	beq.n	800d348 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d344:	f7f3 f9ba 	bl	80006bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d348:	4805      	ldr	r0, [pc, #20]	; (800d360 <MX_USB_DEVICE_Init+0x54>)
 800d34a:	f7fb fcf9 	bl	8008d40 <USBD_Start>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d001      	beq.n	800d358 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d354:	f7f3 f9b2 	bl	80006bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d358:	bf00      	nop
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	200002e4 	.word	0x200002e4
 800d360:	2000239c 	.word	0x2000239c
 800d364:	20000210 	.word	0x20000210
 800d368:	200002c8 	.word	0x200002c8

0800d36c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800d378:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	bc80      	pop	{r7}
 800d382:	4770      	bx	lr

0800d384 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800d38c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800d38e:	4618      	mov	r0, r3
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	bc80      	pop	{r7}
 800d396:	4770      	bx	lr

0800d398 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d001      	beq.n	800d3b0 <AUDIO_AudioCmd_FS+0x18>
 800d3ac:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800d3ae:	e000      	b.n	800d3b2 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800d3b0:	bf00      	nop
  }
  return (USBD_OK);
 800d3b2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bc80      	pop	{r7}
 800d3bc:	4770      	bx	lr

0800d3be <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b083      	sub	sp, #12
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800d3c8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bc80      	pop	{r7}
 800d3d2:	4770      	bx	lr

0800d3d4 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	4603      	mov	r3, r0
 800d3dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3de:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bc80      	pop	{r7}
 800d3e8:	4770      	bx	lr

0800d3ea <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b083      	sub	sp, #12
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d3f4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bc80      	pop	{r7}
 800d3fe:	4770      	bx	lr

0800d400 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800d400:	b480      	push	{r7}
 800d402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800d404:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d406:	4618      	mov	r0, r3
 800d408:	46bd      	mov	sp, r7
 800d40a:	bc80      	pop	{r7}
 800d40c:	4770      	bx	lr
	...

0800d410 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	4603      	mov	r3, r0
 800d418:	6039      	str	r1, [r7, #0]
 800d41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2212      	movs	r2, #18
 800d420:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d422:	4b03      	ldr	r3, [pc, #12]	; (800d430 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	bc80      	pop	{r7}
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	20000300 	.word	0x20000300

0800d434 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	4603      	mov	r3, r0
 800d43c:	6039      	str	r1, [r7, #0]
 800d43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	2204      	movs	r2, #4
 800d444:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d446:	4b03      	ldr	r3, [pc, #12]	; (800d454 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d448:	4618      	mov	r0, r3
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bc80      	pop	{r7}
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	20000314 	.word	0x20000314

0800d458 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	4603      	mov	r3, r0
 800d460:	6039      	str	r1, [r7, #0]
 800d462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d105      	bne.n	800d476 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	4907      	ldr	r1, [pc, #28]	; (800d48c <USBD_FS_ProductStrDescriptor+0x34>)
 800d46e:	4808      	ldr	r0, [pc, #32]	; (800d490 <USBD_FS_ProductStrDescriptor+0x38>)
 800d470:	f7fc fbde 	bl	8009c30 <USBD_GetString>
 800d474:	e004      	b.n	800d480 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	4904      	ldr	r1, [pc, #16]	; (800d48c <USBD_FS_ProductStrDescriptor+0x34>)
 800d47a:	4805      	ldr	r0, [pc, #20]	; (800d490 <USBD_FS_ProductStrDescriptor+0x38>)
 800d47c:	f7fc fbd8 	bl	8009c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d480:	4b02      	ldr	r3, [pc, #8]	; (800d48c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	20002660 	.word	0x20002660
 800d490:	0800eddc 	.word	0x0800eddc

0800d494 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	4603      	mov	r3, r0
 800d49c:	6039      	str	r1, [r7, #0]
 800d49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	4904      	ldr	r1, [pc, #16]	; (800d4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d4a4:	4804      	ldr	r0, [pc, #16]	; (800d4b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d4a6:	f7fc fbc3 	bl	8009c30 <USBD_GetString>
  return USBD_StrDesc;
 800d4aa:	4b02      	ldr	r3, [pc, #8]	; (800d4b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	20002660 	.word	0x20002660
 800d4b8:	0800ede8 	.word	0x0800ede8

0800d4bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	6039      	str	r1, [r7, #0]
 800d4c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	221a      	movs	r2, #26
 800d4cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d4ce:	f000 f843 	bl	800d558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d4d2:	4b02      	ldr	r3, [pc, #8]	; (800d4dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	20000318 	.word	0x20000318

0800d4e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	6039      	str	r1, [r7, #0]
 800d4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4ec:	79fb      	ldrb	r3, [r7, #7]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d105      	bne.n	800d4fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	4907      	ldr	r1, [pc, #28]	; (800d514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4f6:	4808      	ldr	r0, [pc, #32]	; (800d518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4f8:	f7fc fb9a 	bl	8009c30 <USBD_GetString>
 800d4fc:	e004      	b.n	800d508 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	4904      	ldr	r1, [pc, #16]	; (800d514 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d502:	4805      	ldr	r0, [pc, #20]	; (800d518 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d504:	f7fc fb94 	bl	8009c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d508:	4b02      	ldr	r3, [pc, #8]	; (800d514 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	20002660 	.word	0x20002660
 800d518:	0800edf8 	.word	0x0800edf8

0800d51c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	4603      	mov	r3, r0
 800d524:	6039      	str	r1, [r7, #0]
 800d526:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d528:	79fb      	ldrb	r3, [r7, #7]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d105      	bne.n	800d53a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	4907      	ldr	r1, [pc, #28]	; (800d550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d532:	4808      	ldr	r0, [pc, #32]	; (800d554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d534:	f7fc fb7c 	bl	8009c30 <USBD_GetString>
 800d538:	e004      	b.n	800d544 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	4904      	ldr	r1, [pc, #16]	; (800d550 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d53e:	4805      	ldr	r0, [pc, #20]	; (800d554 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d540:	f7fc fb76 	bl	8009c30 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d544:	4b02      	ldr	r3, [pc, #8]	; (800d550 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d546:	4618      	mov	r0, r3
 800d548:	3708      	adds	r7, #8
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop
 800d550:	20002660 	.word	0x20002660
 800d554:	0800ee08 	.word	0x0800ee08

0800d558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <Get_SerialNum+0x44>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d564:	4b0e      	ldr	r3, [pc, #56]	; (800d5a0 <Get_SerialNum+0x48>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d56a:	4b0e      	ldr	r3, [pc, #56]	; (800d5a4 <Get_SerialNum+0x4c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4413      	add	r3, r2
 800d576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d009      	beq.n	800d592 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d57e:	2208      	movs	r2, #8
 800d580:	4909      	ldr	r1, [pc, #36]	; (800d5a8 <Get_SerialNum+0x50>)
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	f000 f814 	bl	800d5b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d588:	2204      	movs	r2, #4
 800d58a:	4908      	ldr	r1, [pc, #32]	; (800d5ac <Get_SerialNum+0x54>)
 800d58c:	68b8      	ldr	r0, [r7, #8]
 800d58e:	f000 f80f 	bl	800d5b0 <IntToUnicode>
  }
}
 800d592:	bf00      	nop
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	1ffff7e8 	.word	0x1ffff7e8
 800d5a0:	1ffff7ec 	.word	0x1ffff7ec
 800d5a4:	1ffff7f0 	.word	0x1ffff7f0
 800d5a8:	2000031a 	.word	0x2000031a
 800d5ac:	2000032a 	.word	0x2000032a

0800d5b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b087      	sub	sp, #28
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	75fb      	strb	r3, [r7, #23]
 800d5c6:	e027      	b.n	800d618 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	0f1b      	lsrs	r3, r3, #28
 800d5cc:	2b09      	cmp	r3, #9
 800d5ce:	d80b      	bhi.n	800d5e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	0f1b      	lsrs	r3, r3, #28
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
 800d5d8:	005b      	lsls	r3, r3, #1
 800d5da:	4619      	mov	r1, r3
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	440b      	add	r3, r1
 800d5e0:	3230      	adds	r2, #48	; 0x30
 800d5e2:	b2d2      	uxtb	r2, r2
 800d5e4:	701a      	strb	r2, [r3, #0]
 800d5e6:	e00a      	b.n	800d5fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	0f1b      	lsrs	r3, r3, #28
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
 800d5f0:	005b      	lsls	r3, r3, #1
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	440b      	add	r3, r1
 800d5f8:	3237      	adds	r2, #55	; 0x37
 800d5fa:	b2d2      	uxtb	r2, r2
 800d5fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	011b      	lsls	r3, r3, #4
 800d602:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d604:	7dfb      	ldrb	r3, [r7, #23]
 800d606:	005b      	lsls	r3, r3, #1
 800d608:	3301      	adds	r3, #1
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	4413      	add	r3, r2
 800d60e:	2200      	movs	r2, #0
 800d610:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	3301      	adds	r3, #1
 800d616:	75fb      	strb	r3, [r7, #23]
 800d618:	7dfa      	ldrb	r2, [r7, #23]
 800d61a:	79fb      	ldrb	r3, [r7, #7]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d3d3      	bcc.n	800d5c8 <IntToUnicode+0x18>
  }
}
 800d620:	bf00      	nop
 800d622:	bf00      	nop
 800d624:	371c      	adds	r7, #28
 800d626:	46bd      	mov	sp, r7
 800d628:	bc80      	pop	{r7}
 800d62a:	4770      	bx	lr

0800d62c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a0d      	ldr	r2, [pc, #52]	; (800d670 <HAL_PCD_MspInit+0x44>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d113      	bne.n	800d666 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d63e:	4b0d      	ldr	r3, [pc, #52]	; (800d674 <HAL_PCD_MspInit+0x48>)
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	4a0c      	ldr	r2, [pc, #48]	; (800d674 <HAL_PCD_MspInit+0x48>)
 800d644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d648:	61d3      	str	r3, [r2, #28]
 800d64a:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <HAL_PCD_MspInit+0x48>)
 800d64c:	69db      	ldr	r3, [r3, #28]
 800d64e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800d656:	2200      	movs	r2, #0
 800d658:	2105      	movs	r1, #5
 800d65a:	2014      	movs	r0, #20
 800d65c:	f7f3 fc5b 	bl	8000f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800d660:	2014      	movs	r0, #20
 800d662:	f7f3 fc74 	bl	8000f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d666:	bf00      	nop
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	40005c00 	.word	0x40005c00
 800d674:	40021000 	.word	0x40021000

0800d678 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d68c:	4619      	mov	r1, r3
 800d68e:	4610      	mov	r0, r2
 800d690:	f7fb fb9e 	bl	8008dd0 <USBD_LL_SetupStage>
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d6ae:	78fa      	ldrb	r2, [r7, #3]
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	4413      	add	r3, r2
 800d6b8:	00db      	lsls	r3, r3, #3
 800d6ba:	440b      	add	r3, r1
 800d6bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	78fb      	ldrb	r3, [r7, #3]
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	f7fb fbd0 	bl	8008e6a <USBD_LL_DataOutStage>
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	460b      	mov	r3, r1
 800d6dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d6e4:	78fa      	ldrb	r2, [r7, #3]
 800d6e6:	6879      	ldr	r1, [r7, #4]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	00db      	lsls	r3, r3, #3
 800d6f0:	440b      	add	r3, r1
 800d6f2:	333c      	adds	r3, #60	; 0x3c
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	78fb      	ldrb	r3, [r7, #3]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f7fb fc27 	bl	8008f4c <USBD_LL_DataInStage>
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b082      	sub	sp, #8
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d714:	4618      	mov	r0, r3
 800d716:	f7fb fd37 	bl	8009188 <USBD_LL_SOF>
}
 800d71a:	bf00      	nop
 800d71c:	3708      	adds	r7, #8
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d72a:	2301      	movs	r3, #1
 800d72c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	2b02      	cmp	r3, #2
 800d734:	d001      	beq.n	800d73a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d736:	f7f2 ffc1 	bl	80006bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d740:	7bfa      	ldrb	r2, [r7, #15]
 800d742:	4611      	mov	r1, r2
 800d744:	4618      	mov	r0, r3
 800d746:	f7fb fce7 	bl	8009118 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d750:	4618      	mov	r0, r3
 800d752:	f7fb fca0 	bl	8009096 <USBD_LL_Reset>
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
	...

0800d760 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fb fce1 	bl	8009136 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d005      	beq.n	800d788 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d77c:	4b04      	ldr	r3, [pc, #16]	; (800d790 <HAL_PCD_SuspendCallback+0x30>)
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	4a03      	ldr	r2, [pc, #12]	; (800d790 <HAL_PCD_SuspendCallback+0x30>)
 800d782:	f043 0306 	orr.w	r3, r3, #6
 800d786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	e000ed00 	.word	0xe000ed00

0800d794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fb fcdb 	bl	800915e <USBD_LL_Resume>
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d7b8:	4a1b      	ldr	r2, [pc, #108]	; (800d828 <USBD_LL_Init+0x78>)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4a19      	ldr	r2, [pc, #100]	; (800d828 <USBD_LL_Init+0x78>)
 800d7c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d7c8:	4b17      	ldr	r3, [pc, #92]	; (800d828 <USBD_LL_Init+0x78>)
 800d7ca:	4a18      	ldr	r2, [pc, #96]	; (800d82c <USBD_LL_Init+0x7c>)
 800d7cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d7ce:	4b16      	ldr	r3, [pc, #88]	; (800d828 <USBD_LL_Init+0x78>)
 800d7d0:	2208      	movs	r2, #8
 800d7d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d7d4:	4b14      	ldr	r3, [pc, #80]	; (800d828 <USBD_LL_Init+0x78>)
 800d7d6:	2202      	movs	r2, #2
 800d7d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d7da:	4b13      	ldr	r3, [pc, #76]	; (800d828 <USBD_LL_Init+0x78>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d7e0:	4b11      	ldr	r3, [pc, #68]	; (800d828 <USBD_LL_Init+0x78>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d7e6:	4b10      	ldr	r3, [pc, #64]	; (800d828 <USBD_LL_Init+0x78>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d7ec:	480e      	ldr	r0, [pc, #56]	; (800d828 <USBD_LL_Init+0x78>)
 800d7ee:	f7f3 ffdf 	bl	80017b0 <HAL_PCD_Init>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d7f8:	f7f2 ff60 	bl	80006bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d802:	2318      	movs	r3, #24
 800d804:	2200      	movs	r2, #0
 800d806:	2100      	movs	r1, #0
 800d808:	f7f5 fc3c 	bl	8003084 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d812:	2358      	movs	r3, #88	; 0x58
 800d814:	2200      	movs	r2, #0
 800d816:	2180      	movs	r1, #128	; 0x80
 800d818:	f7f5 fc34 	bl	8003084 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	20002860 	.word	0x20002860
 800d82c:	40005c00 	.word	0x40005c00

0800d830 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d846:	4618      	mov	r0, r3
 800d848:	f7f4 f8bd 	bl	80019c6 <HAL_PCD_Start>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d850:	7bfb      	ldrb	r3, [r7, #15]
 800d852:	4618      	mov	r0, r3
 800d854:	f000 f93c 	bl	800dad0 <USBD_Get_USB_Status>
 800d858:	4603      	mov	r3, r0
 800d85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d866:	b580      	push	{r7, lr}
 800d868:	b084      	sub	sp, #16
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	4608      	mov	r0, r1
 800d870:	4611      	mov	r1, r2
 800d872:	461a      	mov	r2, r3
 800d874:	4603      	mov	r3, r0
 800d876:	70fb      	strb	r3, [r7, #3]
 800d878:	460b      	mov	r3, r1
 800d87a:	70bb      	strb	r3, [r7, #2]
 800d87c:	4613      	mov	r3, r2
 800d87e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d88e:	78bb      	ldrb	r3, [r7, #2]
 800d890:	883a      	ldrh	r2, [r7, #0]
 800d892:	78f9      	ldrb	r1, [r7, #3]
 800d894:	f7f4 fa35 	bl	8001d02 <HAL_PCD_EP_Open>
 800d898:	4603      	mov	r3, r0
 800d89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f000 f916 	bl	800dad0 <USBD_Get_USB_Status>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8cc:	78fa      	ldrb	r2, [r7, #3]
 800d8ce:	4611      	mov	r1, r2
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7f4 fa7c 	bl	8001dce <HAL_PCD_EP_Close>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 f8f7 	bl	800dad0 <USBD_Get_USB_Status>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d90a:	78fa      	ldrb	r2, [r7, #3]
 800d90c:	4611      	mov	r1, r2
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f4 fb25 	bl	8001f5e <HAL_PCD_EP_SetStall>
 800d914:	4603      	mov	r3, r0
 800d916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d918:	7bfb      	ldrb	r3, [r7, #15]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f000 f8d8 	bl	800dad0 <USBD_Get_USB_Status>
 800d920:	4603      	mov	r3, r0
 800d922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d924:	7bbb      	ldrb	r3, [r7, #14]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b084      	sub	sp, #16
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	460b      	mov	r3, r1
 800d938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d948:	78fa      	ldrb	r2, [r7, #3]
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7f4 fb66 	bl	800201e <HAL_PCD_EP_ClrStall>
 800d952:	4603      	mov	r3, r0
 800d954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d956:	7bfb      	ldrb	r3, [r7, #15]
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 f8b9 	bl	800dad0 <USBD_Get_USB_Status>
 800d95e:	4603      	mov	r3, r0
 800d960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d962:	7bbb      	ldrb	r3, [r7, #14]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d97e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d984:	2b00      	cmp	r3, #0
 800d986:	da0c      	bge.n	800d9a2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d98e:	68f9      	ldr	r1, [r7, #12]
 800d990:	1c5a      	adds	r2, r3, #1
 800d992:	4613      	mov	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	00db      	lsls	r3, r3, #3
 800d99a:	440b      	add	r3, r1
 800d99c:	3302      	adds	r3, #2
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	e00b      	b.n	800d9ba <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9a2:	78fb      	ldrb	r3, [r7, #3]
 800d9a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9a8:	68f9      	ldr	r1, [r7, #12]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	00db      	lsls	r3, r3, #3
 800d9b2:	440b      	add	r3, r1
 800d9b4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d9b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bc80      	pop	{r7}
 800d9c2:	4770      	bx	lr

0800d9c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9de:	78fa      	ldrb	r2, [r7, #3]
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7f4 f968 	bl	8001cb8 <HAL_PCD_SetAddress>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 f86e 	bl	800dad0 <USBD_Get_USB_Status>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b086      	sub	sp, #24
 800da06:	af00      	add	r7, sp, #0
 800da08:	60f8      	str	r0, [r7, #12]
 800da0a:	607a      	str	r2, [r7, #4]
 800da0c:	461a      	mov	r2, r3
 800da0e:	460b      	mov	r3, r1
 800da10:	72fb      	strb	r3, [r7, #11]
 800da12:	4613      	mov	r3, r2
 800da14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da16:	2300      	movs	r3, #0
 800da18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da1a:	2300      	movs	r3, #0
 800da1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da24:	893b      	ldrh	r3, [r7, #8]
 800da26:	7af9      	ldrb	r1, [r7, #11]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	f7f4 fa55 	bl	8001ed8 <HAL_PCD_EP_Transmit>
 800da2e:	4603      	mov	r3, r0
 800da30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	4618      	mov	r0, r3
 800da36:	f000 f84b 	bl	800dad0 <USBD_Get_USB_Status>
 800da3a:	4603      	mov	r3, r0
 800da3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	607a      	str	r2, [r7, #4]
 800da52:	461a      	mov	r2, r3
 800da54:	460b      	mov	r3, r1
 800da56:	72fb      	strb	r3, [r7, #11]
 800da58:	4613      	mov	r3, r2
 800da5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800da6a:	893b      	ldrh	r3, [r7, #8]
 800da6c:	7af9      	ldrb	r1, [r7, #11]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	f7f4 f9f5 	bl	8001e5e <HAL_PCD_EP_Receive>
 800da74:	4603      	mov	r3, r0
 800da76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da78:	7dfb      	ldrb	r3, [r7, #23]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f000 f828 	bl	800dad0 <USBD_Get_USB_Status>
 800da80:	4603      	mov	r3, r0
 800da82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da84:	7dbb      	ldrb	r3, [r7, #22]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
	...

0800da90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da90:	b480      	push	{r7}
 800da92:	b083      	sub	sp, #12
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  static uint8_t mem[512];
  /* USER CODE END 4 */
  return mem;
 800da98:	4b02      	ldr	r3, [pc, #8]	; (800daa4 <USBD_static_malloc+0x14>)
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bc80      	pop	{r7}
 800daa2:	4770      	bx	lr
 800daa4:	20002b4c 	.word	0x20002b4c

0800daa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]

}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bc80      	pop	{r7}
 800dab8:	4770      	bx	lr

0800daba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daba:	b480      	push	{r7}
 800dabc:	b083      	sub	sp, #12
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	460b      	mov	r3, r1
 800dac4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800dac6:	bf00      	nop
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	bc80      	pop	{r7}
 800dace:	4770      	bx	lr

0800dad0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b085      	sub	sp, #20
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	4603      	mov	r3, r0
 800dad8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dade:	79fb      	ldrb	r3, [r7, #7]
 800dae0:	2b03      	cmp	r3, #3
 800dae2:	d817      	bhi.n	800db14 <USBD_Get_USB_Status+0x44>
 800dae4:	a201      	add	r2, pc, #4	; (adr r2, 800daec <USBD_Get_USB_Status+0x1c>)
 800dae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daea:	bf00      	nop
 800daec:	0800dafd 	.word	0x0800dafd
 800daf0:	0800db03 	.word	0x0800db03
 800daf4:	0800db09 	.word	0x0800db09
 800daf8:	0800db0f 	.word	0x0800db0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	73fb      	strb	r3, [r7, #15]
    break;
 800db00:	e00b      	b.n	800db1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db02:	2302      	movs	r3, #2
 800db04:	73fb      	strb	r3, [r7, #15]
    break;
 800db06:	e008      	b.n	800db1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db08:	2301      	movs	r3, #1
 800db0a:	73fb      	strb	r3, [r7, #15]
    break;
 800db0c:	e005      	b.n	800db1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db0e:	2302      	movs	r3, #2
 800db10:	73fb      	strb	r3, [r7, #15]
    break;
 800db12:	e002      	b.n	800db1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db14:	2302      	movs	r3, #2
 800db16:	73fb      	strb	r3, [r7, #15]
    break;
 800db18:	bf00      	nop
  }
  return usb_status;
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	bc80      	pop	{r7}
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop

0800db28 <__errno>:
 800db28:	4b01      	ldr	r3, [pc, #4]	; (800db30 <__errno+0x8>)
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	20000334 	.word	0x20000334

0800db34 <std>:
 800db34:	2300      	movs	r3, #0
 800db36:	b510      	push	{r4, lr}
 800db38:	4604      	mov	r4, r0
 800db3a:	e9c0 3300 	strd	r3, r3, [r0]
 800db3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db42:	6083      	str	r3, [r0, #8]
 800db44:	8181      	strh	r1, [r0, #12]
 800db46:	6643      	str	r3, [r0, #100]	; 0x64
 800db48:	81c2      	strh	r2, [r0, #14]
 800db4a:	6183      	str	r3, [r0, #24]
 800db4c:	4619      	mov	r1, r3
 800db4e:	2208      	movs	r2, #8
 800db50:	305c      	adds	r0, #92	; 0x5c
 800db52:	f000 f91a 	bl	800dd8a <memset>
 800db56:	4b05      	ldr	r3, [pc, #20]	; (800db6c <std+0x38>)
 800db58:	6224      	str	r4, [r4, #32]
 800db5a:	6263      	str	r3, [r4, #36]	; 0x24
 800db5c:	4b04      	ldr	r3, [pc, #16]	; (800db70 <std+0x3c>)
 800db5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800db60:	4b04      	ldr	r3, [pc, #16]	; (800db74 <std+0x40>)
 800db62:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db64:	4b04      	ldr	r3, [pc, #16]	; (800db78 <std+0x44>)
 800db66:	6323      	str	r3, [r4, #48]	; 0x30
 800db68:	bd10      	pop	{r4, pc}
 800db6a:	bf00      	nop
 800db6c:	0800dfe9 	.word	0x0800dfe9
 800db70:	0800e00b 	.word	0x0800e00b
 800db74:	0800e043 	.word	0x0800e043
 800db78:	0800e067 	.word	0x0800e067

0800db7c <_cleanup_r>:
 800db7c:	4901      	ldr	r1, [pc, #4]	; (800db84 <_cleanup_r+0x8>)
 800db7e:	f000 b8af 	b.w	800dce0 <_fwalk_reent>
 800db82:	bf00      	nop
 800db84:	0800e1b9 	.word	0x0800e1b9

0800db88 <__sfmoreglue>:
 800db88:	2268      	movs	r2, #104	; 0x68
 800db8a:	b570      	push	{r4, r5, r6, lr}
 800db8c:	1e4d      	subs	r5, r1, #1
 800db8e:	4355      	muls	r5, r2
 800db90:	460e      	mov	r6, r1
 800db92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db96:	f000 f921 	bl	800dddc <_malloc_r>
 800db9a:	4604      	mov	r4, r0
 800db9c:	b140      	cbz	r0, 800dbb0 <__sfmoreglue+0x28>
 800db9e:	2100      	movs	r1, #0
 800dba0:	e9c0 1600 	strd	r1, r6, [r0]
 800dba4:	300c      	adds	r0, #12
 800dba6:	60a0      	str	r0, [r4, #8]
 800dba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dbac:	f000 f8ed 	bl	800dd8a <memset>
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}

0800dbb4 <__sfp_lock_acquire>:
 800dbb4:	4801      	ldr	r0, [pc, #4]	; (800dbbc <__sfp_lock_acquire+0x8>)
 800dbb6:	f000 b8d8 	b.w	800dd6a <__retarget_lock_acquire_recursive>
 800dbba:	bf00      	nop
 800dbbc:	20002d4d 	.word	0x20002d4d

0800dbc0 <__sfp_lock_release>:
 800dbc0:	4801      	ldr	r0, [pc, #4]	; (800dbc8 <__sfp_lock_release+0x8>)
 800dbc2:	f000 b8d3 	b.w	800dd6c <__retarget_lock_release_recursive>
 800dbc6:	bf00      	nop
 800dbc8:	20002d4d 	.word	0x20002d4d

0800dbcc <__sinit_lock_acquire>:
 800dbcc:	4801      	ldr	r0, [pc, #4]	; (800dbd4 <__sinit_lock_acquire+0x8>)
 800dbce:	f000 b8cc 	b.w	800dd6a <__retarget_lock_acquire_recursive>
 800dbd2:	bf00      	nop
 800dbd4:	20002d4e 	.word	0x20002d4e

0800dbd8 <__sinit_lock_release>:
 800dbd8:	4801      	ldr	r0, [pc, #4]	; (800dbe0 <__sinit_lock_release+0x8>)
 800dbda:	f000 b8c7 	b.w	800dd6c <__retarget_lock_release_recursive>
 800dbde:	bf00      	nop
 800dbe0:	20002d4e 	.word	0x20002d4e

0800dbe4 <__sinit>:
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	f7ff fff0 	bl	800dbcc <__sinit_lock_acquire>
 800dbec:	69a3      	ldr	r3, [r4, #24]
 800dbee:	b11b      	cbz	r3, 800dbf8 <__sinit+0x14>
 800dbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbf4:	f7ff bff0 	b.w	800dbd8 <__sinit_lock_release>
 800dbf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dbfc:	6523      	str	r3, [r4, #80]	; 0x50
 800dbfe:	4b13      	ldr	r3, [pc, #76]	; (800dc4c <__sinit+0x68>)
 800dc00:	4a13      	ldr	r2, [pc, #76]	; (800dc50 <__sinit+0x6c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc06:	42a3      	cmp	r3, r4
 800dc08:	bf08      	it	eq
 800dc0a:	2301      	moveq	r3, #1
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	bf08      	it	eq
 800dc10:	61a3      	streq	r3, [r4, #24]
 800dc12:	f000 f81f 	bl	800dc54 <__sfp>
 800dc16:	6060      	str	r0, [r4, #4]
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f000 f81b 	bl	800dc54 <__sfp>
 800dc1e:	60a0      	str	r0, [r4, #8]
 800dc20:	4620      	mov	r0, r4
 800dc22:	f000 f817 	bl	800dc54 <__sfp>
 800dc26:	2200      	movs	r2, #0
 800dc28:	2104      	movs	r1, #4
 800dc2a:	60e0      	str	r0, [r4, #12]
 800dc2c:	6860      	ldr	r0, [r4, #4]
 800dc2e:	f7ff ff81 	bl	800db34 <std>
 800dc32:	2201      	movs	r2, #1
 800dc34:	2109      	movs	r1, #9
 800dc36:	68a0      	ldr	r0, [r4, #8]
 800dc38:	f7ff ff7c 	bl	800db34 <std>
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	2112      	movs	r1, #18
 800dc40:	68e0      	ldr	r0, [r4, #12]
 800dc42:	f7ff ff77 	bl	800db34 <std>
 800dc46:	2301      	movs	r3, #1
 800dc48:	61a3      	str	r3, [r4, #24]
 800dc4a:	e7d1      	b.n	800dbf0 <__sinit+0xc>
 800dc4c:	0800eeb4 	.word	0x0800eeb4
 800dc50:	0800db7d 	.word	0x0800db7d

0800dc54 <__sfp>:
 800dc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc56:	4607      	mov	r7, r0
 800dc58:	f7ff ffac 	bl	800dbb4 <__sfp_lock_acquire>
 800dc5c:	4b1e      	ldr	r3, [pc, #120]	; (800dcd8 <__sfp+0x84>)
 800dc5e:	681e      	ldr	r6, [r3, #0]
 800dc60:	69b3      	ldr	r3, [r6, #24]
 800dc62:	b913      	cbnz	r3, 800dc6a <__sfp+0x16>
 800dc64:	4630      	mov	r0, r6
 800dc66:	f7ff ffbd 	bl	800dbe4 <__sinit>
 800dc6a:	3648      	adds	r6, #72	; 0x48
 800dc6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc70:	3b01      	subs	r3, #1
 800dc72:	d503      	bpl.n	800dc7c <__sfp+0x28>
 800dc74:	6833      	ldr	r3, [r6, #0]
 800dc76:	b30b      	cbz	r3, 800dcbc <__sfp+0x68>
 800dc78:	6836      	ldr	r6, [r6, #0]
 800dc7a:	e7f7      	b.n	800dc6c <__sfp+0x18>
 800dc7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc80:	b9d5      	cbnz	r5, 800dcb8 <__sfp+0x64>
 800dc82:	4b16      	ldr	r3, [pc, #88]	; (800dcdc <__sfp+0x88>)
 800dc84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc88:	60e3      	str	r3, [r4, #12]
 800dc8a:	6665      	str	r5, [r4, #100]	; 0x64
 800dc8c:	f000 f86c 	bl	800dd68 <__retarget_lock_init_recursive>
 800dc90:	f7ff ff96 	bl	800dbc0 <__sfp_lock_release>
 800dc94:	2208      	movs	r2, #8
 800dc96:	4629      	mov	r1, r5
 800dc98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dca0:	6025      	str	r5, [r4, #0]
 800dca2:	61a5      	str	r5, [r4, #24]
 800dca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dca8:	f000 f86f 	bl	800dd8a <memset>
 800dcac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dcb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcb8:	3468      	adds	r4, #104	; 0x68
 800dcba:	e7d9      	b.n	800dc70 <__sfp+0x1c>
 800dcbc:	2104      	movs	r1, #4
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	f7ff ff62 	bl	800db88 <__sfmoreglue>
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	6030      	str	r0, [r6, #0]
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d1d5      	bne.n	800dc78 <__sfp+0x24>
 800dccc:	f7ff ff78 	bl	800dbc0 <__sfp_lock_release>
 800dcd0:	230c      	movs	r3, #12
 800dcd2:	603b      	str	r3, [r7, #0]
 800dcd4:	e7ee      	b.n	800dcb4 <__sfp+0x60>
 800dcd6:	bf00      	nop
 800dcd8:	0800eeb4 	.word	0x0800eeb4
 800dcdc:	ffff0001 	.word	0xffff0001

0800dce0 <_fwalk_reent>:
 800dce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dce4:	4606      	mov	r6, r0
 800dce6:	4688      	mov	r8, r1
 800dce8:	2700      	movs	r7, #0
 800dcea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dcee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dcf2:	f1b9 0901 	subs.w	r9, r9, #1
 800dcf6:	d505      	bpl.n	800dd04 <_fwalk_reent+0x24>
 800dcf8:	6824      	ldr	r4, [r4, #0]
 800dcfa:	2c00      	cmp	r4, #0
 800dcfc:	d1f7      	bne.n	800dcee <_fwalk_reent+0xe>
 800dcfe:	4638      	mov	r0, r7
 800dd00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd04:	89ab      	ldrh	r3, [r5, #12]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d907      	bls.n	800dd1a <_fwalk_reent+0x3a>
 800dd0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	d003      	beq.n	800dd1a <_fwalk_reent+0x3a>
 800dd12:	4629      	mov	r1, r5
 800dd14:	4630      	mov	r0, r6
 800dd16:	47c0      	blx	r8
 800dd18:	4307      	orrs	r7, r0
 800dd1a:	3568      	adds	r5, #104	; 0x68
 800dd1c:	e7e9      	b.n	800dcf2 <_fwalk_reent+0x12>
	...

0800dd20 <__libc_init_array>:
 800dd20:	b570      	push	{r4, r5, r6, lr}
 800dd22:	2600      	movs	r6, #0
 800dd24:	4d0c      	ldr	r5, [pc, #48]	; (800dd58 <__libc_init_array+0x38>)
 800dd26:	4c0d      	ldr	r4, [pc, #52]	; (800dd5c <__libc_init_array+0x3c>)
 800dd28:	1b64      	subs	r4, r4, r5
 800dd2a:	10a4      	asrs	r4, r4, #2
 800dd2c:	42a6      	cmp	r6, r4
 800dd2e:	d109      	bne.n	800dd44 <__libc_init_array+0x24>
 800dd30:	f000 ff3a 	bl	800eba8 <_init>
 800dd34:	2600      	movs	r6, #0
 800dd36:	4d0a      	ldr	r5, [pc, #40]	; (800dd60 <__libc_init_array+0x40>)
 800dd38:	4c0a      	ldr	r4, [pc, #40]	; (800dd64 <__libc_init_array+0x44>)
 800dd3a:	1b64      	subs	r4, r4, r5
 800dd3c:	10a4      	asrs	r4, r4, #2
 800dd3e:	42a6      	cmp	r6, r4
 800dd40:	d105      	bne.n	800dd4e <__libc_init_array+0x2e>
 800dd42:	bd70      	pop	{r4, r5, r6, pc}
 800dd44:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd48:	4798      	blx	r3
 800dd4a:	3601      	adds	r6, #1
 800dd4c:	e7ee      	b.n	800dd2c <__libc_init_array+0xc>
 800dd4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd52:	4798      	blx	r3
 800dd54:	3601      	adds	r6, #1
 800dd56:	e7f2      	b.n	800dd3e <__libc_init_array+0x1e>
 800dd58:	0800eeec 	.word	0x0800eeec
 800dd5c:	0800eeec 	.word	0x0800eeec
 800dd60:	0800eeec 	.word	0x0800eeec
 800dd64:	0800eef0 	.word	0x0800eef0

0800dd68 <__retarget_lock_init_recursive>:
 800dd68:	4770      	bx	lr

0800dd6a <__retarget_lock_acquire_recursive>:
 800dd6a:	4770      	bx	lr

0800dd6c <__retarget_lock_release_recursive>:
 800dd6c:	4770      	bx	lr

0800dd6e <memcpy>:
 800dd6e:	440a      	add	r2, r1
 800dd70:	4291      	cmp	r1, r2
 800dd72:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd76:	d100      	bne.n	800dd7a <memcpy+0xc>
 800dd78:	4770      	bx	lr
 800dd7a:	b510      	push	{r4, lr}
 800dd7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd80:	4291      	cmp	r1, r2
 800dd82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd86:	d1f9      	bne.n	800dd7c <memcpy+0xe>
 800dd88:	bd10      	pop	{r4, pc}

0800dd8a <memset>:
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	4402      	add	r2, r0
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d100      	bne.n	800dd94 <memset+0xa>
 800dd92:	4770      	bx	lr
 800dd94:	f803 1b01 	strb.w	r1, [r3], #1
 800dd98:	e7f9      	b.n	800dd8e <memset+0x4>
	...

0800dd9c <sbrk_aligned>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	4e0e      	ldr	r6, [pc, #56]	; (800ddd8 <sbrk_aligned+0x3c>)
 800dda0:	460c      	mov	r4, r1
 800dda2:	6831      	ldr	r1, [r6, #0]
 800dda4:	4605      	mov	r5, r0
 800dda6:	b911      	cbnz	r1, 800ddae <sbrk_aligned+0x12>
 800dda8:	f000 f90e 	bl	800dfc8 <_sbrk_r>
 800ddac:	6030      	str	r0, [r6, #0]
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f000 f909 	bl	800dfc8 <_sbrk_r>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d00a      	beq.n	800ddd0 <sbrk_aligned+0x34>
 800ddba:	1cc4      	adds	r4, r0, #3
 800ddbc:	f024 0403 	bic.w	r4, r4, #3
 800ddc0:	42a0      	cmp	r0, r4
 800ddc2:	d007      	beq.n	800ddd4 <sbrk_aligned+0x38>
 800ddc4:	1a21      	subs	r1, r4, r0
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f000 f8fe 	bl	800dfc8 <_sbrk_r>
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d101      	bne.n	800ddd4 <sbrk_aligned+0x38>
 800ddd0:	f04f 34ff 	mov.w	r4, #4294967295
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	20002d54 	.word	0x20002d54

0800dddc <_malloc_r>:
 800dddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde0:	1ccd      	adds	r5, r1, #3
 800dde2:	f025 0503 	bic.w	r5, r5, #3
 800dde6:	3508      	adds	r5, #8
 800dde8:	2d0c      	cmp	r5, #12
 800ddea:	bf38      	it	cc
 800ddec:	250c      	movcc	r5, #12
 800ddee:	2d00      	cmp	r5, #0
 800ddf0:	4607      	mov	r7, r0
 800ddf2:	db01      	blt.n	800ddf8 <_malloc_r+0x1c>
 800ddf4:	42a9      	cmp	r1, r5
 800ddf6:	d905      	bls.n	800de04 <_malloc_r+0x28>
 800ddf8:	230c      	movs	r3, #12
 800ddfa:	2600      	movs	r6, #0
 800ddfc:	603b      	str	r3, [r7, #0]
 800ddfe:	4630      	mov	r0, r6
 800de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de04:	4e2e      	ldr	r6, [pc, #184]	; (800dec0 <_malloc_r+0xe4>)
 800de06:	f000 fa25 	bl	800e254 <__malloc_lock>
 800de0a:	6833      	ldr	r3, [r6, #0]
 800de0c:	461c      	mov	r4, r3
 800de0e:	bb34      	cbnz	r4, 800de5e <_malloc_r+0x82>
 800de10:	4629      	mov	r1, r5
 800de12:	4638      	mov	r0, r7
 800de14:	f7ff ffc2 	bl	800dd9c <sbrk_aligned>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	4604      	mov	r4, r0
 800de1c:	d14d      	bne.n	800deba <_malloc_r+0xde>
 800de1e:	6834      	ldr	r4, [r6, #0]
 800de20:	4626      	mov	r6, r4
 800de22:	2e00      	cmp	r6, #0
 800de24:	d140      	bne.n	800dea8 <_malloc_r+0xcc>
 800de26:	6823      	ldr	r3, [r4, #0]
 800de28:	4631      	mov	r1, r6
 800de2a:	4638      	mov	r0, r7
 800de2c:	eb04 0803 	add.w	r8, r4, r3
 800de30:	f000 f8ca 	bl	800dfc8 <_sbrk_r>
 800de34:	4580      	cmp	r8, r0
 800de36:	d13a      	bne.n	800deae <_malloc_r+0xd2>
 800de38:	6821      	ldr	r1, [r4, #0]
 800de3a:	3503      	adds	r5, #3
 800de3c:	1a6d      	subs	r5, r5, r1
 800de3e:	f025 0503 	bic.w	r5, r5, #3
 800de42:	3508      	adds	r5, #8
 800de44:	2d0c      	cmp	r5, #12
 800de46:	bf38      	it	cc
 800de48:	250c      	movcc	r5, #12
 800de4a:	4638      	mov	r0, r7
 800de4c:	4629      	mov	r1, r5
 800de4e:	f7ff ffa5 	bl	800dd9c <sbrk_aligned>
 800de52:	3001      	adds	r0, #1
 800de54:	d02b      	beq.n	800deae <_malloc_r+0xd2>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	442b      	add	r3, r5
 800de5a:	6023      	str	r3, [r4, #0]
 800de5c:	e00e      	b.n	800de7c <_malloc_r+0xa0>
 800de5e:	6822      	ldr	r2, [r4, #0]
 800de60:	1b52      	subs	r2, r2, r5
 800de62:	d41e      	bmi.n	800dea2 <_malloc_r+0xc6>
 800de64:	2a0b      	cmp	r2, #11
 800de66:	d916      	bls.n	800de96 <_malloc_r+0xba>
 800de68:	1961      	adds	r1, r4, r5
 800de6a:	42a3      	cmp	r3, r4
 800de6c:	6025      	str	r5, [r4, #0]
 800de6e:	bf18      	it	ne
 800de70:	6059      	strne	r1, [r3, #4]
 800de72:	6863      	ldr	r3, [r4, #4]
 800de74:	bf08      	it	eq
 800de76:	6031      	streq	r1, [r6, #0]
 800de78:	5162      	str	r2, [r4, r5]
 800de7a:	604b      	str	r3, [r1, #4]
 800de7c:	4638      	mov	r0, r7
 800de7e:	f104 060b 	add.w	r6, r4, #11
 800de82:	f000 f9ed 	bl	800e260 <__malloc_unlock>
 800de86:	f026 0607 	bic.w	r6, r6, #7
 800de8a:	1d23      	adds	r3, r4, #4
 800de8c:	1af2      	subs	r2, r6, r3
 800de8e:	d0b6      	beq.n	800ddfe <_malloc_r+0x22>
 800de90:	1b9b      	subs	r3, r3, r6
 800de92:	50a3      	str	r3, [r4, r2]
 800de94:	e7b3      	b.n	800ddfe <_malloc_r+0x22>
 800de96:	6862      	ldr	r2, [r4, #4]
 800de98:	42a3      	cmp	r3, r4
 800de9a:	bf0c      	ite	eq
 800de9c:	6032      	streq	r2, [r6, #0]
 800de9e:	605a      	strne	r2, [r3, #4]
 800dea0:	e7ec      	b.n	800de7c <_malloc_r+0xa0>
 800dea2:	4623      	mov	r3, r4
 800dea4:	6864      	ldr	r4, [r4, #4]
 800dea6:	e7b2      	b.n	800de0e <_malloc_r+0x32>
 800dea8:	4634      	mov	r4, r6
 800deaa:	6876      	ldr	r6, [r6, #4]
 800deac:	e7b9      	b.n	800de22 <_malloc_r+0x46>
 800deae:	230c      	movs	r3, #12
 800deb0:	4638      	mov	r0, r7
 800deb2:	603b      	str	r3, [r7, #0]
 800deb4:	f000 f9d4 	bl	800e260 <__malloc_unlock>
 800deb8:	e7a1      	b.n	800ddfe <_malloc_r+0x22>
 800deba:	6025      	str	r5, [r4, #0]
 800debc:	e7de      	b.n	800de7c <_malloc_r+0xa0>
 800debe:	bf00      	nop
 800dec0:	20002d50 	.word	0x20002d50

0800dec4 <iprintf>:
 800dec4:	b40f      	push	{r0, r1, r2, r3}
 800dec6:	4b0a      	ldr	r3, [pc, #40]	; (800def0 <iprintf+0x2c>)
 800dec8:	b513      	push	{r0, r1, r4, lr}
 800deca:	681c      	ldr	r4, [r3, #0]
 800decc:	b124      	cbz	r4, 800ded8 <iprintf+0x14>
 800dece:	69a3      	ldr	r3, [r4, #24]
 800ded0:	b913      	cbnz	r3, 800ded8 <iprintf+0x14>
 800ded2:	4620      	mov	r0, r4
 800ded4:	f7ff fe86 	bl	800dbe4 <__sinit>
 800ded8:	ab05      	add	r3, sp, #20
 800deda:	4620      	mov	r0, r4
 800dedc:	9a04      	ldr	r2, [sp, #16]
 800dede:	68a1      	ldr	r1, [r4, #8]
 800dee0:	9301      	str	r3, [sp, #4]
 800dee2:	f000 fa33 	bl	800e34c <_vfiprintf_r>
 800dee6:	b002      	add	sp, #8
 800dee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deec:	b004      	add	sp, #16
 800deee:	4770      	bx	lr
 800def0:	20000334 	.word	0x20000334

0800def4 <cleanup_glue>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	460c      	mov	r4, r1
 800def8:	6809      	ldr	r1, [r1, #0]
 800defa:	4605      	mov	r5, r0
 800defc:	b109      	cbz	r1, 800df02 <cleanup_glue+0xe>
 800defe:	f7ff fff9 	bl	800def4 <cleanup_glue>
 800df02:	4621      	mov	r1, r4
 800df04:	4628      	mov	r0, r5
 800df06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df0a:	f000 b9af 	b.w	800e26c <_free_r>
	...

0800df10 <_reclaim_reent>:
 800df10:	4b2c      	ldr	r3, [pc, #176]	; (800dfc4 <_reclaim_reent+0xb4>)
 800df12:	b570      	push	{r4, r5, r6, lr}
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4604      	mov	r4, r0
 800df18:	4283      	cmp	r3, r0
 800df1a:	d051      	beq.n	800dfc0 <_reclaim_reent+0xb0>
 800df1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df1e:	b143      	cbz	r3, 800df32 <_reclaim_reent+0x22>
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d14a      	bne.n	800dfbc <_reclaim_reent+0xac>
 800df26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df28:	6819      	ldr	r1, [r3, #0]
 800df2a:	b111      	cbz	r1, 800df32 <_reclaim_reent+0x22>
 800df2c:	4620      	mov	r0, r4
 800df2e:	f000 f99d 	bl	800e26c <_free_r>
 800df32:	6961      	ldr	r1, [r4, #20]
 800df34:	b111      	cbz	r1, 800df3c <_reclaim_reent+0x2c>
 800df36:	4620      	mov	r0, r4
 800df38:	f000 f998 	bl	800e26c <_free_r>
 800df3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df3e:	b111      	cbz	r1, 800df46 <_reclaim_reent+0x36>
 800df40:	4620      	mov	r0, r4
 800df42:	f000 f993 	bl	800e26c <_free_r>
 800df46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800df48:	b111      	cbz	r1, 800df50 <_reclaim_reent+0x40>
 800df4a:	4620      	mov	r0, r4
 800df4c:	f000 f98e 	bl	800e26c <_free_r>
 800df50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800df52:	b111      	cbz	r1, 800df5a <_reclaim_reent+0x4a>
 800df54:	4620      	mov	r0, r4
 800df56:	f000 f989 	bl	800e26c <_free_r>
 800df5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800df5c:	b111      	cbz	r1, 800df64 <_reclaim_reent+0x54>
 800df5e:	4620      	mov	r0, r4
 800df60:	f000 f984 	bl	800e26c <_free_r>
 800df64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800df66:	b111      	cbz	r1, 800df6e <_reclaim_reent+0x5e>
 800df68:	4620      	mov	r0, r4
 800df6a:	f000 f97f 	bl	800e26c <_free_r>
 800df6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800df70:	b111      	cbz	r1, 800df78 <_reclaim_reent+0x68>
 800df72:	4620      	mov	r0, r4
 800df74:	f000 f97a 	bl	800e26c <_free_r>
 800df78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df7a:	b111      	cbz	r1, 800df82 <_reclaim_reent+0x72>
 800df7c:	4620      	mov	r0, r4
 800df7e:	f000 f975 	bl	800e26c <_free_r>
 800df82:	69a3      	ldr	r3, [r4, #24]
 800df84:	b1e3      	cbz	r3, 800dfc0 <_reclaim_reent+0xb0>
 800df86:	4620      	mov	r0, r4
 800df88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800df8a:	4798      	blx	r3
 800df8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800df8e:	b1b9      	cbz	r1, 800dfc0 <_reclaim_reent+0xb0>
 800df90:	4620      	mov	r0, r4
 800df92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df96:	f7ff bfad 	b.w	800def4 <cleanup_glue>
 800df9a:	5949      	ldr	r1, [r1, r5]
 800df9c:	b941      	cbnz	r1, 800dfb0 <_reclaim_reent+0xa0>
 800df9e:	3504      	adds	r5, #4
 800dfa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfa2:	2d80      	cmp	r5, #128	; 0x80
 800dfa4:	68d9      	ldr	r1, [r3, #12]
 800dfa6:	d1f8      	bne.n	800df9a <_reclaim_reent+0x8a>
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f000 f95f 	bl	800e26c <_free_r>
 800dfae:	e7ba      	b.n	800df26 <_reclaim_reent+0x16>
 800dfb0:	680e      	ldr	r6, [r1, #0]
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f000 f95a 	bl	800e26c <_free_r>
 800dfb8:	4631      	mov	r1, r6
 800dfba:	e7ef      	b.n	800df9c <_reclaim_reent+0x8c>
 800dfbc:	2500      	movs	r5, #0
 800dfbe:	e7ef      	b.n	800dfa0 <_reclaim_reent+0x90>
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20000334 	.word	0x20000334

0800dfc8 <_sbrk_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4d05      	ldr	r5, [pc, #20]	; (800dfe4 <_sbrk_r+0x1c>)
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	602b      	str	r3, [r5, #0]
 800dfd4:	f7f2 fe56 	bl	8000c84 <_sbrk>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_sbrk_r+0x1a>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_sbrk_r+0x1a>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20002d58 	.word	0x20002d58

0800dfe8 <__sread>:
 800dfe8:	b510      	push	{r4, lr}
 800dfea:	460c      	mov	r4, r1
 800dfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dff0:	f000 fc72 	bl	800e8d8 <_read_r>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	bfab      	itete	ge
 800dff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dffa:	89a3      	ldrhlt	r3, [r4, #12]
 800dffc:	181b      	addge	r3, r3, r0
 800dffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e002:	bfac      	ite	ge
 800e004:	6563      	strge	r3, [r4, #84]	; 0x54
 800e006:	81a3      	strhlt	r3, [r4, #12]
 800e008:	bd10      	pop	{r4, pc}

0800e00a <__swrite>:
 800e00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e00e:	461f      	mov	r7, r3
 800e010:	898b      	ldrh	r3, [r1, #12]
 800e012:	4605      	mov	r5, r0
 800e014:	05db      	lsls	r3, r3, #23
 800e016:	460c      	mov	r4, r1
 800e018:	4616      	mov	r6, r2
 800e01a:	d505      	bpl.n	800e028 <__swrite+0x1e>
 800e01c:	2302      	movs	r3, #2
 800e01e:	2200      	movs	r2, #0
 800e020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e024:	f000 f904 	bl	800e230 <_lseek_r>
 800e028:	89a3      	ldrh	r3, [r4, #12]
 800e02a:	4632      	mov	r2, r6
 800e02c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e030:	81a3      	strh	r3, [r4, #12]
 800e032:	4628      	mov	r0, r5
 800e034:	463b      	mov	r3, r7
 800e036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e03e:	f000 b817 	b.w	800e070 <_write_r>

0800e042 <__sseek>:
 800e042:	b510      	push	{r4, lr}
 800e044:	460c      	mov	r4, r1
 800e046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e04a:	f000 f8f1 	bl	800e230 <_lseek_r>
 800e04e:	1c43      	adds	r3, r0, #1
 800e050:	89a3      	ldrh	r3, [r4, #12]
 800e052:	bf15      	itete	ne
 800e054:	6560      	strne	r0, [r4, #84]	; 0x54
 800e056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e05e:	81a3      	strheq	r3, [r4, #12]
 800e060:	bf18      	it	ne
 800e062:	81a3      	strhne	r3, [r4, #12]
 800e064:	bd10      	pop	{r4, pc}

0800e066 <__sclose>:
 800e066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e06a:	f000 b813 	b.w	800e094 <_close_r>
	...

0800e070 <_write_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4604      	mov	r4, r0
 800e074:	4608      	mov	r0, r1
 800e076:	4611      	mov	r1, r2
 800e078:	2200      	movs	r2, #0
 800e07a:	4d05      	ldr	r5, [pc, #20]	; (800e090 <_write_r+0x20>)
 800e07c:	602a      	str	r2, [r5, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	f7f2 fdb3 	bl	8000bea <_write>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d102      	bne.n	800e08e <_write_r+0x1e>
 800e088:	682b      	ldr	r3, [r5, #0]
 800e08a:	b103      	cbz	r3, 800e08e <_write_r+0x1e>
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	20002d58 	.word	0x20002d58

0800e094 <_close_r>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	2300      	movs	r3, #0
 800e098:	4d05      	ldr	r5, [pc, #20]	; (800e0b0 <_close_r+0x1c>)
 800e09a:	4604      	mov	r4, r0
 800e09c:	4608      	mov	r0, r1
 800e09e:	602b      	str	r3, [r5, #0]
 800e0a0:	f7f2 fdbf 	bl	8000c22 <_close>
 800e0a4:	1c43      	adds	r3, r0, #1
 800e0a6:	d102      	bne.n	800e0ae <_close_r+0x1a>
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	b103      	cbz	r3, 800e0ae <_close_r+0x1a>
 800e0ac:	6023      	str	r3, [r4, #0]
 800e0ae:	bd38      	pop	{r3, r4, r5, pc}
 800e0b0:	20002d58 	.word	0x20002d58

0800e0b4 <__sflush_r>:
 800e0b4:	898a      	ldrh	r2, [r1, #12]
 800e0b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	0710      	lsls	r0, r2, #28
 800e0bc:	460c      	mov	r4, r1
 800e0be:	d457      	bmi.n	800e170 <__sflush_r+0xbc>
 800e0c0:	684b      	ldr	r3, [r1, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	dc04      	bgt.n	800e0d0 <__sflush_r+0x1c>
 800e0c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	dc01      	bgt.n	800e0d0 <__sflush_r+0x1c>
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	d0fa      	beq.n	800e0cc <__sflush_r+0x18>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0dc:	682f      	ldr	r7, [r5, #0]
 800e0de:	602b      	str	r3, [r5, #0]
 800e0e0:	d032      	beq.n	800e148 <__sflush_r+0x94>
 800e0e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	075a      	lsls	r2, r3, #29
 800e0e8:	d505      	bpl.n	800e0f6 <__sflush_r+0x42>
 800e0ea:	6863      	ldr	r3, [r4, #4]
 800e0ec:	1ac0      	subs	r0, r0, r3
 800e0ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0f0:	b10b      	cbz	r3, 800e0f6 <__sflush_r+0x42>
 800e0f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0f4:	1ac0      	subs	r0, r0, r3
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	6a21      	ldr	r1, [r4, #32]
 800e100:	47b0      	blx	r6
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	d106      	bne.n	800e116 <__sflush_r+0x62>
 800e108:	6829      	ldr	r1, [r5, #0]
 800e10a:	291d      	cmp	r1, #29
 800e10c:	d82c      	bhi.n	800e168 <__sflush_r+0xb4>
 800e10e:	4a29      	ldr	r2, [pc, #164]	; (800e1b4 <__sflush_r+0x100>)
 800e110:	40ca      	lsrs	r2, r1
 800e112:	07d6      	lsls	r6, r2, #31
 800e114:	d528      	bpl.n	800e168 <__sflush_r+0xb4>
 800e116:	2200      	movs	r2, #0
 800e118:	6062      	str	r2, [r4, #4]
 800e11a:	6922      	ldr	r2, [r4, #16]
 800e11c:	04d9      	lsls	r1, r3, #19
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	d504      	bpl.n	800e12c <__sflush_r+0x78>
 800e122:	1c42      	adds	r2, r0, #1
 800e124:	d101      	bne.n	800e12a <__sflush_r+0x76>
 800e126:	682b      	ldr	r3, [r5, #0]
 800e128:	b903      	cbnz	r3, 800e12c <__sflush_r+0x78>
 800e12a:	6560      	str	r0, [r4, #84]	; 0x54
 800e12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e12e:	602f      	str	r7, [r5, #0]
 800e130:	2900      	cmp	r1, #0
 800e132:	d0cb      	beq.n	800e0cc <__sflush_r+0x18>
 800e134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e138:	4299      	cmp	r1, r3
 800e13a:	d002      	beq.n	800e142 <__sflush_r+0x8e>
 800e13c:	4628      	mov	r0, r5
 800e13e:	f000 f895 	bl	800e26c <_free_r>
 800e142:	2000      	movs	r0, #0
 800e144:	6360      	str	r0, [r4, #52]	; 0x34
 800e146:	e7c2      	b.n	800e0ce <__sflush_r+0x1a>
 800e148:	6a21      	ldr	r1, [r4, #32]
 800e14a:	2301      	movs	r3, #1
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b0      	blx	r6
 800e150:	1c41      	adds	r1, r0, #1
 800e152:	d1c7      	bne.n	800e0e4 <__sflush_r+0x30>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0c4      	beq.n	800e0e4 <__sflush_r+0x30>
 800e15a:	2b1d      	cmp	r3, #29
 800e15c:	d001      	beq.n	800e162 <__sflush_r+0xae>
 800e15e:	2b16      	cmp	r3, #22
 800e160:	d101      	bne.n	800e166 <__sflush_r+0xb2>
 800e162:	602f      	str	r7, [r5, #0]
 800e164:	e7b2      	b.n	800e0cc <__sflush_r+0x18>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e16c:	81a3      	strh	r3, [r4, #12]
 800e16e:	e7ae      	b.n	800e0ce <__sflush_r+0x1a>
 800e170:	690f      	ldr	r7, [r1, #16]
 800e172:	2f00      	cmp	r7, #0
 800e174:	d0aa      	beq.n	800e0cc <__sflush_r+0x18>
 800e176:	0793      	lsls	r3, r2, #30
 800e178:	bf18      	it	ne
 800e17a:	2300      	movne	r3, #0
 800e17c:	680e      	ldr	r6, [r1, #0]
 800e17e:	bf08      	it	eq
 800e180:	694b      	ldreq	r3, [r1, #20]
 800e182:	1bf6      	subs	r6, r6, r7
 800e184:	600f      	str	r7, [r1, #0]
 800e186:	608b      	str	r3, [r1, #8]
 800e188:	2e00      	cmp	r6, #0
 800e18a:	dd9f      	ble.n	800e0cc <__sflush_r+0x18>
 800e18c:	4633      	mov	r3, r6
 800e18e:	463a      	mov	r2, r7
 800e190:	4628      	mov	r0, r5
 800e192:	6a21      	ldr	r1, [r4, #32]
 800e194:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e198:	47e0      	blx	ip
 800e19a:	2800      	cmp	r0, #0
 800e19c:	dc06      	bgt.n	800e1ac <__sflush_r+0xf8>
 800e19e:	89a3      	ldrh	r3, [r4, #12]
 800e1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1a8:	81a3      	strh	r3, [r4, #12]
 800e1aa:	e790      	b.n	800e0ce <__sflush_r+0x1a>
 800e1ac:	4407      	add	r7, r0
 800e1ae:	1a36      	subs	r6, r6, r0
 800e1b0:	e7ea      	b.n	800e188 <__sflush_r+0xd4>
 800e1b2:	bf00      	nop
 800e1b4:	20400001 	.word	0x20400001

0800e1b8 <_fflush_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	690b      	ldr	r3, [r1, #16]
 800e1bc:	4605      	mov	r5, r0
 800e1be:	460c      	mov	r4, r1
 800e1c0:	b913      	cbnz	r3, 800e1c8 <_fflush_r+0x10>
 800e1c2:	2500      	movs	r5, #0
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	bd38      	pop	{r3, r4, r5, pc}
 800e1c8:	b118      	cbz	r0, 800e1d2 <_fflush_r+0x1a>
 800e1ca:	6983      	ldr	r3, [r0, #24]
 800e1cc:	b90b      	cbnz	r3, 800e1d2 <_fflush_r+0x1a>
 800e1ce:	f7ff fd09 	bl	800dbe4 <__sinit>
 800e1d2:	4b14      	ldr	r3, [pc, #80]	; (800e224 <_fflush_r+0x6c>)
 800e1d4:	429c      	cmp	r4, r3
 800e1d6:	d11b      	bne.n	800e210 <_fflush_r+0x58>
 800e1d8:	686c      	ldr	r4, [r5, #4]
 800e1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d0ef      	beq.n	800e1c2 <_fflush_r+0xa>
 800e1e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1e4:	07d0      	lsls	r0, r2, #31
 800e1e6:	d404      	bmi.n	800e1f2 <_fflush_r+0x3a>
 800e1e8:	0599      	lsls	r1, r3, #22
 800e1ea:	d402      	bmi.n	800e1f2 <_fflush_r+0x3a>
 800e1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ee:	f7ff fdbc 	bl	800dd6a <__retarget_lock_acquire_recursive>
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	f7ff ff5d 	bl	800e0b4 <__sflush_r>
 800e1fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1fc:	4605      	mov	r5, r0
 800e1fe:	07da      	lsls	r2, r3, #31
 800e200:	d4e0      	bmi.n	800e1c4 <_fflush_r+0xc>
 800e202:	89a3      	ldrh	r3, [r4, #12]
 800e204:	059b      	lsls	r3, r3, #22
 800e206:	d4dd      	bmi.n	800e1c4 <_fflush_r+0xc>
 800e208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e20a:	f7ff fdaf 	bl	800dd6c <__retarget_lock_release_recursive>
 800e20e:	e7d9      	b.n	800e1c4 <_fflush_r+0xc>
 800e210:	4b05      	ldr	r3, [pc, #20]	; (800e228 <_fflush_r+0x70>)
 800e212:	429c      	cmp	r4, r3
 800e214:	d101      	bne.n	800e21a <_fflush_r+0x62>
 800e216:	68ac      	ldr	r4, [r5, #8]
 800e218:	e7df      	b.n	800e1da <_fflush_r+0x22>
 800e21a:	4b04      	ldr	r3, [pc, #16]	; (800e22c <_fflush_r+0x74>)
 800e21c:	429c      	cmp	r4, r3
 800e21e:	bf08      	it	eq
 800e220:	68ec      	ldreq	r4, [r5, #12]
 800e222:	e7da      	b.n	800e1da <_fflush_r+0x22>
 800e224:	0800ee74 	.word	0x0800ee74
 800e228:	0800ee94 	.word	0x0800ee94
 800e22c:	0800ee54 	.word	0x0800ee54

0800e230 <_lseek_r>:
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4604      	mov	r4, r0
 800e234:	4608      	mov	r0, r1
 800e236:	4611      	mov	r1, r2
 800e238:	2200      	movs	r2, #0
 800e23a:	4d05      	ldr	r5, [pc, #20]	; (800e250 <_lseek_r+0x20>)
 800e23c:	602a      	str	r2, [r5, #0]
 800e23e:	461a      	mov	r2, r3
 800e240:	f7f2 fd13 	bl	8000c6a <_lseek>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d102      	bne.n	800e24e <_lseek_r+0x1e>
 800e248:	682b      	ldr	r3, [r5, #0]
 800e24a:	b103      	cbz	r3, 800e24e <_lseek_r+0x1e>
 800e24c:	6023      	str	r3, [r4, #0]
 800e24e:	bd38      	pop	{r3, r4, r5, pc}
 800e250:	20002d58 	.word	0x20002d58

0800e254 <__malloc_lock>:
 800e254:	4801      	ldr	r0, [pc, #4]	; (800e25c <__malloc_lock+0x8>)
 800e256:	f7ff bd88 	b.w	800dd6a <__retarget_lock_acquire_recursive>
 800e25a:	bf00      	nop
 800e25c:	20002d4c 	.word	0x20002d4c

0800e260 <__malloc_unlock>:
 800e260:	4801      	ldr	r0, [pc, #4]	; (800e268 <__malloc_unlock+0x8>)
 800e262:	f7ff bd83 	b.w	800dd6c <__retarget_lock_release_recursive>
 800e266:	bf00      	nop
 800e268:	20002d4c 	.word	0x20002d4c

0800e26c <_free_r>:
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	4605      	mov	r5, r0
 800e270:	2900      	cmp	r1, #0
 800e272:	d040      	beq.n	800e2f6 <_free_r+0x8a>
 800e274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e278:	1f0c      	subs	r4, r1, #4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	bfb8      	it	lt
 800e27e:	18e4      	addlt	r4, r4, r3
 800e280:	f7ff ffe8 	bl	800e254 <__malloc_lock>
 800e284:	4a1c      	ldr	r2, [pc, #112]	; (800e2f8 <_free_r+0x8c>)
 800e286:	6813      	ldr	r3, [r2, #0]
 800e288:	b933      	cbnz	r3, 800e298 <_free_r+0x2c>
 800e28a:	6063      	str	r3, [r4, #4]
 800e28c:	6014      	str	r4, [r2, #0]
 800e28e:	4628      	mov	r0, r5
 800e290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e294:	f7ff bfe4 	b.w	800e260 <__malloc_unlock>
 800e298:	42a3      	cmp	r3, r4
 800e29a:	d908      	bls.n	800e2ae <_free_r+0x42>
 800e29c:	6820      	ldr	r0, [r4, #0]
 800e29e:	1821      	adds	r1, r4, r0
 800e2a0:	428b      	cmp	r3, r1
 800e2a2:	bf01      	itttt	eq
 800e2a4:	6819      	ldreq	r1, [r3, #0]
 800e2a6:	685b      	ldreq	r3, [r3, #4]
 800e2a8:	1809      	addeq	r1, r1, r0
 800e2aa:	6021      	streq	r1, [r4, #0]
 800e2ac:	e7ed      	b.n	800e28a <_free_r+0x1e>
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	b10b      	cbz	r3, 800e2b8 <_free_r+0x4c>
 800e2b4:	42a3      	cmp	r3, r4
 800e2b6:	d9fa      	bls.n	800e2ae <_free_r+0x42>
 800e2b8:	6811      	ldr	r1, [r2, #0]
 800e2ba:	1850      	adds	r0, r2, r1
 800e2bc:	42a0      	cmp	r0, r4
 800e2be:	d10b      	bne.n	800e2d8 <_free_r+0x6c>
 800e2c0:	6820      	ldr	r0, [r4, #0]
 800e2c2:	4401      	add	r1, r0
 800e2c4:	1850      	adds	r0, r2, r1
 800e2c6:	4283      	cmp	r3, r0
 800e2c8:	6011      	str	r1, [r2, #0]
 800e2ca:	d1e0      	bne.n	800e28e <_free_r+0x22>
 800e2cc:	6818      	ldr	r0, [r3, #0]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	4401      	add	r1, r0
 800e2d2:	6011      	str	r1, [r2, #0]
 800e2d4:	6053      	str	r3, [r2, #4]
 800e2d6:	e7da      	b.n	800e28e <_free_r+0x22>
 800e2d8:	d902      	bls.n	800e2e0 <_free_r+0x74>
 800e2da:	230c      	movs	r3, #12
 800e2dc:	602b      	str	r3, [r5, #0]
 800e2de:	e7d6      	b.n	800e28e <_free_r+0x22>
 800e2e0:	6820      	ldr	r0, [r4, #0]
 800e2e2:	1821      	adds	r1, r4, r0
 800e2e4:	428b      	cmp	r3, r1
 800e2e6:	bf01      	itttt	eq
 800e2e8:	6819      	ldreq	r1, [r3, #0]
 800e2ea:	685b      	ldreq	r3, [r3, #4]
 800e2ec:	1809      	addeq	r1, r1, r0
 800e2ee:	6021      	streq	r1, [r4, #0]
 800e2f0:	6063      	str	r3, [r4, #4]
 800e2f2:	6054      	str	r4, [r2, #4]
 800e2f4:	e7cb      	b.n	800e28e <_free_r+0x22>
 800e2f6:	bd38      	pop	{r3, r4, r5, pc}
 800e2f8:	20002d50 	.word	0x20002d50

0800e2fc <__sfputc_r>:
 800e2fc:	6893      	ldr	r3, [r2, #8]
 800e2fe:	b410      	push	{r4}
 800e300:	3b01      	subs	r3, #1
 800e302:	2b00      	cmp	r3, #0
 800e304:	6093      	str	r3, [r2, #8]
 800e306:	da07      	bge.n	800e318 <__sfputc_r+0x1c>
 800e308:	6994      	ldr	r4, [r2, #24]
 800e30a:	42a3      	cmp	r3, r4
 800e30c:	db01      	blt.n	800e312 <__sfputc_r+0x16>
 800e30e:	290a      	cmp	r1, #10
 800e310:	d102      	bne.n	800e318 <__sfputc_r+0x1c>
 800e312:	bc10      	pop	{r4}
 800e314:	f000 baf2 	b.w	800e8fc <__swbuf_r>
 800e318:	6813      	ldr	r3, [r2, #0]
 800e31a:	1c58      	adds	r0, r3, #1
 800e31c:	6010      	str	r0, [r2, #0]
 800e31e:	7019      	strb	r1, [r3, #0]
 800e320:	4608      	mov	r0, r1
 800e322:	bc10      	pop	{r4}
 800e324:	4770      	bx	lr

0800e326 <__sfputs_r>:
 800e326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e328:	4606      	mov	r6, r0
 800e32a:	460f      	mov	r7, r1
 800e32c:	4614      	mov	r4, r2
 800e32e:	18d5      	adds	r5, r2, r3
 800e330:	42ac      	cmp	r4, r5
 800e332:	d101      	bne.n	800e338 <__sfputs_r+0x12>
 800e334:	2000      	movs	r0, #0
 800e336:	e007      	b.n	800e348 <__sfputs_r+0x22>
 800e338:	463a      	mov	r2, r7
 800e33a:	4630      	mov	r0, r6
 800e33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e340:	f7ff ffdc 	bl	800e2fc <__sfputc_r>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d1f3      	bne.n	800e330 <__sfputs_r+0xa>
 800e348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e34c <_vfiprintf_r>:
 800e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e350:	460d      	mov	r5, r1
 800e352:	4614      	mov	r4, r2
 800e354:	4698      	mov	r8, r3
 800e356:	4606      	mov	r6, r0
 800e358:	b09d      	sub	sp, #116	; 0x74
 800e35a:	b118      	cbz	r0, 800e364 <_vfiprintf_r+0x18>
 800e35c:	6983      	ldr	r3, [r0, #24]
 800e35e:	b90b      	cbnz	r3, 800e364 <_vfiprintf_r+0x18>
 800e360:	f7ff fc40 	bl	800dbe4 <__sinit>
 800e364:	4b89      	ldr	r3, [pc, #548]	; (800e58c <_vfiprintf_r+0x240>)
 800e366:	429d      	cmp	r5, r3
 800e368:	d11b      	bne.n	800e3a2 <_vfiprintf_r+0x56>
 800e36a:	6875      	ldr	r5, [r6, #4]
 800e36c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e36e:	07d9      	lsls	r1, r3, #31
 800e370:	d405      	bmi.n	800e37e <_vfiprintf_r+0x32>
 800e372:	89ab      	ldrh	r3, [r5, #12]
 800e374:	059a      	lsls	r2, r3, #22
 800e376:	d402      	bmi.n	800e37e <_vfiprintf_r+0x32>
 800e378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e37a:	f7ff fcf6 	bl	800dd6a <__retarget_lock_acquire_recursive>
 800e37e:	89ab      	ldrh	r3, [r5, #12]
 800e380:	071b      	lsls	r3, r3, #28
 800e382:	d501      	bpl.n	800e388 <_vfiprintf_r+0x3c>
 800e384:	692b      	ldr	r3, [r5, #16]
 800e386:	b9eb      	cbnz	r3, 800e3c4 <_vfiprintf_r+0x78>
 800e388:	4629      	mov	r1, r5
 800e38a:	4630      	mov	r0, r6
 800e38c:	f000 fb08 	bl	800e9a0 <__swsetup_r>
 800e390:	b1c0      	cbz	r0, 800e3c4 <_vfiprintf_r+0x78>
 800e392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e394:	07dc      	lsls	r4, r3, #31
 800e396:	d50e      	bpl.n	800e3b6 <_vfiprintf_r+0x6a>
 800e398:	f04f 30ff 	mov.w	r0, #4294967295
 800e39c:	b01d      	add	sp, #116	; 0x74
 800e39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a2:	4b7b      	ldr	r3, [pc, #492]	; (800e590 <_vfiprintf_r+0x244>)
 800e3a4:	429d      	cmp	r5, r3
 800e3a6:	d101      	bne.n	800e3ac <_vfiprintf_r+0x60>
 800e3a8:	68b5      	ldr	r5, [r6, #8]
 800e3aa:	e7df      	b.n	800e36c <_vfiprintf_r+0x20>
 800e3ac:	4b79      	ldr	r3, [pc, #484]	; (800e594 <_vfiprintf_r+0x248>)
 800e3ae:	429d      	cmp	r5, r3
 800e3b0:	bf08      	it	eq
 800e3b2:	68f5      	ldreq	r5, [r6, #12]
 800e3b4:	e7da      	b.n	800e36c <_vfiprintf_r+0x20>
 800e3b6:	89ab      	ldrh	r3, [r5, #12]
 800e3b8:	0598      	lsls	r0, r3, #22
 800e3ba:	d4ed      	bmi.n	800e398 <_vfiprintf_r+0x4c>
 800e3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3be:	f7ff fcd5 	bl	800dd6c <__retarget_lock_release_recursive>
 800e3c2:	e7e9      	b.n	800e398 <_vfiprintf_r+0x4c>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3c8:	2320      	movs	r3, #32
 800e3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3ce:	2330      	movs	r3, #48	; 0x30
 800e3d0:	f04f 0901 	mov.w	r9, #1
 800e3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e598 <_vfiprintf_r+0x24c>
 800e3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3e0:	4623      	mov	r3, r4
 800e3e2:	469a      	mov	sl, r3
 800e3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3e8:	b10a      	cbz	r2, 800e3ee <_vfiprintf_r+0xa2>
 800e3ea:	2a25      	cmp	r2, #37	; 0x25
 800e3ec:	d1f9      	bne.n	800e3e2 <_vfiprintf_r+0x96>
 800e3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800e3f2:	d00b      	beq.n	800e40c <_vfiprintf_r+0xc0>
 800e3f4:	465b      	mov	r3, fp
 800e3f6:	4622      	mov	r2, r4
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7ff ff93 	bl	800e326 <__sfputs_r>
 800e400:	3001      	adds	r0, #1
 800e402:	f000 80aa 	beq.w	800e55a <_vfiprintf_r+0x20e>
 800e406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e408:	445a      	add	r2, fp
 800e40a:	9209      	str	r2, [sp, #36]	; 0x24
 800e40c:	f89a 3000 	ldrb.w	r3, [sl]
 800e410:	2b00      	cmp	r3, #0
 800e412:	f000 80a2 	beq.w	800e55a <_vfiprintf_r+0x20e>
 800e416:	2300      	movs	r3, #0
 800e418:	f04f 32ff 	mov.w	r2, #4294967295
 800e41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e420:	f10a 0a01 	add.w	sl, sl, #1
 800e424:	9304      	str	r3, [sp, #16]
 800e426:	9307      	str	r3, [sp, #28]
 800e428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e42c:	931a      	str	r3, [sp, #104]	; 0x68
 800e42e:	4654      	mov	r4, sl
 800e430:	2205      	movs	r2, #5
 800e432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e436:	4858      	ldr	r0, [pc, #352]	; (800e598 <_vfiprintf_r+0x24c>)
 800e438:	f000 fb86 	bl	800eb48 <memchr>
 800e43c:	9a04      	ldr	r2, [sp, #16]
 800e43e:	b9d8      	cbnz	r0, 800e478 <_vfiprintf_r+0x12c>
 800e440:	06d1      	lsls	r1, r2, #27
 800e442:	bf44      	itt	mi
 800e444:	2320      	movmi	r3, #32
 800e446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e44a:	0713      	lsls	r3, r2, #28
 800e44c:	bf44      	itt	mi
 800e44e:	232b      	movmi	r3, #43	; 0x2b
 800e450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e454:	f89a 3000 	ldrb.w	r3, [sl]
 800e458:	2b2a      	cmp	r3, #42	; 0x2a
 800e45a:	d015      	beq.n	800e488 <_vfiprintf_r+0x13c>
 800e45c:	4654      	mov	r4, sl
 800e45e:	2000      	movs	r0, #0
 800e460:	f04f 0c0a 	mov.w	ip, #10
 800e464:	9a07      	ldr	r2, [sp, #28]
 800e466:	4621      	mov	r1, r4
 800e468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e46c:	3b30      	subs	r3, #48	; 0x30
 800e46e:	2b09      	cmp	r3, #9
 800e470:	d94e      	bls.n	800e510 <_vfiprintf_r+0x1c4>
 800e472:	b1b0      	cbz	r0, 800e4a2 <_vfiprintf_r+0x156>
 800e474:	9207      	str	r2, [sp, #28]
 800e476:	e014      	b.n	800e4a2 <_vfiprintf_r+0x156>
 800e478:	eba0 0308 	sub.w	r3, r0, r8
 800e47c:	fa09 f303 	lsl.w	r3, r9, r3
 800e480:	4313      	orrs	r3, r2
 800e482:	46a2      	mov	sl, r4
 800e484:	9304      	str	r3, [sp, #16]
 800e486:	e7d2      	b.n	800e42e <_vfiprintf_r+0xe2>
 800e488:	9b03      	ldr	r3, [sp, #12]
 800e48a:	1d19      	adds	r1, r3, #4
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	9103      	str	r1, [sp, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	bfbb      	ittet	lt
 800e494:	425b      	neglt	r3, r3
 800e496:	f042 0202 	orrlt.w	r2, r2, #2
 800e49a:	9307      	strge	r3, [sp, #28]
 800e49c:	9307      	strlt	r3, [sp, #28]
 800e49e:	bfb8      	it	lt
 800e4a0:	9204      	strlt	r2, [sp, #16]
 800e4a2:	7823      	ldrb	r3, [r4, #0]
 800e4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e4a6:	d10c      	bne.n	800e4c2 <_vfiprintf_r+0x176>
 800e4a8:	7863      	ldrb	r3, [r4, #1]
 800e4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ac:	d135      	bne.n	800e51a <_vfiprintf_r+0x1ce>
 800e4ae:	9b03      	ldr	r3, [sp, #12]
 800e4b0:	3402      	adds	r4, #2
 800e4b2:	1d1a      	adds	r2, r3, #4
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	9203      	str	r2, [sp, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	bfb8      	it	lt
 800e4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4c0:	9305      	str	r3, [sp, #20]
 800e4c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e59c <_vfiprintf_r+0x250>
 800e4c6:	2203      	movs	r2, #3
 800e4c8:	4650      	mov	r0, sl
 800e4ca:	7821      	ldrb	r1, [r4, #0]
 800e4cc:	f000 fb3c 	bl	800eb48 <memchr>
 800e4d0:	b140      	cbz	r0, 800e4e4 <_vfiprintf_r+0x198>
 800e4d2:	2340      	movs	r3, #64	; 0x40
 800e4d4:	eba0 000a 	sub.w	r0, r0, sl
 800e4d8:	fa03 f000 	lsl.w	r0, r3, r0
 800e4dc:	9b04      	ldr	r3, [sp, #16]
 800e4de:	3401      	adds	r4, #1
 800e4e0:	4303      	orrs	r3, r0
 800e4e2:	9304      	str	r3, [sp, #16]
 800e4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e8:	2206      	movs	r2, #6
 800e4ea:	482d      	ldr	r0, [pc, #180]	; (800e5a0 <_vfiprintf_r+0x254>)
 800e4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4f0:	f000 fb2a 	bl	800eb48 <memchr>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d03f      	beq.n	800e578 <_vfiprintf_r+0x22c>
 800e4f8:	4b2a      	ldr	r3, [pc, #168]	; (800e5a4 <_vfiprintf_r+0x258>)
 800e4fa:	bb1b      	cbnz	r3, 800e544 <_vfiprintf_r+0x1f8>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	3307      	adds	r3, #7
 800e500:	f023 0307 	bic.w	r3, r3, #7
 800e504:	3308      	adds	r3, #8
 800e506:	9303      	str	r3, [sp, #12]
 800e508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e50a:	443b      	add	r3, r7
 800e50c:	9309      	str	r3, [sp, #36]	; 0x24
 800e50e:	e767      	b.n	800e3e0 <_vfiprintf_r+0x94>
 800e510:	460c      	mov	r4, r1
 800e512:	2001      	movs	r0, #1
 800e514:	fb0c 3202 	mla	r2, ip, r2, r3
 800e518:	e7a5      	b.n	800e466 <_vfiprintf_r+0x11a>
 800e51a:	2300      	movs	r3, #0
 800e51c:	f04f 0c0a 	mov.w	ip, #10
 800e520:	4619      	mov	r1, r3
 800e522:	3401      	adds	r4, #1
 800e524:	9305      	str	r3, [sp, #20]
 800e526:	4620      	mov	r0, r4
 800e528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e52c:	3a30      	subs	r2, #48	; 0x30
 800e52e:	2a09      	cmp	r2, #9
 800e530:	d903      	bls.n	800e53a <_vfiprintf_r+0x1ee>
 800e532:	2b00      	cmp	r3, #0
 800e534:	d0c5      	beq.n	800e4c2 <_vfiprintf_r+0x176>
 800e536:	9105      	str	r1, [sp, #20]
 800e538:	e7c3      	b.n	800e4c2 <_vfiprintf_r+0x176>
 800e53a:	4604      	mov	r4, r0
 800e53c:	2301      	movs	r3, #1
 800e53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e542:	e7f0      	b.n	800e526 <_vfiprintf_r+0x1da>
 800e544:	ab03      	add	r3, sp, #12
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	462a      	mov	r2, r5
 800e54a:	4630      	mov	r0, r6
 800e54c:	4b16      	ldr	r3, [pc, #88]	; (800e5a8 <_vfiprintf_r+0x25c>)
 800e54e:	a904      	add	r1, sp, #16
 800e550:	f3af 8000 	nop.w
 800e554:	4607      	mov	r7, r0
 800e556:	1c78      	adds	r0, r7, #1
 800e558:	d1d6      	bne.n	800e508 <_vfiprintf_r+0x1bc>
 800e55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e55c:	07d9      	lsls	r1, r3, #31
 800e55e:	d405      	bmi.n	800e56c <_vfiprintf_r+0x220>
 800e560:	89ab      	ldrh	r3, [r5, #12]
 800e562:	059a      	lsls	r2, r3, #22
 800e564:	d402      	bmi.n	800e56c <_vfiprintf_r+0x220>
 800e566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e568:	f7ff fc00 	bl	800dd6c <__retarget_lock_release_recursive>
 800e56c:	89ab      	ldrh	r3, [r5, #12]
 800e56e:	065b      	lsls	r3, r3, #25
 800e570:	f53f af12 	bmi.w	800e398 <_vfiprintf_r+0x4c>
 800e574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e576:	e711      	b.n	800e39c <_vfiprintf_r+0x50>
 800e578:	ab03      	add	r3, sp, #12
 800e57a:	9300      	str	r3, [sp, #0]
 800e57c:	462a      	mov	r2, r5
 800e57e:	4630      	mov	r0, r6
 800e580:	4b09      	ldr	r3, [pc, #36]	; (800e5a8 <_vfiprintf_r+0x25c>)
 800e582:	a904      	add	r1, sp, #16
 800e584:	f000 f882 	bl	800e68c <_printf_i>
 800e588:	e7e4      	b.n	800e554 <_vfiprintf_r+0x208>
 800e58a:	bf00      	nop
 800e58c:	0800ee74 	.word	0x0800ee74
 800e590:	0800ee94 	.word	0x0800ee94
 800e594:	0800ee54 	.word	0x0800ee54
 800e598:	0800eeb8 	.word	0x0800eeb8
 800e59c:	0800eebe 	.word	0x0800eebe
 800e5a0:	0800eec2 	.word	0x0800eec2
 800e5a4:	00000000 	.word	0x00000000
 800e5a8:	0800e327 	.word	0x0800e327

0800e5ac <_printf_common>:
 800e5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b0:	4616      	mov	r6, r2
 800e5b2:	4699      	mov	r9, r3
 800e5b4:	688a      	ldr	r2, [r1, #8]
 800e5b6:	690b      	ldr	r3, [r1, #16]
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	bfb8      	it	lt
 800e5be:	4613      	movlt	r3, r2
 800e5c0:	6033      	str	r3, [r6, #0]
 800e5c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5c6:	460c      	mov	r4, r1
 800e5c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5cc:	b10a      	cbz	r2, 800e5d2 <_printf_common+0x26>
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	6033      	str	r3, [r6, #0]
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	0699      	lsls	r1, r3, #26
 800e5d6:	bf42      	ittt	mi
 800e5d8:	6833      	ldrmi	r3, [r6, #0]
 800e5da:	3302      	addmi	r3, #2
 800e5dc:	6033      	strmi	r3, [r6, #0]
 800e5de:	6825      	ldr	r5, [r4, #0]
 800e5e0:	f015 0506 	ands.w	r5, r5, #6
 800e5e4:	d106      	bne.n	800e5f4 <_printf_common+0x48>
 800e5e6:	f104 0a19 	add.w	sl, r4, #25
 800e5ea:	68e3      	ldr	r3, [r4, #12]
 800e5ec:	6832      	ldr	r2, [r6, #0]
 800e5ee:	1a9b      	subs	r3, r3, r2
 800e5f0:	42ab      	cmp	r3, r5
 800e5f2:	dc28      	bgt.n	800e646 <_printf_common+0x9a>
 800e5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5f8:	1e13      	subs	r3, r2, #0
 800e5fa:	6822      	ldr	r2, [r4, #0]
 800e5fc:	bf18      	it	ne
 800e5fe:	2301      	movne	r3, #1
 800e600:	0692      	lsls	r2, r2, #26
 800e602:	d42d      	bmi.n	800e660 <_printf_common+0xb4>
 800e604:	4649      	mov	r1, r9
 800e606:	4638      	mov	r0, r7
 800e608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e60c:	47c0      	blx	r8
 800e60e:	3001      	adds	r0, #1
 800e610:	d020      	beq.n	800e654 <_printf_common+0xa8>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	68e5      	ldr	r5, [r4, #12]
 800e616:	f003 0306 	and.w	r3, r3, #6
 800e61a:	2b04      	cmp	r3, #4
 800e61c:	bf18      	it	ne
 800e61e:	2500      	movne	r5, #0
 800e620:	6832      	ldr	r2, [r6, #0]
 800e622:	f04f 0600 	mov.w	r6, #0
 800e626:	68a3      	ldr	r3, [r4, #8]
 800e628:	bf08      	it	eq
 800e62a:	1aad      	subeq	r5, r5, r2
 800e62c:	6922      	ldr	r2, [r4, #16]
 800e62e:	bf08      	it	eq
 800e630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e634:	4293      	cmp	r3, r2
 800e636:	bfc4      	itt	gt
 800e638:	1a9b      	subgt	r3, r3, r2
 800e63a:	18ed      	addgt	r5, r5, r3
 800e63c:	341a      	adds	r4, #26
 800e63e:	42b5      	cmp	r5, r6
 800e640:	d11a      	bne.n	800e678 <_printf_common+0xcc>
 800e642:	2000      	movs	r0, #0
 800e644:	e008      	b.n	800e658 <_printf_common+0xac>
 800e646:	2301      	movs	r3, #1
 800e648:	4652      	mov	r2, sl
 800e64a:	4649      	mov	r1, r9
 800e64c:	4638      	mov	r0, r7
 800e64e:	47c0      	blx	r8
 800e650:	3001      	adds	r0, #1
 800e652:	d103      	bne.n	800e65c <_printf_common+0xb0>
 800e654:	f04f 30ff 	mov.w	r0, #4294967295
 800e658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e65c:	3501      	adds	r5, #1
 800e65e:	e7c4      	b.n	800e5ea <_printf_common+0x3e>
 800e660:	2030      	movs	r0, #48	; 0x30
 800e662:	18e1      	adds	r1, r4, r3
 800e664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e668:	1c5a      	adds	r2, r3, #1
 800e66a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e66e:	4422      	add	r2, r4
 800e670:	3302      	adds	r3, #2
 800e672:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e676:	e7c5      	b.n	800e604 <_printf_common+0x58>
 800e678:	2301      	movs	r3, #1
 800e67a:	4622      	mov	r2, r4
 800e67c:	4649      	mov	r1, r9
 800e67e:	4638      	mov	r0, r7
 800e680:	47c0      	blx	r8
 800e682:	3001      	adds	r0, #1
 800e684:	d0e6      	beq.n	800e654 <_printf_common+0xa8>
 800e686:	3601      	adds	r6, #1
 800e688:	e7d9      	b.n	800e63e <_printf_common+0x92>
	...

0800e68c <_printf_i>:
 800e68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e690:	7e0f      	ldrb	r7, [r1, #24]
 800e692:	4691      	mov	r9, r2
 800e694:	2f78      	cmp	r7, #120	; 0x78
 800e696:	4680      	mov	r8, r0
 800e698:	460c      	mov	r4, r1
 800e69a:	469a      	mov	sl, r3
 800e69c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e69e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e6a2:	d807      	bhi.n	800e6b4 <_printf_i+0x28>
 800e6a4:	2f62      	cmp	r7, #98	; 0x62
 800e6a6:	d80a      	bhi.n	800e6be <_printf_i+0x32>
 800e6a8:	2f00      	cmp	r7, #0
 800e6aa:	f000 80d9 	beq.w	800e860 <_printf_i+0x1d4>
 800e6ae:	2f58      	cmp	r7, #88	; 0x58
 800e6b0:	f000 80a4 	beq.w	800e7fc <_printf_i+0x170>
 800e6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6bc:	e03a      	b.n	800e734 <_printf_i+0xa8>
 800e6be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6c2:	2b15      	cmp	r3, #21
 800e6c4:	d8f6      	bhi.n	800e6b4 <_printf_i+0x28>
 800e6c6:	a101      	add	r1, pc, #4	; (adr r1, 800e6cc <_printf_i+0x40>)
 800e6c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6cc:	0800e725 	.word	0x0800e725
 800e6d0:	0800e739 	.word	0x0800e739
 800e6d4:	0800e6b5 	.word	0x0800e6b5
 800e6d8:	0800e6b5 	.word	0x0800e6b5
 800e6dc:	0800e6b5 	.word	0x0800e6b5
 800e6e0:	0800e6b5 	.word	0x0800e6b5
 800e6e4:	0800e739 	.word	0x0800e739
 800e6e8:	0800e6b5 	.word	0x0800e6b5
 800e6ec:	0800e6b5 	.word	0x0800e6b5
 800e6f0:	0800e6b5 	.word	0x0800e6b5
 800e6f4:	0800e6b5 	.word	0x0800e6b5
 800e6f8:	0800e847 	.word	0x0800e847
 800e6fc:	0800e769 	.word	0x0800e769
 800e700:	0800e829 	.word	0x0800e829
 800e704:	0800e6b5 	.word	0x0800e6b5
 800e708:	0800e6b5 	.word	0x0800e6b5
 800e70c:	0800e869 	.word	0x0800e869
 800e710:	0800e6b5 	.word	0x0800e6b5
 800e714:	0800e769 	.word	0x0800e769
 800e718:	0800e6b5 	.word	0x0800e6b5
 800e71c:	0800e6b5 	.word	0x0800e6b5
 800e720:	0800e831 	.word	0x0800e831
 800e724:	682b      	ldr	r3, [r5, #0]
 800e726:	1d1a      	adds	r2, r3, #4
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	602a      	str	r2, [r5, #0]
 800e72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e734:	2301      	movs	r3, #1
 800e736:	e0a4      	b.n	800e882 <_printf_i+0x1f6>
 800e738:	6820      	ldr	r0, [r4, #0]
 800e73a:	6829      	ldr	r1, [r5, #0]
 800e73c:	0606      	lsls	r6, r0, #24
 800e73e:	f101 0304 	add.w	r3, r1, #4
 800e742:	d50a      	bpl.n	800e75a <_printf_i+0xce>
 800e744:	680e      	ldr	r6, [r1, #0]
 800e746:	602b      	str	r3, [r5, #0]
 800e748:	2e00      	cmp	r6, #0
 800e74a:	da03      	bge.n	800e754 <_printf_i+0xc8>
 800e74c:	232d      	movs	r3, #45	; 0x2d
 800e74e:	4276      	negs	r6, r6
 800e750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e754:	230a      	movs	r3, #10
 800e756:	485e      	ldr	r0, [pc, #376]	; (800e8d0 <_printf_i+0x244>)
 800e758:	e019      	b.n	800e78e <_printf_i+0x102>
 800e75a:	680e      	ldr	r6, [r1, #0]
 800e75c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e760:	602b      	str	r3, [r5, #0]
 800e762:	bf18      	it	ne
 800e764:	b236      	sxthne	r6, r6
 800e766:	e7ef      	b.n	800e748 <_printf_i+0xbc>
 800e768:	682b      	ldr	r3, [r5, #0]
 800e76a:	6820      	ldr	r0, [r4, #0]
 800e76c:	1d19      	adds	r1, r3, #4
 800e76e:	6029      	str	r1, [r5, #0]
 800e770:	0601      	lsls	r1, r0, #24
 800e772:	d501      	bpl.n	800e778 <_printf_i+0xec>
 800e774:	681e      	ldr	r6, [r3, #0]
 800e776:	e002      	b.n	800e77e <_printf_i+0xf2>
 800e778:	0646      	lsls	r6, r0, #25
 800e77a:	d5fb      	bpl.n	800e774 <_printf_i+0xe8>
 800e77c:	881e      	ldrh	r6, [r3, #0]
 800e77e:	2f6f      	cmp	r7, #111	; 0x6f
 800e780:	bf0c      	ite	eq
 800e782:	2308      	moveq	r3, #8
 800e784:	230a      	movne	r3, #10
 800e786:	4852      	ldr	r0, [pc, #328]	; (800e8d0 <_printf_i+0x244>)
 800e788:	2100      	movs	r1, #0
 800e78a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e78e:	6865      	ldr	r5, [r4, #4]
 800e790:	2d00      	cmp	r5, #0
 800e792:	bfa8      	it	ge
 800e794:	6821      	ldrge	r1, [r4, #0]
 800e796:	60a5      	str	r5, [r4, #8]
 800e798:	bfa4      	itt	ge
 800e79a:	f021 0104 	bicge.w	r1, r1, #4
 800e79e:	6021      	strge	r1, [r4, #0]
 800e7a0:	b90e      	cbnz	r6, 800e7a6 <_printf_i+0x11a>
 800e7a2:	2d00      	cmp	r5, #0
 800e7a4:	d04d      	beq.n	800e842 <_printf_i+0x1b6>
 800e7a6:	4615      	mov	r5, r2
 800e7a8:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7ac:	fb03 6711 	mls	r7, r3, r1, r6
 800e7b0:	5dc7      	ldrb	r7, [r0, r7]
 800e7b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e7b6:	4637      	mov	r7, r6
 800e7b8:	42bb      	cmp	r3, r7
 800e7ba:	460e      	mov	r6, r1
 800e7bc:	d9f4      	bls.n	800e7a8 <_printf_i+0x11c>
 800e7be:	2b08      	cmp	r3, #8
 800e7c0:	d10b      	bne.n	800e7da <_printf_i+0x14e>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	07de      	lsls	r6, r3, #31
 800e7c6:	d508      	bpl.n	800e7da <_printf_i+0x14e>
 800e7c8:	6923      	ldr	r3, [r4, #16]
 800e7ca:	6861      	ldr	r1, [r4, #4]
 800e7cc:	4299      	cmp	r1, r3
 800e7ce:	bfde      	ittt	le
 800e7d0:	2330      	movle	r3, #48	; 0x30
 800e7d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e7da:	1b52      	subs	r2, r2, r5
 800e7dc:	6122      	str	r2, [r4, #16]
 800e7de:	464b      	mov	r3, r9
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	f8cd a000 	str.w	sl, [sp]
 800e7e8:	aa03      	add	r2, sp, #12
 800e7ea:	f7ff fedf 	bl	800e5ac <_printf_common>
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	d14c      	bne.n	800e88c <_printf_i+0x200>
 800e7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f6:	b004      	add	sp, #16
 800e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fc:	4834      	ldr	r0, [pc, #208]	; (800e8d0 <_printf_i+0x244>)
 800e7fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e802:	6829      	ldr	r1, [r5, #0]
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	f851 6b04 	ldr.w	r6, [r1], #4
 800e80a:	6029      	str	r1, [r5, #0]
 800e80c:	061d      	lsls	r5, r3, #24
 800e80e:	d514      	bpl.n	800e83a <_printf_i+0x1ae>
 800e810:	07df      	lsls	r7, r3, #31
 800e812:	bf44      	itt	mi
 800e814:	f043 0320 	orrmi.w	r3, r3, #32
 800e818:	6023      	strmi	r3, [r4, #0]
 800e81a:	b91e      	cbnz	r6, 800e824 <_printf_i+0x198>
 800e81c:	6823      	ldr	r3, [r4, #0]
 800e81e:	f023 0320 	bic.w	r3, r3, #32
 800e822:	6023      	str	r3, [r4, #0]
 800e824:	2310      	movs	r3, #16
 800e826:	e7af      	b.n	800e788 <_printf_i+0xfc>
 800e828:	6823      	ldr	r3, [r4, #0]
 800e82a:	f043 0320 	orr.w	r3, r3, #32
 800e82e:	6023      	str	r3, [r4, #0]
 800e830:	2378      	movs	r3, #120	; 0x78
 800e832:	4828      	ldr	r0, [pc, #160]	; (800e8d4 <_printf_i+0x248>)
 800e834:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e838:	e7e3      	b.n	800e802 <_printf_i+0x176>
 800e83a:	0659      	lsls	r1, r3, #25
 800e83c:	bf48      	it	mi
 800e83e:	b2b6      	uxthmi	r6, r6
 800e840:	e7e6      	b.n	800e810 <_printf_i+0x184>
 800e842:	4615      	mov	r5, r2
 800e844:	e7bb      	b.n	800e7be <_printf_i+0x132>
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	6826      	ldr	r6, [r4, #0]
 800e84a:	1d18      	adds	r0, r3, #4
 800e84c:	6961      	ldr	r1, [r4, #20]
 800e84e:	6028      	str	r0, [r5, #0]
 800e850:	0635      	lsls	r5, r6, #24
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	d501      	bpl.n	800e85a <_printf_i+0x1ce>
 800e856:	6019      	str	r1, [r3, #0]
 800e858:	e002      	b.n	800e860 <_printf_i+0x1d4>
 800e85a:	0670      	lsls	r0, r6, #25
 800e85c:	d5fb      	bpl.n	800e856 <_printf_i+0x1ca>
 800e85e:	8019      	strh	r1, [r3, #0]
 800e860:	2300      	movs	r3, #0
 800e862:	4615      	mov	r5, r2
 800e864:	6123      	str	r3, [r4, #16]
 800e866:	e7ba      	b.n	800e7de <_printf_i+0x152>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	2100      	movs	r1, #0
 800e86c:	1d1a      	adds	r2, r3, #4
 800e86e:	602a      	str	r2, [r5, #0]
 800e870:	681d      	ldr	r5, [r3, #0]
 800e872:	6862      	ldr	r2, [r4, #4]
 800e874:	4628      	mov	r0, r5
 800e876:	f000 f967 	bl	800eb48 <memchr>
 800e87a:	b108      	cbz	r0, 800e880 <_printf_i+0x1f4>
 800e87c:	1b40      	subs	r0, r0, r5
 800e87e:	6060      	str	r0, [r4, #4]
 800e880:	6863      	ldr	r3, [r4, #4]
 800e882:	6123      	str	r3, [r4, #16]
 800e884:	2300      	movs	r3, #0
 800e886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e88a:	e7a8      	b.n	800e7de <_printf_i+0x152>
 800e88c:	462a      	mov	r2, r5
 800e88e:	4649      	mov	r1, r9
 800e890:	4640      	mov	r0, r8
 800e892:	6923      	ldr	r3, [r4, #16]
 800e894:	47d0      	blx	sl
 800e896:	3001      	adds	r0, #1
 800e898:	d0ab      	beq.n	800e7f2 <_printf_i+0x166>
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	079b      	lsls	r3, r3, #30
 800e89e:	d413      	bmi.n	800e8c8 <_printf_i+0x23c>
 800e8a0:	68e0      	ldr	r0, [r4, #12]
 800e8a2:	9b03      	ldr	r3, [sp, #12]
 800e8a4:	4298      	cmp	r0, r3
 800e8a6:	bfb8      	it	lt
 800e8a8:	4618      	movlt	r0, r3
 800e8aa:	e7a4      	b.n	800e7f6 <_printf_i+0x16a>
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	4632      	mov	r2, r6
 800e8b0:	4649      	mov	r1, r9
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	47d0      	blx	sl
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	d09b      	beq.n	800e7f2 <_printf_i+0x166>
 800e8ba:	3501      	adds	r5, #1
 800e8bc:	68e3      	ldr	r3, [r4, #12]
 800e8be:	9903      	ldr	r1, [sp, #12]
 800e8c0:	1a5b      	subs	r3, r3, r1
 800e8c2:	42ab      	cmp	r3, r5
 800e8c4:	dcf2      	bgt.n	800e8ac <_printf_i+0x220>
 800e8c6:	e7eb      	b.n	800e8a0 <_printf_i+0x214>
 800e8c8:	2500      	movs	r5, #0
 800e8ca:	f104 0619 	add.w	r6, r4, #25
 800e8ce:	e7f5      	b.n	800e8bc <_printf_i+0x230>
 800e8d0:	0800eec9 	.word	0x0800eec9
 800e8d4:	0800eeda 	.word	0x0800eeda

0800e8d8 <_read_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4604      	mov	r4, r0
 800e8dc:	4608      	mov	r0, r1
 800e8de:	4611      	mov	r1, r2
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	4d05      	ldr	r5, [pc, #20]	; (800e8f8 <_read_r+0x20>)
 800e8e4:	602a      	str	r2, [r5, #0]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	f7f2 f962 	bl	8000bb0 <_read>
 800e8ec:	1c43      	adds	r3, r0, #1
 800e8ee:	d102      	bne.n	800e8f6 <_read_r+0x1e>
 800e8f0:	682b      	ldr	r3, [r5, #0]
 800e8f2:	b103      	cbz	r3, 800e8f6 <_read_r+0x1e>
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	bd38      	pop	{r3, r4, r5, pc}
 800e8f8:	20002d58 	.word	0x20002d58

0800e8fc <__swbuf_r>:
 800e8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fe:	460e      	mov	r6, r1
 800e900:	4614      	mov	r4, r2
 800e902:	4605      	mov	r5, r0
 800e904:	b118      	cbz	r0, 800e90e <__swbuf_r+0x12>
 800e906:	6983      	ldr	r3, [r0, #24]
 800e908:	b90b      	cbnz	r3, 800e90e <__swbuf_r+0x12>
 800e90a:	f7ff f96b 	bl	800dbe4 <__sinit>
 800e90e:	4b21      	ldr	r3, [pc, #132]	; (800e994 <__swbuf_r+0x98>)
 800e910:	429c      	cmp	r4, r3
 800e912:	d12b      	bne.n	800e96c <__swbuf_r+0x70>
 800e914:	686c      	ldr	r4, [r5, #4]
 800e916:	69a3      	ldr	r3, [r4, #24]
 800e918:	60a3      	str	r3, [r4, #8]
 800e91a:	89a3      	ldrh	r3, [r4, #12]
 800e91c:	071a      	lsls	r2, r3, #28
 800e91e:	d52f      	bpl.n	800e980 <__swbuf_r+0x84>
 800e920:	6923      	ldr	r3, [r4, #16]
 800e922:	b36b      	cbz	r3, 800e980 <__swbuf_r+0x84>
 800e924:	6923      	ldr	r3, [r4, #16]
 800e926:	6820      	ldr	r0, [r4, #0]
 800e928:	b2f6      	uxtb	r6, r6
 800e92a:	1ac0      	subs	r0, r0, r3
 800e92c:	6963      	ldr	r3, [r4, #20]
 800e92e:	4637      	mov	r7, r6
 800e930:	4283      	cmp	r3, r0
 800e932:	dc04      	bgt.n	800e93e <__swbuf_r+0x42>
 800e934:	4621      	mov	r1, r4
 800e936:	4628      	mov	r0, r5
 800e938:	f7ff fc3e 	bl	800e1b8 <_fflush_r>
 800e93c:	bb30      	cbnz	r0, 800e98c <__swbuf_r+0x90>
 800e93e:	68a3      	ldr	r3, [r4, #8]
 800e940:	3001      	adds	r0, #1
 800e942:	3b01      	subs	r3, #1
 800e944:	60a3      	str	r3, [r4, #8]
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	6022      	str	r2, [r4, #0]
 800e94c:	701e      	strb	r6, [r3, #0]
 800e94e:	6963      	ldr	r3, [r4, #20]
 800e950:	4283      	cmp	r3, r0
 800e952:	d004      	beq.n	800e95e <__swbuf_r+0x62>
 800e954:	89a3      	ldrh	r3, [r4, #12]
 800e956:	07db      	lsls	r3, r3, #31
 800e958:	d506      	bpl.n	800e968 <__swbuf_r+0x6c>
 800e95a:	2e0a      	cmp	r6, #10
 800e95c:	d104      	bne.n	800e968 <__swbuf_r+0x6c>
 800e95e:	4621      	mov	r1, r4
 800e960:	4628      	mov	r0, r5
 800e962:	f7ff fc29 	bl	800e1b8 <_fflush_r>
 800e966:	b988      	cbnz	r0, 800e98c <__swbuf_r+0x90>
 800e968:	4638      	mov	r0, r7
 800e96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e96c:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <__swbuf_r+0x9c>)
 800e96e:	429c      	cmp	r4, r3
 800e970:	d101      	bne.n	800e976 <__swbuf_r+0x7a>
 800e972:	68ac      	ldr	r4, [r5, #8]
 800e974:	e7cf      	b.n	800e916 <__swbuf_r+0x1a>
 800e976:	4b09      	ldr	r3, [pc, #36]	; (800e99c <__swbuf_r+0xa0>)
 800e978:	429c      	cmp	r4, r3
 800e97a:	bf08      	it	eq
 800e97c:	68ec      	ldreq	r4, [r5, #12]
 800e97e:	e7ca      	b.n	800e916 <__swbuf_r+0x1a>
 800e980:	4621      	mov	r1, r4
 800e982:	4628      	mov	r0, r5
 800e984:	f000 f80c 	bl	800e9a0 <__swsetup_r>
 800e988:	2800      	cmp	r0, #0
 800e98a:	d0cb      	beq.n	800e924 <__swbuf_r+0x28>
 800e98c:	f04f 37ff 	mov.w	r7, #4294967295
 800e990:	e7ea      	b.n	800e968 <__swbuf_r+0x6c>
 800e992:	bf00      	nop
 800e994:	0800ee74 	.word	0x0800ee74
 800e998:	0800ee94 	.word	0x0800ee94
 800e99c:	0800ee54 	.word	0x0800ee54

0800e9a0 <__swsetup_r>:
 800e9a0:	4b32      	ldr	r3, [pc, #200]	; (800ea6c <__swsetup_r+0xcc>)
 800e9a2:	b570      	push	{r4, r5, r6, lr}
 800e9a4:	681d      	ldr	r5, [r3, #0]
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	460c      	mov	r4, r1
 800e9aa:	b125      	cbz	r5, 800e9b6 <__swsetup_r+0x16>
 800e9ac:	69ab      	ldr	r3, [r5, #24]
 800e9ae:	b913      	cbnz	r3, 800e9b6 <__swsetup_r+0x16>
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	f7ff f917 	bl	800dbe4 <__sinit>
 800e9b6:	4b2e      	ldr	r3, [pc, #184]	; (800ea70 <__swsetup_r+0xd0>)
 800e9b8:	429c      	cmp	r4, r3
 800e9ba:	d10f      	bne.n	800e9dc <__swsetup_r+0x3c>
 800e9bc:	686c      	ldr	r4, [r5, #4]
 800e9be:	89a3      	ldrh	r3, [r4, #12]
 800e9c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9c4:	0719      	lsls	r1, r3, #28
 800e9c6:	d42c      	bmi.n	800ea22 <__swsetup_r+0x82>
 800e9c8:	06dd      	lsls	r5, r3, #27
 800e9ca:	d411      	bmi.n	800e9f0 <__swsetup_r+0x50>
 800e9cc:	2309      	movs	r3, #9
 800e9ce:	6033      	str	r3, [r6, #0]
 800e9d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d8:	81a3      	strh	r3, [r4, #12]
 800e9da:	e03e      	b.n	800ea5a <__swsetup_r+0xba>
 800e9dc:	4b25      	ldr	r3, [pc, #148]	; (800ea74 <__swsetup_r+0xd4>)
 800e9de:	429c      	cmp	r4, r3
 800e9e0:	d101      	bne.n	800e9e6 <__swsetup_r+0x46>
 800e9e2:	68ac      	ldr	r4, [r5, #8]
 800e9e4:	e7eb      	b.n	800e9be <__swsetup_r+0x1e>
 800e9e6:	4b24      	ldr	r3, [pc, #144]	; (800ea78 <__swsetup_r+0xd8>)
 800e9e8:	429c      	cmp	r4, r3
 800e9ea:	bf08      	it	eq
 800e9ec:	68ec      	ldreq	r4, [r5, #12]
 800e9ee:	e7e6      	b.n	800e9be <__swsetup_r+0x1e>
 800e9f0:	0758      	lsls	r0, r3, #29
 800e9f2:	d512      	bpl.n	800ea1a <__swsetup_r+0x7a>
 800e9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9f6:	b141      	cbz	r1, 800ea0a <__swsetup_r+0x6a>
 800e9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9fc:	4299      	cmp	r1, r3
 800e9fe:	d002      	beq.n	800ea06 <__swsetup_r+0x66>
 800ea00:	4630      	mov	r0, r6
 800ea02:	f7ff fc33 	bl	800e26c <_free_r>
 800ea06:	2300      	movs	r3, #0
 800ea08:	6363      	str	r3, [r4, #52]	; 0x34
 800ea0a:	89a3      	ldrh	r3, [r4, #12]
 800ea0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea10:	81a3      	strh	r3, [r4, #12]
 800ea12:	2300      	movs	r3, #0
 800ea14:	6063      	str	r3, [r4, #4]
 800ea16:	6923      	ldr	r3, [r4, #16]
 800ea18:	6023      	str	r3, [r4, #0]
 800ea1a:	89a3      	ldrh	r3, [r4, #12]
 800ea1c:	f043 0308 	orr.w	r3, r3, #8
 800ea20:	81a3      	strh	r3, [r4, #12]
 800ea22:	6923      	ldr	r3, [r4, #16]
 800ea24:	b94b      	cbnz	r3, 800ea3a <__swsetup_r+0x9a>
 800ea26:	89a3      	ldrh	r3, [r4, #12]
 800ea28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea30:	d003      	beq.n	800ea3a <__swsetup_r+0x9a>
 800ea32:	4621      	mov	r1, r4
 800ea34:	4630      	mov	r0, r6
 800ea36:	f000 f847 	bl	800eac8 <__smakebuf_r>
 800ea3a:	89a0      	ldrh	r0, [r4, #12]
 800ea3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea40:	f010 0301 	ands.w	r3, r0, #1
 800ea44:	d00a      	beq.n	800ea5c <__swsetup_r+0xbc>
 800ea46:	2300      	movs	r3, #0
 800ea48:	60a3      	str	r3, [r4, #8]
 800ea4a:	6963      	ldr	r3, [r4, #20]
 800ea4c:	425b      	negs	r3, r3
 800ea4e:	61a3      	str	r3, [r4, #24]
 800ea50:	6923      	ldr	r3, [r4, #16]
 800ea52:	b943      	cbnz	r3, 800ea66 <__swsetup_r+0xc6>
 800ea54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea58:	d1ba      	bne.n	800e9d0 <__swsetup_r+0x30>
 800ea5a:	bd70      	pop	{r4, r5, r6, pc}
 800ea5c:	0781      	lsls	r1, r0, #30
 800ea5e:	bf58      	it	pl
 800ea60:	6963      	ldrpl	r3, [r4, #20]
 800ea62:	60a3      	str	r3, [r4, #8]
 800ea64:	e7f4      	b.n	800ea50 <__swsetup_r+0xb0>
 800ea66:	2000      	movs	r0, #0
 800ea68:	e7f7      	b.n	800ea5a <__swsetup_r+0xba>
 800ea6a:	bf00      	nop
 800ea6c:	20000334 	.word	0x20000334
 800ea70:	0800ee74 	.word	0x0800ee74
 800ea74:	0800ee94 	.word	0x0800ee94
 800ea78:	0800ee54 	.word	0x0800ee54

0800ea7c <__swhatbuf_r>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	460e      	mov	r6, r1
 800ea80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea84:	4614      	mov	r4, r2
 800ea86:	2900      	cmp	r1, #0
 800ea88:	461d      	mov	r5, r3
 800ea8a:	b096      	sub	sp, #88	; 0x58
 800ea8c:	da08      	bge.n	800eaa0 <__swhatbuf_r+0x24>
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea94:	602a      	str	r2, [r5, #0]
 800ea96:	061a      	lsls	r2, r3, #24
 800ea98:	d410      	bmi.n	800eabc <__swhatbuf_r+0x40>
 800ea9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea9e:	e00e      	b.n	800eabe <__swhatbuf_r+0x42>
 800eaa0:	466a      	mov	r2, sp
 800eaa2:	f000 f85f 	bl	800eb64 <_fstat_r>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	dbf1      	blt.n	800ea8e <__swhatbuf_r+0x12>
 800eaaa:	9a01      	ldr	r2, [sp, #4]
 800eaac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eab0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eab4:	425a      	negs	r2, r3
 800eab6:	415a      	adcs	r2, r3
 800eab8:	602a      	str	r2, [r5, #0]
 800eaba:	e7ee      	b.n	800ea9a <__swhatbuf_r+0x1e>
 800eabc:	2340      	movs	r3, #64	; 0x40
 800eabe:	2000      	movs	r0, #0
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	b016      	add	sp, #88	; 0x58
 800eac4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eac8 <__smakebuf_r>:
 800eac8:	898b      	ldrh	r3, [r1, #12]
 800eaca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eacc:	079d      	lsls	r5, r3, #30
 800eace:	4606      	mov	r6, r0
 800ead0:	460c      	mov	r4, r1
 800ead2:	d507      	bpl.n	800eae4 <__smakebuf_r+0x1c>
 800ead4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ead8:	6023      	str	r3, [r4, #0]
 800eada:	6123      	str	r3, [r4, #16]
 800eadc:	2301      	movs	r3, #1
 800eade:	6163      	str	r3, [r4, #20]
 800eae0:	b002      	add	sp, #8
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
 800eae4:	466a      	mov	r2, sp
 800eae6:	ab01      	add	r3, sp, #4
 800eae8:	f7ff ffc8 	bl	800ea7c <__swhatbuf_r>
 800eaec:	9900      	ldr	r1, [sp, #0]
 800eaee:	4605      	mov	r5, r0
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	f7ff f973 	bl	800dddc <_malloc_r>
 800eaf6:	b948      	cbnz	r0, 800eb0c <__smakebuf_r+0x44>
 800eaf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eafc:	059a      	lsls	r2, r3, #22
 800eafe:	d4ef      	bmi.n	800eae0 <__smakebuf_r+0x18>
 800eb00:	f023 0303 	bic.w	r3, r3, #3
 800eb04:	f043 0302 	orr.w	r3, r3, #2
 800eb08:	81a3      	strh	r3, [r4, #12]
 800eb0a:	e7e3      	b.n	800ead4 <__smakebuf_r+0xc>
 800eb0c:	4b0d      	ldr	r3, [pc, #52]	; (800eb44 <__smakebuf_r+0x7c>)
 800eb0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb10:	89a3      	ldrh	r3, [r4, #12]
 800eb12:	6020      	str	r0, [r4, #0]
 800eb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb18:	81a3      	strh	r3, [r4, #12]
 800eb1a:	9b00      	ldr	r3, [sp, #0]
 800eb1c:	6120      	str	r0, [r4, #16]
 800eb1e:	6163      	str	r3, [r4, #20]
 800eb20:	9b01      	ldr	r3, [sp, #4]
 800eb22:	b15b      	cbz	r3, 800eb3c <__smakebuf_r+0x74>
 800eb24:	4630      	mov	r0, r6
 800eb26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb2a:	f000 f82d 	bl	800eb88 <_isatty_r>
 800eb2e:	b128      	cbz	r0, 800eb3c <__smakebuf_r+0x74>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	f023 0303 	bic.w	r3, r3, #3
 800eb36:	f043 0301 	orr.w	r3, r3, #1
 800eb3a:	81a3      	strh	r3, [r4, #12]
 800eb3c:	89a0      	ldrh	r0, [r4, #12]
 800eb3e:	4305      	orrs	r5, r0
 800eb40:	81a5      	strh	r5, [r4, #12]
 800eb42:	e7cd      	b.n	800eae0 <__smakebuf_r+0x18>
 800eb44:	0800db7d 	.word	0x0800db7d

0800eb48 <memchr>:
 800eb48:	4603      	mov	r3, r0
 800eb4a:	b510      	push	{r4, lr}
 800eb4c:	b2c9      	uxtb	r1, r1
 800eb4e:	4402      	add	r2, r0
 800eb50:	4293      	cmp	r3, r2
 800eb52:	4618      	mov	r0, r3
 800eb54:	d101      	bne.n	800eb5a <memchr+0x12>
 800eb56:	2000      	movs	r0, #0
 800eb58:	e003      	b.n	800eb62 <memchr+0x1a>
 800eb5a:	7804      	ldrb	r4, [r0, #0]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	428c      	cmp	r4, r1
 800eb60:	d1f6      	bne.n	800eb50 <memchr+0x8>
 800eb62:	bd10      	pop	{r4, pc}

0800eb64 <_fstat_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	2300      	movs	r3, #0
 800eb68:	4d06      	ldr	r5, [pc, #24]	; (800eb84 <_fstat_r+0x20>)
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	4608      	mov	r0, r1
 800eb6e:	4611      	mov	r1, r2
 800eb70:	602b      	str	r3, [r5, #0]
 800eb72:	f7f2 f861 	bl	8000c38 <_fstat>
 800eb76:	1c43      	adds	r3, r0, #1
 800eb78:	d102      	bne.n	800eb80 <_fstat_r+0x1c>
 800eb7a:	682b      	ldr	r3, [r5, #0]
 800eb7c:	b103      	cbz	r3, 800eb80 <_fstat_r+0x1c>
 800eb7e:	6023      	str	r3, [r4, #0]
 800eb80:	bd38      	pop	{r3, r4, r5, pc}
 800eb82:	bf00      	nop
 800eb84:	20002d58 	.word	0x20002d58

0800eb88 <_isatty_r>:
 800eb88:	b538      	push	{r3, r4, r5, lr}
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	4d05      	ldr	r5, [pc, #20]	; (800eba4 <_isatty_r+0x1c>)
 800eb8e:	4604      	mov	r4, r0
 800eb90:	4608      	mov	r0, r1
 800eb92:	602b      	str	r3, [r5, #0]
 800eb94:	f7f2 f85f 	bl	8000c56 <_isatty>
 800eb98:	1c43      	adds	r3, r0, #1
 800eb9a:	d102      	bne.n	800eba2 <_isatty_r+0x1a>
 800eb9c:	682b      	ldr	r3, [r5, #0]
 800eb9e:	b103      	cbz	r3, 800eba2 <_isatty_r+0x1a>
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	bd38      	pop	{r3, r4, r5, pc}
 800eba4:	20002d58 	.word	0x20002d58

0800eba8 <_init>:
 800eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebaa:	bf00      	nop
 800ebac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebae:	bc08      	pop	{r3}
 800ebb0:	469e      	mov	lr, r3
 800ebb2:	4770      	bx	lr

0800ebb4 <_fini>:
 800ebb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb6:	bf00      	nop
 800ebb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebba:	bc08      	pop	{r3}
 800ebbc:	469e      	mov	lr, r3
 800ebbe:	4770      	bx	lr
